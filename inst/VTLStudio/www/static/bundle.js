var VTLEditor = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // index.ts
  var index_exports = {};
  __export(index_exports, {
    addHotKey: () => addHotKey,
    setTheme: () => setTheme,
    themes: () => themes,
    view: () => view
  });

  // node_modules/@marijn/find-cluster-break/src/index.js
  var rangeFrom = [];
  var rangeTo = [];
  (() => {
    let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s2) => s2 ? parseInt(s2, 36) : 1);
    for (let i2 = 0, n2 = 0; i2 < numbers.length; i2++)
      (i2 % 2 ? rangeTo : rangeFrom).push(n2 = n2 + numbers[i2]);
  })();
  function isExtendingChar(code) {
    if (code < 768) return false;
    for (let from = 0, to = rangeFrom.length; ; ) {
      let mid = from + to >> 1;
      if (code < rangeFrom[mid]) to = mid;
      else if (code >= rangeTo[mid]) from = mid + 1;
      else return true;
      if (from == to) return false;
    }
  }
  __name(isExtendingChar, "isExtendingChar");
  function isRegionalIndicator(code) {
    return code >= 127462 && code <= 127487;
  }
  __name(isRegionalIndicator, "isRegionalIndicator");
  var ZWJ = 8205;
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  __name(findClusterBreak, "findClusterBreak");
  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos;
    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt(str, pos);
    pos += codePointSize(prev);
    while (pos < str.length) {
      let next = codePointAt(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i2 = pos - 2;
        while (i2 >= 0 && isRegionalIndicator(codePointAt(str, i2))) {
          countBefore++;
          i2 -= 2;
        }
        if (countBefore % 2 == 0) break;
        else pos += 2;
      } else {
        break;
      }
    }
    return pos;
  }
  __name(nextClusterBreak, "nextClusterBreak");
  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found;
      pos--;
    }
    return 0;
  }
  __name(prevClusterBreak, "prevClusterBreak");
  function codePointAt(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1)) return code0;
    return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
  }
  __name(codePointAt, "codePointAt");
  function surrogateLow(ch) {
    return ch >= 56320 && ch < 57344;
  }
  __name(surrogateLow, "surrogateLow");
  function surrogateHigh(ch) {
    return ch >= 55296 && ch < 56320;
  }
  __name(surrogateHigh, "surrogateHigh");
  function codePointSize(code) {
    return code < 65536 ? 1 : 2;
  }
  __name(codePointSize, "codePointSize");

  // node_modules/@codemirror/state/dist/index.js
  var Text = class _Text {
    static {
      __name(this, "Text");
    }
    /**
    Get the line description around the given position.
    */
    lineAt(pos) {
      if (pos < 0 || pos > this.length)
        throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
    line(n2) {
      if (n2 < 1 || n2 > this.lines)
        throw new RangeError(`Invalid line number ${n2} in ${this.lines}-line document`);
      return this.lineInner(n2, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
    replace(from, to, text) {
      [from, to] = clip(this, from, to);
      let parts = [];
      this.decompose(
        0,
        from,
        parts,
        2
        /* Open.To */
      );
      if (text.length)
        text.decompose(
          0,
          text.length,
          parts,
          1 | 2
          /* Open.To */
        );
      this.decompose(
        to,
        this.length,
        parts,
        1
        /* Open.From */
      );
      return TextNode.from(parts, this.length - (to - from) + text.length);
    }
    /**
    Append another document to this one.
    */
    append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
    slice(from, to = this.length) {
      [from, to] = clip(this, from, to);
      let parts = [];
      this.decompose(from, to, parts, 0);
      return TextNode.from(parts, to - from);
    }
    /**
    Test whether this text is equal to another instance.
    */
    eq(other) {
      if (other == this)
        return true;
      if (other.length != this.length || other.lines != this.lines)
        return false;
      let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
      let a2 = new RawTextCursor(this), b2 = new RawTextCursor(other);
      for (let skip = start, pos = start; ; ) {
        a2.next(skip);
        b2.next(skip);
        skip = 0;
        if (a2.lineBreak != b2.lineBreak || a2.done != b2.done || a2.value != b2.value)
          return false;
        pos += a2.value.length;
        if (a2.done || pos >= end)
          return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings.
    */
    iter(dir = 1) {
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
    iterRange(from, to = this.length) {
      return new PartialTextCursor(this, from, to);
    }
    /**
    Return a cursor that iterates over the given range of lines,
    _without_ returning the line breaks between, and yielding empty
    strings for empty lines.
    
    When `from` and `to` are given, they should be 1-based line numbers.
    */
    iterLines(from, to) {
      let inner;
      if (from == null) {
        inner = this.iter();
      } else {
        if (to == null)
          to = this.lines + 1;
        let start = this.line(from).from;
        inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
      }
      return new LineCursor(inner);
    }
    /**
    Return the document as a string, using newline characters to
    separate lines.
    */
    toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
    */
    toJSON() {
      let lines = [];
      this.flatten(lines);
      return lines;
    }
    /**
    @internal
    */
    constructor() {
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
    static of(text) {
      if (text.length == 0)
        throw new RangeError("A document must have at least one line");
      if (text.length == 1 && !text[0])
        return _Text.empty;
      return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
    }
  };
  var TextLeaf = class _TextLeaf extends Text {
    static {
      __name(this, "TextLeaf");
    }
    constructor(text, length = textLength(text)) {
      super();
      this.text = text;
      this.length = length;
    }
    get lines() {
      return this.text.length;
    }
    get children() {
      return null;
    }
    lineInner(target, isLine, line, offset) {
      for (let i2 = 0; ; i2++) {
        let string2 = this.text[i2], end = offset + string2.length;
        if ((isLine ? line : end) >= target)
          return new Line(offset, end, line, string2);
        offset = end + 1;
        line++;
      }
    }
    decompose(from, to, target, open) {
      let text = from <= 0 && to >= this.length ? this : new _TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
      if (open & 1) {
        let prev = target.pop();
        let joined = appendText(text.text, prev.text.slice(), 0, text.length);
        if (joined.length <= 32) {
          target.push(new _TextLeaf(joined, prev.length + text.length));
        } else {
          let mid = joined.length >> 1;
          target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text);
      }
    }
    replace(from, to, text) {
      if (!(text instanceof _TextLeaf))
        return super.replace(from, to, text);
      [from, to] = clip(this, from, to);
      let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
      let newLen = this.length + text.length - (to - from);
      if (lines.length <= 32)
        return new _TextLeaf(lines, newLen);
      return TextNode.from(_TextLeaf.split(lines, []), newLen);
    }
    sliceString(from, to = this.length, lineSep = "\n") {
      [from, to] = clip(this, from, to);
      let result = "";
      for (let pos = 0, i2 = 0; pos <= to && i2 < this.text.length; i2++) {
        let line = this.text[i2], end = pos + line.length;
        if (pos > from && i2)
          result += lineSep;
        if (from < end && to > pos)
          result += line.slice(Math.max(0, from - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let line of this.text)
        target.push(line);
    }
    scanIdentical() {
      return 0;
    }
    static split(text, target) {
      let part = [], len = -1;
      for (let line of text) {
        part.push(line);
        len += line.length + 1;
        if (part.length == 32) {
          target.push(new _TextLeaf(part, len));
          part = [];
          len = -1;
        }
      }
      if (len > -1)
        target.push(new _TextLeaf(part, len));
      return target;
    }
  };
  var TextNode = class _TextNode extends Text {
    static {
      __name(this, "TextNode");
    }
    constructor(children, length) {
      super();
      this.children = children;
      this.length = length;
      this.lines = 0;
      for (let child of children)
        this.lines += child.lines;
    }
    lineInner(target, isLine, line, offset) {
      for (let i2 = 0; ; i2++) {
        let child = this.children[i2], end = offset + child.length, endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target)
          return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
    decompose(from, to, target, open) {
      for (let i2 = 0, pos = 0; pos <= to && i2 < this.children.length; i2++) {
        let child = this.children[i2], end = pos + child.length;
        if (from <= end && to >= pos) {
          let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to ? 2 : 0));
          if (pos >= from && end <= to && !childOpen)
            target.push(child);
          else
            child.decompose(from - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
    replace(from, to, text) {
      [from, to] = clip(this, from, to);
      if (text.lines < this.lines)
        for (let i2 = 0, pos = 0; i2 < this.children.length; i2++) {
          let child = this.children[i2], end = pos + child.length;
          if (from >= pos && to <= end) {
            let updated = child.replace(from - pos, to - pos, text);
            let totalLines = this.lines - child.lines + updated.lines;
            if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
              let copy = this.children.slice();
              copy[i2] = updated;
              return new _TextNode(copy, this.length - (to - from) + text.length);
            }
            return super.replace(pos, end, updated);
          }
          pos = end + 1;
        }
      return super.replace(from, to, text);
    }
    sliceString(from, to = this.length, lineSep = "\n") {
      [from, to] = clip(this, from, to);
      let result = "";
      for (let i2 = 0, pos = 0; i2 < this.children.length && pos <= to; i2++) {
        let child = this.children[i2], end = pos + child.length;
        if (pos > from && i2)
          result += lineSep;
        if (from < end && to > pos)
          result += child.sliceString(from - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let child of this.children)
        child.flatten(target);
    }
    scanIdentical(other, dir) {
      if (!(other instanceof _TextNode))
        return 0;
      let length = 0;
      let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
      for (; ; iA += dir, iB += dir) {
        if (iA == eA || iB == eB)
          return length;
        let chA = this.children[iA], chB = other.children[iB];
        if (chA != chB)
          return length + chA.scanIdentical(chB, dir);
        length += chA.length + 1;
      }
    }
    static from(children, length = children.reduce((l2, ch) => l2 + ch.length + 1, -1)) {
      let lines = 0;
      for (let ch of children)
        lines += ch.lines;
      if (lines < 32) {
        let flat = [];
        for (let ch of children)
          ch.flatten(flat);
        return new TextLeaf(flat, length);
      }
      let chunk = Math.max(
        32,
        lines >> 5
        /* Tree.BranchShift */
      ), maxChunk = chunk << 1, minChunk = chunk >> 1;
      let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
      function add2(child) {
        let last;
        if (child.lines > maxChunk && child instanceof _TextNode) {
          for (let node of child.children)
            add2(node);
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk)
            flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      __name(add2, "add");
      function flush() {
        if (currentLines == 0)
          return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      __name(flush, "flush");
      for (let child of children)
        add2(child);
      flush();
      return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length);
    }
  };
  Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
  function textLength(text) {
    let length = -1;
    for (let line of text)
      length += line.length + 1;
    return length;
  }
  __name(textLength, "textLength");
  function appendText(text, target, from = 0, to = 1e9) {
    for (let pos = 0, i2 = 0, first = true; i2 < text.length && pos <= to; i2++) {
      let line = text[i2], end = pos + line.length;
      if (end >= from) {
        if (end > to)
          line = line.slice(0, to - pos);
        if (pos < from)
          line = line.slice(from - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else
          target.push(line);
      }
      pos = end + 1;
    }
    return target;
  }
  __name(appendText, "appendText");
  function sliceText(text, from, to) {
    return appendText(text, [""], from, to);
  }
  __name(sliceText, "sliceText");
  var RawTextCursor = class {
    static {
      __name(this, "RawTextCursor");
    }
    constructor(text, dir = 1) {
      this.dir = dir;
      this.done = false;
      this.lineBreak = false;
      this.value = "";
      this.nodes = [text];
      this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
    }
    nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (; ; ) {
        let last = this.nodes.length - 1;
        let top2 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
        let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0)
            this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top2 instanceof TextLeaf) {
          let next = top2.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          let next = top2.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > next.length) {
            skip -= next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0)
              this.offsets[last]--;
            this.nodes.push(next);
            this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
          }
        }
      }
    }
    next(skip = 0) {
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  };
  var PartialTextCursor = class {
    static {
      __name(this, "PartialTextCursor");
    }
    constructor(text, start, end) {
      this.value = "";
      this.done = false;
      this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
      this.pos = start > end ? text.length : 0;
      this.from = Math.min(start, end);
      this.to = Math.max(start, end);
    }
    nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit)
        skip = limit;
      limit -= skip;
      let { value } = this.cursor.next(skip);
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      this.done = !this.value;
      return this;
    }
    next(skip = 0) {
      if (skip < 0)
        skip = Math.max(skip, this.from - this.pos);
      else if (skip > 0)
        skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
    get lineBreak() {
      return this.cursor.lineBreak && this.value != "";
    }
  };
  var LineCursor = class {
    static {
      __name(this, "LineCursor");
    }
    constructor(inner) {
      this.inner = inner;
      this.afterBreak = true;
      this.value = "";
      this.done = false;
    }
    next(skip = 0) {
      let { done, lineBreak, value } = this.inner.next(skip);
      if (done && this.afterBreak) {
        this.value = "";
        this.afterBreak = false;
      } else if (done) {
        this.done = true;
        this.value = "";
      } else if (lineBreak) {
        if (this.afterBreak) {
          this.value = "";
        } else {
          this.afterBreak = true;
          this.next();
        }
      } else {
        this.value = value;
        this.afterBreak = false;
      }
      return this;
    }
    get lineBreak() {
      return false;
    }
  };
  if (typeof Symbol != "undefined") {
    Text.prototype[Symbol.iterator] = function() {
      return this.iter();
    };
    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  }
  var Line = class {
    static {
      __name(this, "Line");
    }
    /**
    @internal
    */
    constructor(from, to, number2, text) {
      this.from = from;
      this.to = to;
      this.number = number2;
      this.text = text;
    }
    /**
    The length of the line (not including any line break after it).
    */
    get length() {
      return this.to - this.from;
    }
  };
  function clip(text, from, to) {
    from = Math.max(0, Math.min(text.length, from));
    return [from, Math.max(from, Math.min(text.length, to))];
  }
  __name(clip, "clip");
  function findClusterBreak2(str, pos, forward = true, includeExtending = true) {
    return findClusterBreak(str, pos, forward, includeExtending);
  }
  __name(findClusterBreak2, "findClusterBreak");
  function surrogateLow2(ch) {
    return ch >= 56320 && ch < 57344;
  }
  __name(surrogateLow2, "surrogateLow");
  function surrogateHigh2(ch) {
    return ch >= 55296 && ch < 56320;
  }
  __name(surrogateHigh2, "surrogateHigh");
  function codePointAt2(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh2(code0) || pos + 1 == str.length)
      return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow2(code1))
      return code0;
    return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
  }
  __name(codePointAt2, "codePointAt");
  function fromCodePoint(code) {
    if (code <= 65535)
      return String.fromCharCode(code);
    code -= 65536;
    return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
  }
  __name(fromCodePoint, "fromCodePoint");
  function codePointSize2(code) {
    return code < 65536 ? 1 : 2;
  }
  __name(codePointSize2, "codePointSize");
  var DefaultSplit = /\r\n?|\n/;
  var MapMode = /* @__PURE__ */ function(MapMode2) {
    MapMode2[MapMode2["Simple"] = 0] = "Simple";
    MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
    MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
    MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
    return MapMode2;
  }(MapMode || (MapMode = {}));
  var ChangeDesc = class _ChangeDesc {
    static {
      __name(this, "ChangeDesc");
    }
    // Sections are encoded as pairs of integers. The first is the
    // length in the current document, and the second is -1 for
    // unaffected sections, and the length of the replacement content
    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
    // 0), and a replacement two positive numbers.
    /**
    @internal
    */
    constructor(sections) {
      this.sections = sections;
    }
    /**
    The length of the document before the change.
    */
    get length() {
      let result = 0;
      for (let i2 = 0; i2 < this.sections.length; i2 += 2)
        result += this.sections[i2];
      return result;
    }
    /**
    The length of the document after the change.
    */
    get newLength() {
      let result = 0;
      for (let i2 = 0; i2 < this.sections.length; i2 += 2) {
        let ins = this.sections[i2 + 1];
        result += ins < 0 ? this.sections[i2] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
    get empty() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes. `posA`
    provides the position of the range in the old document, `posB`
    the new position in the changed document.
    */
    iterGaps(f2) {
      for (let i2 = 0, posA = 0, posB = 0; i2 < this.sections.length; ) {
        let len = this.sections[i2++], ins = this.sections[i2++];
        if (ins < 0) {
          f2(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    `fromA`/`toA` provides the extent of the change in the starting
    document, `fromB`/`toB` the extent of the replacement in the
    changed document.
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
    iterChangedRanges(f2, individual = false) {
      iterChanges(this, f2, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
    get invertedDesc() {
      let sections = [];
      for (let i2 = 0; i2 < this.sections.length; ) {
        let len = this.sections[i2++], ins = this.sections[i2++];
        if (ins < 0)
          sections.push(len, ins);
        else
          sections.push(ins, len);
      }
      return new _ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
    composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `this` happened before the ones in `other`.
    */
    mapDesc(other, before = false) {
      return other.empty ? this : mapSet(this, other, before);
    }
    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
      let posA = 0, posB = 0;
      for (let i2 = 0; i2 < this.sections.length; ) {
        let len = this.sections[i2++], ins = this.sections[i2++], endA = posA + len;
        if (ins < 0) {
          if (endA > pos)
            return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
            return null;
          if (endA > pos || endA == pos && assoc < 0 && !len)
            return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA)
        throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
    touchesRange(from, to = from) {
      for (let i2 = 0, pos = 0; i2 < this.sections.length && pos <= to; ) {
        let len = this.sections[i2++], ins = this.sections[i2++], end = pos + len;
        if (ins >= 0 && pos <= to && end >= from)
          return pos < from && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
    toString() {
      let result = "";
      for (let i2 = 0; i2 < this.sections.length; ) {
        let len = this.sections[i2++], ins = this.sections[i2++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
    toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some((a2) => typeof a2 != "number"))
        throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new _ChangeDesc(json);
    }
    /**
    @internal
    */
    static create(sections) {
      return new _ChangeDesc(sections);
    }
  };
  var ChangeSet = class _ChangeSet extends ChangeDesc {
    static {
      __name(this, "ChangeSet");
    }
    constructor(sections, inserted) {
      super(sections);
      this.inserted = inserted;
    }
    /**
    Apply the changes to a document, returning the modified
    document.
    */
    apply(doc2) {
      if (this.length != doc2.length)
        throw new RangeError("Applying change set to a document with the wrong length");
      iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
      return doc2;
    }
    mapDesc(other, before = false) {
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
    invert(doc2) {
      let sections = this.sections.slice(), inserted = [];
      for (let i2 = 0, pos = 0; i2 < sections.length; i2 += 2) {
        let len = sections[i2], ins = sections[i2 + 1];
        if (ins >= 0) {
          sections[i2] = ins;
          sections[i2 + 1] = len;
          let index = i2 >> 1;
          while (inserted.length < index)
            inserted.push(Text.empty);
          inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
        }
        pos += len;
      }
      return new _ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
    compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
    map(other, before = false) {
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each, with the range in the original document (`fromA`-`toA`)
    and the range that replaces it in the new document
    (`fromB`-`toB`).
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
    iterChanges(f2, individual = false) {
      iterChanges(this, f2, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
    get desc() {
      return ChangeDesc.create(this.sections);
    }
    /**
    @internal
    */
    filter(ranges) {
      let resultSections = [], resultInserted = [], filteredSections = [];
      let iter = new SectionIter(this);
      done: for (let i2 = 0, pos = 0; ; ) {
        let next = i2 == ranges.length ? 1e9 : ranges[i2++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0)
            addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        let end = ranges[i2++];
        while (pos < end) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, end - pos);
          addSection(resultSections, len, -1);
          addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(len);
          pos += len;
        }
      }
      return {
        changes: new _ChangeSet(resultSections, resultInserted),
        filtered: ChangeDesc.create(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
    toJSON() {
      let parts = [];
      for (let i2 = 0; i2 < this.sections.length; i2 += 2) {
        let len = this.sections[i2], ins = this.sections[i2 + 1];
        if (ins < 0)
          parts.push(len);
        else if (ins == 0)
          parts.push([len]);
        else
          parts.push([len].concat(this.inserted[i2 >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
    static of(changes, length, lineSep) {
      let sections = [], inserted = [], pos = 0;
      let total = null;
      function flush(force = false) {
        if (!force && !sections.length)
          return;
        if (pos < length)
          addSection(sections, length - pos, -1);
        let set = new _ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      __name(flush, "flush");
      function process2(spec) {
        if (Array.isArray(spec)) {
          for (let sub of spec)
            process2(sub);
        } else if (spec instanceof _ChangeSet) {
          if (spec.length != length)
            throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          let { from, to = from, insert: insert2 } = spec;
          if (from > to || from < 0 || to > length)
            throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
          let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
          let insLen = insText.length;
          if (from == to && insLen == 0)
            return;
          if (from < pos)
            flush();
          if (from > pos)
            addSection(sections, from - pos, -1);
          addSection(sections, to - from, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      __name(process2, "process");
      process2(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
    static empty(length) {
      return new _ChangeSet(length ? [length, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json))
        throw new RangeError("Invalid JSON representation of ChangeSet");
      let sections = [], inserted = [];
      for (let i2 = 0; i2 < json.length; i2++) {
        let part = json[i2];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e2, i3) => i3 && typeof e2 != "string")) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < i2)
            inserted.push(Text.empty);
          inserted[i2] = Text.of(part.slice(1));
          sections.push(part[0], inserted[i2].length);
        }
      }
      return new _ChangeSet(sections, inserted);
    }
    /**
    @internal
    */
    static createSet(sections, inserted) {
      return new _ChangeSet(sections, inserted);
    }
  };
  function addSection(sections, len, ins, forceJoin = false) {
    if (len == 0 && ins <= 0)
      return;
    let last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
      sections[last] += len;
    else if (last >= 0 && len == 0 && sections[last] == 0)
      sections[last + 1] += ins;
    else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else
      sections.push(len, ins);
  }
  __name(addSection, "addSection");
  function addInsert(values, sections, value) {
    if (value.length == 0)
      return;
    let index = sections.length - 2 >> 1;
    if (index < values.length) {
      values[values.length - 1] = values[values.length - 1].append(value);
    } else {
      while (values.length < index)
        values.push(Text.empty);
      values.push(value);
    }
  }
  __name(addInsert, "addInsert");
  function iterChanges(desc, f2, individual) {
    let inserted = desc.inserted;
    for (let posA = 0, posB = 0, i2 = 0; i2 < desc.sections.length; ) {
      let len = desc.sections[i2++], ins = desc.sections[i2++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        let endA = posA, endB = posB, text = Text.empty;
        for (; ; ) {
          endA += len;
          endB += ins;
          if (ins && inserted)
            text = text.append(inserted[i2 - 2 >> 1]);
          if (individual || i2 == desc.sections.length || desc.sections[i2 + 1] < 0)
            break;
          len = desc.sections[i2++];
          ins = desc.sections[i2++];
        }
        f2(posA, endA, posB, endB, text);
        posA = endA;
        posB = endB;
      }
    }
  }
  __name(iterChanges, "iterChanges");
  function mapSet(setA, setB, before, mkSet = false) {
    let sections = [], insert2 = mkSet ? [] : null;
    let a2 = new SectionIter(setA), b2 = new SectionIter(setB);
    for (let inserted = -1; ; ) {
      if (a2.done && b2.len || b2.done && a2.len) {
        throw new Error("Mismatched change set lengths");
      } else if (a2.ins == -1 && b2.ins == -1) {
        let len = Math.min(a2.len, b2.len);
        addSection(sections, len, -1);
        a2.forward(len);
        b2.forward(len);
      } else if (b2.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b2.len < a2.len || b2.len == a2.len && !before))) {
        let len = b2.len;
        addSection(sections, b2.ins, -1);
        while (len) {
          let piece = Math.min(a2.len, len);
          if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
            addSection(sections, 0, a2.ins);
            if (insert2)
              addInsert(insert2, sections, a2.text);
            inserted = a2.i;
          }
          a2.forward(piece);
          len -= piece;
        }
        b2.next();
      } else if (a2.ins >= 0) {
        let len = 0, left = a2.len;
        while (left) {
          if (b2.ins == -1) {
            let piece = Math.min(left, b2.len);
            len += piece;
            left -= piece;
            b2.forward(piece);
          } else if (b2.ins == 0 && b2.len < left) {
            left -= b2.len;
            b2.next();
          } else {
            break;
          }
        }
        addSection(sections, len, inserted < a2.i ? a2.ins : 0);
        if (insert2 && inserted < a2.i)
          addInsert(insert2, sections, a2.text);
        inserted = a2.i;
        a2.forward(a2.len - left);
      } else if (a2.done && b2.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  __name(mapSet, "mapSet");
  function composeSets(setA, setB, mkSet = false) {
    let sections = [];
    let insert2 = mkSet ? [] : null;
    let a2 = new SectionIter(setA), b2 = new SectionIter(setB);
    for (let open = false; ; ) {
      if (a2.done && b2.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else if (a2.ins == 0) {
        addSection(sections, a2.len, 0, open);
        a2.next();
      } else if (b2.len == 0 && !b2.done) {
        addSection(sections, 0, b2.ins, open);
        if (insert2)
          addInsert(insert2, sections, b2.text);
        b2.next();
      } else if (a2.done || b2.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        let len = Math.min(a2.len2, b2.len), sectionLen = sections.length;
        if (a2.ins == -1) {
          let insB = b2.ins == -1 ? -1 : b2.off ? 0 : b2.ins;
          addSection(sections, len, insB, open);
          if (insert2 && insB)
            addInsert(insert2, sections, b2.text);
        } else if (b2.ins == -1) {
          addSection(sections, a2.off ? 0 : a2.len, len, open);
          if (insert2)
            addInsert(insert2, sections, a2.textBit(len));
        } else {
          addSection(sections, a2.off ? 0 : a2.len, b2.off ? 0 : b2.ins, open);
          if (insert2 && !b2.off)
            addInsert(insert2, sections, b2.text);
        }
        open = (a2.ins > len || b2.ins >= 0 && b2.len > len) && (open || sections.length > sectionLen);
        a2.forward2(len);
        b2.forward(len);
      }
    }
  }
  __name(composeSets, "composeSets");
  var SectionIter = class {
    static {
      __name(this, "SectionIter");
    }
    constructor(set) {
      this.set = set;
      this.i = 0;
      this.next();
    }
    next() {
      let { sections } = this.set;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
    get done() {
      return this.ins == -2;
    }
    get len2() {
      return this.ins < 0 ? this.len : this.ins;
    }
    get text() {
      let { inserted } = this.set, index = this.i - 2 >> 1;
      return index >= inserted.length ? Text.empty : inserted[index];
    }
    textBit(len) {
      let { inserted } = this.set, index = this.i - 2 >> 1;
      return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
    }
    forward(len) {
      if (len == this.len)
        this.next();
      else {
        this.len -= len;
        this.off += len;
      }
    }
    forward2(len) {
      if (this.ins == -1)
        this.forward(len);
      else if (len == this.ins)
        this.next();
      else {
        this.ins -= len;
        this.off += len;
      }
    }
  };
  var SelectionRange = class _SelectionRange {
    static {
      __name(this, "SelectionRange");
    }
    constructor(from, to, flags) {
      this.from = from;
      this.to = to;
      this.flags = flags;
    }
    /**
    The anchor of the range—the side that doesn't move when you
    extend it.
    */
    get anchor() {
      return this.flags & 32 ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
    get head() {
      return this.flags & 32 ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
    get empty() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
    get assoc() {
      return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
    get bidiLevel() {
      let level = this.flags & 7;
      return level == 7 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
    get goalColumn() {
      let value = this.flags >> 6;
      return value == 16777215 ? void 0 : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
    map(change, assoc = -1) {
      let from, to;
      if (this.empty) {
        from = to = change.mapPos(this.from, assoc);
      } else {
        from = change.mapPos(this.from, 1);
        to = change.mapPos(this.to, -1);
      }
      return from == this.from && to == this.to ? this : new _SelectionRange(from, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
    extend(from, to = from) {
      if (from <= this.anchor && to >= this.anchor)
        return EditorSelection.range(from, to);
      let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
    eq(other, includeAssoc = false) {
      return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
    }
    /**
    Return a JSON-serializable object representing the range.
    */
    toJSON() {
      return { anchor: this.anchor, head: this.head };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
    static fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number")
        throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
    /**
    @internal
    */
    static create(from, to, flags) {
      return new _SelectionRange(from, to, flags);
    }
  };
  var EditorSelection = class _EditorSelection {
    static {
      __name(this, "EditorSelection");
    }
    constructor(ranges, mainIndex) {
      this.ranges = ranges;
      this.mainIndex = mainIndex;
    }
    /**
    Map a selection through a change. Used to adjust the selection
    position for changes.
    */
    map(change, assoc = -1) {
      if (change.empty)
        return this;
      return _EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
    }
    /**
    Compare this selection to another selection. By default, ranges
    are compared only by position. When `includeAssoc` is true,
    cursor ranges must also have the same
    [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
    */
    eq(other, includeAssoc = false) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
        return false;
      for (let i2 = 0; i2 < this.ranges.length; i2++)
        if (!this.ranges[i2].eq(other.ranges[i2], includeAssoc))
          return false;
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
    get main() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
    asSingle() {
      return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
    }
    /**
    Extend this selection with an extra range.
    */
    addRange(range, main = true) {
      return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
    replaceRange(range, which = this.mainIndex) {
      let ranges = this.ranges.slice();
      ranges[which] = range;
      return _EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
    toJSON() {
      return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
    }
    /**
    Create a selection from a JSON representation.
    */
    static fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
        throw new RangeError("Invalid JSON representation for EditorSelection");
      return new _EditorSelection(json.ranges.map((r2) => SelectionRange.fromJSON(r2)), json.main);
    }
    /**
    Create a selection holding a single range.
    */
    static single(anchor, head = anchor) {
      return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
    static create(ranges, mainIndex = 0) {
      if (ranges.length == 0)
        throw new RangeError("A selection needs at least one range");
      for (let pos = 0, i2 = 0; i2 < ranges.length; i2++) {
        let range = ranges[i2];
        if (range.empty ? range.from <= pos : range.from < pos)
          return _EditorSelection.normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new _EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
      return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
    }
    /**
    Create a selection range.
    */
    static range(anchor, head, goalColumn, bidiLevel) {
      let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
      return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
    }
    /**
    @internal
    */
    static normalized(ranges, mainIndex = 0) {
      let main = ranges[mainIndex];
      ranges.sort((a2, b2) => a2.from - b2.from);
      mainIndex = ranges.indexOf(main);
      for (let i2 = 1; i2 < ranges.length; i2++) {
        let range = ranges[i2], prev = ranges[i2 - 1];
        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
          let from = prev.from, to = Math.max(range.to, prev.to);
          if (i2 <= mainIndex)
            mainIndex--;
          ranges.splice(--i2, 2, range.anchor > range.head ? _EditorSelection.range(to, from) : _EditorSelection.range(from, to));
        }
      }
      return new _EditorSelection(ranges, mainIndex);
    }
  };
  function checkSelection(selection, docLength) {
    for (let range of selection.ranges)
      if (range.to > docLength)
        throw new RangeError("Selection points outside of document");
  }
  __name(checkSelection, "checkSelection");
  var nextID = 0;
  var Facet = class _Facet {
    static {
      __name(this, "Facet");
    }
    constructor(combine, compareInput, compare2, isStatic, enables) {
      this.combine = combine;
      this.compareInput = compareInput;
      this.compare = compare2;
      this.isStatic = isStatic;
      this.id = nextID++;
      this.default = combine([]);
      this.extensions = typeof enables == "function" ? enables(this) : enables;
    }
    /**
    Returns a facet reader for this facet, which can be used to
    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
    */
    get reader() {
      return this;
    }
    /**
    Define a new facet.
    */
    static define(config15 = {}) {
      return new _Facet(config15.combine || ((a2) => a2), config15.compareInput || ((a2, b2) => a2 === b2), config15.compare || (!config15.combine ? sameArray : (a2, b2) => a2 === b2), !!config15.static, config15.enables);
    }
    /**
    Returns an extension that adds the given value to this facet.
    */
    of(value) {
      return new FacetProvider([], this, 0, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In cases where your value depends only on a single field, you'll
    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
    */
    compute(deps, get) {
      if (this.isStatic)
        throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1, get);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
    computeN(deps, get) {
      if (this.isStatic)
        throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2, get);
    }
    from(field, get) {
      if (!get)
        get = /* @__PURE__ */ __name((x2) => x2, "get");
      return this.compute([field], (state) => get(state.field(field)));
    }
  };
  function sameArray(a2, b2) {
    return a2 == b2 || a2.length == b2.length && a2.every((e2, i2) => e2 === b2[i2]);
  }
  __name(sameArray, "sameArray");
  var FacetProvider = class {
    static {
      __name(this, "FacetProvider");
    }
    constructor(dependencies, facet2, type, value) {
      this.dependencies = dependencies;
      this.facet = facet2;
      this.type = type;
      this.value = value;
      this.id = nextID++;
    }
    dynamicSlot(addresses) {
      var _a2;
      let getter = this.value;
      let compare2 = this.facet.compareInput;
      let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2;
      let depDoc = false, depSel = false, depAddrs = [];
      for (let dep of this.dependencies) {
        if (dep == "doc")
          depDoc = true;
        else if (dep == "selection")
          depSel = true;
        else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
          depAddrs.push(addresses[dep.id]);
      }
      return {
        create(state) {
          state.values[idx] = getter(state);
          return 1;
        },
        update(state, tr) {
          if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
            let newVal = getter(state);
            if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
              state.values[idx] = newVal;
              return 1;
            }
          }
          return 0;
        },
        reconfigure: /* @__PURE__ */ __name((state, oldState) => {
          let newVal, oldAddr = oldState.config.address[id];
          if (oldAddr != null) {
            let oldVal = getAddr(oldState, oldAddr);
            if (this.dependencies.every((dep) => {
              return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
            }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
              state.values[idx] = oldVal;
              return 0;
            }
          } else {
            newVal = getter(state);
          }
          state.values[idx] = newVal;
          return 1;
        }, "reconfigure")
      };
    }
  };
  function compareArray(a2, b2, compare2) {
    if (a2.length != b2.length)
      return false;
    for (let i2 = 0; i2 < a2.length; i2++)
      if (!compare2(a2[i2], b2[i2]))
        return false;
    return true;
  }
  __name(compareArray, "compareArray");
  function ensureAll(state, addrs) {
    let changed = false;
    for (let addr of addrs)
      if (ensureAddr(state, addr) & 1)
        changed = true;
    return changed;
  }
  __name(ensureAll, "ensureAll");
  function dynamicFacetSlot(addresses, facet2, providers) {
    let providerAddrs = providers.map((p2) => addresses[p2.id]);
    let providerTypes = providers.map((p2) => p2.type);
    let dynamic = providerAddrs.filter((p2) => !(p2 & 1));
    let idx = addresses[facet2.id] >> 1;
    function get(state) {
      let values = [];
      for (let i2 = 0; i2 < providerAddrs.length; i2++) {
        let value = getAddr(state, providerAddrs[i2]);
        if (providerTypes[i2] == 2)
          for (let val of value)
            values.push(val);
        else
          values.push(value);
      }
      return facet2.combine(values);
    }
    __name(get, "get");
    return {
      create(state) {
        for (let addr of providerAddrs)
          ensureAddr(state, addr);
        state.values[idx] = get(state);
        return 1;
      },
      update(state, tr) {
        if (!ensureAll(state, dynamic))
          return 0;
        let value = get(state);
        if (facet2.compare(value, state.values[idx]))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure(state, oldState) {
        let depChanged = ensureAll(state, providerAddrs);
        let oldProviders = oldState.config.facets[facet2.id], oldValue = oldState.facet(facet2);
        if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        let value = get(state);
        if (facet2.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1;
      }
    };
  }
  __name(dynamicFacetSlot, "dynamicFacetSlot");
  var initField = /* @__PURE__ */ Facet.define({ static: true });
  var StateField = class _StateField {
    static {
      __name(this, "StateField");
    }
    constructor(id, createF, updateF, compareF, spec) {
      this.id = id;
      this.createF = createF;
      this.updateF = updateF;
      this.compareF = compareF;
      this.spec = spec;
      this.provides = void 0;
    }
    /**
    Define a state field.
    */
    static define(config15) {
      let field = new _StateField(nextID++, config15.create, config15.update, config15.compare || ((a2, b2) => a2 === b2), config15);
      if (config15.provide)
        field.provides = config15.provide(field);
      return field;
    }
    create(state) {
      let init = state.facet(initField).find((i2) => i2.field == this);
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
    slot(addresses) {
      let idx = addresses[this.id] >> 1;
      return {
        create: /* @__PURE__ */ __name((state) => {
          state.values[idx] = this.create(state);
          return 1;
        }, "create"),
        update: /* @__PURE__ */ __name((state, tr) => {
          let oldVal = state.values[idx];
          let value = this.updateF(oldVal, tr);
          if (this.compareF(oldVal, value))
            return 0;
          state.values[idx] = value;
          return 1;
        }, "update"),
        reconfigure: /* @__PURE__ */ __name((state, oldState) => {
          let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
          if ((reInit = init.find((i2) => i2.field == this)) && reInit != oldInit.find((i2) => i2.field == this)) {
            state.values[idx] = reInit.create(state);
            return 1;
          }
          if (oldState.config.address[this.id] != null) {
            state.values[idx] = oldState.field(this);
            return 0;
          }
          state.values[idx] = this.create(state);
          return 1;
        }, "reconfigure")
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
    init(create) {
      return [this, initField.of({ field: this, create })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
    get extension() {
      return this;
    }
  };
  var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
    return (ext) => new PrecExtension(ext, value);
  }
  __name(prec, "prec");
  var Prec = {
    /**
    The highest precedence level, for extensions that should end up
    near the start of the precedence ordering.
    */
    highest: /* @__PURE__ */ prec(Prec_.highest),
    /**
    A higher-than-default precedence, for extensions that should
    come before those with default precedence.
    */
    high: /* @__PURE__ */ prec(Prec_.high),
    /**
    The default precedence, which is also used for extensions
    without an explicit precedence.
    */
    default: /* @__PURE__ */ prec(Prec_.default),
    /**
    A lower-than-default precedence.
    */
    low: /* @__PURE__ */ prec(Prec_.low),
    /**
    The lowest precedence level. Meant for things that should end up
    near the end of the extension order.
    */
    lowest: /* @__PURE__ */ prec(Prec_.lowest)
  };
  var PrecExtension = class {
    static {
      __name(this, "PrecExtension");
    }
    constructor(inner, prec2) {
      this.inner = inner;
      this.prec = prec2;
    }
  };
  var Compartment = class _Compartment {
    static {
      __name(this, "Compartment");
    }
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
    reconfigure(content2) {
      return _Compartment.reconfigure.of({ compartment: this, extension: content2 });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
    get(state) {
      return state.config.compartments.get(this);
    }
  };
  var CompartmentInstance = class {
    static {
      __name(this, "CompartmentInstance");
    }
    constructor(compartment, inner) {
      this.compartment = compartment;
      this.inner = inner;
    }
  };
  var Configuration = class _Configuration {
    static {
      __name(this, "Configuration");
    }
    constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
      this.base = base2;
      this.compartments = compartments;
      this.dynamicSlots = dynamicSlots;
      this.address = address;
      this.staticValues = staticValues;
      this.facets = facets;
      this.statusTemplate = [];
      while (this.statusTemplate.length < dynamicSlots.length)
        this.statusTemplate.push(
          0
          /* SlotStatus.Unresolved */
        );
    }
    staticFacet(facet2) {
      let addr = this.address[facet2.id];
      return addr == null ? facet2.default : this.staticValues[addr >> 1];
    }
    static resolve(base2, compartments, oldState) {
      let fields = [];
      let facets = /* @__PURE__ */ Object.create(null);
      let newCompartments = /* @__PURE__ */ new Map();
      for (let ext of flatten(base2, compartments, newCompartments)) {
        if (ext instanceof StateField)
          fields.push(ext);
        else
          (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
      }
      let address = /* @__PURE__ */ Object.create(null);
      let staticValues = [];
      let dynamicSlots = [];
      for (let field of fields) {
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a2) => field.slot(a2));
      }
      let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
      for (let id in facets) {
        let providers = facets[id], facet2 = providers[0].facet;
        let oldProviders = oldFacets && oldFacets[id] || [];
        if (providers.every(
          (p2) => p2.type == 0
          /* Provider.Static */
        )) {
          address[facet2.id] = staticValues.length << 1 | 1;
          if (sameArray(oldProviders, providers)) {
            staticValues.push(oldState.facet(facet2));
          } else {
            let value = facet2.combine(providers.map((p2) => p2.value));
            staticValues.push(oldState && facet2.compare(value, oldState.facet(facet2)) ? oldState.facet(facet2) : value);
          }
        } else {
          for (let p2 of providers) {
            if (p2.type == 0) {
              address[p2.id] = staticValues.length << 1 | 1;
              staticValues.push(p2.value);
            } else {
              address[p2.id] = dynamicSlots.length << 1;
              dynamicSlots.push((a2) => p2.dynamicSlot(a2));
            }
          }
          address[facet2.id] = dynamicSlots.length << 1;
          dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet2, providers));
        }
      }
      let dynamic = dynamicSlots.map((f2) => f2(address));
      return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
    }
  };
  function flatten(extension, compartments, newCompartments) {
    let result = [[], [], [], [], []];
    let seen = /* @__PURE__ */ new Map();
    function inner(ext, prec2) {
      let known = seen.get(ext);
      if (known != null) {
        if (known <= prec2)
          return;
        let found = result[known].indexOf(ext);
        if (found > -1)
          result[known].splice(found, 1);
        if (ext instanceof CompartmentInstance)
          newCompartments.delete(ext.compartment);
      }
      seen.set(ext, prec2);
      if (Array.isArray(ext)) {
        for (let e2 of ext)
          inner(e2, prec2);
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment))
          throw new RangeError(`Duplicate use of compartment in extensions`);
        let content2 = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, content2);
        inner(content2, prec2);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec2].push(ext);
        if (ext.provides)
          inner(ext.provides, prec2);
      } else if (ext instanceof FacetProvider) {
        result[prec2].push(ext);
        if (ext.facet.extensions)
          inner(ext.facet.extensions, Prec_.default);
      } else {
        let content2 = ext.extension;
        if (!content2)
          throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
        inner(content2, prec2);
      }
    }
    __name(inner, "inner");
    inner(extension, Prec_.default);
    return result.reduce((a2, b2) => a2.concat(b2));
  }
  __name(flatten, "flatten");
  function ensureAddr(state, addr) {
    if (addr & 1)
      return 2;
    let idx = addr >> 1;
    let status = state.status[idx];
    if (status == 4)
      throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2)
      return status;
    state.status[idx] = 4;
    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 | changed;
  }
  __name(ensureAddr, "ensureAddr");
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  __name(getAddr, "getAddr");
  var languageData = /* @__PURE__ */ Facet.define();
  var allowMultipleSelections = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.some((v2) => v2), "combine"),
    static: true
  });
  var lineSeparator = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.length ? values[0] : void 0, "combine"),
    static: true
  });
  var changeFilter = /* @__PURE__ */ Facet.define();
  var transactionFilter = /* @__PURE__ */ Facet.define();
  var transactionExtender = /* @__PURE__ */ Facet.define();
  var readOnly = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.length ? values[0] : false, "combine")
  });
  var Annotation = class {
    static {
      __name(this, "Annotation");
    }
    /**
    @internal
    */
    constructor(type, value) {
      this.type = type;
      this.value = value;
    }
    /**
    Define a new type of annotation.
    */
    static define() {
      return new AnnotationType();
    }
  };
  var AnnotationType = class {
    static {
      __name(this, "AnnotationType");
    }
    /**
    Create an instance of this annotation.
    */
    of(value) {
      return new Annotation(this, value);
    }
  };
  var StateEffectType = class {
    static {
      __name(this, "StateEffectType");
    }
    /**
    @internal
    */
    constructor(map) {
      this.map = map;
    }
    /**
    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
    type.
    */
    of(value) {
      return new StateEffect(this, value);
    }
  };
  var StateEffect = class _StateEffect {
    static {
      __name(this, "StateEffect");
    }
    /**
    @internal
    */
    constructor(type, value) {
      this.type = type;
      this.value = value;
    }
    /**
    Map this effect through a position mapping. Will return
    `undefined` when that ends up deleting the effect.
    */
    map(mapping) {
      let mapped = this.type.map(this.value, mapping);
      return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
    is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds. It should be a type that
    doesn't include `undefined`, since that is used in
    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
    removed.
    */
    static define(spec = {}) {
      return new StateEffectType(spec.map || ((v2) => v2));
    }
    /**
    Map an array of effects through a change set.
    */
    static mapEffects(effects, mapping) {
      if (!effects.length)
        return effects;
      let result = [];
      for (let effect of effects) {
        let mapped = effect.map(mapping);
        if (mapped)
          result.push(mapped);
      }
      return result;
    }
  };
  StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
  StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
  var Transaction = class _Transaction {
    static {
      __name(this, "Transaction");
    }
    constructor(startState, changes, selection, effects, annotations, scrollIntoView3) {
      this.startState = startState;
      this.changes = changes;
      this.selection = selection;
      this.effects = effects;
      this.annotations = annotations;
      this.scrollIntoView = scrollIntoView3;
      this._doc = null;
      this._state = null;
      if (selection)
        checkSelection(selection, changes.newLength);
      if (!annotations.some((a2) => a2.type == _Transaction.time))
        this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
    }
    /**
    @internal
    */
    static create(startState, changes, selection, effects, annotations, scrollIntoView3) {
      return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView3);
    }
    /**
    The new document produced by the transaction. Contrary to
    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
    force the entire new state to be computed right away, so it is
    recommended that [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
    when they need to look at the new document.
    */
    get newDoc() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
    get newSelection() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so it is recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
    get state() {
      if (!this._state)
        this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
    annotation(type) {
      for (let ann of this.annotations)
        if (ann.type == type)
          return ann.value;
      return void 0;
    }
    /**
    Indicates whether the transaction changed the document.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
    get reconfigured() {
      return this.startState.config != this.state.config;
    }
    /**
    Returns true if the transaction has a [user
    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
    or more specific than `event`. For example, if the transaction
    has `"select.pointer"` as user event, `"select"` and
    `"select.pointer"` will match it.
    */
    isUserEvent(event) {
      let e2 = this.annotation(_Transaction.userEvent);
      return !!(e2 && (e2 == event || e2.length > event.length && e2.slice(0, event.length) == event && e2[event.length] == "."));
    }
  };
  Transaction.time = /* @__PURE__ */ Annotation.define();
  Transaction.userEvent = /* @__PURE__ */ Annotation.define();
  Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
  Transaction.remote = /* @__PURE__ */ Annotation.define();
  function joinRanges(a2, b2) {
    let result = [];
    for (let iA = 0, iB = 0; ; ) {
      let from, to;
      if (iA < a2.length && (iB == b2.length || b2[iB] >= a2[iA])) {
        from = a2[iA++];
        to = a2[iA++];
      } else if (iB < b2.length) {
        from = b2[iB++];
        to = b2[iB++];
      } else
        return result;
      if (!result.length || result[result.length - 1] < from)
        result.push(from, to);
      else if (result[result.length - 1] < to)
        result[result.length - 1] = to;
    }
  }
  __name(joinRanges, "joinRanges");
  function mergeTransaction(a2, b2, sequential) {
    var _a2;
    let mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b2.changes;
      mapForB = ChangeSet.empty(b2.changes.length);
      changes = a2.changes.compose(b2.changes);
    } else {
      mapForA = b2.changes.map(a2.changes);
      mapForB = a2.changes.mapDesc(b2.changes, true);
      changes = a2.changes.compose(mapForA);
    }
    return {
      changes,
      selection: b2.selection ? b2.selection.map(mapForB) : (_a2 = a2.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
      effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b2.effects, mapForB)),
      annotations: a2.annotations.length ? a2.annotations.concat(b2.annotations) : b2.annotations,
      scrollIntoView: a2.scrollIntoView || b2.scrollIntoView
    };
  }
  __name(mergeTransaction, "mergeTransaction");
  function resolveTransactionInner(state, spec, docSize) {
    let sel = spec.selection, annotations = asArray(spec.annotations);
    if (spec.userEvent)
      annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray(spec.effects),
      annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  __name(resolveTransactionInner, "resolveTransactionInner");
  function resolveTransaction(state, specs, filter) {
    let s2 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false)
      filter = false;
    for (let i2 = 1; i2 < specs.length; i2++) {
      if (specs[i2].filter === false)
        filter = false;
      let seq = !!specs[i2].sequential;
      s2 = mergeTransaction(s2, resolveTransactionInner(state, specs[i2], seq ? s2.changes.newLength : state.doc.length), seq);
    }
    let tr = Transaction.create(state, s2.changes, s2.selection, s2.effects, s2.annotations, s2.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  __name(resolveTransaction, "resolveTransaction");
  function filterTransaction(tr) {
    let state = tr.startState;
    let result = true;
    for (let filter of state.facet(changeFilter)) {
      let value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value))
        result = result === true ? value : joinRanges(result, value);
    }
    if (result !== true) {
      let changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        let filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    let filters = state.facet(transactionFilter);
    for (let i2 = filters.length - 1; i2 >= 0; i2--) {
      let filtered = filters[i2](tr);
      if (filtered instanceof Transaction)
        tr = filtered;
      else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
        tr = filtered[0];
      else
        tr = resolveTransaction(state, asArray(filtered), false);
    }
    return tr;
  }
  __name(filterTransaction, "filterTransaction");
  function extendTransaction(tr) {
    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
    for (let i2 = extenders.length - 1; i2 >= 0; i2--) {
      let extension = extenders[i2](tr);
      if (extension && Object.keys(extension).length)
        spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  __name(extendTransaction, "extendTransaction");
  var none = [];
  function asArray(value) {
    return value == null ? none : Array.isArray(value) ? value : [value];
  }
  __name(asArray, "asArray");
  var CharCategory = /* @__PURE__ */ function(CharCategory2) {
    CharCategory2[CharCategory2["Word"] = 0] = "Word";
    CharCategory2[CharCategory2["Space"] = 1] = "Space";
    CharCategory2[CharCategory2["Other"] = 2] = "Other";
    return CharCategory2;
  }(CharCategory || (CharCategory = {}));
  var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  var wordChar;
  try {
    wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  } catch (_2) {
  }
  function hasWordChar(str) {
    if (wordChar)
      return wordChar.test(str);
    for (let i2 = 0; i2 < str.length; i2++) {
      let ch = str[i2];
      if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
        return true;
    }
    return false;
  }
  __name(hasWordChar, "hasWordChar");
  function makeCategorizer(wordChars) {
    return (char) => {
      if (!/\S/.test(char))
        return CharCategory.Space;
      if (hasWordChar(char))
        return CharCategory.Word;
      for (let i2 = 0; i2 < wordChars.length; i2++)
        if (char.indexOf(wordChars[i2]) > -1)
          return CharCategory.Word;
      return CharCategory.Other;
    };
  }
  __name(makeCategorizer, "makeCategorizer");
  var EditorState = class _EditorState {
    static {
      __name(this, "EditorState");
    }
    constructor(config15, doc2, selection, values, computeSlot, tr) {
      this.config = config15;
      this.doc = doc2;
      this.selection = selection;
      this.values = values;
      this.status = config15.statusTemplate.slice();
      this.computeSlot = computeSlot;
      if (tr)
        tr._state = this;
      for (let i2 = 0; i2 < this.config.dynamicSlots.length; i2++)
        ensureAddr(this, i2 << 1);
      this.computeSlot = null;
    }
    field(field, require2 = true) {
      let addr = this.config.address[field.id];
      if (addr == null) {
        if (require2)
          throw new RangeError("Field is not present in this state");
        return void 0;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
    update(...specs) {
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
    applyTransaction(tr) {
      let conf = this.config, { base: base2, compartments } = conf;
      for (let effect of tr.effects) {
        if (effect.is(Compartment.reconfigure)) {
          if (conf) {
            compartments = /* @__PURE__ */ new Map();
            conf.compartments.forEach((val, key) => compartments.set(key, val));
            conf = null;
          }
          compartments.set(effect.value.compartment, effect.value.extension);
        } else if (effect.is(StateEffect.reconfigure)) {
          conf = null;
          base2 = effect.value;
        } else if (effect.is(StateEffect.appendConfig)) {
          conf = null;
          base2 = asArray(base2).concat(effect.value);
        }
      }
      let startValues;
      if (!conf) {
        conf = Configuration.resolve(base2, compartments, this);
        let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
        startValues = intermediateState.values;
      } else {
        startValues = tr.startState.values.slice();
      }
      let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
      new _EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
    replaceSelection(text) {
      if (typeof text == "string")
        text = this.toText(text);
      return this.changeByRange((range) => ({
        changes: { from: range.from, to: range.to, insert: text },
        range: EditorSelection.cursor(range.from + text.length)
      }));
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
    changeByRange(f2) {
      let sel = this.selection;
      let result1 = f2(sel.ranges[0]);
      let changes = this.changes(result1.changes), ranges = [result1.range];
      let effects = asArray(result1.effects);
      for (let i2 = 1; i2 < sel.ranges.length; i2++) {
        let result = f2(sel.ranges[i2]);
        let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
        for (let j2 = 0; j2 < i2; j2++)
          ranges[j2] = ranges[j2].map(newMapped);
        let mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
      }
      return {
        changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
    changes(spec = []) {
      if (spec instanceof ChangeSet)
        return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
    */
    toText(string2) {
      return Text.of(string2.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
    sliceDoc(from = 0, to = this.doc.length) {
      return this.doc.sliceString(from, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
    facet(facet2) {
      let addr = this.config.address[facet2.id];
      if (addr == null)
        return facet2.default;
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
    toJSON(fields) {
      let result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields)
        for (let prop in fields) {
          let value = fields[prop];
          if (value instanceof StateField && this.config.address[value.id] != null)
            result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
        }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
    static fromJSON(json, config15 = {}, fields) {
      if (!json || typeof json.doc != "string")
        throw new RangeError("Invalid JSON representation for EditorState");
      let fieldInit = [];
      if (fields)
        for (let prop in fields) {
          if (Object.prototype.hasOwnProperty.call(json, prop)) {
            let field = fields[prop], value = json[prop];
            fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
          }
        }
      return _EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config15.extensions ? fieldInit.concat([config15.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
    static create(config15 = {}) {
      let configuration = Configuration.resolve(config15.extensions || [], /* @__PURE__ */ new Map());
      let doc2 = config15.doc instanceof Text ? config15.doc : Text.of((config15.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
      let selection = !config15.selection ? EditorSelection.single(0) : config15.selection instanceof EditorSelection ? config15.selection : EditorSelection.single(config15.selection.anchor, config15.selection.head);
      checkSelection(selection, doc2.length);
      if (!configuration.staticFacet(allowMultipleSelections))
        selection = selection.asSingle();
      return new _EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
    }
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    get tabSize() {
      return this.facet(_EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
    get lineBreak() {
      return this.facet(_EditorState.lineSeparator) || "\n";
    }
    /**
    Returns true when the editor is
    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
    */
    get readOnly() {
      return this.facet(readOnly);
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    
    If additional arguments are passed, they will be inserted in
    place of markers like `$1` (for the first value) and `$2`, etc.
    A single `$` is equivalent to `$1`, and `$$` will produce a
    literal dollar sign.
    */
    phrase(phrase2, ...insert2) {
      for (let map of this.facet(_EditorState.phrases))
        if (Object.prototype.hasOwnProperty.call(map, phrase2)) {
          phrase2 = map[phrase2];
          break;
        }
      if (insert2.length)
        phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m2, i2) => {
          if (i2 == "$")
            return "$";
          let n2 = +(i2 || 1);
          return !n2 || n2 > insert2.length ? m2 : insert2[n2 - 1];
        });
      return phrase2;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    
    Examples of language data fields are...
    
    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
      comment syntax.
    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
      for providing language-specific completion sources.
    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
      characters that should be considered part of words in this
      language.
    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
      bracket closing behavior.
    */
    languageDataAt(name2, pos, side = -1) {
      let values = [];
      for (let provider of this.facet(languageData)) {
        for (let result of provider(this, pos, side)) {
          if (Object.prototype.hasOwnProperty.call(result, name2))
            values.push(result[name2]);
        }
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
    charCategorizer(at2) {
      return makeCategorizer(this.languageDataAt("wordChars", at2).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
    wordAt(pos) {
      let { text, from, length } = this.doc.lineAt(pos);
      let cat = this.charCategorizer(pos);
      let start = pos - from, end = pos - from;
      while (start > 0) {
        let prev = findClusterBreak2(text, start, false);
        if (cat(text.slice(prev, start)) != CharCategory.Word)
          break;
        start = prev;
      }
      while (end < length) {
        let next = findClusterBreak2(text, end);
        if (cat(text.slice(end, next)) != CharCategory.Word)
          break;
        end = next;
      }
      return start == end ? null : EditorSelection.range(start + from, end + from);
    }
  };
  EditorState.allowMultipleSelections = allowMultipleSelections;
  EditorState.tabSize = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.length ? values[0] : 4, "combine")
  });
  EditorState.lineSeparator = lineSeparator;
  EditorState.readOnly = readOnly;
  EditorState.phrases = /* @__PURE__ */ Facet.define({
    compare(a2, b2) {
      let kA = Object.keys(a2), kB = Object.keys(b2);
      return kA.length == kB.length && kA.every((k2) => a2[k2] == b2[k2]);
    }
  });
  EditorState.languageData = languageData;
  EditorState.changeFilter = changeFilter;
  EditorState.transactionFilter = transactionFilter;
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
  function combineConfig(configs, defaults3, combine = {}) {
    let result = {};
    for (let config15 of configs)
      for (let key of Object.keys(config15)) {
        let value = config15[key], current = result[key];
        if (current === void 0)
          result[key] = value;
        else if (current === value || value === void 0) ;
        else if (Object.hasOwnProperty.call(combine, key))
          result[key] = combine[key](current, value);
        else
          throw new Error("Config merge conflict for field " + key);
      }
    for (let key in defaults3)
      if (result[key] === void 0)
        result[key] = defaults3[key];
    return result;
  }
  __name(combineConfig, "combineConfig");
  var RangeValue = class {
    static {
      __name(this, "RangeValue");
    }
    /**
    Compare this value with another value. Used when comparing
    rangesets. The default implementation compares by identity.
    Unless you are only creating a fixed number of unique instances
    of your value type, it is a good idea to implement this
    properly.
    */
    eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
    */
    range(from, to = from) {
      return Range.create(from, to, this);
    }
  };
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  var Range = class _Range {
    static {
      __name(this, "Range");
    }
    constructor(from, to, value) {
      this.from = from;
      this.to = to;
      this.value = value;
    }
    /**
    @internal
    */
    static create(from, to, value) {
      return new _Range(from, to, value);
    }
  };
  function cmpRange(a2, b2) {
    return a2.from - b2.from || a2.value.startSide - b2.value.startSide;
  }
  __name(cmpRange, "cmpRange");
  var Chunk = class _Chunk {
    static {
      __name(this, "Chunk");
    }
    constructor(from, to, value, maxPoint) {
      this.from = from;
      this.to = to;
      this.value = value;
      this.maxPoint = maxPoint;
    }
    get length() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
    findIndex(pos, side, end, startAt = 0) {
      let arr = end ? this.to : this.from;
      for (let lo = startAt, hi = arr.length; ; ) {
        if (lo == hi)
          return lo;
        let mid = lo + hi >> 1;
        let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo)
          return diff >= 0 ? lo : hi;
        if (diff >= 0)
          hi = mid;
        else
          lo = mid + 1;
      }
    }
    between(offset, from, to, f2) {
      for (let i2 = this.findIndex(from, -1e9, true), e2 = this.findIndex(to, 1e9, false, i2); i2 < e2; i2++)
        if (f2(this.from[i2] + offset, this.to[i2] + offset, this.value[i2]) === false)
          return false;
    }
    map(offset, changes) {
      let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
      for (let i2 = 0; i2 < this.value.length; i2++) {
        let val = this.value[i2], curFrom = this.from[i2] + offset, curTo = this.to[i2] + offset, newFrom, newTo;
        if (curFrom == curTo) {
          let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null)
            continue;
          newFrom = newTo = mapped;
          if (val.startSide != val.endSide) {
            newTo = changes.mapPos(curFrom, val.endSide);
            if (newTo < newFrom)
              continue;
          }
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
            continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0)
          continue;
        if (newPos < 0)
          newPos = newFrom;
        if (val.point)
          maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return { mapped: value.length ? new _Chunk(from, to, value, maxPoint) : null, pos: newPos };
    }
  };
  var RangeSet = class _RangeSet {
    static {
      __name(this, "RangeSet");
    }
    constructor(chunkPos, chunk, nextLayer, maxPoint) {
      this.chunkPos = chunkPos;
      this.chunk = chunk;
      this.nextLayer = nextLayer;
      this.maxPoint = maxPoint;
    }
    /**
    @internal
    */
    static create(chunkPos, chunk, nextLayer, maxPoint) {
      return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
    }
    /**
    @internal
    */
    get length() {
      let last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
    get size() {
      if (this.isEmpty)
        return 0;
      let size = this.nextLayer.size;
      for (let chunk of this.chunk)
        size += chunk.value.length;
      return size;
    }
    /**
    @internal
    */
    chunkEnd(index) {
      return this.chunkPos[index] + this.chunk[index].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (Note: The type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
    update(updateSpec) {
      let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
      let filter = updateSpec.filter;
      if (add2.length == 0 && !filter)
        return this;
      if (sort)
        add2 = add2.slice().sort(cmpRange);
      if (this.isEmpty)
        return add2.length ? _RangeSet.of(add2) : this;
      let cur2 = new LayerCursor(this, null, -1).goto(0), i2 = 0, spill = [];
      let builder = new RangeSetBuilder();
      while (cur2.value || i2 < add2.length) {
        if (i2 < add2.length && (cur2.from - add2[i2].from || cur2.startSide - add2[i2].value.startSide) >= 0) {
          let range = add2[i2++];
          if (!builder.addInner(range.from, range.to, range.value))
            spill.push(range);
        } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i2 == add2.length || this.chunkEnd(cur2.chunkIndex) < add2[i2].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
          cur2.nextChunk();
        } else {
          if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
            if (!builder.addInner(cur2.from, cur2.to, cur2.value))
              spill.push(Range.create(cur2.from, cur2.to, cur2.value));
          }
          cur2.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
    map(changes) {
      if (changes.empty || this.isEmpty)
        return this;
      let chunks = [], chunkPos = [], maxPoint = -1;
      for (let i2 = 0; i2 < this.chunk.length; i2++) {
        let start = this.chunkPos[i2], chunk = this.chunk[i2];
        let touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          let { mapped, pos } = chunk.map(start, changes);
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      let next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
    between(from, to, f2) {
      if (this.isEmpty)
        return;
      for (let i2 = 0; i2 < this.chunk.length; i2++) {
        let start = this.chunkPos[i2], chunk = this.chunk[i2];
        if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f2) === false)
          return;
      }
      this.nextLayer.between(from, to, f2);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
    iter(from = 0) {
      return HeapCursor.from([this]).goto(from);
    }
    /**
    @internal
    */
    get isEmpty() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
    static iter(sets, from = 0) {
      return HeapCursor.from(sets).goto(from);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
    static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
      let a2 = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let b2 = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let sharedChunks = findSharedChunks(a2, b2, textDiff);
      let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
      let sideB = new SpanCursor(b2, sharedChunks, minPointSize);
      textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
      if (textDiff.empty && textDiff.length == 0)
        compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
    static eq(oldSets, newSets, from = 0, to) {
      if (to == null)
        to = 1e9 - 1;
      let a2 = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
      let b2 = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
      if (a2.length != b2.length)
        return false;
      if (!a2.length)
        return true;
      let sharedChunks = findSharedChunks(a2, b2);
      let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from), sideB = new SpanCursor(b2, sharedChunks, 0).goto(from);
      for (; ; ) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
          return false;
        if (sideA.to > to)
          return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
    of the iteration.
    */
    static spans(sets, from, to, iterator, minPointSize = -1) {
      let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
      let openRanges = cursor.openStart;
      for (; ; ) {
        let curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          let active = cursor.activeForPoint(cursor.to);
          let openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
          iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
          openRanges = Math.min(cursor.openEnd(curTo), active.length);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, openRanges);
          openRanges = cursor.openEnd(curTo);
        }
        if (cursor.to > to)
          return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
        pos = cursor.to;
        cursor.next();
      }
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
    static of(ranges, sort = false) {
      let build = new RangeSetBuilder();
      for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
        build.add(range.from, range.to, range.value);
      return build.finish();
    }
    /**
    Join an array of range sets into a single set.
    */
    static join(sets) {
      if (!sets.length)
        return _RangeSet.empty;
      let result = sets[sets.length - 1];
      for (let i2 = sets.length - 2; i2 >= 0; i2--) {
        for (let layer2 = sets[i2]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
          result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
      }
      return result;
    }
  };
  RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
  function lazySort(ranges) {
    if (ranges.length > 1)
      for (let prev = ranges[0], i2 = 1; i2 < ranges.length; i2++) {
        let cur2 = ranges[i2];
        if (cmpRange(prev, cur2) > 0)
          return ranges.slice().sort(cmpRange);
        prev = cur2;
      }
    return ranges;
  }
  __name(lazySort, "lazySort");
  RangeSet.empty.nextLayer = RangeSet.empty;
  var RangeSetBuilder = class _RangeSetBuilder {
    static {
      __name(this, "RangeSetBuilder");
    }
    finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
    /**
    Create an empty builder.
    */
    constructor() {
      this.chunks = [];
      this.chunkPos = [];
      this.chunkStart = -1;
      this.last = null;
      this.lastFrom = -1e9;
      this.lastTo = -1e9;
      this.from = [];
      this.to = [];
      this.value = [];
      this.maxPoint = -1;
      this.setMaxPoint = -1;
      this.nextLayer = null;
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
    add(from, to, value) {
      if (!this.addInner(from, to, value))
        (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from, to, value);
    }
    /**
    @internal
    */
    addInner(from, to, value) {
      let diff = from - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
        throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0)
        return false;
      if (this.from.length == 250)
        this.finishChunk(true);
      if (this.chunkStart < 0)
        this.chunkStart = from;
      this.from.push(from - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from;
      this.lastTo = to;
      this.value.push(value);
      if (value.point)
        this.maxPoint = Math.max(this.maxPoint, to - from);
      return true;
    }
    /**
    @internal
    */
    addChunk(from, chunk) {
      if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
        return false;
      if (this.from.length)
        this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from);
      let last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from;
      this.lastTo = chunk.to[last] + from;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
    finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
    finishInner(next) {
      if (this.from.length)
        this.finishChunk(false);
      if (this.chunks.length == 0)
        return next;
      let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null;
      return result;
    }
  };
  function findSharedChunks(a2, b2, textDiff) {
    let inA = /* @__PURE__ */ new Map();
    for (let set of a2)
      for (let i2 = 0; i2 < set.chunk.length; i2++)
        if (set.chunk[i2].maxPoint <= 0)
          inA.set(set.chunk[i2], set.chunkPos[i2]);
    let shared = /* @__PURE__ */ new Set();
    for (let set of b2)
      for (let i2 = 0; i2 < set.chunk.length; i2++) {
        let known = inA.get(set.chunk[i2]);
        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i2] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i2].length)))
          shared.add(set.chunk[i2]);
      }
    return shared;
  }
  __name(findSharedChunks, "findSharedChunks");
  var LayerCursor = class {
    static {
      __name(this, "LayerCursor");
    }
    constructor(layer2, skip, minPoint, rank = 0) {
      this.layer = layer2;
      this.skip = skip;
      this.minPoint = minPoint;
      this.rank = rank;
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    get endSide() {
      return this.value ? this.value.endSide : 0;
    }
    goto(pos, side = -1e9) {
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
    gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        let next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
          break;
        this.chunkIndex++;
        forward = false;
      }
      if (this.chunkIndex < this.layer.chunk.length) {
        let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
        if (!forward || this.rangeIndex < rangeIndex)
          this.setRangeIndex(rangeIndex);
      }
      this.next();
    }
    forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0)
        this.gotoInner(pos, side, true);
    }
    next() {
      for (; ; ) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1e9;
          this.value = null;
          break;
        } else {
          let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
          let from = chunkPos + chunk.from[this.rangeIndex];
          this.from = from;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          this.setRangeIndex(this.rangeIndex + 1);
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
            break;
        }
      }
    }
    setRangeIndex(index) {
      if (index == this.layer.chunk[this.chunkIndex].value.length) {
        this.chunkIndex++;
        if (this.skip) {
          while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
            this.chunkIndex++;
        }
        this.rangeIndex = 0;
      } else {
        this.rangeIndex = index;
      }
    }
    nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
    compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
    }
  };
  var HeapCursor = class _HeapCursor {
    static {
      __name(this, "HeapCursor");
    }
    constructor(heap) {
      this.heap = heap;
    }
    static from(sets, skip = null, minPoint = -1) {
      let heap = [];
      for (let i2 = 0; i2 < sets.length; i2++) {
        for (let cur2 = sets[i2]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
          if (cur2.maxPoint >= minPoint)
            heap.push(new LayerCursor(cur2, skip, minPoint, i2));
        }
      }
      return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    goto(pos, side = -1e9) {
      for (let cur2 of this.heap)
        cur2.goto(pos, side);
      for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
        heapBubble(this.heap, i2);
      this.next();
      return this;
    }
    forward(pos, side) {
      for (let cur2 of this.heap)
        cur2.forward(pos, side);
      for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
        heapBubble(this.heap, i2);
      if ((this.to - pos || this.value.endSide - side) < 0)
        this.next();
    }
    next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1e9;
        this.value = null;
        this.rank = -1;
      } else {
        let top2 = this.heap[0];
        this.from = top2.from;
        this.to = top2.to;
        this.value = top2.value;
        this.rank = top2.rank;
        if (top2.value)
          top2.next();
        heapBubble(this.heap, 0);
      }
    }
  };
  function heapBubble(heap, index) {
    for (let cur2 = heap[index]; ; ) {
      let childIndex = (index << 1) + 1;
      if (childIndex >= heap.length)
        break;
      let child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (cur2.compare(child) < 0)
        break;
      heap[childIndex] = cur2;
      heap[index] = child;
      index = childIndex;
    }
  }
  __name(heapBubble, "heapBubble");
  var SpanCursor = class {
    static {
      __name(this, "SpanCursor");
    }
    constructor(sets, skip, minPoint) {
      this.minPoint = minPoint;
      this.active = [];
      this.activeTo = [];
      this.activeRank = [];
      this.minActive = -1;
      this.point = null;
      this.pointFrom = 0;
      this.pointRank = 0;
      this.to = -1e9;
      this.endSide = 0;
      this.openStart = -1;
      this.cursor = HeapCursor.from(sets, skip, minPoint);
    }
    goto(pos, side = -1e9) {
      this.cursor.goto(pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
    forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
        this.removeActive(this.minActive);
      this.cursor.forward(pos, side);
    }
    removeActive(index) {
      remove(this.active, index);
      remove(this.activeTo, index);
      remove(this.activeRank, index);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    addActive(trackOpen) {
      let i2 = 0, { value, to, rank } = this.cursor;
      while (i2 < this.activeRank.length && (rank - this.activeRank[i2] || to - this.activeTo[i2]) > 0)
        i2++;
      insert(this.active, i2, value);
      insert(this.activeTo, i2, to);
      insert(this.activeRank, i2, rank);
      if (trackOpen)
        insert(trackOpen, i2, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
    next() {
      let from = this.to, wasPoint = this.point;
      this.point = null;
      let trackOpen = this.openStart < 0 ? [] : null;
      for (; ; ) {
        let a2 = this.minActive;
        if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a2] > from) {
            this.to = this.activeTo[a2];
            this.endSide = this.active[a2].endSide;
            break;
          }
          this.removeActive(a2);
          if (trackOpen)
            remove(trackOpen, a2);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1e9;
          break;
        } else if (this.cursor.from > from) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          let nextVal = this.cursor.value;
          if (!nextVal.point) {
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
            this.cursor.next();
          } else {
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            this.cursor.next();
            this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        this.openStart = 0;
        for (let i2 = trackOpen.length - 1; i2 >= 0 && trackOpen[i2] < from; i2--)
          this.openStart++;
      }
    }
    activeForPoint(to) {
      if (!this.active.length)
        return this.active;
      let active = [];
      for (let i2 = this.active.length - 1; i2 >= 0; i2--) {
        if (this.activeRank[i2] < this.pointRank)
          break;
        if (this.activeTo[i2] > to || this.activeTo[i2] == to && this.active[i2].endSide >= this.point.endSide)
          active.push(this.active[i2]);
      }
      return active.reverse();
    }
    openEnd(to) {
      let open = 0;
      for (let i2 = this.activeTo.length - 1; i2 >= 0 && this.activeTo[i2] > to; i2--)
        open++;
      return open;
    }
  };
  function compare(a2, startA, b2, startB, length, comparator) {
    a2.goto(startA);
    b2.goto(startB);
    let endB = startB + length;
    let pos = startB, dPos = startB - startA;
    for (; ; ) {
      let dEnd = a2.to + dPos - b2.to, diff = dEnd || a2.endSide - b2.endSide;
      let end = diff < 0 ? a2.to + dPos : b2.to, clipEnd = Math.min(end, endB);
      if (a2.point || b2.point) {
        if (!(a2.point && b2.point && (a2.point == b2.point || a2.point.eq(b2.point)) && sameValues(a2.activeForPoint(a2.to), b2.activeForPoint(b2.to))))
          comparator.comparePoint(pos, clipEnd, a2.point, b2.point);
      } else {
        if (clipEnd > pos && !sameValues(a2.active, b2.active))
          comparator.compareRange(pos, clipEnd, a2.active, b2.active);
      }
      if (end > endB)
        break;
      if ((dEnd || a2.openEnd != b2.openEnd) && comparator.boundChange)
        comparator.boundChange(end);
      pos = end;
      if (diff <= 0)
        a2.next();
      if (diff >= 0)
        b2.next();
    }
  }
  __name(compare, "compare");
  function sameValues(a2, b2) {
    if (a2.length != b2.length)
      return false;
    for (let i2 = 0; i2 < a2.length; i2++)
      if (a2[i2] != b2[i2] && !a2[i2].eq(b2[i2]))
        return false;
    return true;
  }
  __name(sameValues, "sameValues");
  function remove(array, index) {
    for (let i2 = index, e2 = array.length - 1; i2 < e2; i2++)
      array[i2] = array[i2 + 1];
    array.pop();
  }
  __name(remove, "remove");
  function insert(array, index, value) {
    for (let i2 = array.length - 1; i2 >= index; i2--)
      array[i2 + 1] = array[i2];
    array[index] = value;
  }
  __name(insert, "insert");
  function findMinIndex(value, array) {
    let found = -1, foundPos = 1e9;
    for (let i2 = 0; i2 < array.length; i2++)
      if ((array[i2] - foundPos || value[i2].endSide - value[found].endSide) < 0) {
        found = i2;
        foundPos = array[i2];
      }
    return found;
  }
  __name(findMinIndex, "findMinIndex");
  function countColumn(string2, tabSize, to = string2.length) {
    let n2 = 0;
    for (let i2 = 0; i2 < to && i2 < string2.length; ) {
      if (string2.charCodeAt(i2) == 9) {
        n2 += tabSize - n2 % tabSize;
        i2++;
      } else {
        n2++;
        i2 = findClusterBreak2(string2, i2);
      }
    }
    return n2;
  }
  __name(countColumn, "countColumn");
  function findColumn(string2, col, tabSize, strict) {
    for (let i2 = 0, n2 = 0; ; ) {
      if (n2 >= col)
        return i2;
      if (i2 == string2.length)
        break;
      n2 += string2.charCodeAt(i2) == 9 ? tabSize - n2 % tabSize : 1;
      i2 = findClusterBreak2(string2, i2);
    }
    return strict === true ? -1 : string2.length;
  }
  __name(findColumn, "findColumn");

  // node_modules/style-mod/src/style-mod.js
  var C = "\u037C";
  var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
  var StyleModule = class {
    static {
      __name(this, "StyleModule");
    }
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let { finish } = options || {};
      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
      }
      __name(splitSelector, "splitSelector");
      function render(selectors, spec2, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec2 == null) return target.push(selectors[0] + ";");
        for (let prop in spec2) {
          let value = spec2[prop];
          if (/&/.test(prop)) {
            render(
              prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b2) => a2.concat(b2)),
              value,
              target
            );
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l2) => "-" + l2.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
        }
      }
      __name(render, "render");
      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }
    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() {
      return this.rules.join("\n");
    }
    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36);
    }
    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root, modules, options) {
      let set = root[SET], nonce = options && options.nonce;
      if (!set) set = new StyleSet(root, nonce);
      else if (nonce) set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root);
    }
  };
  var adoptedSet = /* @__PURE__ */ new Map();
  var StyleSet = class {
    static {
      __name(this, "StyleSet");
    }
    constructor(root, nonce) {
      let doc2 = root.ownerDocument || root, win = doc2.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc2);
        if (adopted) return root[SET] = adopted;
        this.sheet = new win.CSSStyleSheet();
        adoptedSet.set(doc2, this);
      } else {
        this.styleTag = doc2.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }
    mount(modules, root) {
      let sheet = this.sheet;
      let pos = 0, j2 = 0;
      for (let i2 = 0; i2 < modules.length; i2++) {
        let mod = modules[i2], index = this.modules.indexOf(mod);
        if (index < j2 && index > -1) {
          this.modules.splice(index, 1);
          j2--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j2++, 0, mod);
          if (sheet) for (let k2 = 0; k2 < mod.rules.length; k2++)
            sheet.insertRule(mod.rules[k2], pos++);
        } else {
          while (j2 < index) pos += this.modules[j2++].rules.length;
          pos += mod.rules.length;
          j2++;
        }
      }
      if (sheet) {
        if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      } else {
        let text = "";
        for (let i2 = 0; i2 < this.modules.length; i2++)
          text += this.modules[i2].getRules() + "\n";
        this.styleTag.textContent = text;
        let target = root.head || root;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }
    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  };

  // node_modules/w3c-keyname/index.js
  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };
  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: '"'
  };
  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
  for (i2 = 0; i2 < 10; i2++) base[48 + i2] = base[96 + i2] = String(i2);
  var i2;
  for (i2 = 1; i2 <= 24; i2++) base[i2 + 111] = "F" + i2;
  var i2;
  for (i2 = 65; i2 <= 90; i2++) {
    base[i2] = String.fromCharCode(i2 + 32);
    shift[i2] = String.fromCharCode(i2);
  }
  var i2;
  for (code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
  var code;
  function keyName(event) {
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
    var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
    if (name2 == "Esc") name2 = "Escape";
    if (name2 == "Del") name2 = "Delete";
    if (name2 == "Left") name2 = "ArrowLeft";
    if (name2 == "Up") name2 = "ArrowUp";
    if (name2 == "Right") name2 = "ArrowRight";
    if (name2 == "Down") name2 = "ArrowDown";
    return name2;
  }
  __name(keyName, "keyName");

  // node_modules/@codemirror/view/dist/index.js
  function getSelection(root) {
    let target;
    if (root.nodeType == 11) {
      target = root.getSelection ? root : root.ownerDocument;
    } else {
      target = root;
    }
    return target.getSelection();
  }
  __name(getSelection, "getSelection");
  function contains(dom, node) {
    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  __name(contains, "contains");
  function hasSelection(dom, selection) {
    if (!selection.anchorNode)
      return false;
    try {
      return contains(dom, selection.anchorNode);
    } catch (_2) {
      return false;
    }
  }
  __name(hasSelection, "hasSelection");
  function clientRectsFor(dom) {
    if (dom.nodeType == 3)
      return textRange(dom, 0, dom.nodeValue.length).getClientRects();
    else if (dom.nodeType == 1)
      return dom.getClientRects();
    else
      return [];
  }
  __name(clientRectsFor, "clientRectsFor");
  function isEquivalentPosition(node, off, targetNode, targetOff) {
    return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
  }
  __name(isEquivalentPosition, "isEquivalentPosition");
  function domIndex(node) {
    for (var index = 0; ; index++) {
      node = node.previousSibling;
      if (!node)
        return index;
    }
  }
  __name(domIndex, "domIndex");
  function isBlockElement(node) {
    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  __name(isBlockElement, "isBlockElement");
  function scanFor(node, off, targetNode, targetOff, dir) {
    for (; ; ) {
      if (node == targetNode && off == targetOff)
        return true;
      if (off == (dir < 0 ? 0 : maxOffset(node))) {
        if (node.nodeName == "DIV")
          return false;
        let parent = node.parentNode;
        if (!parent || parent.nodeType != 1)
          return false;
        off = domIndex(node) + (dir < 0 ? 0 : 1);
        node = parent;
      } else if (node.nodeType == 1) {
        node = node.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node.nodeType == 1 && node.contentEditable == "false")
          return false;
        off = dir < 0 ? maxOffset(node) : 0;
      } else {
        return false;
      }
    }
  }
  __name(scanFor, "scanFor");
  function maxOffset(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  __name(maxOffset, "maxOffset");
  function flattenRect(rect, left) {
    let x2 = left ? rect.left : rect.right;
    return { left: x2, right: x2, top: rect.top, bottom: rect.bottom };
  }
  __name(flattenRect, "flattenRect");
  function windowRect(win) {
    let vp = win.visualViewport;
    if (vp)
      return {
        left: 0,
        right: vp.width,
        top: 0,
        bottom: vp.height
      };
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  __name(windowRect, "windowRect");
  function getScale(elt, rect) {
    let scaleX = rect.width / elt.offsetWidth;
    let scaleY = rect.height / elt.offsetHeight;
    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
      scaleX = 1;
    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
      scaleY = 1;
    return { scaleX, scaleY };
  }
  __name(getScale, "getScale");
  function scrollRectIntoView(dom, rect, side, x2, y2, xMargin, yMargin, ltr) {
    let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
    for (let cur2 = dom, stop = false; cur2 && !stop; ) {
      if (cur2.nodeType == 1) {
        let bounding, top2 = cur2 == doc2.body;
        let scaleX = 1, scaleY = 1;
        if (top2) {
          bounding = windowRect(win);
        } else {
          if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
            stop = true;
          if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
            cur2 = cur2.assignedSlot || cur2.parentNode;
            continue;
          }
          let rect2 = cur2.getBoundingClientRect();
          ({ scaleX, scaleY } = getScale(cur2, rect2));
          bounding = {
            left: rect2.left,
            right: rect2.left + cur2.clientWidth * scaleX,
            top: rect2.top,
            bottom: rect2.top + cur2.clientHeight * scaleY
          };
        }
        let moveX = 0, moveY = 0;
        if (y2 == "nearest") {
          if (rect.top < bounding.top) {
            moveY = rect.top - (bounding.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY)
              moveY = rect.bottom - bounding.bottom + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top)
              moveY = rect.top - (bounding.top + yMargin);
          }
        } else {
          let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
          let targetTop = y2 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y2 == "start" || y2 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x2 == "nearest") {
          if (rect.left < bounding.left) {
            moveX = rect.left - (bounding.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX)
              moveX = rect.right - bounding.right + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX)
              moveX = rect.left - (bounding.left + xMargin);
          }
        } else {
          let targetLeft = x2 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x2 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (top2) {
            win.scrollBy(moveX, moveY);
          } else {
            let movedX = 0, movedY = 0;
            if (moveY) {
              let start = cur2.scrollTop;
              cur2.scrollTop += moveY / scaleY;
              movedY = (cur2.scrollTop - start) * scaleY;
            }
            if (moveX) {
              let start = cur2.scrollLeft;
              cur2.scrollLeft += moveX / scaleX;
              movedX = (cur2.scrollLeft - start) * scaleX;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1)
              x2 = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1)
              y2 = "nearest";
          }
        }
        if (top2)
          break;
        if (rect.top < bounding.top || rect.bottom > bounding.bottom || rect.left < bounding.left || rect.right > bounding.right)
          rect = {
            left: Math.max(rect.left, bounding.left),
            right: Math.min(rect.right, bounding.right),
            top: Math.max(rect.top, bounding.top),
            bottom: Math.min(rect.bottom, bounding.bottom)
          };
        cur2 = cur2.assignedSlot || cur2.parentNode;
      } else if (cur2.nodeType == 11) {
        cur2 = cur2.host;
      } else {
        break;
      }
    }
  }
  __name(scrollRectIntoView, "scrollRectIntoView");
  function scrollableParents(dom) {
    let doc2 = dom.ownerDocument, x2, y2;
    for (let cur2 = dom.parentNode; cur2; ) {
      if (cur2 == doc2.body || x2 && y2) {
        break;
      } else if (cur2.nodeType == 1) {
        if (!y2 && cur2.scrollHeight > cur2.clientHeight)
          y2 = cur2;
        if (!x2 && cur2.scrollWidth > cur2.clientWidth)
          x2 = cur2;
        cur2 = cur2.assignedSlot || cur2.parentNode;
      } else if (cur2.nodeType == 11) {
        cur2 = cur2.host;
      } else {
        break;
      }
    }
    return { x: x2, y: y2 };
  }
  __name(scrollableParents, "scrollableParents");
  var DOMSelectionState = class {
    static {
      __name(this, "DOMSelectionState");
    }
    constructor() {
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
    setRange(range) {
      let { anchorNode, focusNode } = range;
      this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
    }
    set(anchorNode, anchorOffset, focusNode, focusOffset) {
      this.anchorNode = anchorNode;
      this.anchorOffset = anchorOffset;
      this.focusNode = focusNode;
      this.focusOffset = focusOffset;
    }
  };
  var preventScrollSupported = null;
  function focusPreventScroll(dom) {
    if (dom.setActive)
      return dom.setActive();
    if (preventScrollSupported)
      return dom.focus(preventScrollSupported);
    let stack = [];
    for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
      stack.push(cur2, cur2.scrollTop, cur2.scrollLeft);
      if (cur2 == cur2.ownerDocument)
        break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = { preventScroll: true };
        return true;
      }
    } : void 0);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (let i2 = 0; i2 < stack.length; ) {
        let elt = stack[i2++], top2 = stack[i2++], left = stack[i2++];
        if (elt.scrollTop != top2)
          elt.scrollTop = top2;
        if (elt.scrollLeft != left)
          elt.scrollLeft = left;
      }
    }
  }
  __name(focusPreventScroll, "focusPreventScroll");
  var scratchRange;
  function textRange(node, from, to = from) {
    let range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node, to);
    range.setStart(node, from);
    return range;
  }
  __name(textRange, "textRange");
  function dispatchKey(elt, name2, code, mods) {
    let options = { key: name2, code: name2, keyCode: code, which: code, cancelable: true };
    if (mods)
      ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
    let down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt.dispatchEvent(down);
    let up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  __name(dispatchKey, "dispatchKey");
  function getRoot(node) {
    while (node) {
      if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
        return node;
      node = node.assignedSlot || node.parentNode;
    }
    return null;
  }
  __name(getRoot, "getRoot");
  function clearAttributes(node) {
    while (node.attributes.length)
      node.removeAttributeNode(node.attributes[0]);
  }
  __name(clearAttributes, "clearAttributes");
  function atElementStart(doc2, selection) {
    let node = selection.focusNode, offset = selection.focusOffset;
    if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
      return false;
    offset = Math.min(offset, maxOffset(node));
    for (; ; ) {
      if (offset) {
        if (node.nodeType != 1)
          return false;
        let prev = node.childNodes[offset - 1];
        if (prev.contentEditable == "false")
          offset--;
        else {
          node = prev;
          offset = maxOffset(node);
        }
      } else if (node == doc2) {
        return true;
      } else {
        offset = domIndex(node);
        node = node.parentNode;
      }
    }
  }
  __name(atElementStart, "atElementStart");
  function isScrolledToBottom(elt) {
    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  __name(isScrolledToBottom, "isScrolledToBottom");
  function textNodeBefore(startNode, startOffset) {
    for (let node = startNode, offset = startOffset; ; ) {
      if (node.nodeType == 3 && offset > 0) {
        return { node, offset };
      } else if (node.nodeType == 1 && offset > 0) {
        if (node.contentEditable == "false")
          return null;
        node = node.childNodes[offset - 1];
        offset = maxOffset(node);
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node);
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  __name(textNodeBefore, "textNodeBefore");
  function textNodeAfter(startNode, startOffset) {
    for (let node = startNode, offset = startOffset; ; ) {
      if (node.nodeType == 3 && offset < node.nodeValue.length) {
        return { node, offset };
      } else if (node.nodeType == 1 && offset < node.childNodes.length) {
        if (node.contentEditable == "false")
          return null;
        node = node.childNodes[offset];
        offset = 0;
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node) + 1;
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  __name(textNodeAfter, "textNodeAfter");
  var DOMPos = class _DOMPos {
    static {
      __name(this, "DOMPos");
    }
    constructor(node, offset, precise = true) {
      this.node = node;
      this.offset = offset;
      this.precise = precise;
    }
    static before(dom, precise) {
      return new _DOMPos(dom.parentNode, domIndex(dom), precise);
    }
    static after(dom, precise) {
      return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  };
  var noChildren = [];
  var ContentView = class _ContentView {
    static {
      __name(this, "ContentView");
    }
    constructor() {
      this.parent = null;
      this.dom = null;
      this.flags = 2;
    }
    get overrideDOMText() {
      return null;
    }
    get posAtStart() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
    get posAtEnd() {
      return this.posAtStart + this.length;
    }
    posBefore(view2) {
      let pos = this.posAtStart;
      for (let child of this.children) {
        if (child == view2)
          return pos;
        pos += child.length + child.breakAfter;
      }
      throw new RangeError("Invalid child in posBefore");
    }
    posAfter(view2) {
      return this.posBefore(view2) + view2.length;
    }
    sync(view2, track) {
      if (this.flags & 2) {
        let parent = this.dom;
        let prev = null, next;
        for (let child of this.children) {
          if (child.flags & 7) {
            if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
              let contentView = _ContentView.get(next);
              if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                child.reuseDOM(next);
            }
            child.sync(view2, track);
            child.flags &= ~7;
          }
          next = prev ? prev.nextSibling : parent.firstChild;
          if (track && !track.written && track.node == parent && next != child.dom)
            track.written = true;
          if (child.dom.parentNode == parent) {
            while (next && next != child.dom)
              next = rm$1(next);
          } else {
            parent.insertBefore(child.dom, next);
          }
          prev = child.dom;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (next && track && track.node == parent)
          track.written = true;
        while (next)
          next = rm$1(next);
      } else if (this.flags & 1) {
        for (let child of this.children)
          if (child.flags & 7) {
            child.sync(view2, track);
            child.flags &= ~7;
          }
      }
    }
    reuseDOM(_dom) {
    }
    localPosFromDOM(node, offset) {
      let after;
      if (node == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (; ; ) {
          let parent = node.parentNode;
          if (parent == this.dom)
            break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node == parent.firstChild)
              bias = -1;
            else
              bias = 1;
          }
          node = parent;
        }
        if (bias < 0)
          after = node;
        else
          after = node.nextSibling;
      }
      if (after == this.dom.firstChild)
        return 0;
      while (after && !_ContentView.get(after))
        after = after.nextSibling;
      if (!after)
        return this.length;
      for (let i2 = 0, pos = 0; ; i2++) {
        let child = this.children[i2];
        if (child.dom == after)
          return pos;
        pos += child.length + child.breakAfter;
      }
    }
    domBoundsAround(from, to, offset = 0) {
      let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
      for (let i2 = 0, pos = offset, prevEnd = offset; i2 < this.children.length; i2++) {
        let child = this.children[i2], end = pos + child.length;
        if (pos < from && end > to)
          return child.domBoundsAround(from, to, pos);
        if (end >= from && fromI == -1) {
          fromI = i2;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i2;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
    markDirty(andParent = false) {
      this.flags |= 2;
      this.markParentsDirty(andParent);
    }
    markParentsDirty(childList) {
      for (let parent = this.parent; parent; parent = parent.parent) {
        if (childList)
          parent.flags |= 2;
        if (parent.flags & 1)
          return;
        parent.flags |= 1;
        childList = false;
      }
    }
    setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.flags & 7)
          this.markParentsDirty(true);
      }
    }
    setDOM(dom) {
      if (this.dom == dom)
        return;
      if (this.dom)
        this.dom.cmView = null;
      this.dom = dom;
      dom.cmView = this;
    }
    get rootView() {
      for (let v2 = this; ; ) {
        let parent = v2.parent;
        if (!parent)
          return v2;
        v2 = parent;
      }
    }
    replaceChildren(from, to, children = noChildren) {
      this.markDirty();
      for (let i2 = from; i2 < to; i2++) {
        let child = this.children[i2];
        if (child.parent == this && children.indexOf(child) < 0)
          child.destroy();
      }
      if (children.length < 250)
        this.children.splice(from, to - from, ...children);
      else
        this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
      for (let i2 = 0; i2 < children.length; i2++)
        children[i2].setParent(this);
    }
    ignoreMutation(_rec) {
      return false;
    }
    ignoreEvent(_event) {
      return false;
    }
    childCursor(pos = this.length) {
      return new ChildCursor(this.children, pos, this.children.length);
    }
    childPos(pos, bias = 1) {
      return this.childCursor().findPos(pos, bias);
    }
    toString() {
      let name2 = this.constructor.name.replace("View", "");
      return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
    static get(node) {
      return node.cmView;
    }
    get isEditable() {
      return true;
    }
    get isWidget() {
      return false;
    }
    get isHidden() {
      return false;
    }
    merge(from, to, source, hasStart, openStart, openEnd) {
      return false;
    }
    become(other) {
      return false;
    }
    canReuseDOM(other) {
      return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
    }
    // When this is a zero-length view with a side, this should return a
    // number <= 0 to indicate it is before its position, or a
    // number > 0 when after its position.
    getSide() {
      return 0;
    }
    destroy() {
      for (let child of this.children)
        if (child.parent == this)
          child.destroy();
      this.parent = null;
    }
  };
  ContentView.prototype.breakAfter = 0;
  function rm$1(dom) {
    let next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  __name(rm$1, "rm$1");
  var ChildCursor = class {
    static {
      __name(this, "ChildCursor");
    }
    constructor(children, pos, i2) {
      this.children = children;
      this.pos = pos;
      this.i = i2;
      this.off = 0;
    }
    findPos(pos, bias = 1) {
      for (; ; ) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        let next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  };
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
    let { children } = parent;
    let before = children.length ? children[fromI] : null;
    let last = insert2.length ? insert2[insert2.length - 1] : null;
    let breakAtEnd = last ? last.breakAfter : breakAtStart;
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
      return;
    if (toI < children.length) {
      let after = children[toI];
      if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert2[insert2.length - 1] = after;
        } else {
          if (toOff || after.children.length && !after.children[0].length)
            after.merge(0, toOff, null, false, 0, openEnd);
          insert2.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        if (last)
          last.breakAfter = 1;
        else
          breakAtStart = 1;
      }
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
          before.breakAfter = insert2.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    while (fromI < toI && insert2.length) {
      if (children[toI - 1].become(insert2[insert2.length - 1])) {
        toI--;
        insert2.pop();
        openEnd = insert2.length ? 0 : openStart;
      } else if (children[fromI].become(insert2[0])) {
        fromI++;
        insert2.shift();
        openStart = insert2.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
      fromI--;
    if (fromI < toI || insert2.length)
      parent.replaceChildren(fromI, toI, insert2);
  }
  __name(replaceRange, "replaceRange");
  function mergeChildrenInto(parent, from, to, insert2, openStart, openEnd) {
    let cur2 = parent.childCursor();
    let { i: toI, off: toOff } = cur2.findPos(to, 1);
    let { i: fromI, off: fromOff } = cur2.findPos(from, -1);
    let dLen = from - to;
    for (let view2 of insert2)
      dLen += view2.length;
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
  }
  __name(mergeChildrenInto, "mergeChildrenInto");
  var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  var ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
  var ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
  var ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  var ie2 = !!(ie_upto10 || ie_11up || ie_edge);
  var gecko = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
  var chrome = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
  var webkit = "webkitFontSmoothing" in doc.documentElement.style;
  var safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
  var ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
    mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
    windows: /* @__PURE__ */ /Win/.test(nav.platform),
    linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
    ie: ie2,
    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
    gecko,
    gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    chrome: !!chrome,
    chrome_version: chrome ? +chrome[1] : 0,
    ios,
    android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
    webkit,
    safari,
    webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };
  var MaxJoinLen = 256;
  var TextView = class _TextView extends ContentView {
    static {
      __name(this, "TextView");
    }
    constructor(text) {
      super();
      this.text = text;
    }
    get length() {
      return this.text.length;
    }
    createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
    sync(view2, track) {
      if (!this.dom)
        this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track && track.node == this.dom)
          track.written = true;
        this.dom.nodeValue = this.text;
      }
    }
    reuseDOM(dom) {
      if (dom.nodeType == 3)
        this.createDOM(dom);
    }
    merge(from, to, source) {
      if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to - from) + source.length > MaxJoinLen || source.flags & 8))
        return false;
      this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
    split(from) {
      let result = new _TextView(this.text.slice(from));
      this.text = this.text.slice(0, from);
      this.markDirty();
      result.flags |= this.flags & 8;
      return result;
    }
    localPosFromDOM(node, offset) {
      return node == this.dom ? offset : offset ? this.text.length : 0;
    }
    domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
    domBoundsAround(_from, _to, offset) {
      return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
    }
    coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  };
  var MarkView = class _MarkView extends ContentView {
    static {
      __name(this, "MarkView");
    }
    constructor(mark, children = [], length = 0) {
      super();
      this.mark = mark;
      this.children = children;
      this.length = length;
      for (let ch of children)
        ch.setParent(this);
    }
    setAttrs(dom) {
      clearAttributes(dom);
      if (this.mark.class)
        dom.className = this.mark.class;
      if (this.mark.attrs)
        for (let name2 in this.mark.attrs)
          dom.setAttribute(name2, this.mark.attrs[name2]);
      return dom;
    }
    canReuseDOM(other) {
      return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
    }
    reuseDOM(node) {
      if (node.nodeName == this.mark.tagName.toUpperCase()) {
        this.setDOM(node);
        this.flags |= 4 | 2;
      }
    }
    sync(view2, track) {
      if (!this.dom)
        this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
      else if (this.flags & 4)
        this.setAttrs(this.dom);
      super.sync(view2, track);
    }
    merge(from, to, source, _hasStart, openStart, openEnd) {
      if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
    split(from) {
      let result = [], off = 0, detachFrom = -1, i2 = 0;
      for (let elt of this.children) {
        let end = off + elt.length;
        if (end > from)
          result.push(off < from ? elt.split(from - off) : elt);
        if (detachFrom < 0 && off >= from)
          detachFrom = i2;
        off = end;
        i2++;
      }
      let length = this.length - from;
      this.length = from;
      if (detachFrom > -1) {
        this.children.length = detachFrom;
        this.markDirty();
      }
      return new _MarkView(this.mark, result, length);
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  };
  function textCoords(text, pos, side) {
    let length = text.nodeValue.length;
    if (pos > length)
      pos = length;
    let from = pos, to = pos, flatten2 = 0;
    if (pos == 0 && side < 0 || pos == length && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        if (pos) {
          from--;
          flatten2 = 1;
        } else if (to < length) {
          to++;
          flatten2 = -1;
        }
      }
    } else {
      if (side < 0)
        from--;
      else if (to < length)
        to++;
    }
    let rects = textRange(text, from, to).getClientRects();
    if (!rects.length)
      return null;
    let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten2 && rect.width == 0)
      rect = Array.prototype.find.call(rects, (r2) => r2.width) || rect;
    return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
  }
  __name(textCoords, "textCoords");
  var WidgetView = class _WidgetView extends ContentView {
    static {
      __name(this, "WidgetView");
    }
    static create(widget, length, side) {
      return new _WidgetView(widget, length, side);
    }
    constructor(widget, length, side) {
      super();
      this.widget = widget;
      this.length = length;
      this.side = side;
      this.prevWidget = null;
    }
    split(from) {
      let result = _WidgetView.create(this.widget, this.length - from, this.side);
      this.length -= from;
      return result;
    }
    sync(view2) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view2)) {
        if (this.dom && this.prevWidget)
          this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view2));
        if (!this.widget.editable)
          this.dom.contentEditable = "false";
      }
    }
    getSide() {
      return this.side;
    }
    merge(from, to, source, hasStart, openStart, openEnd) {
      if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    become(other) {
      if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
        if (!this.widget.compare(other.widget))
          this.markDirty(true);
        if (this.dom && !this.prevWidget)
          this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get overrideDOMText() {
      if (this.length == 0)
        return Text.empty;
      let top2 = this;
      while (top2.parent)
        top2 = top2.parent;
      let { view: view2 } = top2, text = view2 && view2.state.doc, start = this.posAtStart;
      return text ? text.slice(start, start + this.length) : Text.empty;
    }
    domAtPos(pos) {
      return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos, side) {
      let custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom)
        return custom;
      let rects = this.dom.getClientRects(), rect = null;
      if (!rects.length)
        return null;
      let fromBack = this.side ? this.side < 0 : pos > 0;
      for (let i2 = fromBack ? rects.length - 1 : 0; ; i2 += fromBack ? -1 : 1) {
        rect = rects[i2];
        if (pos > 0 ? i2 == 0 : i2 == rects.length - 1 || rect.top < rect.bottom)
          break;
      }
      return flattenRect(rect, !fromBack);
    }
    get isEditable() {
      return false;
    }
    get isWidget() {
      return true;
    }
    get isHidden() {
      return this.widget.isHidden;
    }
    destroy() {
      super.destroy();
      if (this.dom)
        this.widget.destroy(this.dom);
    }
  };
  var WidgetBufferView = class _WidgetBufferView extends ContentView {
    static {
      __name(this, "WidgetBufferView");
    }
    constructor(side) {
      super();
      this.side = side;
    }
    get length() {
      return 0;
    }
    merge() {
      return false;
    }
    become(other) {
      return other instanceof _WidgetBufferView && other.side == this.side;
    }
    split() {
      return new _WidgetBufferView(this.side);
    }
    sync() {
      if (!this.dom) {
        let dom = document.createElement("img");
        dom.className = "cm-widgetBuffer";
        dom.setAttribute("aria-hidden", "true");
        this.setDOM(dom);
      }
    }
    getSide() {
      return this.side;
    }
    domAtPos(pos) {
      return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
    }
    localPosFromDOM() {
      return 0;
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos) {
      return this.dom.getBoundingClientRect();
    }
    get overrideDOMText() {
      return Text.empty;
    }
    get isHidden() {
      return true;
    }
  };
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
    let dom = parent.dom, { children } = parent, i2 = 0;
    for (let off = 0; i2 < children.length; i2++) {
      let child = children[i2], end = off + child.length;
      if (end == off && child.getSide() <= 0)
        continue;
      if (pos > off && pos < end && child.dom.parentNode == dom)
        return child.domAtPos(pos - off);
      if (pos <= off)
        break;
      off = end;
    }
    for (let j2 = i2; j2 > 0; j2--) {
      let prev = children[j2 - 1];
      if (prev.dom.parentNode == dom)
        return prev.domAtPos(prev.length);
    }
    for (let j2 = i2; j2 < children.length; j2++) {
      let next = children[j2];
      if (next.dom.parentNode == dom)
        return next.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  __name(inlineDOMAtPos, "inlineDOMAtPos");
  function joinInlineInto(parent, view2, open) {
    let last, { children } = parent;
    if (open > 0 && view2 instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view2.mark)) {
      joinInlineInto(last, view2.children[0], open - 1);
    } else {
      children.push(view2);
      view2.setParent(parent);
    }
    parent.length += view2.length;
  }
  __name(joinInlineInto, "joinInlineInto");
  function coordsInChildren(view2, pos, side) {
    let before = null, beforePos = -1, after = null, afterPos = -1;
    function scan(view3, pos2) {
      for (let i2 = 0, off = 0; i2 < view3.children.length && off <= pos2; i2++) {
        let child = view3.children[i2], end = off + child.length;
        if (end >= pos2) {
          if (child.children.length) {
            scan(child, pos2 - off);
          } else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) && (end > pos2 || off == end && child.getSide() > 0)) {
            after = child;
            afterPos = pos2 - off;
          } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
            before = child;
            beforePos = pos2 - off;
          }
        }
        off = end;
      }
    }
    __name(scan, "scan");
    scan(view2, pos);
    let target = (side < 0 ? before : after) || before || after;
    if (target)
      return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view2);
  }
  __name(coordsInChildren, "coordsInChildren");
  function fallbackRect(view2) {
    let last = view2.dom.lastChild;
    if (!last)
      return view2.dom.getBoundingClientRect();
    let rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  __name(fallbackRect, "fallbackRect");
  function onSameLine(a2, b2) {
    let posA = a2.coordsAt(0, 1), posB = b2.coordsAt(0, 1);
    return posA && posB && posB.top < posA.bottom;
  }
  __name(onSameLine, "onSameLine");
  function combineAttrs(source, target) {
    for (let name2 in source) {
      if (name2 == "class" && target.class)
        target.class += " " + source.class;
      else if (name2 == "style" && target.style)
        target.style += ";" + source.style;
      else
        target[name2] = source[name2];
    }
    return target;
  }
  __name(combineAttrs, "combineAttrs");
  var noAttrs = /* @__PURE__ */ Object.create(null);
  function attrsEq(a2, b2, ignore) {
    if (a2 == b2)
      return true;
    if (!a2)
      a2 = noAttrs;
    if (!b2)
      b2 = noAttrs;
    let keysA = Object.keys(a2), keysB = Object.keys(b2);
    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
      return false;
    for (let key of keysA) {
      if (key != ignore && (keysB.indexOf(key) == -1 || a2[key] !== b2[key]))
        return false;
    }
    return true;
  }
  __name(attrsEq, "attrsEq");
  function updateAttrs(dom, prev, attrs) {
    let changed = false;
    if (prev) {
      for (let name2 in prev)
        if (!(attrs && name2 in attrs)) {
          changed = true;
          if (name2 == "style")
            dom.style.cssText = "";
          else
            dom.removeAttribute(name2);
        }
    }
    if (attrs) {
      for (let name2 in attrs)
        if (!(prev && prev[name2] == attrs[name2])) {
          changed = true;
          if (name2 == "style")
            dom.style.cssText = attrs[name2];
          else
            dom.setAttribute(name2, attrs[name2]);
        }
    }
    return changed;
  }
  __name(updateAttrs, "updateAttrs");
  function getAttrs(dom) {
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let i2 = 0; i2 < dom.attributes.length; i2++) {
      let attr = dom.attributes[i2];
      attrs[attr.name] = attr.value;
    }
    return attrs;
  }
  __name(getAttrs, "getAttrs");
  var WidgetType = class {
    static {
      __name(this, "WidgetType");
    }
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    eq(widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
    updateDOM(dom, view2) {
      return false;
    }
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
    get estimatedHeight() {
      return -1;
    }
    /**
    For inline widgets that are displayed inline (as opposed to
    `inline-block`) and introduce line breaks (through `<br>` tags
    or textual newlines), this must indicate the amount of line
    breaks they introduce. Defaults to 0.
    */
    get lineBreaks() {
      return 0;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
    ignoreEvent(event) {
      return true;
    }
    /**
    Override the way screen coordinates for positions at/in the
    widget are found. `pos` will be the offset into the widget, and
    `side` the side of the position that is being queried—less than
    zero for before, greater than zero for after, and zero for
    directly at that position.
    */
    coordsAt(dom, pos, side) {
      return null;
    }
    /**
    @internal
    */
    get isHidden() {
      return false;
    }
    /**
    @internal
    */
    get editable() {
      return false;
    }
    /**
    This is called when the an instance of the widget is removed
    from the editor view.
    */
    destroy(dom) {
    }
  };
  var BlockType = /* @__PURE__ */ function(BlockType2) {
    BlockType2[BlockType2["Text"] = 0] = "Text";
    BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
    BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
    BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
    return BlockType2;
  }(BlockType || (BlockType = {}));
  var Decoration = class extends RangeValue {
    static {
      __name(this, "Decoration");
    }
    constructor(startSide, endSide, widget, spec) {
      super();
      this.startSide = startSide;
      this.endSide = endSide;
      this.widget = widget;
      this.spec = spec;
    }
    /**
    @internal
    */
    get heightRelevant() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
    the higher-precedence decorations creating the inner DOM nodes.
    Such elements are split on line boundaries and on the boundaries
    of lower-precedence decorations.
    */
    static mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which displays a DOM element at the
    given position.
    */
    static widget(spec) {
      let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
      side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
      return new PointDecoration(spec, side, side, block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
    static replace(spec) {
      let block = !!spec.block, startSide, endSide;
      if (spec.isBlockGap) {
        startSide = -5e8;
        endSide = 4e8;
      } else {
        let { start, end } = getInclusive(spec, block);
        startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
        endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
      }
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
    static line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
    static set(of, sort = false) {
      return RangeSet.of(of, sort);
    }
    /**
    @internal
    */
    hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  };
  Decoration.none = RangeSet.empty;
  var MarkDecoration = class _MarkDecoration extends Decoration {
    static {
      __name(this, "MarkDecoration");
    }
    constructor(spec) {
      let { start, end } = getInclusive(spec);
      super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
      this.tagName = spec.tagName || "span";
      this.class = spec.class || "";
      this.attrs = spec.attributes || null;
    }
    eq(other) {
      var _a2, _b;
      return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && attrsEq(this.attrs, other.attrs, "class");
    }
    range(from, to = from) {
      if (from >= to)
        throw new RangeError("Mark decorations may not be empty");
      return super.range(from, to);
    }
  };
  MarkDecoration.prototype.point = false;
  var LineDecoration = class _LineDecoration extends Decoration {
    static {
      __name(this, "LineDecoration");
    }
    constructor(spec) {
      super(-2e8, -2e8, null, spec);
    }
    eq(other) {
      return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
    }
    range(from, to = from) {
      if (to != from)
        throw new RangeError("Line decoration ranges must be zero-length");
      return super.range(from, to);
    }
  };
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  var PointDecoration = class _PointDecoration extends Decoration {
    static {
      __name(this, "PointDecoration");
    }
    constructor(spec, startSide, endSide, block, widget, isReplace) {
      super(startSide, endSide, widget, spec);
      this.block = block;
      this.isReplace = isReplace;
      this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
    }
    // Only relevant when this.block == true
    get type() {
      return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
    get heightRelevant() {
      return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
    }
    eq(other) {
      return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
    range(from, to = from) {
      if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
        throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from)
        throw new RangeError("Widget decorations can only have zero-length ranges");
      return super.range(from, to);
    }
  };
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
    let { inclusiveStart: start, inclusiveEnd: end } = spec;
    if (start == null)
      start = spec.inclusive;
    if (end == null)
      end = spec.inclusive;
    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  __name(getInclusive, "getInclusive");
  function widgetsEq(a2, b2) {
    return a2 == b2 || !!(a2 && b2 && a2.compare(b2));
  }
  __name(widgetsEq, "widgetsEq");
  function addRange(from, to, ranges, margin = 0) {
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from)
      ranges[last] = Math.max(ranges[last], to);
    else
      ranges.push(from, to);
  }
  __name(addRange, "addRange");
  var LineView = class _LineView extends ContentView {
    static {
      __name(this, "LineView");
    }
    constructor() {
      super(...arguments);
      this.children = [];
      this.length = 0;
      this.prevAttrs = void 0;
      this.attrs = null;
      this.breakAfter = 0;
    }
    // Consumes source
    merge(from, to, source, hasStart, openStart, openEnd) {
      if (source) {
        if (!(source instanceof _LineView))
          return false;
        if (!this.dom)
          source.transferDOM(this);
      }
      if (hasStart)
        this.setDeco(source ? source.attrs : null);
      mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
      return true;
    }
    split(at2) {
      let end = new _LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0)
        return end;
      let { i: i2, off } = this.childPos(at2);
      if (off) {
        end.append(this.children[i2].split(off), 0);
        this.children[i2].merge(off, this.children[i2].length, null, false, 0, 0);
        i2++;
      }
      for (let j2 = i2; j2 < this.children.length; j2++)
        end.append(this.children[j2], 0);
      while (i2 > 0 && this.children[i2 - 1].length == 0)
        this.children[--i2].destroy();
      this.children.length = i2;
      this.markDirty();
      this.length = at2;
      return end;
    }
    transferDOM(other) {
      if (!this.dom)
        return;
      this.markDirty();
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
      this.prevAttrs = void 0;
      this.dom = null;
    }
    setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
    append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
    addLineDeco(deco) {
      let attrs = deco.spec.attributes, cls = deco.spec.class;
      if (attrs)
        this.attrs = combineAttrs(attrs, this.attrs || {});
      if (cls)
        this.attrs = combineAttrs({ class: cls }, this.attrs || {});
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    reuseDOM(node) {
      if (node.nodeName == "DIV") {
        this.setDOM(node);
        this.flags |= 4 | 2;
      }
    }
    sync(view2, track) {
      var _a2;
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : void 0;
      } else if (this.flags & 4) {
        clearAttributes(this.dom);
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : void 0;
      }
      if (this.prevAttrs !== void 0) {
        updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = void 0;
      }
      super.sync(view2, track);
      let last = this.dom.lastChild;
      while (last && ContentView.get(last) instanceof MarkView)
        last = last.lastChild;
      if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
        let hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
    measureTextSize() {
      if (this.children.length == 0 || this.length > 20)
        return null;
      let totalWidth = 0, textHeight;
      for (let child of this.children) {
        if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
          return null;
        let rects = clientRectsFor(child.dom);
        if (rects.length != 1)
          return null;
        totalWidth += rects[0].width;
        textHeight = rects[0].height;
      }
      return !totalWidth ? null : {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length,
        textHeight
      };
    }
    coordsAt(pos, side) {
      let rect = coordsInChildren(this, pos, side);
      if (!this.children.length && rect && this.parent) {
        let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
        if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
          let dist2 = (height - heightOracle.textHeight) / 2;
          return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
        }
      }
      return rect;
    }
    become(other) {
      return other instanceof _LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
    }
    covers() {
      return true;
    }
    static find(docView, pos) {
      for (let i2 = 0, off = 0; i2 < docView.children.length; i2++) {
        let block = docView.children[i2], end = off + block.length;
        if (end >= pos) {
          if (block instanceof _LineView)
            return block;
          if (end > pos)
            break;
        }
        off = end + block.breakAfter;
      }
      return null;
    }
  };
  var BlockWidgetView = class _BlockWidgetView extends ContentView {
    static {
      __name(this, "BlockWidgetView");
    }
    constructor(widget, length, deco) {
      super();
      this.widget = widget;
      this.length = length;
      this.deco = deco;
      this.breakAfter = 0;
      this.prevWidget = null;
    }
    merge(from, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    split(at2) {
      let len = this.length - at2;
      this.length = at2;
      let end = new _BlockWidgetView(this.widget, len, this.deco);
      end.breakAfter = this.breakAfter;
      return end;
    }
    get children() {
      return noChildren;
    }
    sync(view2) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view2)) {
        if (this.dom && this.prevWidget)
          this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view2));
        if (!this.widget.editable)
          this.dom.contentEditable = "false";
      }
    }
    get overrideDOMText() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
    }
    domBoundsAround() {
      return null;
    }
    become(other) {
      if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.compare(this.widget))
          this.markDirty(true);
        if (this.dom && !this.prevWidget)
          this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        this.deco = other.deco;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get isEditable() {
      return false;
    }
    get isWidget() {
      return true;
    }
    coordsAt(pos, side) {
      let custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom)
        return custom;
      if (this.widget instanceof BlockGapWidget)
        return null;
      return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
    }
    destroy() {
      super.destroy();
      if (this.dom)
        this.widget.destroy(this.dom);
    }
    covers(side) {
      let { startSide, endSide } = this.deco;
      return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
    }
  };
  var BlockGapWidget = class extends WidgetType {
    static {
      __name(this, "BlockGapWidget");
    }
    constructor(height) {
      super();
      this.height = height;
    }
    toDOM() {
      let elt = document.createElement("div");
      elt.className = "cm-gap";
      this.updateDOM(elt);
      return elt;
    }
    eq(other) {
      return other.height == this.height;
    }
    updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
    get editable() {
      return true;
    }
    get estimatedHeight() {
      return this.height;
    }
    ignoreEvent() {
      return false;
    }
  };
  var ContentBuilder = class _ContentBuilder {
    static {
      __name(this, "ContentBuilder");
    }
    constructor(doc2, pos, end, disallowBlockEffectsFor) {
      this.doc = doc2;
      this.pos = pos;
      this.end = end;
      this.disallowBlockEffectsFor = disallowBlockEffectsFor;
      this.content = [];
      this.curLine = null;
      this.breakAtStart = 0;
      this.pendingBuffer = 0;
      this.bufferMarks = [];
      this.atCursorPos = true;
      this.openStart = -1;
      this.openEnd = -1;
      this.text = "";
      this.textOff = 0;
      this.cursor = doc2.iter();
      this.skip = pos;
    }
    posCovered() {
      if (this.content.length == 0)
        return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      let last = this.content[this.content.length - 1];
      return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
    }
    getLine() {
      if (!this.curLine) {
        this.content.push(this.curLine = new LineView());
        this.atCursorPos = true;
      }
      return this.curLine;
    }
    flushBuffer(active = this.bufferMarks) {
      if (this.pendingBuffer) {
        this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
        this.pendingBuffer = 0;
      }
    }
    addBlockWidget(view2) {
      this.flushBuffer();
      this.curLine = null;
      this.content.push(view2);
    }
    finish(openEnd) {
      if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
        this.flushBuffer();
      else
        this.pendingBuffer = 0;
      if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
        this.getLine();
    }
    buildText(length, active, openStart) {
      while (length > 0) {
        if (this.textOff == this.text.length) {
          let { value, lineBreak, done } = this.cursor.next(this.skip);
          this.skip = 0;
          if (done)
            throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered())
              this.getLine();
            if (this.content.length)
              this.content[this.content.length - 1].breakAfter = 1;
            else
              this.breakAtStart = 1;
            this.flushBuffer();
            this.curLine = null;
            this.atCursorPos = true;
            length--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        let take = Math.min(
          this.text.length - this.textOff,
          length,
          512
          /* T.Chunk */
        );
        this.flushBuffer(active.slice(active.length - openStart));
        this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.atCursorPos = true;
        this.textOff += take;
        length -= take;
        openStart = 0;
      }
    }
    span(from, to, active, openStart) {
      this.buildText(to - from, active, openStart);
      this.pos = to;
      if (this.openStart < 0)
        this.openStart = openStart;
    }
    point(from, to, deco, active, openStart, index) {
      if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
        if (deco.block)
          throw new RangeError("Block decorations may not be specified via plugins");
        if (to > this.doc.lineAt(this.pos).to)
          throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
      }
      let len = to - from;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          if (deco.startSide > 0 && !this.posCovered())
            this.getLine();
          this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
        } else {
          let view2 = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
          let cursorBefore = this.atCursorPos && !view2.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
          let cursorAfter = !view2.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
          let line = this.getLine();
          if (this.pendingBuffer == 2 && !cursorBefore && !view2.isEditable)
            this.pendingBuffer = 0;
          this.flushBuffer(active);
          if (cursorBefore) {
            line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
            openStart = active.length + Math.max(0, openStart - active.length);
          }
          line.append(wrapMarks(view2, active), openStart);
          this.atCursorPos = cursorAfter;
          this.pendingBuffer = !cursorAfter ? 0 : from < to || openStart > active.length ? 1 : 2;
          if (this.pendingBuffer)
            this.bufferMarks = active.slice();
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0)
        this.openStart = openStart;
    }
    static build(text, from, to, decorations2, dynamicDecorationMap) {
      let builder = new _ContentBuilder(text, from, to, dynamicDecorationMap);
      builder.openEnd = RangeSet.spans(decorations2, from, to, builder);
      if (builder.openStart < 0)
        builder.openStart = builder.openEnd;
      builder.finish(builder.openEnd);
      return builder;
    }
  };
  function wrapMarks(view2, active) {
    for (let mark of active)
      view2 = new MarkView(mark, [view2], view2.length);
    return view2;
  }
  __name(wrapMarks, "wrapMarks");
  var NullWidget = class extends WidgetType {
    static {
      __name(this, "NullWidget");
    }
    constructor(tag) {
      super();
      this.tag = tag;
    }
    eq(other) {
      return other.tag == this.tag;
    }
    toDOM() {
      return document.createElement(this.tag);
    }
    updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
    get isHidden() {
      return true;
    }
  };
  NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
  NullWidget.block = /* @__PURE__ */ new NullWidget("div");
  var Direction = /* @__PURE__ */ function(Direction2) {
    Direction2[Direction2["LTR"] = 0] = "LTR";
    Direction2[Direction2["RTL"] = 1] = "RTL";
    return Direction2;
  }(Direction || (Direction = {}));
  var LTR = Direction.LTR;
  var RTL = Direction.RTL;
  function dec(str) {
    let result = [];
    for (let i2 = 0; i2 < str.length; i2++)
      result.push(1 << +str[i2]);
    return result;
  }
  __name(dec, "dec");
  var LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  var ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  var Brackets = /* @__PURE__ */ Object.create(null);
  var BracketStack = [];
  for (let p2 of ["()", "[]", "{}"]) {
    let l2 = /* @__PURE__ */ p2.charCodeAt(0), r2 = /* @__PURE__ */ p2.charCodeAt(1);
    Brackets[l2] = r2;
    Brackets[r2] = -l2;
  }
  function charType(ch) {
    return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8204 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : 1;
  }
  __name(charType, "charType");
  var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  var BidiSpan = class {
    static {
      __name(this, "BidiSpan");
    }
    /**
    The direction of this span.
    */
    get dir() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
    constructor(from, to, level) {
      this.from = from;
      this.to = to;
      this.level = level;
    }
    /**
    @internal
    */
    side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
    forward(forward, dir) {
      return forward == (this.dir == dir);
    }
    /**
    @internal
    */
    static find(order, index, level, assoc) {
      let maybe = -1;
      for (let i2 = 0; i2 < order.length; i2++) {
        let span = order[i2];
        if (span.from <= index && span.to >= index) {
          if (span.level == level)
            return i2;
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
            maybe = i2;
        }
      }
      if (maybe < 0)
        throw new RangeError("Index out of range");
      return maybe;
    }
  };
  function isolatesEq(a2, b2) {
    if (a2.length != b2.length)
      return false;
    for (let i2 = 0; i2 < a2.length; i2++) {
      let iA = a2[i2], iB = b2[i2];
      if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
        return false;
    }
    return true;
  }
  __name(isolatesEq, "isolatesEq");
  var types = [];
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
    for (let iI = 0; iI <= isolates.length; iI++) {
      let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      let prevType = iI ? 256 : outerType;
      for (let i2 = from, prev = prevType, prevStrong = prevType; i2 < to; i2++) {
        let type = charType(line.charCodeAt(i2));
        if (type == 512)
          type = prev;
        else if (type == 8 && prevStrong == 4)
          type = 16;
        types[i2] = type == 4 ? 2 : type;
        if (type & 7)
          prevStrong = type;
        prev = type;
      }
      for (let i2 = from, prev = prevType, prevStrong = prevType; i2 < to; i2++) {
        let type = types[i2];
        if (type == 128) {
          if (i2 < to - 1 && prev == types[i2 + 1] && prev & 24)
            type = types[i2] = prev;
          else
            types[i2] = 256;
        } else if (type == 64) {
          let end = i2 + 1;
          while (end < to && types[end] == 64)
            end++;
          let replace2 = i2 && prev == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
          for (let j2 = i2; j2 < end; j2++)
            types[j2] = replace2;
          i2 = end - 1;
        } else if (type == 8 && prevStrong == 1) {
          types[i2] = 1;
        }
        prev = type;
        if (type & 7)
          prevStrong = type;
      }
    }
  }
  __name(computeCharTypes, "computeCharTypes");
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
    let oppositeType = outerType == 1 ? 2 : 1;
    for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
      let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      for (let i2 = from, ch, br, type; i2 < to; i2++) {
        if (br = Brackets[ch = line.charCodeAt(i2)]) {
          if (br < 0) {
            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
              if (BracketStack[sJ + 1] == -br) {
                let flags = BracketStack[sJ + 2];
                let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
                if (type2)
                  types[i2] = types[BracketStack[sJ]] = type2;
                sI = sJ;
                break;
              }
            }
          } else if (BracketStack.length == 189) {
            break;
          } else {
            BracketStack[sI++] = i2;
            BracketStack[sI++] = ch;
            BracketStack[sI++] = context;
          }
        } else if ((type = types[i2]) == 2 || type == 1) {
          let embed = type == outerType;
          context = embed ? 0 : 1;
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            let cur2 = BracketStack[sJ + 2];
            if (cur2 & 2)
              break;
            if (embed) {
              BracketStack[sJ + 2] |= 2;
            } else {
              if (cur2 & 4)
                break;
              BracketStack[sJ + 2] |= 4;
            }
          }
        }
      }
    }
  }
  __name(processBracketPairs, "processBracketPairs");
  function processNeutrals(rFrom, rTo, isolates, outerType) {
    for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
      let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      for (let i2 = from; i2 < to; ) {
        let type = types[i2];
        if (type == 256) {
          let end = i2 + 1;
          for (; ; ) {
            if (end == to) {
              if (iI == isolates.length)
                break;
              end = isolates[iI++].to;
              to = iI < isolates.length ? isolates[iI].from : rTo;
            } else if (types[end] == 256) {
              end++;
            } else {
              break;
            }
          }
          let beforeL = prev == 1;
          let afterL = (end < rTo ? types[end] : outerType) == 1;
          let replace2 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
          for (let j2 = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j2 > i2; ) {
            if (j2 == fromJ) {
              j2 = isolates[--jI].from;
              fromJ = jI ? isolates[jI - 1].to : rFrom;
            }
            types[--j2] = replace2;
          }
          i2 = end;
        } else {
          prev = type;
          i2++;
        }
      }
    }
  }
  __name(processNeutrals, "processNeutrals");
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
    let ourType = level % 2 ? 2 : 1;
    if (level % 2 == baseLevel % 2) {
      for (let iCh = from, iI = 0; iCh < to; ) {
        let sameDir = true, isNum = false;
        if (iI == isolates.length || iCh < isolates[iI].from) {
          let next = types[iCh];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16;
          }
        }
        let recurse = !sameDir && ourType == 1 ? [] : null;
        let localLevel = sameDir ? level : level + 1;
        let iScan = iCh;
        run: for (; ; ) {
          if (iI < isolates.length && iScan == isolates[iI].from) {
            if (isNum)
              break run;
            let iso = isolates[iI];
            if (!sameDir)
              for (let upto = iso.to, jI = iI + 1; ; ) {
                if (upto == to)
                  break run;
                if (jI < isolates.length && isolates[jI].from == upto)
                  upto = isolates[jI++].to;
                else if (types[upto] == ourType)
                  break run;
                else
                  break;
              }
            iI++;
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.from > iCh)
                order.push(new BidiSpan(iCh, iso.from, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.to;
            }
            iScan = iso.to;
          } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
            break;
          } else {
            iScan++;
          }
        }
        if (recurse)
          emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
        else if (iCh < iScan)
          order.push(new BidiSpan(iCh, iScan, localLevel));
        iCh = iScan;
      }
    } else {
      for (let iCh = to, iI = isolates.length; iCh > from; ) {
        let sameDir = true, isNum = false;
        if (!iI || iCh > isolates[iI - 1].to) {
          let next = types[iCh - 1];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16;
          }
        }
        let recurse = !sameDir && ourType == 1 ? [] : null;
        let localLevel = sameDir ? level : level + 1;
        let iScan = iCh;
        run: for (; ; ) {
          if (iI && iScan == isolates[iI - 1].to) {
            if (isNum)
              break run;
            let iso = isolates[--iI];
            if (!sameDir)
              for (let upto = iso.from, jI = iI; ; ) {
                if (upto == from)
                  break run;
                if (jI && isolates[jI - 1].to == upto)
                  upto = isolates[--jI].from;
                else if (types[upto - 1] == ourType)
                  break run;
                else
                  break;
              }
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.to < iCh)
                order.push(new BidiSpan(iso.to, iCh, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.from;
            }
            iScan = iso.from;
          } else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
            break;
          } else {
            iScan--;
          }
        }
        if (recurse)
          emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
        else if (iScan < iCh)
          order.push(new BidiSpan(iScan, iCh, localLevel));
        iCh = iScan;
      }
    }
  }
  __name(emitSpans, "emitSpans");
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
    let outerType = level % 2 ? 2 : 1;
    computeCharTypes(line, from, to, isolates, outerType);
    processBracketPairs(line, from, to, isolates, outerType);
    processNeutrals(from, to, isolates, outerType);
    emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  __name(computeSectionOrder, "computeSectionOrder");
  function computeOrder(line, direction, isolates) {
    if (!line)
      return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
    if (direction == LTR && !isolates.length && !BidiRE.test(line))
      return trivialOrder(line.length);
    if (isolates.length)
      while (line.length > types.length)
        types[types.length] = 256;
    let order = [], level = direction == LTR ? 0 : 1;
    computeSectionOrder(line, level, level, isolates, 0, line.length, order);
    return order;
  }
  __name(computeOrder, "computeOrder");
  function trivialOrder(length) {
    return [new BidiSpan(0, length, 0)];
  }
  __name(trivialOrder, "trivialOrder");
  var movedOver = "";
  function moveVisually(line, order, dir, start, forward) {
    var _a2;
    let startIndex = start.head - line.from;
    let spanI = BidiSpan.find(order, startIndex, (_a2 = start.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start.assoc);
    let span = order[spanI], spanEnd = span.side(forward, dir);
    if (startIndex == spanEnd) {
      let nextI = spanI += forward ? 1 : -1;
      if (nextI < 0 || nextI >= order.length)
        return null;
      span = order[spanI = nextI];
      startIndex = span.side(!forward, dir);
      spanEnd = span.side(forward, dir);
    }
    let nextIndex = findClusterBreak2(line.text, startIndex, span.forward(forward, dir));
    if (nextIndex < span.from || nextIndex > span.to)
      nextIndex = spanEnd;
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
      return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  __name(moveVisually, "moveVisually");
  function autoDirection(text, from, to) {
    for (let i2 = from; i2 < to; i2++) {
      let type = charType(text.charCodeAt(i2));
      if (type == 1)
        return LTR;
      if (type == 2 || type == 4)
        return RTL;
    }
    return LTR;
  }
  __name(autoDirection, "autoDirection");
  var clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
  var dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
  var mouseSelectionStyle = /* @__PURE__ */ Facet.define();
  var exceptionSink = /* @__PURE__ */ Facet.define();
  var updateListener = /* @__PURE__ */ Facet.define();
  var inputHandler = /* @__PURE__ */ Facet.define();
  var focusChangeEffect = /* @__PURE__ */ Facet.define();
  var clipboardInputFilter = /* @__PURE__ */ Facet.define();
  var clipboardOutputFilter = /* @__PURE__ */ Facet.define();
  var perLineTextDirection = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.some((x2) => x2), "combine")
  });
  var nativeSelectionHidden = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.some((x2) => x2), "combine")
  });
  var scrollHandler = /* @__PURE__ */ Facet.define();
  var ScrollTarget = class _ScrollTarget {
    static {
      __name(this, "ScrollTarget");
    }
    constructor(range, y2 = "nearest", x2 = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
      this.range = range;
      this.y = y2;
      this.x = x2;
      this.yMargin = yMargin;
      this.xMargin = xMargin;
      this.isSnapshot = isSnapshot;
    }
    map(changes) {
      return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
    }
    clip(state) {
      return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
    }
  };
  var scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: /* @__PURE__ */ __name((t3, ch) => t3.map(ch), "map") });
  var setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
  function logException(state, exception, context) {
    let handler = state.facet(exceptionSink);
    if (handler.length)
      handler[0](exception);
    else if (window.onerror && window.onerror(String(exception), context, void 0, void 0, exception)) ;
    else if (context)
      console.error(context + ":", exception);
    else
      console.error(exception);
  }
  __name(logException, "logException");
  var editable = /* @__PURE__ */ Facet.define({ combine: /* @__PURE__ */ __name((values) => values.length ? values[0] : true, "combine") });
  var nextPluginID = 0;
  var viewPlugin = /* @__PURE__ */ Facet.define();
  var ViewPlugin = class _ViewPlugin {
    static {
      __name(this, "ViewPlugin");
    }
    constructor(id, create, domEventHandlers, domEventObservers, buildExtensions) {
      this.id = id;
      this.create = create;
      this.domEventHandlers = domEventHandlers;
      this.domEventObservers = domEventObservers;
      this.extension = buildExtensions(this);
    }
    /**
    Define a plugin from a constructor function that creates the
    plugin's value, given an editor view.
    */
    static define(create, spec) {
      const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
      return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin) => {
        let ext = [viewPlugin.of(plugin)];
        if (deco)
          ext.push(decorations.of((view2) => {
            let pluginInst = view2.plugin(plugin);
            return pluginInst ? deco(pluginInst) : Decoration.none;
          }));
        if (provide)
          ext.push(provide(plugin));
        return ext;
      });
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
    static fromClass(cls, spec) {
      return _ViewPlugin.define((view2) => new cls(view2), spec);
    }
  };
  var PluginInstance = class {
    static {
      __name(this, "PluginInstance");
    }
    constructor(spec) {
      this.spec = spec;
      this.mustUpdate = null;
      this.value = null;
    }
    update(view2) {
      if (!this.value) {
        if (this.spec) {
          try {
            this.value = this.spec.create(view2);
          } catch (e2) {
            logException(view2.state, e2, "CodeMirror plugin crashed");
            this.deactivate();
          }
        }
      } else if (this.mustUpdate) {
        let update = this.mustUpdate;
        this.mustUpdate = null;
        if (this.value.update) {
          try {
            this.value.update(update);
          } catch (e2) {
            logException(update.state, e2, "CodeMirror plugin crashed");
            if (this.value.destroy)
              try {
                this.value.destroy();
              } catch (_2) {
              }
            this.deactivate();
          }
        }
      }
      return this;
    }
    destroy(view2) {
      var _a2;
      if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
        try {
          this.value.destroy();
        } catch (e2) {
          logException(view2.state, e2, "CodeMirror plugin crashed");
        }
      }
    }
    deactivate() {
      this.spec = this.value = null;
    }
  };
  var editorAttributes = /* @__PURE__ */ Facet.define();
  var contentAttributes = /* @__PURE__ */ Facet.define();
  var decorations = /* @__PURE__ */ Facet.define();
  var outerDecorations = /* @__PURE__ */ Facet.define();
  var atomicRanges = /* @__PURE__ */ Facet.define();
  var bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
  function getIsolatedRanges(view2, line) {
    let isolates = view2.state.facet(bidiIsolatedRanges);
    if (!isolates.length)
      return isolates;
    let sets = isolates.map((i2) => i2 instanceof Function ? i2(view2) : i2);
    let result = [];
    RangeSet.spans(sets, line.from, line.to, {
      point() {
      },
      span(fromDoc, toDoc, active, open) {
        let from = fromDoc - line.from, to = toDoc - line.from;
        let level = result;
        for (let i2 = active.length - 1; i2 >= 0; i2--, open--) {
          let direction = active[i2].spec.bidiIsolate, update;
          if (direction == null)
            direction = autoDirection(line.text, from, to);
          if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
            update.to = to;
            level = update.inner;
          } else {
            let add2 = { from, to, direction, inner: [] };
            level.push(add2);
            level = add2.inner;
          }
        }
      }
    });
    return result;
  }
  __name(getIsolatedRanges, "getIsolatedRanges");
  var scrollMargins = /* @__PURE__ */ Facet.define();
  function getScrollMargins(view2) {
    let left = 0, right = 0, top2 = 0, bottom = 0;
    for (let source of view2.state.facet(scrollMargins)) {
      let m2 = source(view2);
      if (m2) {
        if (m2.left != null)
          left = Math.max(left, m2.left);
        if (m2.right != null)
          right = Math.max(right, m2.right);
        if (m2.top != null)
          top2 = Math.max(top2, m2.top);
        if (m2.bottom != null)
          bottom = Math.max(bottom, m2.bottom);
      }
    }
    return { left, right, top: top2, bottom };
  }
  __name(getScrollMargins, "getScrollMargins");
  var styleModule = /* @__PURE__ */ Facet.define();
  var ChangedRange = class _ChangedRange {
    static {
      __name(this, "ChangedRange");
    }
    constructor(fromA, toA, fromB, toB) {
      this.fromA = fromA;
      this.toA = toA;
      this.fromB = fromB;
      this.toB = toB;
    }
    join(other) {
      return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
    addToSet(set) {
      let i2 = set.length, me2 = this;
      for (; i2 > 0; i2--) {
        let range = set[i2 - 1];
        if (range.fromA > me2.toA)
          continue;
        if (range.toA < me2.fromA)
          break;
        me2 = me2.join(range);
        set.splice(i2 - 1, 1);
      }
      set.splice(i2, 0, me2);
      return set;
    }
    static extendWithRanges(diff, ranges) {
      if (ranges.length == 0)
        return diff;
      let result = [];
      for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
        let next = dI == diff.length ? null : diff[dI], off = posA - posB;
        let end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          let from = ranges[rI], to = ranges[rI + 1];
          let fromB = Math.max(posB, from), toB = Math.min(end, to);
          if (fromB <= toB)
            new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end)
            break;
          else
            rI += 2;
        }
        if (!next)
          return result;
        new _ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  };
  var ViewUpdate = class _ViewUpdate {
    static {
      __name(this, "ViewUpdate");
    }
    constructor(view2, state, transactions) {
      this.view = view2;
      this.state = state;
      this.transactions = transactions;
      this.flags = 0;
      this.startState = view2.state;
      this.changes = ChangeSet.empty(this.startState.doc.length);
      for (let tr of transactions)
        this.changes = this.changes.compose(tr.changes);
      let changedRanges = [];
      this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
      this.changedRanges = changedRanges;
    }
    /**
    @internal
    */
    static create(view2, state, transactions) {
      return new _ViewUpdate(view2, state, transactions);
    }
    /**
    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
    update.
    */
    get viewportChanged() {
      return (this.flags & 4) > 0;
    }
    /**
    Returns true when
    [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
    and the viewport change is not just the result of mapping it in
    response to document changes.
    */
    get viewportMoved() {
      return (this.flags & 8) > 0;
    }
    /**
    Indicates whether the height of a block element in the editor
    changed in this update.
    */
    get heightChanged() {
      return (this.flags & 2) > 0;
    }
    /**
    Returns true when the document was modified or the size of the
    editor, or elements within the editor, changed.
    */
    get geometryChanged() {
      return this.docChanged || (this.flags & (16 | 2)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
    get focusChanged() {
      return (this.flags & 1) > 0;
    }
    /**
    Whether the document changed in this update.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Whether the selection was explicitly set in this update.
    */
    get selectionSet() {
      return this.transactions.some((tr) => tr.selection);
    }
    /**
    @internal
    */
    get empty() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  };
  var DocView = class extends ContentView {
    static {
      __name(this, "DocView");
    }
    get length() {
      return this.view.state.doc.length;
    }
    constructor(view2) {
      super();
      this.view = view2;
      this.decorations = [];
      this.dynamicDecorationMap = [false];
      this.domChanged = null;
      this.hasComposition = null;
      this.markedForComposition = /* @__PURE__ */ new Set();
      this.editContextFormatting = Decoration.none;
      this.lastCompositionAfterCursor = false;
      this.minWidth = 0;
      this.minWidthFrom = 0;
      this.minWidthTo = 0;
      this.impreciseAnchor = null;
      this.impreciseHead = null;
      this.forceSelection = false;
      this.lastUpdate = Date.now();
      this.setDOM(view2.contentDOM);
      this.children = [new LineView()];
      this.children[0].setParent(this);
      this.updateDeco();
      this.updateInner([new ChangedRange(0, 0, 0, view2.state.doc.length)], 0, null);
    }
    // Update the document view to a given state.
    update(update) {
      var _a2;
      let changedRanges = update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
          this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
        } else {
          this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      this.updateEditContextFormatting(update);
      let readCompositionAt = -1;
      if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
        if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
          readCompositionAt = this.domChanged.newSel.head;
        else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
          readCompositionAt = update.state.selection.main.head;
      }
      let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
      this.domChanged = null;
      if (this.hasComposition) {
        this.markedForComposition.clear();
        let { from, to } = this.hasComposition;
        changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
      }
      this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
      if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
        this.forceSelection = true;
      let prevDeco = this.decorations, deco = this.updateDeco();
      let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      if (!(this.flags & 7) && changedRanges.length == 0) {
        return false;
      } else {
        this.updateInner(changedRanges, update.startState.doc.length, composition);
        if (update.transactions.length)
          this.lastUpdate = Date.now();
        return true;
      }
    }
    // Used by update and the constructor do perform the actual DOM
    // update
    updateInner(changes, oldLength, composition) {
      this.view.viewState.mustMeasureContent = true;
      this.updateChildren(changes, oldLength, composition);
      let { observer } = this.view;
      observer.ignore(() => {
        this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
        this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
        let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
        this.sync(this.view, track);
        this.flags &= ~7;
        if (track && (track.written || observer.selectionRange.focusNode != track.node))
          this.forceSelection = true;
        this.dom.style.height = "";
      });
      this.markedForComposition.forEach(
        (cView) => cView.flags &= ~8
        /* ViewFlag.Composition */
      );
      let gaps = [];
      if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
        for (let child of this.children)
          if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
            gaps.push(child.dom);
      }
      observer.updateGaps(gaps);
    }
    updateChildren(changes, oldLength, composition) {
      let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
      let cursor = this.childCursor(oldLength);
      for (let i2 = ranges.length - 1; ; i2--) {
        let next = i2 >= 0 ? ranges[i2] : null;
        if (!next)
          break;
        let { fromA, toA, fromB, toB } = next, content2, breakAtStart, openStart, openEnd;
        if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
          let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
          let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
          breakAtStart = before.breakAtStart;
          openStart = before.openStart;
          openEnd = after.openEnd;
          let compLine = this.compositionView(composition);
          if (after.breakAtStart) {
            compLine.breakAfter = 1;
          } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
            compLine.breakAfter = after.content[0].breakAfter;
            after.content.shift();
          }
          if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
            before.content.pop();
          }
          content2 = before.content.concat(compLine).concat(after.content);
        } else {
          ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
        }
        let { i: toI, off: toOff } = cursor.findPos(toA, 1);
        let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
        replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
      }
      if (composition)
        this.fixCompositionDOM(composition);
    }
    updateEditContextFormatting(update) {
      this.editContextFormatting = this.editContextFormatting.map(update.changes);
      for (let tr of update.transactions)
        for (let effect of tr.effects)
          if (effect.is(setEditContextFormatting)) {
            this.editContextFormatting = effect.value;
          }
    }
    compositionView(composition) {
      let cur2 = new TextView(composition.text.nodeValue);
      cur2.flags |= 8;
      for (let { deco } of composition.marks)
        cur2 = new MarkView(deco, [cur2], cur2.length);
      let line = new LineView();
      line.append(cur2, 0);
      return line;
    }
    fixCompositionDOM(composition) {
      let fix = /* @__PURE__ */ __name((dom, cView2) => {
        cView2.flags |= 8 | (cView2.children.some(
          (c2) => c2.flags & 7
          /* ViewFlag.Dirty */
        ) ? 1 : 0);
        this.markedForComposition.add(cView2);
        let prev = ContentView.get(dom);
        if (prev && prev != cView2)
          prev.dom = null;
        cView2.setDOM(dom);
      }, "fix");
      let pos = this.childPos(composition.range.fromB, 1);
      let cView = this.children[pos.i];
      fix(composition.line, cView);
      for (let i2 = composition.marks.length - 1; i2 >= -1; i2--) {
        pos = cView.childPos(pos.off, 1);
        cView = cView.children[pos.i];
        fix(i2 >= 0 ? composition.marks[i2].node : composition.text, cView);
      }
    }
    // Sync the DOM selection to this.state.selection
    updateSelection(mustRead = false, fromPointer = false) {
      if (mustRead || !this.view.observer.selectionRange.focusNode)
        this.view.observer.readSelectionRange();
      let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
      let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
      if (!(focused || fromPointer || selectionNotFocus))
        return;
      let force = this.forceSelection;
      this.forceSelection = false;
      let main = this.view.state.selection.main;
      let anchor = this.moveToLine(this.domAtPos(main.anchor));
      let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
      if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
        let dummy = document.createTextNode("");
        this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      let domSel = this.view.observer.selectionRange;
      if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
        this.view.observer.ignore(() => {
          if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
            this.dom.blur();
            this.dom.focus({ preventScroll: true });
          }
          let rawSel = getSelection(this.view.root);
          if (!rawSel) ;
          else if (main.empty) {
            if (browser.gecko) {
              let nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 | 2)) {
                let text = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                if (text)
                  anchor = new DOMPos(text.node, text.offset);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
              rawSel.caretBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            rawSel.collapse(anchor.node, anchor.offset);
            try {
              rawSel.extend(head.node, head.offset);
            } catch (_2) {
            }
          } else {
            let range = document.createRange();
            if (main.anchor > main.head)
              [anchor, head] = [head, anchor];
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
          if (selectionNotFocus && this.view.root.activeElement == this.dom) {
            this.dom.blur();
            if (activeElt)
              activeElt.focus();
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
    // If a zero-length widget is inserted next to the cursor during
    // composition, avoid moving it across it and disrupting the
    // composition.
    suppressWidgetCursorChange(sel, cursor) {
      return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
    }
    enforceCursorAssoc() {
      if (this.hasComposition)
        return;
      let { view: view2 } = this, cursor = view2.state.selection.main;
      let sel = getSelection(view2.root);
      let { anchorNode, anchorOffset } = view2.observer.selectionRange;
      if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
        return;
      let line = LineView.find(this, cursor.head);
      if (!line)
        return;
      let lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length)
        return;
      let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top)
        return;
      let dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
      view2.observer.readSelectionRange();
      let newRange = view2.observer.selectionRange;
      if (view2.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
        sel.collapse(anchorNode, anchorOffset);
    }
    // If a position is in/near a block widget, move it to a nearby text
    // line, since we don't want the cursor inside a block widget.
    moveToLine(pos) {
      let dom = this.dom, newPos;
      if (pos.node != dom)
        return pos;
      for (let i2 = pos.offset; !newPos && i2 < dom.childNodes.length; i2++) {
        let view2 = ContentView.get(dom.childNodes[i2]);
        if (view2 instanceof LineView)
          newPos = view2.domAtPos(0);
      }
      for (let i2 = pos.offset - 1; !newPos && i2 >= 0; i2--) {
        let view2 = ContentView.get(dom.childNodes[i2]);
        if (view2 instanceof LineView)
          newPos = view2.domAtPos(view2.length);
      }
      return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
    }
    nearest(dom) {
      for (let cur2 = dom; cur2; ) {
        let domView = ContentView.get(cur2);
        if (domView && domView.rootView == this)
          return domView;
        cur2 = cur2.parentNode;
      }
      return null;
    }
    posFromDOM(node, offset) {
      let view2 = this.nearest(node);
      if (!view2)
        throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view2.localPosFromDOM(node, offset) + view2.posAtStart;
    }
    domAtPos(pos) {
      let { i: i2, off } = this.childCursor().findPos(pos, -1);
      for (; i2 < this.children.length - 1; ) {
        let child = this.children[i2];
        if (off < child.length || child instanceof LineView)
          break;
        i2++;
        off = 0;
      }
      return this.children[i2].domAtPos(off);
    }
    coordsAt(pos, side) {
      let best = null, bestPos = 0;
      for (let off = this.length, i2 = this.children.length - 1; i2 >= 0; i2--) {
        let child = this.children[i2], end = off - child.breakAfter, start = end - child.length;
        if (end < pos)
          break;
        if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
          best = child;
          bestPos = start;
        } else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
          if (child.deco.startSide < 0)
            break;
          else if (i2)
            best = null;
        }
        off = start;
      }
      return best ? best.coordsAt(pos - bestPos, side) : null;
    }
    coordsForChar(pos) {
      let { i: i2, off } = this.childPos(pos, 1), child = this.children[i2];
      if (!(child instanceof LineView))
        return null;
      while (child.children.length) {
        let { i: i3, off: childOff } = child.childPos(off, 1);
        for (; ; i3++) {
          if (i3 == child.children.length)
            return null;
          if ((child = child.children[i3]).length)
            break;
        }
        off = childOff;
      }
      if (!(child instanceof TextView))
        return null;
      let end = findClusterBreak2(child.text, off);
      if (end == off)
        return null;
      let rects = textRange(child.dom, off, end).getClientRects();
      for (let i3 = 0; i3 < rects.length; i3++) {
        let rect = rects[i3];
        if (i3 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
          return rect;
      }
      return null;
    }
    measureVisibleLineHeights(viewport) {
      let result = [], { from, to } = viewport;
      let contentWidth = this.view.contentDOM.clientWidth;
      let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      let widest = -1, ltr = this.view.textDirection == Direction.LTR;
      for (let pos = 0, i2 = 0; i2 < this.children.length; i2++) {
        let child = this.children[i2], end = pos + child.length;
        if (end > to)
          break;
        if (pos >= from) {
          let childRect = child.dom.getBoundingClientRect();
          result.push(childRect.height);
          if (isWider) {
            let last = child.dom.lastChild;
            let rects = last ? clientRectsFor(last) : [];
            if (rects.length) {
              let rect = rects[rects.length - 1];
              let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
              if (width > widest) {
                widest = width;
                this.minWidth = contentWidth;
                this.minWidthFrom = pos;
                this.minWidthTo = end;
              }
            }
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
    textDirectionAt(pos) {
      let { i: i2 } = this.childPos(pos, 1);
      return getComputedStyle(this.children[i2].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
    }
    measureTextSize() {
      for (let child of this.children) {
        if (child instanceof LineView) {
          let measure = child.measureTextSize();
          if (measure)
            return measure;
        }
      }
      let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
      dummy.className = "cm-line";
      dummy.style.width = "99999px";
      dummy.style.position = "absolute";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(() => {
        this.dom.appendChild(dummy);
        let rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        textHeight = rect ? rect.height : lineHeight;
        dummy.remove();
      });
      return { lineHeight, charWidth, textHeight };
    }
    childCursor(pos = this.length) {
      let i2 = this.children.length;
      if (i2)
        pos -= this.children[--i2].length;
      return new ChildCursor(this.children, pos, i2);
    }
    computeBlockGapDeco() {
      let deco = [], vs = this.view.viewState;
      for (let pos = 0, i2 = 0; ; i2++) {
        let next = i2 == vs.viewports.length ? null : vs.viewports[i2];
        let end = next ? next.from - 1 : this.length;
        if (end > pos) {
          let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true,
            isBlockGap: true
          }).range(pos, end));
        }
        if (!next)
          break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
    updateDeco() {
      let i2 = 1;
      let allDeco = this.view.state.facet(decorations).map((d2) => {
        let dynamic = this.dynamicDecorationMap[i2++] = typeof d2 == "function";
        return dynamic ? d2(this.view) : d2;
      });
      let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d2, i3) => {
        let dynamic = typeof d2 == "function";
        if (dynamic)
          dynamicOuter = true;
        return dynamic ? d2(this.view) : d2;
      });
      if (outerDeco.length) {
        this.dynamicDecorationMap[i2++] = dynamicOuter;
        allDeco.push(RangeSet.join(outerDeco));
      }
      this.decorations = [
        this.editContextFormatting,
        ...allDeco,
        this.computeBlockGapDeco(),
        this.view.viewState.lineGapDeco
      ];
      while (i2 < this.decorations.length)
        this.dynamicDecorationMap[i2++] = false;
      return this.decorations;
    }
    scrollIntoView(target) {
      if (target.isSnapshot) {
        let ref = this.view.viewState.lineBlockAt(target.range.head);
        this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
        this.view.scrollDOM.scrollLeft = target.xMargin;
        return;
      }
      for (let handler of this.view.state.facet(scrollHandler)) {
        try {
          if (handler(this.view, target.range, target))
            return true;
        } catch (e2) {
          logException(this.view.state, e2, "scroll handler");
        }
      }
      let { range } = target;
      let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
      if (!rect)
        return;
      if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
        rect = {
          left: Math.min(rect.left, other.left),
          top: Math.min(rect.top, other.top),
          right: Math.max(rect.right, other.right),
          bottom: Math.max(rect.bottom, other.bottom)
        };
      let margins = getScrollMargins(this.view);
      let targetRect = {
        left: rect.left - margins.left,
        top: rect.top - margins.top,
        right: rect.right + margins.right,
        bottom: rect.bottom + margins.bottom
      };
      let { offsetWidth, offsetHeight } = this.view.scrollDOM;
      scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
    }
  };
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  __name(betweenUneditable, "betweenUneditable");
  function findCompositionNode(view2, headPos) {
    let sel = view2.observer.selectionRange;
    if (!sel.focusNode)
      return null;
    let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
    let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
    let textNode = textBefore || textAfter;
    if (textAfter && textBefore && textAfter.node != textBefore.node) {
      let descAfter = ContentView.get(textAfter.node);
      if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
        textNode = textAfter;
      } else if (view2.docView.lastCompositionAfterCursor) {
        let descBefore = ContentView.get(textBefore.node);
        if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
          textNode = textAfter;
      }
    }
    view2.docView.lastCompositionAfterCursor = textNode != textBefore;
    if (!textNode)
      return null;
    let from = headPos - textNode.offset;
    return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
  }
  __name(findCompositionNode, "findCompositionNode");
  function findCompositionRange(view2, changes, headPos) {
    let found = findCompositionNode(view2, headPos);
    if (!found)
      return null;
    let { node: textNode, from, to } = found, text = textNode.nodeValue;
    if (/[\n\r]/.test(text))
      return null;
    if (view2.state.doc.sliceString(found.from, found.to) != text)
      return null;
    let inv = changes.invertedDesc;
    let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
    let marks2 = [];
    for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
      let parentView = ContentView.get(parent);
      if (parentView instanceof MarkView)
        marks2.push({ node: parent, deco: parentView.mark });
      else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view2.contentDOM)
        return { range, text: textNode, marks: marks2, line: parent };
      else if (parent != view2.contentDOM)
        marks2.push({ node: parent, deco: new MarkDecoration({
          inclusive: true,
          attributes: getAttrs(parent),
          tagName: parent.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
  __name(findCompositionRange, "findCompositionRange");
  function nextToUneditable(node, offset) {
    if (node.nodeType != 1)
      return 0;
    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
  }
  __name(nextToUneditable, "nextToUneditable");
  var DecorationComparator$1 = class DecorationComparator {
    static {
      __name(this, "DecorationComparator");
    }
    constructor() {
      this.changes = [];
    }
    compareRange(from, to) {
      addRange(from, to, this.changes);
    }
    comparePoint(from, to) {
      addRange(from, to, this.changes);
    }
    boundChange(pos) {
      addRange(pos, pos, this.changes);
    }
  };
  function findChangedDeco(a2, b2, diff) {
    let comp = new DecorationComparator$1();
    RangeSet.compare(a2, b2, diff, comp);
    return comp.changes;
  }
  __name(findChangedDeco, "findChangedDeco");
  function inUneditable(node, inside2) {
    for (let cur2 = node; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
      if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
        return true;
      }
    }
    return false;
  }
  __name(inUneditable, "inUneditable");
  function touchesComposition(changes, composition) {
    let touched = false;
    if (composition)
      changes.iterChangedRanges((from, to) => {
        if (from < composition.to && to > composition.from)
          touched = true;
      });
    return touched;
  }
  __name(touchesComposition, "touchesComposition");
  function groupAt(state, pos, bias = 1) {
    let categorize = state.charCategorizer(pos);
    let line = state.doc.lineAt(pos), linePos = pos - line.from;
    if (line.length == 0)
      return EditorSelection.cursor(pos);
    if (linePos == 0)
      bias = 1;
    else if (linePos == line.length)
      bias = -1;
    let from = linePos, to = linePos;
    if (bias < 0)
      from = findClusterBreak2(line.text, linePos, false);
    else
      to = findClusterBreak2(line.text, linePos);
    let cat = categorize(line.text.slice(from, to));
    while (from > 0) {
      let prev = findClusterBreak2(line.text, from, false);
      if (categorize(line.text.slice(prev, from)) != cat)
        break;
      from = prev;
    }
    while (to < line.length) {
      let next = findClusterBreak2(line.text, to);
      if (categorize(line.text.slice(to, next)) != cat)
        break;
      to = next;
    }
    return EditorSelection.range(from + line.from, to + line.from);
  }
  __name(groupAt, "groupAt");
  function getdx(x2, rect) {
    return rect.left > x2 ? rect.left - x2 : Math.max(0, x2 - rect.right);
  }
  __name(getdx, "getdx");
  function getdy(y2, rect) {
    return rect.top > y2 ? rect.top - y2 : Math.max(0, y2 - rect.bottom);
  }
  __name(getdy, "getdy");
  function yOverlap(a2, b2) {
    return a2.top < b2.bottom - 1 && a2.bottom > b2.top + 1;
  }
  __name(yOverlap, "yOverlap");
  function upTop(rect, top2) {
    return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  __name(upTop, "upTop");
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  __name(upBot, "upBot");
  function domPosAtCoords(parent, x2, y2) {
    let closest, closestRect, closestX, closestY, closestOverlap = false;
    let above, below, aboveRect, belowRect;
    for (let child = parent.firstChild; child; child = child.nextSibling) {
      let rects = clientRectsFor(child);
      for (let i2 = 0; i2 < rects.length; i2++) {
        let rect = rects[i2];
        if (closestRect && yOverlap(closestRect, rect))
          rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        let dx = getdx(x2, rect), dy = getdy(y2, rect);
        if (dx == 0 && dy == 0)
          return child.nodeType == 3 ? domPosInText(child, x2, y2) : domPosAtCoords(child, x2, y2);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          let side = dy ? y2 < rect.top ? -1 : 1 : dx ? x2 < rect.left ? -1 : 1 : 0;
          closestOverlap = !side || (side > 0 ? i2 < rects.length - 1 : i2 > 0);
        }
        if (dx == 0) {
          if (y2 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y2 < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y2) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y2) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest)
      return { node: parent, offset: 0 };
    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x2));
    if (closest.nodeType == 3)
      return domPosInText(closest, clipX, y2);
    if (closestOverlap && closest.contentEditable != "false")
      return domPosAtCoords(closest, clipX, y2);
    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x2 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return { node: parent, offset };
  }
  __name(domPosAtCoords, "domPosAtCoords");
  function domPosInText(node, x2, y2) {
    let len = node.nodeValue.length;
    let closestOffset = -1, closestDY = 1e9, generalSide = 0;
    for (let i2 = 0; i2 < len; i2++) {
      let rects = textRange(node, i2, i2 + 1).getClientRects();
      for (let j2 = 0; j2 < rects.length; j2++) {
        let rect = rects[j2];
        if (rect.top == rect.bottom)
          continue;
        if (!generalSide)
          generalSide = x2 - rect.left;
        let dy = (rect.top > y2 ? rect.top - y2 : y2 - rect.bottom) - 1;
        if (rect.left - 1 <= x2 && rect.right + 1 >= x2 && dy < closestDY) {
          let right = x2 >= (rect.left + rect.right) / 2, after = right;
          if (browser.chrome || browser.gecko) {
            let rectBefore = textRange(node, i2).getBoundingClientRect();
            if (rectBefore.left == rect.right)
              after = !right;
          }
          if (dy <= 0)
            return { node, offset: i2 + (after ? 1 : 0) };
          closestOffset = i2 + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  __name(domPosInText, "domPosInText");
  function posAtCoords(view2, coords, precise, bias = -1) {
    var _a2, _b;
    let content2 = view2.contentDOM.getBoundingClientRect(), docTop = content2.top + view2.viewState.paddingTop;
    let block, { docHeight } = view2.viewState;
    let { x: x2, y: y2 } = coords, yOffset = y2 - docTop;
    if (yOffset < 0)
      return 0;
    if (yOffset > docHeight)
      return view2.state.doc.length;
    for (let halfLine = view2.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
      block = view2.elementAtHeight(yOffset);
      if (block.type == BlockType.Text)
        break;
      for (; ; ) {
        yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight)
          break;
        if (bounced)
          return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y2 = docTop + yOffset;
    let lineStart = block.from;
    if (lineStart < view2.viewport.from)
      return view2.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view2, content2, block, x2, y2);
    if (lineStart > view2.viewport.to)
      return view2.viewport.to == view2.state.doc.length ? view2.state.doc.length : precise ? null : posAtCoordsImprecise(view2, content2, block, x2, y2);
    let doc2 = view2.dom.ownerDocument;
    let root = view2.root.elementFromPoint ? view2.root : doc2;
    let element = root.elementFromPoint(x2, y2);
    if (element && !view2.contentDOM.contains(element))
      element = null;
    if (!element) {
      x2 = Math.max(content2.left + 1, Math.min(content2.right - 1, x2));
      element = root.elementFromPoint(x2, y2);
      if (element && !view2.contentDOM.contains(element))
        element = null;
    }
    let node, offset = -1;
    if (element && ((_a2 = view2.docView.nearest(element)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
      if (doc2.caretPositionFromPoint) {
        let pos = doc2.caretPositionFromPoint(x2, y2);
        if (pos)
          ({ offsetNode: node, offset } = pos);
      } else if (doc2.caretRangeFromPoint) {
        let range = doc2.caretRangeFromPoint(x2, y2);
        if (range) {
          ({ startContainer: node, startOffset: offset } = range);
          if (!view2.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x2) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x2))
            node = void 0;
        }
      }
      if (node)
        offset = Math.min(maxOffset(node), offset);
    }
    if (!node || !view2.docView.dom.contains(node)) {
      let line = LineView.find(view2.docView, lineStart);
      if (!line)
        return yOffset > block.top + block.height / 2 ? block.to : block.from;
      ({ node, offset } = domPosAtCoords(line.dom, x2, y2));
    }
    let nearest = view2.docView.nearest(node);
    if (!nearest)
      return null;
    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
      let rect = nearest.dom.getBoundingClientRect();
      return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
    } else {
      return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
    }
  }
  __name(posAtCoords, "posAtCoords");
  function posAtCoordsImprecise(view2, contentRect, block, x2, y2) {
    let into = Math.round((x2 - contentRect.left) * view2.defaultCharacterWidth);
    if (view2.lineWrapping && block.height > view2.defaultLineHeight * 1.5) {
      let textHeight = view2.viewState.heightOracle.textHeight;
      let line = Math.floor((y2 - block.top - (view2.defaultLineHeight - textHeight) * 0.5) / textHeight);
      into += line * view2.viewState.heightOracle.lineLength;
    }
    let content2 = view2.state.sliceDoc(block.from, block.to);
    return block.from + findColumn(content2, into, view2.state.tabSize);
  }
  __name(posAtCoordsImprecise, "posAtCoordsImprecise");
  function isSuspiciousSafariCaretResult(node, offset, x2) {
    let len;
    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
      return false;
    for (let next = node.nextSibling; next; next = next.nextSibling)
      if (next.nodeType != 1 || next.nodeName != "BR")
        return false;
    return textRange(node, len - 1, len).getBoundingClientRect().left > x2;
  }
  __name(isSuspiciousSafariCaretResult, "isSuspiciousSafariCaretResult");
  function isSuspiciousChromeCaretResult(node, offset, x2) {
    if (offset != 0)
      return false;
    for (let cur2 = node; ; ) {
      let parent = cur2.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
        return false;
      if (parent.classList.contains("cm-line"))
        break;
      cur2 = parent;
    }
    let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
    return x2 - rect.left > 5;
  }
  __name(isSuspiciousChromeCaretResult, "isSuspiciousChromeCaretResult");
  function blockAt(view2, pos, side) {
    let line = view2.lineBlockAt(pos);
    if (Array.isArray(line.type)) {
      let best;
      for (let l2 of line.type) {
        if (l2.from > pos)
          break;
        if (l2.to < pos)
          continue;
        if (l2.from < pos && l2.to > pos)
          return l2;
        if (!best || l2.type == BlockType.Text && (best.type != l2.type || (side < 0 ? l2.from < pos : l2.to > pos)))
          best = l2;
      }
      return best || line;
    }
    return line;
  }
  __name(blockAt, "blockAt");
  function moveToLineBoundary(view2, start, forward, includeWrap) {
    let line = blockAt(view2, start.head, start.assoc || -1);
    let coords = !includeWrap || line.type != BlockType.Text || !(view2.lineWrapping || line.widgetLineBreaks) ? null : view2.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
    if (coords) {
      let editorRect = view2.dom.getBoundingClientRect();
      let direction = view2.textDirectionAt(line.from);
      let pos = view2.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null)
        return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  __name(moveToLineBoundary, "moveToLineBoundary");
  function moveByChar(view2, start, forward, by) {
    let line = view2.state.doc.lineAt(start.head), spans = view2.bidiSpans(line);
    let direction = view2.textDirectionAt(line.from);
    for (let cur2 = start, check = null; ; ) {
      let next = moveVisually(line, spans, direction, cur2, forward), char = movedOver;
      if (!next) {
        if (line.number == (forward ? view2.state.doc.lines : 1))
          return cur2;
        char = "\n";
        line = view2.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view2.bidiSpans(line);
        next = view2.visualLineSide(line, !forward);
      }
      if (!check) {
        if (!by)
          return next;
        check = by(char);
      } else if (!check(char)) {
        return cur2;
      }
      cur2 = next;
    }
  }
  __name(moveByChar, "moveByChar");
  function byGroup(view2, pos, start) {
    let categorize = view2.state.charCategorizer(pos);
    let cat = categorize(start);
    return (next) => {
      let nextCat = categorize(next);
      if (cat == CharCategory.Space)
        cat = nextCat;
      return cat == nextCat;
    };
  }
  __name(byGroup, "byGroup");
  function moveVertically(view2, start, forward, distance) {
    let startPos = start.head, dir = forward ? 1 : -1;
    if (startPos == (forward ? view2.state.doc.length : 0))
      return EditorSelection.cursor(startPos, start.assoc);
    let goal = start.goalColumn, startY;
    let rect = view2.contentDOM.getBoundingClientRect();
    let startCoords = view2.coordsAtPos(startPos, start.assoc || -1), docTop = view2.documentTop;
    if (startCoords) {
      if (goal == null)
        goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      let line = view2.viewState.lineBlockAt(startPos);
      if (goal == null)
        goal = Math.min(rect.right - rect.left, view2.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    let resolvedGoal = rect.left + goal;
    let dist2 = distance !== null && distance !== void 0 ? distance : view2.viewState.heightOracle.textHeight >> 1;
    for (let extra = 0; ; extra += 10) {
      let curY = startY + (dist2 + extra) * dir;
      let pos = posAtCoords(view2, { x: resolvedGoal, y: curY }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
        let charRect = view2.docView.coordsForChar(pos);
        let assoc = !charRect || curY < charRect.top ? -1 : 1;
        return EditorSelection.cursor(pos, assoc, void 0, goal);
      }
    }
  }
  __name(moveVertically, "moveVertically");
  function skipAtomicRanges(atoms, pos, bias) {
    for (; ; ) {
      let moved = 0;
      for (let set of atoms) {
        set.between(pos - 1, pos + 1, (from, to, value) => {
          if (pos > from && pos < to) {
            let side = moved || bias || (pos - from < to - pos ? -1 : 1);
            pos = side < 0 ? from : to;
            moved = side;
          }
        });
      }
      if (!moved)
        return pos;
    }
  }
  __name(skipAtomicRanges, "skipAtomicRanges");
  function skipAtoms(view2, oldPos, pos) {
    let newPos = skipAtomicRanges(view2.state.facet(atomicRanges).map((f2) => f2(view2)), pos.from, oldPos.head > pos.from ? -1 : 1);
    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }
  __name(skipAtoms, "skipAtoms");
  var LineBreakPlaceholder = "\uFFFF";
  var DOMReader = class {
    static {
      __name(this, "DOMReader");
    }
    constructor(points, state) {
      this.points = points;
      this.text = "";
      this.lineSeparator = state.facet(EditorState.lineSeparator);
    }
    append(text) {
      this.text += text;
    }
    lineBreak() {
      this.text += LineBreakPlaceholder;
    }
    readRange(start, end) {
      if (!start)
        return this;
      let parent = start.parentNode;
      for (let cur2 = start; ; ) {
        this.findPointBefore(parent, cur2);
        let oldLen = this.text.length;
        this.readNode(cur2);
        let next = cur2.nextSibling;
        if (next == end)
          break;
        let view2 = ContentView.get(cur2), nextView = ContentView.get(next);
        if (view2 && nextView ? view2.breakAfter : (view2 ? view2.breakAfter : isBlockElement(cur2)) || isBlockElement(next) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
          this.lineBreak();
        cur2 = next;
      }
      this.findPointBefore(parent, end);
      return this;
    }
    readTextNode(node) {
      let text = node.nodeValue;
      for (let point of this.points)
        if (point.node == node)
          point.pos = this.text.length + Math.min(point.offset, text.length);
      for (let off = 0, re2 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
        let nextBreak = -1, breakSize = 1, m2;
        if (this.lineSeparator) {
          nextBreak = text.indexOf(this.lineSeparator, off);
          breakSize = this.lineSeparator.length;
        } else if (m2 = re2.exec(text)) {
          nextBreak = m2.index;
          breakSize = m2[0].length;
        }
        this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
        if (nextBreak < 0)
          break;
        this.lineBreak();
        if (breakSize > 1) {
          for (let point of this.points)
            if (point.node == node && point.pos > this.text.length)
              point.pos -= breakSize - 1;
        }
        off = nextBreak + breakSize;
      }
    }
    readNode(node) {
      if (node.cmIgnore)
        return;
      let view2 = ContentView.get(node);
      let fromView = view2 && view2.overrideDOMText;
      if (fromView != null) {
        this.findPointInside(node, fromView.length);
        for (let i2 = fromView.iter(); !i2.next().done; ) {
          if (i2.lineBreak)
            this.lineBreak();
          else
            this.append(i2.value);
        }
      } else if (node.nodeType == 3) {
        this.readTextNode(node);
      } else if (node.nodeName == "BR") {
        if (node.nextSibling)
          this.lineBreak();
      } else if (node.nodeType == 1) {
        this.readRange(node.firstChild, null);
      }
    }
    findPointBefore(node, next) {
      for (let point of this.points)
        if (point.node == node && node.childNodes[point.offset] == next)
          point.pos = this.text.length;
    }
    findPointInside(node, length) {
      for (let point of this.points)
        if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
          point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
    }
  };
  function isAtEnd(parent, node, offset) {
    for (; ; ) {
      if (!node || offset < maxOffset(node))
        return false;
      if (node == parent)
        return true;
      offset = domIndex(node) + 1;
      node = node.parentNode;
    }
  }
  __name(isAtEnd, "isAtEnd");
  var DOMPoint = class {
    static {
      __name(this, "DOMPoint");
    }
    constructor(node, offset) {
      this.node = node;
      this.offset = offset;
      this.pos = -1;
    }
  };
  var DOMChange = class {
    static {
      __name(this, "DOMChange");
    }
    constructor(view2, start, end, typeOver) {
      this.typeOver = typeOver;
      this.bounds = null;
      this.text = "";
      this.domChanged = start > -1;
      let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view2.docView;
      if (view2.state.readOnly && start > -1) {
        this.newSel = null;
      } else if (start > -1 && (this.bounds = view2.docView.domBoundsAround(start, end, 0))) {
        let selPoints = iHead || iAnchor ? [] : selectionPoints(view2);
        let reader = new DOMReader(selPoints, view2.state);
        reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
        this.text = reader.text;
        this.newSel = selectionFromPoints(selPoints, this.bounds.from);
      } else {
        let domSel = view2.observer.selectionRange;
        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view2.contentDOM, domSel.focusNode) ? view2.state.selection.main.head : view2.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view2.contentDOM, domSel.anchorNode) ? view2.state.selection.main.anchor : view2.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
        let vp = view2.viewport;
        if ((browser.ios || browser.chrome) && view2.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view2.state.doc.length)) {
          let from = Math.min(head, anchor), to = Math.max(head, anchor);
          let offFrom = vp.from - from, offTo = vp.to - to;
          if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view2.state.doc.length)) {
            head = 0;
            anchor = view2.state.doc.length;
          }
        }
        this.newSel = EditorSelection.single(anchor, head);
      }
    }
  };
  function applyDOMChange(view2, domChange) {
    let change;
    let { newSel } = domChange, sel = view2.state.selection.main;
    let lastKey = view2.inputState.lastKeyTime > Date.now() - 100 ? view2.inputState.lastKeyCode : -1;
    if (domChange.bounds) {
      let { from, to } = domChange.bounds;
      let preferredPos = sel.from, preferredSide = null;
      if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      let diff = findDiff(view2.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
      if (diff) {
        if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
          diff.toB--;
        change = {
          from: from + diff.from,
          to: from + diff.toA,
          insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view2.hasFocus && view2.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel)
      return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      change = { from: sel.from, to: sel.to, insert: view2.state.doc.slice(sel.from, sel.to) };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view2.contentDOM.getAttribute("autocorrect") == "off") {
      if (newSel && change.insert.length == 2)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      change = {
        from: sel.from,
        to: sel.to,
        insert: view2.state.doc.slice(sel.from, change.from).append(change.insert).append(view2.state.doc.slice(change.to, sel.to))
      };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view2.lineWrapping) {
      if (newSel)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
    }
    if (change) {
      return applyDOMChangeInner(view2, change, newSel, lastKey);
    } else if (newSel && !newSel.main.eq(sel)) {
      let scrollIntoView3 = false, userEvent = "select";
      if (view2.inputState.lastSelectionTime > Date.now() - 50) {
        if (view2.inputState.lastSelectionOrigin == "select")
          scrollIntoView3 = true;
        userEvent = view2.inputState.lastSelectionOrigin;
      }
      view2.dispatch({ selection: newSel, scrollIntoView: scrollIntoView3, userEvent });
      return true;
    } else {
      return false;
    }
  }
  __name(applyDOMChange, "applyDOMChange");
  function applyDOMChangeInner(view2, change, newSel, lastKey = -1) {
    if (browser.ios && view2.inputState.flushIOSKey(change))
      return true;
    let sel = view2.state.selection.main;
    if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
    // after a completion when you press enter
    (change.from == sel.from || change.from == sel.from - 1 && view2.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view2.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view2.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view2.contentDOM, "Delete", 46)))
      return true;
    let text = change.insert.toString();
    if (view2.inputState.composing >= 0)
      view2.inputState.composing++;
    let defaultTr;
    let defaultInsert = /* @__PURE__ */ __name(() => defaultTr || (defaultTr = applyDefaultInsert(view2, change, newSel)), "defaultInsert");
    if (!view2.state.facet(inputHandler).some((h2) => h2(view2, change.from, change.to, text, defaultInsert)))
      view2.dispatch(defaultInsert());
    return true;
  }
  __name(applyDOMChangeInner, "applyDOMChangeInner");
  function applyDefaultInsert(view2, change, newSel) {
    let tr, startState = view2.state, sel = startState.selection.main;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view2.inputState.composing < 0) {
      let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view2.state.toText(before + change.insert.sliceString(0, void 0, view2.state.lineBreak) + after));
    } else {
      let changes = startState.changes(change);
      let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
      if (startState.selection.ranges.length > 1 && view2.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        let replaced = view2.state.sliceDoc(change.from, change.to);
        let compositionRange, composition = newSel && findCompositionNode(view2, newSel.main.head);
        if (composition) {
          let dLen = change.insert.length - (change.to - change.from);
          compositionRange = { from: composition.from, to: composition.to - dLen };
        } else {
          compositionRange = view2.state.doc.lineAt(sel.head);
        }
        let offset = sel.to - change.to, size = sel.to - sel.from;
        tr = startState.changeByRange((range) => {
          if (range.from == sel.from && range.to == sel.to)
            return { changes, range: mainSel || range.map(changes) };
          let to = range.to - offset, from = to - replaced.length;
          if (range.to - range.from != size || view2.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          range.to >= compositionRange.from && range.from <= compositionRange.to)
            return { range };
          let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    let userEvent = "input.type";
    if (view2.composing || view2.inputState.compositionPendingChange && view2.inputState.compositionEndedAt > Date.now() - 50) {
      view2.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view2.inputState.compositionFirstChange) {
        userEvent += ".start";
        view2.inputState.compositionFirstChange = false;
      }
    }
    return startState.update(tr, { userEvent, scrollIntoView: true });
  }
  __name(applyDefaultInsert, "applyDefaultInsert");
  function findDiff(a2, b2, preferredPos, preferredSide) {
    let minLen = Math.min(a2.length, b2.length);
    let from = 0;
    while (from < minLen && a2.charCodeAt(from) == b2.charCodeAt(from))
      from++;
    if (from == minLen && a2.length == b2.length)
      return null;
    let toA = a2.length, toB = b2.length;
    while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b2.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      let adjust = Math.max(0, from - Math.min(toA, toB));
      preferredPos -= toA + adjust - from;
    }
    if (toA < from && a2.length < b2.length) {
      let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
      from -= move;
      toB = from + (toB - toA);
      toA = from;
    } else if (toB < from) {
      let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
      from -= move;
      toA = from + (toA - toB);
      toB = from;
    }
    return { from, toA, toB };
  }
  __name(findDiff, "findDiff");
  function selectionPoints(view2) {
    let result = [];
    if (view2.root.activeElement != view2.contentDOM)
      return result;
    let { anchorNode, anchorOffset, focusNode, focusOffset } = view2.observer.selectionRange;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset)
        result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  __name(selectionPoints, "selectionPoints");
  function selectionFromPoints(points, base2) {
    if (points.length == 0)
      return null;
    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
  }
  __name(selectionFromPoints, "selectionFromPoints");
  var InputState = class {
    static {
      __name(this, "InputState");
    }
    setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
    constructor(view2) {
      this.view = view2;
      this.lastKeyCode = 0;
      this.lastKeyTime = 0;
      this.lastTouchTime = 0;
      this.lastFocusTime = 0;
      this.lastScrollTop = 0;
      this.lastScrollLeft = 0;
      this.pendingIOSKey = void 0;
      this.tabFocusMode = -1;
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastContextMenu = 0;
      this.scrollHandlers = [];
      this.handlers = /* @__PURE__ */ Object.create(null);
      this.composing = -1;
      this.compositionFirstChange = null;
      this.compositionEndedAt = 0;
      this.compositionPendingKey = false;
      this.compositionPendingChange = false;
      this.mouseSelection = null;
      this.draggedContent = null;
      this.handleEvent = this.handleEvent.bind(this);
      this.notifiedFocused = view2.hasFocus;
      if (browser.safari)
        view2.contentDOM.addEventListener("input", () => null);
      if (browser.gecko)
        firefoxCopyCutHack(view2.contentDOM.ownerDocument);
    }
    handleEvent(event) {
      if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
        return;
      if (event.type == "keydown" && this.keydown(event))
        return;
      if (this.view.updateState != 0)
        Promise.resolve().then(() => this.runHandlers(event.type, event));
      else
        this.runHandlers(event.type, event);
    }
    runHandlers(type, event) {
      let handlers2 = this.handlers[type];
      if (handlers2) {
        for (let observer of handlers2.observers)
          observer(this.view, event);
        for (let handler of handlers2.handlers) {
          if (event.defaultPrevented)
            break;
          if (handler(this.view, event)) {
            event.preventDefault();
            break;
          }
        }
      }
    }
    ensureHandlers(plugins) {
      let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
      for (let type in handlers2)
        if (type != "scroll") {
          let passive = !handlers2[type].handlers.length;
          let exists = prev[type];
          if (exists && passive != !exists.handlers.length) {
            dom.removeEventListener(type, this.handleEvent);
            exists = null;
          }
          if (!exists)
            dom.addEventListener(type, this.handleEvent, { passive });
        }
      for (let type in prev)
        if (type != "scroll" && !handlers2[type])
          dom.removeEventListener(type, this.handleEvent);
      this.handlers = handlers2;
    }
    keydown(event) {
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
        return true;
      if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
        this.tabFocusMode = -1;
      if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
        this.view.observer.delayAndroidKey(event.key, event.keyCode);
        return true;
      }
      let pending;
      if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
        this.pendingIOSKey = pending || event;
        setTimeout(() => this.flushIOSKey(), 250);
        return true;
      }
      if (event.keyCode != 229)
        this.view.observer.forceFlush();
      return false;
    }
    flushIOSKey(change) {
      let key = this.pendingIOSKey;
      if (!key)
        return false;
      if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
        return false;
      this.pendingIOSKey = void 0;
      return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
    }
    ignoreDuringComposition(event) {
      if (!/^key/.test(event.type))
        return false;
      if (this.composing > 0)
        return true;
      if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
        this.compositionPendingKey = false;
        return true;
      }
      return false;
    }
    startMouseSelection(mouseSelection) {
      if (this.mouseSelection)
        this.mouseSelection.destroy();
      this.mouseSelection = mouseSelection;
    }
    update(update) {
      this.view.observer.update(update);
      if (this.mouseSelection)
        this.mouseSelection.update(update);
      if (this.draggedContent && update.docChanged)
        this.draggedContent = this.draggedContent.map(update.changes);
      if (update.transactions.length)
        this.lastKeyCode = this.lastSelectionTime = 0;
    }
    destroy() {
      if (this.mouseSelection)
        this.mouseSelection.destroy();
    }
  };
  function bindHandler(plugin, handler) {
    return (view2, event) => {
      try {
        return handler.call(plugin, event, view2);
      } catch (e2) {
        logException(view2.state, e2);
      }
    };
  }
  __name(bindHandler, "bindHandler");
  function computeHandlers(plugins) {
    let result = /* @__PURE__ */ Object.create(null);
    function record(type) {
      return result[type] || (result[type] = { observers: [], handlers: [] });
    }
    __name(record, "record");
    for (let plugin of plugins) {
      let spec = plugin.spec;
      if (spec && spec.domEventHandlers)
        for (let type in spec.domEventHandlers) {
          let f2 = spec.domEventHandlers[type];
          if (f2)
            record(type).handlers.push(bindHandler(plugin.value, f2));
        }
      if (spec && spec.domEventObservers)
        for (let type in spec.domEventObservers) {
          let f2 = spec.domEventObservers[type];
          if (f2)
            record(type).observers.push(bindHandler(plugin.value, f2));
        }
    }
    for (let type in handlers)
      record(type).handlers.push(handlers[type]);
    for (let type in observers)
      record(type).observers.push(observers[type]);
    return result;
  }
  __name(computeHandlers, "computeHandlers");
  var PendingKeys = [
    { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
    { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
    { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
    { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  var EmacsyPendingKeys = "dthko";
  var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  var dragScrollMargin = 6;
  function dragScrollSpeed(dist2) {
    return Math.max(0, dist2) * 0.7 + 8;
  }
  __name(dragScrollSpeed, "dragScrollSpeed");
  function dist(a2, b2) {
    return Math.max(Math.abs(a2.clientX - b2.clientX), Math.abs(a2.clientY - b2.clientY));
  }
  __name(dist, "dist");
  var MouseSelection = class {
    static {
      __name(this, "MouseSelection");
    }
    constructor(view2, startEvent, style, mustSelect) {
      this.view = view2;
      this.startEvent = startEvent;
      this.style = style;
      this.mustSelect = mustSelect;
      this.scrollSpeed = { x: 0, y: 0 };
      this.scrolling = -1;
      this.lastEvent = startEvent;
      this.scrollParents = scrollableParents(view2.contentDOM);
      this.atoms = view2.state.facet(atomicRanges).map((f2) => f2(view2));
      let doc2 = view2.contentDOM.ownerDocument;
      doc2.addEventListener("mousemove", this.move = this.move.bind(this));
      doc2.addEventListener("mouseup", this.up = this.up.bind(this));
      this.extend = startEvent.shiftKey;
      this.multiple = view2.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view2, startEvent);
      this.dragging = isInPrimarySelection(view2, startEvent) && getClickType(startEvent) == 1 ? null : false;
    }
    start(event) {
      if (this.dragging === false)
        this.select(event);
    }
    move(event) {
      if (event.buttons == 0)
        return this.destroy();
      if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
        return;
      this.select(this.lastEvent = event);
      let sx = 0, sy = 0;
      let left = 0, top2 = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
      if (this.scrollParents.x)
        ({ left, right } = this.scrollParents.x.getBoundingClientRect());
      if (this.scrollParents.y)
        ({ top: top2, bottom } = this.scrollParents.y.getBoundingClientRect());
      let margins = getScrollMargins(this.view);
      if (event.clientX - margins.left <= left + dragScrollMargin)
        sx = -dragScrollSpeed(left - event.clientX);
      else if (event.clientX + margins.right >= right - dragScrollMargin)
        sx = dragScrollSpeed(event.clientX - right);
      if (event.clientY - margins.top <= top2 + dragScrollMargin)
        sy = -dragScrollSpeed(top2 - event.clientY);
      else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
        sy = dragScrollSpeed(event.clientY - bottom);
      this.setScrollSpeed(sx, sy);
    }
    up(event) {
      if (this.dragging == null)
        this.select(this.lastEvent);
      if (!this.dragging)
        event.preventDefault();
      this.destroy();
    }
    destroy() {
      this.setScrollSpeed(0, 0);
      let doc2 = this.view.contentDOM.ownerDocument;
      doc2.removeEventListener("mousemove", this.move);
      doc2.removeEventListener("mouseup", this.up);
      this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
    }
    setScrollSpeed(sx, sy) {
      this.scrollSpeed = { x: sx, y: sy };
      if (sx || sy) {
        if (this.scrolling < 0)
          this.scrolling = setInterval(() => this.scroll(), 50);
      } else if (this.scrolling > -1) {
        clearInterval(this.scrolling);
        this.scrolling = -1;
      }
    }
    scroll() {
      let { x: x2, y: y2 } = this.scrollSpeed;
      if (x2 && this.scrollParents.x) {
        this.scrollParents.x.scrollLeft += x2;
        x2 = 0;
      }
      if (y2 && this.scrollParents.y) {
        this.scrollParents.y.scrollTop += y2;
        y2 = 0;
      }
      if (x2 || y2)
        this.view.win.scrollBy(x2, y2);
      if (this.dragging === false)
        this.select(this.lastEvent);
    }
    skipAtoms(sel) {
      let ranges = null;
      for (let i2 = 0; i2 < sel.ranges.length; i2++) {
        let range = sel.ranges[i2], updated = null;
        if (range.empty) {
          let pos = skipAtomicRanges(this.atoms, range.from, 0);
          if (pos != range.from)
            updated = EditorSelection.cursor(pos, -1);
        } else {
          let from = skipAtomicRanges(this.atoms, range.from, -1);
          let to = skipAtomicRanges(this.atoms, range.to, 1);
          if (from != range.from || to != range.to)
            updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
        }
        if (updated) {
          if (!ranges)
            ranges = sel.ranges.slice();
          ranges[i2] = updated;
        }
      }
      return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
    }
    select(event) {
      let { view: view2 } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
      if (this.mustSelect || !selection.eq(view2.state.selection, this.dragging === false))
        this.view.dispatch({
          selection,
          userEvent: "select.pointer"
        });
      this.mustSelect = false;
    }
    update(update) {
      if (update.transactions.some((tr) => tr.isUserEvent("input.type")))
        this.destroy();
      else if (this.style.update(update))
        setTimeout(() => this.select(this.lastEvent), 20);
    }
  };
  function addsSelectionRange(view2, event) {
    let facet2 = view2.state.facet(clickAddsSelectionRange);
    return facet2.length ? facet2[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  __name(addsSelectionRange, "addsSelectionRange");
  function dragMovesSelection(view2, event) {
    let facet2 = view2.state.facet(dragMovesSelection$1);
    return facet2.length ? facet2[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  __name(dragMovesSelection, "dragMovesSelection");
  function isInPrimarySelection(view2, event) {
    let { main } = view2.state.selection;
    if (main.empty)
      return false;
    let sel = getSelection(view2.root);
    if (!sel || sel.rangeCount == 0)
      return true;
    let rects = sel.getRangeAt(0).getClientRects();
    for (let i2 = 0; i2 < rects.length; i2++) {
      let rect = rects[i2];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
        return true;
    }
    return false;
  }
  __name(isInPrimarySelection, "isInPrimarySelection");
  function eventBelongsToEditor(view2, event) {
    if (!event.bubbles)
      return true;
    if (event.defaultPrevented)
      return false;
    for (let node = event.target, cView; node != view2.contentDOM; node = node.parentNode)
      if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
        return false;
    return true;
  }
  __name(eventBelongsToEditor, "eventBelongsToEditor");
  var handlers = /* @__PURE__ */ Object.create(null);
  var observers = /* @__PURE__ */ Object.create(null);
  var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
  function capturePaste(view2) {
    let parent = view2.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(() => {
      view2.focus();
      target.remove();
      doPaste(view2, target.value);
    }, 50);
  }
  __name(capturePaste, "capturePaste");
  function textFilter(state, facet2, text) {
    for (let filter of state.facet(facet2))
      text = filter(text, state);
    return text;
  }
  __name(textFilter, "textFilter");
  function doPaste(view2, input) {
    input = textFilter(view2.state, clipboardInputFilter, input);
    let { state } = view2, changes, i2 = 1, text = state.toText(input);
    let byLine = text.lines == state.selection.ranges.length;
    let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text.toString();
    if (linewise) {
      let lastLine = -1;
      changes = state.changeByRange((range) => {
        let line = state.doc.lineAt(range.from);
        if (line.from == lastLine)
          return { range };
        lastLine = line.from;
        let insert2 = state.toText((byLine ? text.line(i2++).text : input) + state.lineBreak);
        return {
          changes: { from: line.from, insert: insert2 },
          range: EditorSelection.cursor(range.from + insert2.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange((range) => {
        let line = text.line(i2++);
        return {
          changes: { from: range.from, to: range.to, insert: line.text },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text);
    }
    view2.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  __name(doPaste, "doPaste");
  observers.scroll = (view2) => {
    view2.inputState.lastScrollTop = view2.scrollDOM.scrollTop;
    view2.inputState.lastScrollLeft = view2.scrollDOM.scrollLeft;
  };
  handlers.keydown = (view2, event) => {
    view2.inputState.setSelectionOrigin("select");
    if (event.keyCode == 27 && view2.inputState.tabFocusMode != 0)
      view2.inputState.tabFocusMode = Date.now() + 2e3;
    return false;
  };
  observers.touchstart = (view2, e2) => {
    view2.inputState.lastTouchTime = Date.now();
    view2.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = (view2) => {
    view2.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = (view2, event) => {
    view2.observer.flush();
    if (view2.inputState.lastTouchTime > Date.now() - 2e3)
      return false;
    let style = null;
    for (let makeStyle of view2.state.facet(mouseSelectionStyle)) {
      style = makeStyle(view2, event);
      if (style)
        break;
    }
    if (!style && event.button == 0)
      style = basicMouseSelection(view2, event);
    if (style) {
      let mustFocus = !view2.hasFocus;
      view2.inputState.startMouseSelection(new MouseSelection(view2, event, style, mustFocus));
      if (mustFocus)
        view2.observer.ignore(() => {
          focusPreventScroll(view2.contentDOM);
          let active = view2.root.activeElement;
          if (active && !active.contains(view2.contentDOM))
            active.blur();
        });
      let mouseSel = view2.inputState.mouseSelection;
      if (mouseSel) {
        mouseSel.start(event);
        return mouseSel.dragging === false;
      }
    }
    return false;
  };
  function rangeForClick(view2, pos, bias, type) {
    if (type == 1) {
      return EditorSelection.cursor(pos, bias);
    } else if (type == 2) {
      return groupAt(view2.state, pos, bias);
    } else {
      let visual = LineView.find(view2.docView, pos), line = view2.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
      if (to < view2.state.doc.length && to == line.to)
        to++;
      return EditorSelection.range(from, to);
    }
  }
  __name(rangeForClick, "rangeForClick");
  var inside = /* @__PURE__ */ __name((x2, y2, rect) => y2 >= rect.top && y2 <= rect.bottom && x2 >= rect.left && x2 <= rect.right, "inside");
  function findPositionSide(view2, pos, x2, y2) {
    let line = LineView.find(view2.docView, pos);
    if (!line)
      return 1;
    let off = pos - line.posAtStart;
    if (off == 0)
      return 1;
    if (off == line.length)
      return -1;
    let before = line.coordsAt(off, -1);
    if (before && inside(x2, y2, before))
      return -1;
    let after = line.coordsAt(off, 1);
    if (after && inside(x2, y2, after))
      return 1;
    return before && before.bottom >= y2 ? -1 : 1;
  }
  __name(findPositionSide, "findPositionSide");
  function queryPos(view2, event) {
    let pos = view2.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    return { pos, bias: findPositionSide(view2, pos, event.clientX, event.clientY) };
  }
  __name(queryPos, "queryPos");
  var BadMouseDetail = browser.ie && browser.ie_version <= 11;
  var lastMouseDown = null;
  var lastMouseDownCount = 0;
  var lastMouseDownTime = 0;
  function getClickType(event) {
    if (!BadMouseDetail)
      return event.detail;
    let last = lastMouseDown, lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  __name(getClickType, "getClickType");
  function basicMouseSelection(view2, event) {
    let start = queryPos(view2, event), type = getClickType(event);
    let startSel = view2.state.selection;
    return {
      update(update) {
        if (update.docChanged) {
          start.pos = update.changes.mapPos(start.pos);
          startSel = startSel.map(update.changes);
        }
      },
      get(event2, extend, multiple) {
        let cur2 = queryPos(view2, event2), removed;
        let range = rangeForClick(view2, cur2.pos, cur2.bias, type);
        if (start.pos != cur2.pos && !extend) {
          let startRange = rangeForClick(view2, start.pos, start.bias, type);
          let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
          range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
        }
        if (extend)
          return startSel.replaceRange(startSel.main.extend(range.from, range.to));
        else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
          return removed;
        else if (multiple)
          return startSel.addRange(range);
        else
          return EditorSelection.create([range]);
      }
    };
  }
  __name(basicMouseSelection, "basicMouseSelection");
  function removeRangeAround(sel, pos) {
    for (let i2 = 0; i2 < sel.ranges.length; i2++) {
      let { from, to } = sel.ranges[i2];
      if (from <= pos && to >= pos)
        return EditorSelection.create(sel.ranges.slice(0, i2).concat(sel.ranges.slice(i2 + 1)), sel.mainIndex == i2 ? 0 : sel.mainIndex - (sel.mainIndex > i2 ? 1 : 0));
    }
    return null;
  }
  __name(removeRangeAround, "removeRangeAround");
  handlers.dragstart = (view2, event) => {
    let { selection: { main: range } } = view2.state;
    if (event.target.draggable) {
      let cView = view2.docView.nearest(event.target);
      if (cView && cView.isWidget) {
        let from = cView.posAtStart, to = from + cView.length;
        if (from >= range.to || to <= range.from)
          range = EditorSelection.range(from, to);
      }
    }
    let { inputState } = view2;
    if (inputState.mouseSelection)
      inputState.mouseSelection.dragging = true;
    inputState.draggedContent = range;
    if (event.dataTransfer) {
      event.dataTransfer.setData("Text", textFilter(view2.state, clipboardOutputFilter, view2.state.sliceDoc(range.from, range.to)));
      event.dataTransfer.effectAllowed = "copyMove";
    }
    return false;
  };
  handlers.dragend = (view2) => {
    view2.inputState.draggedContent = null;
    return false;
  };
  function dropText(view2, event, text, direct) {
    text = textFilter(view2.state, clipboardInputFilter, text);
    if (!text)
      return;
    let dropPos = view2.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    let { draggedContent } = view2.inputState;
    let del = direct && draggedContent && dragMovesSelection(view2, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
    let ins = { from: dropPos, insert: text };
    let changes = view2.state.changes(del ? [del, ins] : ins);
    view2.focus();
    view2.dispatch({
      changes,
      selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
      userEvent: del ? "move.drop" : "input.drop"
    });
    view2.inputState.draggedContent = null;
  }
  __name(dropText, "dropText");
  handlers.drop = (view2, event) => {
    if (!event.dataTransfer)
      return false;
    if (view2.state.readOnly)
      return true;
    let files = event.dataTransfer.files;
    if (files && files.length) {
      let text = Array(files.length), read = 0;
      let finishFile = /* @__PURE__ */ __name(() => {
        if (++read == files.length)
          dropText(view2, event, text.filter((s2) => s2 != null).join(view2.state.lineBreak), false);
      }, "finishFile");
      for (let i2 = 0; i2 < files.length; i2++) {
        let reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = () => {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
            text[i2] = reader.result;
          finishFile();
        };
        reader.readAsText(files[i2]);
      }
      return true;
    } else {
      let text = event.dataTransfer.getData("Text");
      if (text) {
        dropText(view2, event, text, true);
        return true;
      }
    }
    return false;
  };
  handlers.paste = (view2, event) => {
    if (view2.state.readOnly)
      return true;
    view2.observer.flush();
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      doPaste(view2, data.getData("text/plain") || data.getData("text/uri-list"));
      return true;
    } else {
      capturePaste(view2);
      return false;
    }
  };
  function captureCopy(view2, text) {
    let parent = view2.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text;
    target.focus();
    target.selectionEnd = text.length;
    target.selectionStart = 0;
    setTimeout(() => {
      target.remove();
      view2.focus();
    }, 50);
  }
  __name(captureCopy, "captureCopy");
  function copiedRange(state) {
    let content2 = [], ranges = [], linewise = false;
    for (let range of state.selection.ranges)
      if (!range.empty) {
        content2.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    if (!content2.length) {
      let upto = -1;
      for (let { from } of state.selection.ranges) {
        let line = state.doc.lineAt(from);
        if (line.number > upto) {
          content2.push(line.text);
          ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
        }
        upto = line.number;
      }
      linewise = true;
    }
    return { text: textFilter(state, clipboardOutputFilter, content2.join(state.lineBreak)), ranges, linewise };
  }
  __name(copiedRange, "copiedRange");
  var lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view2, event) => {
    let { text, ranges, linewise } = copiedRange(view2.state);
    if (!text && !linewise)
      return false;
    lastLinewiseCopy = linewise ? text : null;
    if (event.type == "cut" && !view2.state.readOnly)
      view2.dispatch({
        changes: ranges,
        scrollIntoView: true,
        userEvent: "delete.cut"
      });
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      data.clearData();
      data.setData("text/plain", text);
      return true;
    } else {
      captureCopy(view2, text);
      return false;
    }
  };
  var isFocusChange = /* @__PURE__ */ Annotation.define();
  function focusChangeTransaction(state, focus) {
    let effects = [];
    for (let getEffect of state.facet(focusChangeEffect)) {
      let effect = getEffect(state, focus);
      if (effect)
        effects.push(effect);
    }
    return effects.length ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  __name(focusChangeTransaction, "focusChangeTransaction");
  function updateForFocusChange(view2) {
    setTimeout(() => {
      let focus = view2.hasFocus;
      if (focus != view2.inputState.notifiedFocused) {
        let tr = focusChangeTransaction(view2.state, focus);
        if (tr)
          view2.dispatch(tr);
        else
          view2.update([]);
      }
    }, 10);
  }
  __name(updateForFocusChange, "updateForFocusChange");
  observers.focus = (view2) => {
    view2.inputState.lastFocusTime = Date.now();
    if (!view2.scrollDOM.scrollTop && (view2.inputState.lastScrollTop || view2.inputState.lastScrollLeft)) {
      view2.scrollDOM.scrollTop = view2.inputState.lastScrollTop;
      view2.scrollDOM.scrollLeft = view2.inputState.lastScrollLeft;
    }
    updateForFocusChange(view2);
  };
  observers.blur = (view2) => {
    view2.observer.clearSelectionRange();
    updateForFocusChange(view2);
  };
  observers.compositionstart = observers.compositionupdate = (view2) => {
    if (view2.observer.editContext)
      return;
    if (view2.inputState.compositionFirstChange == null)
      view2.inputState.compositionFirstChange = true;
    if (view2.inputState.composing < 0) {
      view2.inputState.composing = 0;
    }
  };
  observers.compositionend = (view2) => {
    if (view2.observer.editContext)
      return;
    view2.inputState.composing = -1;
    view2.inputState.compositionEndedAt = Date.now();
    view2.inputState.compositionPendingKey = true;
    view2.inputState.compositionPendingChange = view2.observer.pendingRecords().length > 0;
    view2.inputState.compositionFirstChange = null;
    if (browser.chrome && browser.android) {
      view2.observer.flushSoon();
    } else if (view2.inputState.compositionPendingChange) {
      Promise.resolve().then(() => view2.observer.flush());
    } else {
      setTimeout(() => {
        if (view2.inputState.composing < 0 && view2.docView.hasComposition)
          view2.update([]);
      }, 50);
    }
  };
  observers.contextmenu = (view2) => {
    view2.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view2, event) => {
    var _a2, _b;
    if (event.inputType == "insertReplacementText" && view2.observer.editContext) {
      let text = (_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.getData("text/plain"), ranges = event.getTargetRanges();
      if (text && ranges.length) {
        let r2 = ranges[0];
        let from = view2.posAtDOM(r2.startContainer, r2.startOffset), to = view2.posAtDOM(r2.endContainer, r2.endOffset);
        applyDOMChangeInner(view2, { from, to, insert: view2.state.toText(text) }, null);
        return true;
      }
    }
    let pending;
    if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
      view2.observer.delayAndroidKey(pending.key, pending.keyCode);
      if (pending.key == "Backspace" || pending.key == "Delete") {
        let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
        setTimeout(() => {
          var _a3;
          if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view2.hasFocus) {
            view2.contentDOM.blur();
            view2.focus();
          }
        }, 100);
      }
    }
    if (browser.ios && event.inputType == "deleteContentForward") {
      view2.observer.flushSoon();
    }
    if (browser.safari && event.inputType == "insertText" && view2.inputState.composing >= 0) {
      setTimeout(() => observers.compositionend(view2, event), 20);
    }
    return false;
  };
  var appliedFirefoxHack = /* @__PURE__ */ new Set();
  function firefoxCopyCutHack(doc2) {
    if (!appliedFirefoxHack.has(doc2)) {
      appliedFirefoxHack.add(doc2);
      doc2.addEventListener("copy", () => {
      });
      doc2.addEventListener("cut", () => {
      });
    }
  }
  __name(firefoxCopyCutHack, "firefoxCopyCutHack");
  var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  var heightChangeFlag = false;
  function clearHeightChangeFlag() {
    heightChangeFlag = false;
  }
  __name(clearHeightChangeFlag, "clearHeightChangeFlag");
  var HeightOracle = class {
    static {
      __name(this, "HeightOracle");
    }
    constructor(lineWrapping) {
      this.lineWrapping = lineWrapping;
      this.doc = Text.empty;
      this.heightSamples = {};
      this.lineHeight = 14;
      this.charWidth = 7;
      this.textHeight = 14;
      this.lineLength = 30;
    }
    heightForGap(from, to) {
      let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
      if (this.lineWrapping)
        lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
      return this.lineHeight * lines;
    }
    heightForLine(length) {
      if (!this.lineWrapping)
        return this.lineHeight;
      let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
    setDoc(doc2) {
      this.doc = doc2;
      return this;
    }
    mustRefreshForWrapping(whiteSpace) {
      return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
    }
    mustRefreshForHeights(lineHeights) {
      let newHeight = false;
      for (let i2 = 0; i2 < lineHeights.length; i2++) {
        let h2 = lineHeights[i2];
        if (h2 < 0) {
          i2++;
        } else if (!this.heightSamples[Math.floor(h2 * 10)]) {
          newHeight = true;
          this.heightSamples[Math.floor(h2 * 10)] = true;
        }
      }
      return newHeight;
    }
    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
      let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
      this.lineWrapping = lineWrapping;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.textHeight = textHeight;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (let i2 = 0; i2 < knownHeights.length; i2++) {
          let h2 = knownHeights[i2];
          if (h2 < 0)
            i2++;
          else
            this.heightSamples[Math.floor(h2 * 10)] = true;
        }
      }
      return changed;
    }
  };
  var MeasuredHeights = class {
    static {
      __name(this, "MeasuredHeights");
    }
    constructor(from, heights) {
      this.from = from;
      this.heights = heights;
      this.index = 0;
    }
    get more() {
      return this.index < this.heights.length;
    }
  };
  var BlockInfo = class _BlockInfo {
    static {
      __name(this, "BlockInfo");
    }
    /**
    @internal
    */
    constructor(from, length, top2, height, _content) {
      this.from = from;
      this.length = length;
      this.top = top2;
      this.height = height;
      this._content = _content;
    }
    /**
    The type of element this is. When querying lines, this may be
    an array of all the blocks that make up the line.
    */
    get type() {
      return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
    }
    /**
    The end of the element as a document position.
    */
    get to() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
    get bottom() {
      return this.top + this.height;
    }
    /**
    If this is a widget block, this will return the widget
    associated with it.
    */
    get widget() {
      return this._content instanceof PointDecoration ? this._content.widget : null;
    }
    /**
    If this is a textblock, this holds the number of line breaks
    that appear in widgets inside the block.
    */
    get widgetLineBreaks() {
      return typeof this._content == "number" ? this._content : 0;
    }
    /**
    @internal
    */
    join(other) {
      let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
      return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
    }
  };
  var QueryType = /* @__PURE__ */ function(QueryType3) {
    QueryType3[QueryType3["ByPos"] = 0] = "ByPos";
    QueryType3[QueryType3["ByHeight"] = 1] = "ByHeight";
    QueryType3[QueryType3["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType3;
  }(QueryType || (QueryType = {}));
  var Epsilon = 1e-3;
  var HeightMap = class _HeightMap {
    static {
      __name(this, "HeightMap");
    }
    constructor(length, height, flags = 2) {
      this.length = length;
      this.height = height;
      this.flags = flags;
    }
    get outdated() {
      return (this.flags & 2) > 0;
    }
    set outdated(value) {
      this.flags = (value ? 2 : 0) | this.flags & ~2;
    }
    setHeight(height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon)
          heightChangeFlag = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
    replace(_from, _to, nodes) {
      return _HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
    decomposeLeft(_to, result) {
      result.push(this);
    }
    decomposeRight(_from, result) {
      result.push(this);
    }
    applyChanges(decorations2, oldDoc, oracle, changes) {
      let me2 = this, doc2 = oracle.doc;
      for (let i2 = changes.length - 1; i2 >= 0; i2--) {
        let { fromA, toA, fromB, toB } = changes[i2];
        let start = me2.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
        let end = start.to >= toA ? start : me2.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i2 > 0 && start.from <= changes[i2 - 1].toA) {
          fromA = changes[i2 - 1].fromA;
          fromB = changes[i2 - 1].fromB;
          i2--;
          if (fromA < start.from)
            start = me2.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
        me2 = replace(me2, me2.replace(fromA, toA, nodes));
      }
      return me2.updateHeight(oracle, 0);
    }
    static empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
    static of(nodes) {
      if (nodes.length == 1)
        return nodes[0];
      let i2 = 0, j2 = nodes.length, before = 0, after = 0;
      for (; ; ) {
        if (i2 == j2) {
          if (before > after * 2) {
            let split = nodes[i2 - 1];
            if (split.break)
              nodes.splice(--i2, 1, split.left, null, split.right);
            else
              nodes.splice(--i2, 1, split.left, split.right);
            j2 += 1 + split.break;
            before -= split.size;
          } else if (after > before * 2) {
            let split = nodes[j2];
            if (split.break)
              nodes.splice(j2, 1, split.left, null, split.right);
            else
              nodes.splice(j2, 1, split.left, split.right);
            j2 += 2 + split.break;
            after -= split.size;
          } else {
            break;
          }
        } else if (before < after) {
          let next = nodes[i2++];
          if (next)
            before += next.size;
        } else {
          let next = nodes[--j2];
          if (next)
            after += next.size;
        }
      }
      let brk = 0;
      if (nodes[i2 - 1] == null) {
        brk = 1;
        i2--;
      } else if (nodes[i2] == null) {
        brk = 1;
        j2++;
      }
      return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i2)), brk, _HeightMap.of(nodes.slice(j2)));
    }
  };
  function replace(old, val) {
    if (old == val)
      return old;
    if (old.constructor != val.constructor)
      heightChangeFlag = true;
    return val;
  }
  __name(replace, "replace");
  HeightMap.prototype.size = 1;
  var HeightMapBlock = class extends HeightMap {
    static {
      __name(this, "HeightMapBlock");
    }
    constructor(length, height, deco) {
      super(length, height);
      this.deco = deco;
    }
    blockAt(_height, _oracle, top2, offset) {
      return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
    }
    lineAt(_value, _type, oracle, top2, offset) {
      return this.blockAt(0, oracle, top2, offset);
    }
    forEachLine(from, to, oracle, top2, offset, f2) {
      if (from <= offset + this.length && to >= offset)
        f2(this.blockAt(0, oracle, top2, offset));
    }
    updateHeight(oracle, offset = 0, _force = false, measured) {
      if (measured && measured.from <= offset && measured.more)
        this.setHeight(measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
    toString() {
      return `block(${this.length})`;
    }
  };
  var HeightMapText = class _HeightMapText extends HeightMapBlock {
    static {
      __name(this, "HeightMapText");
    }
    constructor(length, height) {
      super(length, height, null);
      this.collapsed = 0;
      this.widgetHeight = 0;
      this.breaks = 0;
    }
    blockAt(_height, _oracle, top2, offset) {
      return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
    }
    replace(_from, _to, nodes) {
      let node = nodes[0];
      if (nodes.length == 1 && (node instanceof _HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
        if (node instanceof HeightMapGap)
          node = new _HeightMapText(node.length, this.height);
        else
          node.height = this.height;
        if (!this.outdated)
          node.outdated = false;
        return node;
      } else {
        return HeightMap.of(nodes);
      }
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      if (measured && measured.from <= offset && measured.more)
        this.setHeight(measured.heights[measured.index++]);
      else if (force || this.outdated)
        this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
      this.outdated = false;
      return this;
    }
    toString() {
      return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
    }
  };
  var HeightMapGap = class _HeightMapGap extends HeightMap {
    static {
      __name(this, "HeightMapGap");
    }
    constructor(length) {
      super(length, 0);
    }
    heightMetrics(oracle, offset) {
      let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
      let lines = lastLine - firstLine + 1;
      let perLine, perChar = 0;
      if (oracle.lineWrapping) {
        let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
        perLine = totalPerLine / lines;
        if (this.length > lines + 1)
          perChar = (this.height - totalPerLine) / (this.length - lines - 1);
      } else {
        perLine = this.height / lines;
      }
      return { firstLine, lastLine, perLine, perChar };
    }
    blockAt(height, oracle, top2, offset) {
      let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      if (oracle.lineWrapping) {
        let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
        let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
        let lineTop = Math.max(top2, height - lineHeight / 2);
        return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
      } else {
        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
        let { from, length } = oracle.doc.line(firstLine + line);
        return new BlockInfo(from, length, top2 + perLine * line, perLine, 0);
      }
    }
    lineAt(value, type, oracle, top2, offset) {
      if (type == QueryType.ByHeight)
        return this.blockAt(value, oracle, top2, offset);
      if (type == QueryType.ByPosNoHeight) {
        let { from, to } = oracle.doc.lineAt(value);
        return new BlockInfo(from, to - from, 0, 0, 0);
      }
      let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
      let linesAbove = line.number - firstLine;
      let lineTop = top2 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
      return new BlockInfo(line.from, line.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
    }
    forEachLine(from, to, oracle, top2, offset, f2) {
      from = Math.max(from, offset);
      to = Math.min(to, offset + this.length);
      let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      for (let pos = from, lineTop = top2; pos <= to; ) {
        let line = oracle.doc.lineAt(pos);
        if (pos == from) {
          let linesAbove = line.number - firstLine;
          lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
        }
        let lineHeight = perLine + perChar * line.length;
        f2(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
        lineTop += lineHeight;
        pos = line.to + 1;
      }
    }
    replace(from, to, nodes) {
      let after = this.length - to;
      if (after > 0) {
        let last = nodes[nodes.length - 1];
        if (last instanceof _HeightMapGap)
          nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
        else
          nodes.push(null, new _HeightMapGap(after - 1));
      }
      if (from > 0) {
        let first = nodes[0];
        if (first instanceof _HeightMapGap)
          nodes[0] = new _HeightMapGap(from + first.length);
        else
          nodes.unshift(new _HeightMapGap(from - 1), null);
      }
      return HeightMap.of(nodes);
    }
    decomposeLeft(to, result) {
      result.push(new _HeightMapGap(to - 1), null);
    }
    decomposeRight(from, result) {
      result.push(null, new _HeightMapGap(this.length - from - 1));
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
        if (measured.from > offset)
          nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          let len = oracle.doc.lineAt(pos).length;
          if (nodes.length)
            nodes.push(null);
          let height = measured.heights[measured.index++];
          if (singleHeight == -1)
            singleHeight = height;
          else if (Math.abs(height - singleHeight) >= Epsilon)
            singleHeight = -2;
          let line = new HeightMapText(len, height);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end)
          nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
        let result = HeightMap.of(nodes);
        if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
          heightChangeFlag = true;
        return replace(this, result);
      } else if (force || this.outdated) {
        this.setHeight(oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
    toString() {
      return `gap(${this.length})`;
    }
  };
  var HeightMapBranch = class extends HeightMap {
    static {
      __name(this, "HeightMapBranch");
    }
    constructor(left, brk, right) {
      super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
      this.left = left;
      this.right = right;
      this.size = left.size + right.size;
    }
    get break() {
      return this.flags & 1;
    }
    blockAt(height, oracle, top2, offset) {
      let mid = top2 + this.left.height;
      return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
    }
    lineAt(value, type, oracle, top2, offset) {
      let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
      let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
      let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
      if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
        return base2;
      let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
      if (left)
        return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
      else
        return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
    }
    forEachLine(from, to, oracle, top2, offset, f2) {
      let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
      if (this.break) {
        if (from < rightOffset)
          this.left.forEachLine(from, to, oracle, top2, offset, f2);
        if (to >= rightOffset)
          this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f2);
      } else {
        let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
        if (from < mid.from)
          this.left.forEachLine(from, mid.from - 1, oracle, top2, offset, f2);
        if (mid.to >= from && mid.from <= to)
          f2(mid);
        if (to > mid.to)
          this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f2);
      }
    }
    replace(from, to, nodes) {
      let rightStart = this.left.length + this.break;
      if (to < rightStart)
        return this.balanced(this.left.replace(from, to, nodes), this.right);
      if (from > this.left.length)
        return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
      let result = [];
      if (from > 0)
        this.decomposeLeft(from, result);
      let left = result.length;
      for (let node of nodes)
        result.push(node);
      if (from > 0)
        mergeGaps(result, left - 1);
      if (to < this.length) {
        let right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
    decomposeLeft(to, result) {
      let left = this.left.length;
      if (to <= left)
        return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this.break) {
        left++;
        if (to >= left)
          result.push(null);
      }
      if (to > left)
        this.right.decomposeLeft(to - left, result);
    }
    decomposeRight(from, result) {
      let left = this.left.length, right = left + this.break;
      if (from >= right)
        return this.right.decomposeRight(from - right, result);
      if (from < left)
        this.left.decomposeRight(from, result);
      if (this.break && from < right)
        result.push(null);
      result.push(this.right);
    }
    balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size)
        return HeightMap.of(this.break ? [left, null, right] : [left, right]);
      this.left = replace(this.left, left);
      this.right = replace(this.right, right);
      this.setHeight(left.height + right.height);
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this.break + right.length;
      return this;
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more)
        rebalance = left = left.updateHeight(oracle, offset, force, measured);
      else
        left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more)
        rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
      else
        right.updateHeight(oracle, rightStart, force);
      if (rebalance)
        return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
    toString() {
      return this.left + (this.break ? " " : "-") + this.right;
    }
  };
  function mergeGaps(nodes, around) {
    let before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
      nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  __name(mergeGaps, "mergeGaps");
  var relevantWidgetHeight = 5;
  var NodeBuilder = class _NodeBuilder {
    static {
      __name(this, "NodeBuilder");
    }
    constructor(pos, oracle) {
      this.pos = pos;
      this.oracle = oracle;
      this.nodes = [];
      this.lineStart = -1;
      this.lineEnd = -1;
      this.covering = null;
      this.writtenTo = pos;
    }
    get isCovered() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
    span(_from, to) {
      if (this.lineStart > -1) {
        let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText)
          last.length += end - this.pos;
        else if (end > this.pos || !this.isCovered)
          this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
    point(from, to, deco) {
      if (from < to || deco.heightRelevant) {
        let height = deco.widget ? deco.widget.estimatedHeight : 0;
        let breaks = deco.widget ? deco.widget.lineBreaks : 0;
        if (height < 0)
          height = this.oracle.lineHeight;
        let len = to - from;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco));
        } else if (len || breaks || height >= relevantWidgetHeight) {
          this.addLineDeco(height, breaks, len);
        }
      } else if (to > from) {
        this.span(from, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos)
        this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
    enterLine() {
      if (this.lineStart > -1)
        return;
      let { from, to } = this.oracle.doc.lineAt(this.pos);
      this.lineStart = from;
      this.lineEnd = to;
      if (this.writtenTo < from) {
        if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
          this.nodes.push(this.blankContent(this.writtenTo, from - 1));
        this.nodes.push(null);
      }
      if (this.pos > from)
        this.nodes.push(new HeightMapText(this.pos - from, -1));
      this.writtenTo = this.pos;
    }
    blankContent(from, to) {
      let gap = new HeightMapGap(to - from);
      if (this.oracle.doc.lineAt(from).to == to)
        gap.flags |= 4;
      return gap;
    }
    ensureLine() {
      this.enterLine();
      let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText)
        return last;
      let line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
    addBlock(block) {
      this.enterLine();
      let deco = block.deco;
      if (deco && deco.startSide > 0 && !this.isCovered)
        this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (deco && deco.endSide > 0)
        this.covering = block;
    }
    addLineDeco(height, breaks, length) {
      let line = this.ensureLine();
      line.length += length;
      line.collapsed += length;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      line.breaks += breaks;
      this.writtenTo = this.pos = this.pos + length;
    }
    finish(from) {
      let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
        this.nodes.push(new HeightMapText(0, -1));
      else if (this.writtenTo < this.pos || last == null)
        this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      let pos = from;
      for (let node of this.nodes) {
        if (node instanceof HeightMapText)
          node.updateHeight(this.oracle, pos);
        pos += node ? node.length : 1;
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
    static build(oracle, decorations2, from, to) {
      let builder = new _NodeBuilder(from, oracle);
      RangeSet.spans(decorations2, from, to, builder, 0);
      return builder.finish(from);
    }
  };
  function heightRelevantDecoChanges(a2, b2, diff) {
    let comp = new DecorationComparator2();
    RangeSet.compare(a2, b2, diff, comp, 0);
    return comp.changes;
  }
  __name(heightRelevantDecoChanges, "heightRelevantDecoChanges");
  var DecorationComparator2 = class {
    static {
      __name(this, "DecorationComparator");
    }
    constructor() {
      this.changes = [];
    }
    compareRange() {
    }
    comparePoint(from, to, a2, b2) {
      if (from < to || a2 && a2.heightRelevant || b2 && b2.heightRelevant)
        addRange(from, to, this.changes, 5);
    }
  };
  function visiblePixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
    let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
    for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
      if (parent.nodeType == 1) {
        let elt = parent;
        let style = window.getComputedStyle(elt);
        if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
          let parentRect = elt.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top2 = Math.max(top2, parentRect.top);
          bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
        }
        parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
      } else if (parent.nodeType == 11) {
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top2 - (rect.top + paddingTop),
      bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
    };
  }
  __name(visiblePixelRange, "visiblePixelRange");
  function inWindow(elt) {
    let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
    return rect.left < win.innerWidth && rect.right > 0 && rect.top < win.innerHeight && rect.bottom > 0;
  }
  __name(inWindow, "inWindow");
  function fullPixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  __name(fullPixelRange, "fullPixelRange");
  var LineGap = class {
    static {
      __name(this, "LineGap");
    }
    constructor(from, to, size, displaySize) {
      this.from = from;
      this.to = to;
      this.size = size;
      this.displaySize = displaySize;
    }
    static same(a2, b2) {
      if (a2.length != b2.length)
        return false;
      for (let i2 = 0; i2 < a2.length; i2++) {
        let gA = a2[i2], gB = b2[i2];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
          return false;
      }
      return true;
    }
    draw(viewState, wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
      }).range(this.from, this.to);
    }
  };
  var LineGapWidget = class extends WidgetType {
    static {
      __name(this, "LineGapWidget");
    }
    constructor(size, vertical) {
      super();
      this.size = size;
      this.vertical = vertical;
    }
    eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
    toDOM() {
      let elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
    get estimatedHeight() {
      return this.vertical ? this.size : -1;
    }
  };
  var ViewState = class {
    static {
      __name(this, "ViewState");
    }
    constructor(state) {
      this.state = state;
      this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
      this.inView = true;
      this.paddingTop = 0;
      this.paddingBottom = 0;
      this.contentDOMWidth = 0;
      this.contentDOMHeight = 0;
      this.editorHeight = 0;
      this.editorWidth = 0;
      this.scrollTop = 0;
      this.scrolledToBottom = false;
      this.scaleX = 1;
      this.scaleY = 1;
      this.scrollAnchorPos = 0;
      this.scrollAnchorHeight = -1;
      this.scaler = IdScaler;
      this.scrollTarget = null;
      this.printing = false;
      this.mustMeasureContent = true;
      this.defaultTextDirection = Direction.LTR;
      this.visibleRanges = [];
      this.mustEnforceCursorAssoc = false;
      let guessWrapping = state.facet(contentAttributes).some((v2) => typeof v2 != "function" && v2.class == "cm-lineWrapping");
      this.heightOracle = new HeightOracle(guessWrapping);
      this.stateDeco = state.facet(decorations).filter((d2) => typeof d2 != "function");
      this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
      for (let i2 = 0; i2 < 2; i2++) {
        this.viewport = this.getViewport(0, null);
        if (!this.updateForViewport())
          break;
      }
      this.updateViewportLines();
      this.lineGaps = this.ensureLineGaps([]);
      this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
      this.computeVisibleRanges();
    }
    updateForViewport() {
      let viewports = [this.viewport], { main } = this.state.selection;
      for (let i2 = 0; i2 <= 1; i2++) {
        let pos = i2 ? main.head : main.anchor;
        if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
          let { from, to } = this.lineBlockAt(pos);
          viewports.push(new Viewport(from, to));
        }
      }
      this.viewports = viewports.sort((a2, b2) => a2.from - b2.from);
      return this.updateScaler();
    }
    updateScaler() {
      let scaler = this.scaler;
      this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
      return scaler.eq(this.scaler) ? 0 : 2;
    }
    updateViewportLines() {
      this.viewportLines = [];
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
        this.viewportLines.push(scaleBlock(block, this.scaler));
      });
    }
    update(update, scrollTarget = null) {
      this.state = update.state;
      let prevDeco = this.stateDeco;
      this.stateDeco = this.state.facet(decorations).filter((d2) => typeof d2 != "function");
      let contentChanges = update.changedRanges;
      let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
      let prevHeight = this.heightMap.height;
      let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
      clearHeightChangeFlag();
      this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight || heightChangeFlag)
        update.flags |= 2;
      if (scrollAnchor) {
        this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
        this.scrollAnchorHeight = scrollAnchor.top;
      } else {
        this.scrollAnchorPos = -1;
        this.scrollAnchorHeight = prevHeight;
      }
      let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
      if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
        viewport = this.getViewport(0, scrollTarget);
      let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
      this.viewport = viewport;
      update.flags |= this.updateForViewport();
      if (viewportChange || !update.changes.empty || update.flags & 2)
        this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
        this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
      update.flags |= this.computeVisibleRanges(update.changes);
      if (scrollTarget)
        this.scrollTarget = scrollTarget;
      if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
        this.mustEnforceCursorAssoc = true;
    }
    measure(view2) {
      let dom = view2.contentDOM, style = window.getComputedStyle(dom);
      let oracle = this.heightOracle;
      let whiteSpace = style.whiteSpace;
      this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
      let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
      let domRect = dom.getBoundingClientRect();
      let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
      this.contentDOMHeight = domRect.height;
      this.mustMeasureContent = false;
      let result = 0, bias = 0;
      if (domRect.width && domRect.height) {
        let { scaleX, scaleY } = getScale(dom, domRect);
        if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          result |= 16;
          refresh = measureContent = true;
        }
      }
      let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
      let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
      if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
        this.paddingTop = paddingTop;
        this.paddingBottom = paddingBottom;
        result |= 16 | 2;
      }
      if (this.editorWidth != view2.scrollDOM.clientWidth) {
        if (oracle.lineWrapping)
          measureContent = true;
        this.editorWidth = view2.scrollDOM.clientWidth;
        result |= 16;
      }
      let scrollTop = view2.scrollDOM.scrollTop * this.scaleY;
      if (this.scrollTop != scrollTop) {
        this.scrollAnchorHeight = -1;
        this.scrollTop = scrollTop;
      }
      this.scrolledToBottom = isScrolledToBottom(view2.scrollDOM);
      let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
      let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (inView != this.inView) {
        this.inView = inView;
        if (inView)
          measureContent = true;
      }
      if (!this.inView && !this.scrollTarget && !inWindow(view2.dom))
        return 0;
      let contentWidth = domRect.width;
      if (this.contentDOMWidth != contentWidth || this.editorHeight != view2.scrollDOM.clientHeight) {
        this.contentDOMWidth = domRect.width;
        this.editorHeight = view2.scrollDOM.clientHeight;
        result |= 16;
      }
      if (measureContent) {
        let lineHeights = view2.docView.measureVisibleLineHeights(this.viewport);
        if (oracle.mustRefreshForHeights(lineHeights))
          refresh = true;
        if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
          let { lineHeight, charWidth, textHeight } = view2.docView.measureTextSize();
          refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
          if (refresh) {
            view2.docView.minWidth = 0;
            result |= 16;
          }
        }
        if (dTop > 0 && dBottom > 0)
          bias = Math.max(dTop, dBottom);
        else if (dTop < 0 && dBottom < 0)
          bias = Math.min(dTop, dBottom);
        clearHeightChangeFlag();
        for (let vp of this.viewports) {
          let heights = vp.from == this.viewport.from ? lineHeights : view2.docView.measureVisibleLineHeights(vp);
          this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view2.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
        }
        if (heightChangeFlag)
          result |= 2;
      }
      let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
      if (viewportChange) {
        if (result & 2)
          result |= this.updateScaler();
        this.viewport = this.getViewport(bias, this.scrollTarget);
        result |= this.updateForViewport();
      }
      if (result & 2 || viewportChange)
        this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
        this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view2));
      result |= this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        view2.docView.enforceCursorAssoc();
      }
      return result;
    }
    get visibleTop() {
      return this.scaler.fromDOM(this.pixelViewport.top);
    }
    get visibleBottom() {
      return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
    getViewport(bias, scrollTarget) {
      let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
      let map = this.heightMap, oracle = this.heightOracle;
      let { visibleTop, visibleBottom } = this;
      let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
      if (scrollTarget) {
        let { head } = scrollTarget.range;
        if (head < viewport.from || head > viewport.to) {
          let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
          let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
          if (scrollTarget.y == "center")
            topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
          else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
            topPos = block.top;
          else
            topPos = block.bottom - viewHeight;
          viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
        }
      }
      return viewport;
    }
    mapViewport(viewport, changes) {
      let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
      return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
    viewportIsAppropriate({ from, to }, bias = 0) {
      if (!this.inView)
        return true;
      let { top: top2 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
      let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
      let { visibleTop, visibleBottom } = this;
      return (from == 0 || top2 <= visibleTop - Math.max(10, Math.min(
        -bias,
        250
        /* VP.MaxCoverMargin */
      ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
        bias,
        250
        /* VP.MaxCoverMargin */
      ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
    }
    mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty)
        return gaps;
      let mapped = [];
      for (let gap of gaps)
        if (!changes.touchesRange(gap.from, gap.to))
          mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
    ensureLineGaps(current, mayMeasure) {
      let wrapping = this.heightOracle.lineWrapping;
      let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
      if (this.defaultTextDirection != Direction.LTR && !wrapping)
        return [];
      let gaps = [];
      let addGap = /* @__PURE__ */ __name((from, to, line, structure) => {
        if (to - from < halfMargin)
          return;
        let sel = this.state.selection.main, avoid = [sel.from];
        if (!sel.empty)
          avoid.push(sel.to);
        for (let pos of avoid) {
          if (pos > from && pos < to) {
            addGap(from, pos - 10, line, structure);
            addGap(pos + 10, to, line, structure);
            return;
          }
        }
        let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
        if (!gap) {
          if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to && r2.to >= to)) {
            let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
            if (lineStart > from)
              to = lineStart;
          }
          let size = this.gapSize(line, from, to, structure);
          let displaySize = wrapping || size < 2e6 ? size : 2e6;
          gap = new LineGap(from, to, size, displaySize);
        }
        gaps.push(gap);
      }, "addGap");
      let checkLine = /* @__PURE__ */ __name((line) => {
        if (line.length < doubleMargin || line.type != BlockType.Text)
          return;
        let structure = lineStructure(line.from, line.to, this.stateDeco);
        if (structure.total < doubleMargin)
          return;
        let target = this.scrollTarget ? this.scrollTarget.range.head : null;
        let viewFrom, viewTo;
        if (wrapping) {
          let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
          let top2, bot;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
            top2 = targetFrac - spaceFrac;
            bot = targetFrac + spaceFrac;
          } else {
            top2 = (this.visibleTop - line.top - marginHeight) / line.height;
            bot = (this.visibleBottom - line.top + marginHeight) / line.height;
          }
          viewFrom = findPosition(structure, top2);
          viewTo = findPosition(structure, bot);
        } else {
          let totalWidth = structure.total * this.heightOracle.charWidth;
          let marginWidth = margin * this.heightOracle.charWidth;
          let horizOffset = 0;
          if (totalWidth > 2e6)
            for (let old of current) {
              if (old.from >= line.from && old.from < line.to && old.size != old.displaySize && old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                horizOffset = old.size - old.displaySize;
            }
          let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
          let left, right;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
            left = targetFrac - spaceFrac;
            right = targetFrac + spaceFrac;
          } else {
            left = (pxLeft - marginWidth) / totalWidth;
            right = (pxRight + marginWidth) / totalWidth;
          }
          viewFrom = findPosition(structure, left);
          viewTo = findPosition(structure, right);
        }
        if (viewFrom > line.from)
          addGap(line.from, viewFrom, line, structure);
        if (viewTo < line.to)
          addGap(viewTo, line.to, line, structure);
      }, "checkLine");
      for (let line of this.viewportLines) {
        if (Array.isArray(line.type))
          line.type.forEach(checkLine);
        else
          checkLine(line);
      }
      return gaps;
    }
    gapSize(line, from, to, structure) {
      let fraction = findFraction(structure, to) - findFraction(structure, from);
      if (this.heightOracle.lineWrapping) {
        return line.height * fraction;
      } else {
        return structure.total * this.heightOracle.charWidth * fraction;
      }
    }
    updateLineGaps(gaps) {
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
      }
    }
    computeVisibleRanges(changes) {
      let deco = this.stateDeco;
      if (this.lineGaps.length)
        deco = deco.concat(this.lineGapDeco);
      let ranges = [];
      RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span(from, to) {
          ranges.push({ from, to });
        },
        point() {
        }
      }, 20);
      let changed = 0;
      if (ranges.length != this.visibleRanges.length) {
        changed = 8 | 4;
      } else {
        for (let i2 = 0; i2 < ranges.length && !(changed & 8); i2++) {
          let old = this.visibleRanges[i2], nw = ranges[i2];
          if (old.from != nw.from || old.to != nw.to) {
            changed |= 4;
            if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
              changed |= 8;
          }
        }
      }
      this.visibleRanges = ranges;
      return changed;
    }
    lineBlockAt(pos) {
      return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b2) => b2.from <= pos && b2.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
    }
    lineBlockAtHeight(height) {
      return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l2) => l2.top <= height && l2.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
    }
    scrollAnchorAt(scrollTop) {
      let block = this.lineBlockAtHeight(scrollTop + 8);
      return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
    }
    elementAtHeight(height) {
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
    }
    get docHeight() {
      return this.scaler.toDOM(this.heightMap.height);
    }
    get contentHeight() {
      return this.docHeight + this.paddingTop + this.paddingBottom;
    }
  };
  var Viewport = class {
    static {
      __name(this, "Viewport");
    }
    constructor(from, to) {
      this.from = from;
      this.to = to;
    }
  };
  function lineStructure(from, to, stateDeco) {
    let ranges = [], pos = from, total = 0;
    RangeSet.spans(stateDeco, from, to, {
      span() {
      },
      point(from2, to2) {
        if (from2 > pos) {
          ranges.push({ from: pos, to: from2 });
          total += from2 - pos;
        }
        pos = to2;
      }
    }, 20);
    if (pos < to) {
      ranges.push({ from: pos, to });
      total += to - pos;
    }
    return { total, ranges };
  }
  __name(lineStructure, "lineStructure");
  function findPosition({ total, ranges }, ratio) {
    if (ratio <= 0)
      return ranges[0].from;
    if (ratio >= 1)
      return ranges[ranges.length - 1].to;
    let dist2 = Math.floor(total * ratio);
    for (let i2 = 0; ; i2++) {
      let { from, to } = ranges[i2], size = to - from;
      if (dist2 <= size)
        return from + dist2;
      dist2 -= size;
    }
  }
  __name(findPosition, "findPosition");
  function findFraction(structure, pos) {
    let counted = 0;
    for (let { from, to } of structure.ranges) {
      if (pos <= to) {
        counted += pos - from;
        break;
      }
      counted += to - from;
    }
    return counted / structure.total;
  }
  __name(findFraction, "findFraction");
  function find(array, f2) {
    for (let val of array)
      if (f2(val))
        return val;
    return void 0;
  }
  __name(find, "find");
  var IdScaler = {
    toDOM(n2) {
      return n2;
    },
    fromDOM(n2) {
      return n2;
    },
    scale: 1,
    eq(other) {
      return other == this;
    }
  };
  var BigScaler = class _BigScaler {
    static {
      __name(this, "BigScaler");
    }
    constructor(oracle, heightMap, viewports) {
      let vpHeight = 0, base2 = 0, domBase = 0;
      this.viewports = viewports.map(({ from, to }) => {
        let top2 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
        let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
        vpHeight += bottom - top2;
        return { from, to, top: top2, bottom, domTop: 0, domBottom: 0 };
      });
      this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
      for (let obj of this.viewports) {
        obj.domTop = domBase + (obj.top - base2) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base2 = obj.bottom;
      }
    }
    toDOM(n2) {
      for (let i2 = 0, base2 = 0, domBase = 0; ; i2++) {
        let vp = i2 < this.viewports.length ? this.viewports[i2] : null;
        if (!vp || n2 < vp.top)
          return domBase + (n2 - base2) * this.scale;
        if (n2 <= vp.bottom)
          return vp.domTop + (n2 - vp.top);
        base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
    fromDOM(n2) {
      for (let i2 = 0, base2 = 0, domBase = 0; ; i2++) {
        let vp = i2 < this.viewports.length ? this.viewports[i2] : null;
        if (!vp || n2 < vp.domTop)
          return base2 + (n2 - domBase) / this.scale;
        if (n2 <= vp.domBottom)
          return vp.top + (n2 - vp.domTop);
        base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
    eq(other) {
      if (!(other instanceof _BigScaler))
        return false;
      return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp, i2) => vp.from == other.viewports[i2].from && vp.to == other.viewports[i2].to);
    }
  };
  function scaleBlock(block, scaler) {
    if (scaler.scale == 1)
      return block;
    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b2) => scaleBlock(b2, scaler)) : block._content);
  }
  __name(scaleBlock, "scaleBlock");
  var theme = /* @__PURE__ */ Facet.define({ combine: /* @__PURE__ */ __name((strs) => strs.join(" "), "combine") });
  var darkTheme = /* @__PURE__ */ Facet.define({ combine: /* @__PURE__ */ __name((values) => values.indexOf(true) > -1, "combine") });
  var baseThemeID = /* @__PURE__ */ StyleModule.newName();
  var baseLightID = /* @__PURE__ */ StyleModule.newName();
  var baseDarkID = /* @__PURE__ */ StyleModule.newName();
  var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, (m2) => {
          if (m2 == "&")
            return main;
          if (!scopes || !scopes[m2])
            throw new RangeError(`Unsupported selector: ${m2}`);
          return scopes[m2];
        }) : main + " " + sel;
      }
    });
  }
  __name(buildTheme, "buildTheme");
  var baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
    "&": {
      position: "relative !important",
      boxSizing: "border-box",
      "&.cm-focused": {
        // Provide a simple default outline to make sure a focused
        // editor is visually distinct. Can't leave the default behavior
        // because that will apply to the content element, which is
        // inside the scrollable container and doesn't include the
        // gutters. We also can't use an 'auto' outline, since those
        // are, for some reason, drawn behind the element content, which
        // will cause things like the active line background to cover
        // the outline (#297).
        outline: "1px dotted #212121"
      },
      display: "flex !important",
      flexDirection: "column"
    },
    ".cm-scroller": {
      display: "flex !important",
      alignItems: "flex-start !important",
      fontFamily: "monospace",
      lineHeight: 1.4,
      height: "100%",
      overflowX: "auto",
      position: "relative",
      zIndex: 0,
      overflowAnchor: "none"
    },
    ".cm-content": {
      margin: 0,
      flexGrow: 2,
      flexShrink: 0,
      display: "block",
      whiteSpace: "pre",
      wordWrap: "normal",
      // https://github.com/codemirror/dev/issues/456
      boxSizing: "border-box",
      minHeight: "100%",
      padding: "4px 0",
      outline: "none",
      "&[contenteditable=true]": {
        WebkitUserModify: "read-write-plaintext-only"
      }
    },
    ".cm-lineWrapping": {
      whiteSpace_fallback: "pre-wrap",
      // For IE
      whiteSpace: "break-spaces",
      wordBreak: "break-word",
      // For Safari, which doesn't support overflow-wrap: anywhere
      overflowWrap: "anywhere",
      flexShrink: 1
    },
    "&light .cm-content": { caretColor: "black" },
    "&dark .cm-content": { caretColor: "white" },
    ".cm-line": {
      display: "block",
      padding: "0 2px 0 6px"
    },
    ".cm-layer": {
      position: "absolute",
      left: 0,
      top: 0,
      contain: "size style",
      "& > *": {
        position: "absolute"
      }
    },
    "&light .cm-selectionBackground": {
      background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
      background: "#222"
    },
    "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#d7d4f0"
    },
    "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#233"
    },
    ".cm-cursorLayer": {
      pointerEvents: "none"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
      animation: "steps(1) cm-blink 1.2s infinite"
    },
    // Two animations defined so that we can switch between them to
    // restart the animation without forcing another style
    // recomputation.
    "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
    "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
    ".cm-cursor, .cm-dropCursor": {
      borderLeft: "1.2px solid black",
      marginLeft: "-0.6px",
      pointerEvents: "none"
    },
    ".cm-cursor": {
      display: "none"
    },
    "&dark .cm-cursor": {
      borderLeftColor: "#ddd"
    },
    ".cm-dropCursor": {
      position: "absolute"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
      display: "block"
    },
    ".cm-iso": {
      unicodeBidi: "isolate"
    },
    ".cm-announced": {
      position: "fixed",
      top: "-10000px"
    },
    "@media print": {
      ".cm-announced": { display: "none" }
    },
    "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
    "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
    "&light .cm-specialChar": { color: "red" },
    "&dark .cm-specialChar": { color: "#f78" },
    ".cm-gutters": {
      flexShrink: 0,
      display: "flex",
      height: "100%",
      boxSizing: "border-box",
      insetInlineStart: 0,
      zIndex: 200
    },
    "&light .cm-gutters": {
      backgroundColor: "#f5f5f5",
      color: "#6c6c6c",
      borderRight: "1px solid #ddd"
    },
    "&dark .cm-gutters": {
      backgroundColor: "#333338",
      color: "#ccc"
    },
    ".cm-gutter": {
      display: "flex !important",
      // Necessary -- prevents margin collapsing
      flexDirection: "column",
      flexShrink: 0,
      boxSizing: "border-box",
      minHeight: "100%",
      overflow: "hidden"
    },
    ".cm-gutterElement": {
      boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      padding: "0 3px 0 5px",
      minWidth: "20px",
      textAlign: "right",
      whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
      backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
      backgroundColor: "#222227"
    },
    ".cm-panels": {
      boxSizing: "border-box",
      position: "sticky",
      left: 0,
      right: 0,
      zIndex: 300
    },
    "&light .cm-panels": {
      backgroundColor: "#f5f5f5",
      color: "black"
    },
    "&light .cm-panels-top": {
      borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
      borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tab": {
      display: "inline-block",
      overflow: "hidden",
      verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
      verticalAlign: "text-top",
      height: "1em",
      width: 0,
      display: "inline"
    },
    ".cm-placeholder": {
      color: "#888",
      display: "inline-block",
      verticalAlign: "top",
      userSelect: "none"
    },
    ".cm-highlightSpace": {
      backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
      backgroundPosition: "center"
    },
    ".cm-highlightTab": {
      backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
      backgroundSize: "auto 100%",
      backgroundPosition: "right 90%",
      backgroundRepeat: "no-repeat"
    },
    ".cm-trailingSpace": {
      backgroundColor: "#ff332255"
    },
    ".cm-button": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      padding: ".2em 1em",
      borderRadius: "1px"
    },
    "&light .cm-button": {
      backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
      }
    },
    "&dark .cm-button": {
      backgroundImage: "linear-gradient(#393939, #111)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#111, #333)"
      }
    },
    ".cm-textfield": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      border: "1px solid silver",
      padding: ".2em .5em"
    },
    "&light .cm-textfield": {
      backgroundColor: "white"
    },
    "&dark .cm-textfield": {
      border: "1px solid #555",
      backgroundColor: "inherit"
    }
  }, lightDarkIDs);
  var observeOptions = {
    childList: true,
    characterData: true,
    subtree: true,
    attributes: true,
    characterDataOldValue: true
  };
  var useCharData = browser.ie && browser.ie_version <= 11;
  var DOMObserver = class {
    static {
      __name(this, "DOMObserver");
    }
    constructor(view2) {
      this.view = view2;
      this.active = false;
      this.editContext = null;
      this.selectionRange = new DOMSelectionState();
      this.selectionChanged = false;
      this.delayedFlush = -1;
      this.resizeTimeout = -1;
      this.queue = [];
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
      this.lastChange = 0;
      this.scrollTargets = [];
      this.intersection = null;
      this.resizeScroll = null;
      this.intersecting = false;
      this.gapIntersection = null;
      this.gaps = [];
      this.printQuery = null;
      this.parentCheck = -1;
      this.dom = view2.contentDOM;
      this.observer = new MutationObserver((mutations) => {
        for (let mut of mutations)
          this.queue.push(mut);
        if ((browser.ie && browser.ie_version <= 11 || browser.ios && view2.composing) && mutations.some((m2) => m2.type == "childList" && m2.removedNodes.length || m2.type == "characterData" && m2.oldValue.length > m2.target.nodeValue.length))
          this.flushSoon();
        else
          this.flush();
      });
      if (window.EditContext && view2.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
      !(browser.chrome && browser.chrome_version < 126)) {
        this.editContext = new EditContextManager(view2);
        if (view2.state.facet(editable))
          view2.contentDOM.editContext = this.editContext.editContext;
      }
      if (useCharData)
        this.onCharData = (event) => {
          this.queue.push({
            target: event.target,
            type: "characterData",
            oldValue: event.prevValue
          });
          this.flushSoon();
        };
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.onResize = this.onResize.bind(this);
      this.onPrint = this.onPrint.bind(this);
      this.onScroll = this.onScroll.bind(this);
      if (window.matchMedia)
        this.printQuery = window.matchMedia("print");
      if (typeof ResizeObserver == "function") {
        this.resizeScroll = new ResizeObserver(() => {
          var _a2;
          if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
            this.onResize();
        });
        this.resizeScroll.observe(view2.scrollDOM);
      }
      this.addWindowListeners(this.win = view2.win);
      this.start();
      if (typeof IntersectionObserver == "function") {
        this.intersection = new IntersectionObserver((entries) => {
          if (this.parentCheck < 0)
            this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
            this.intersecting = !this.intersecting;
            if (this.intersecting != this.view.inView)
              this.onScrollChanged(document.createEvent("Event"));
          }
        }, { threshold: [0, 1e-3] });
        this.intersection.observe(this.dom);
        this.gapIntersection = new IntersectionObserver((entries) => {
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
            this.onScrollChanged(document.createEvent("Event"));
        }, {});
      }
      this.listenForScroll();
      this.readSelectionRange();
    }
    onScrollChanged(e2) {
      this.view.inputState.runHandlers("scroll", e2);
      if (this.intersecting)
        this.view.measure();
    }
    onScroll(e2) {
      if (this.intersecting)
        this.flush(false);
      if (this.editContext)
        this.view.requestMeasure(this.editContext.measureReq);
      this.onScrollChanged(e2);
    }
    onResize() {
      if (this.resizeTimeout < 0)
        this.resizeTimeout = setTimeout(() => {
          this.resizeTimeout = -1;
          this.view.requestMeasure();
        }, 50);
    }
    onPrint(event) {
      if ((event.type == "change" || !event.type) && !event.matches)
        return;
      this.view.viewState.printing = true;
      this.view.measure();
      setTimeout(() => {
        this.view.viewState.printing = false;
        this.view.requestMeasure();
      }, 500);
    }
    updateGaps(gaps) {
      if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g2, i2) => g2 != gaps[i2]))) {
        this.gapIntersection.disconnect();
        for (let gap of gaps)
          this.gapIntersection.observe(gap);
        this.gaps = gaps;
      }
    }
    onSelectionChange(event) {
      let wasChanged = this.selectionChanged;
      if (!this.readSelectionRange() || this.delayedAndroidKey)
        return;
      let { view: view2 } = this, sel = this.selectionRange;
      if (view2.state.facet(editable) ? view2.root.activeElement != this.dom : !hasSelection(this.dom, sel))
        return;
      let context = sel.anchorNode && view2.docView.nearest(sel.anchorNode);
      if (context && context.ignoreEvent(event)) {
        if (!wasChanged)
          this.selectionChanged = false;
        return;
      }
      if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view2.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
      sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
        this.flushSoon();
      else
        this.flush(false);
    }
    readSelectionRange() {
      let { view: view2 } = this;
      let selection = getSelection(view2.root);
      if (!selection)
        return false;
      let range = browser.safari && view2.root.nodeType == 11 && view2.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
      if (!range || this.selectionRange.eq(range))
        return false;
      let local = hasSelection(this.dom, range);
      if (local && !this.selectionChanged && view2.inputState.lastFocusTime > Date.now() - 200 && view2.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
        this.view.inputState.lastFocusTime = 0;
        view2.docView.updateSelection();
        return false;
      }
      this.selectionRange.setRange(range);
      if (local)
        this.selectionChanged = true;
      return true;
    }
    setSelectionRange(anchor, head) {
      this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
      this.selectionChanged = false;
    }
    clearSelectionRange() {
      this.selectionRange.set(null, 0, null, 0);
    }
    listenForScroll() {
      this.parentCheck = -1;
      let i2 = 0, changed = null;
      for (let dom = this.dom; dom; ) {
        if (dom.nodeType == 1) {
          if (!changed && i2 < this.scrollTargets.length && this.scrollTargets[i2] == dom)
            i2++;
          else if (!changed)
            changed = this.scrollTargets.slice(0, i2);
          if (changed)
            changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i2 < this.scrollTargets.length && !changed)
        changed = this.scrollTargets.slice(0, i2);
      if (changed) {
        for (let dom of this.scrollTargets)
          dom.removeEventListener("scroll", this.onScroll);
        for (let dom of this.scrollTargets = changed)
          dom.addEventListener("scroll", this.onScroll);
      }
    }
    ignore(f2) {
      if (!this.active)
        return f2();
      try {
        this.stop();
        return f2();
      } finally {
        this.start();
        this.clear();
      }
    }
    start() {
      if (this.active)
        return;
      this.observer.observe(this.dom, observeOptions);
      if (useCharData)
        this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
    stop() {
      if (!this.active)
        return;
      this.active = false;
      this.observer.disconnect();
      if (useCharData)
        this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
    // Throw away any pending changes
    clear() {
      this.processRecords();
      this.queue.length = 0;
      this.selectionChanged = false;
    }
    // Chrome Android, especially in combination with GBoard, not only
    // doesn't reliably fire regular key events, but also often
    // surrounds the effect of enter or backspace with a bunch of
    // composition events that, when interrupted, cause text duplication
    // or other kinds of corruption. This hack makes the editor back off
    // from handling DOM changes for a moment when such a key is
    // detected (via beforeinput or keydown), and then tries to flush
    // them or, if that has no effect, dispatches the given key.
    delayAndroidKey(key, keyCode) {
      var _a2;
      if (!this.delayedAndroidKey) {
        let flush = /* @__PURE__ */ __name(() => {
          let key2 = this.delayedAndroidKey;
          if (key2) {
            this.clearDelayedAndroidKey();
            this.view.inputState.lastKeyCode = key2.keyCode;
            this.view.inputState.lastKeyTime = Date.now();
            let flushed = this.flush();
            if (!flushed && key2.force)
              dispatchKey(this.dom, key2.key, key2.keyCode);
          }
        }, "flush");
        this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
      }
      if (!this.delayedAndroidKey || key == "Enter")
        this.delayedAndroidKey = {
          key,
          keyCode,
          // Only run the key handler when no changes are detected if
          // this isn't coming right after another change, in which case
          // it is probably part of a weird chain of updates, and should
          // be ignored if it returns the DOM to its previous state.
          force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
        };
    }
    clearDelayedAndroidKey() {
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
    }
    flushSoon() {
      if (this.delayedFlush < 0)
        this.delayedFlush = this.view.win.requestAnimationFrame(() => {
          this.delayedFlush = -1;
          this.flush();
        });
    }
    forceFlush() {
      if (this.delayedFlush >= 0) {
        this.view.win.cancelAnimationFrame(this.delayedFlush);
        this.delayedFlush = -1;
      }
      this.flush();
    }
    pendingRecords() {
      for (let mut of this.observer.takeRecords())
        this.queue.push(mut);
      return this.queue;
    }
    processRecords() {
      let records = this.pendingRecords();
      if (records.length)
        this.queue = [];
      let from = -1, to = -1, typeOver = false;
      for (let record of records) {
        let range = this.readMutation(record);
        if (!range)
          continue;
        if (range.typeOver)
          typeOver = true;
        if (from == -1) {
          ({ from, to } = range);
        } else {
          from = Math.min(range.from, from);
          to = Math.max(range.to, to);
        }
      }
      return { from, to, typeOver };
    }
    readChange() {
      let { from, to, typeOver } = this.processRecords();
      let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
      if (from < 0 && !newSel)
        return null;
      if (from > -1)
        this.lastChange = Date.now();
      this.view.inputState.lastFocusTime = 0;
      this.selectionChanged = false;
      let change = new DOMChange(this.view, from, to, typeOver);
      this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
      return change;
    }
    // Apply pending changes, if any
    flush(readSelection = true) {
      if (this.delayedFlush >= 0 || this.delayedAndroidKey)
        return false;
      if (readSelection)
        this.readSelectionRange();
      let domChange = this.readChange();
      if (!domChange) {
        this.view.requestMeasure();
        return false;
      }
      let startState = this.view.state;
      let handled = applyDOMChange(this.view, domChange);
      if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
        this.view.update([]);
      return handled;
    }
    readMutation(rec) {
      let cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec))
        return null;
      cView.markDirty(rec.type == "attributes");
      if (rec.type == "attributes")
        cView.flags |= 4;
      if (rec.type == "childList") {
        let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else if (rec.type == "characterData") {
        return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
      } else {
        return null;
      }
    }
    setWindow(win) {
      if (win != this.win) {
        this.removeWindowListeners(this.win);
        this.win = win;
        this.addWindowListeners(this.win);
      }
    }
    addWindowListeners(win) {
      win.addEventListener("resize", this.onResize);
      if (this.printQuery) {
        if (this.printQuery.addEventListener)
          this.printQuery.addEventListener("change", this.onPrint);
        else
          this.printQuery.addListener(this.onPrint);
      } else
        win.addEventListener("beforeprint", this.onPrint);
      win.addEventListener("scroll", this.onScroll);
      win.document.addEventListener("selectionchange", this.onSelectionChange);
    }
    removeWindowListeners(win) {
      win.removeEventListener("scroll", this.onScroll);
      win.removeEventListener("resize", this.onResize);
      if (this.printQuery) {
        if (this.printQuery.removeEventListener)
          this.printQuery.removeEventListener("change", this.onPrint);
        else
          this.printQuery.removeListener(this.onPrint);
      } else
        win.removeEventListener("beforeprint", this.onPrint);
      win.document.removeEventListener("selectionchange", this.onSelectionChange);
    }
    update(update) {
      if (this.editContext) {
        this.editContext.update(update);
        if (update.startState.facet(editable) != update.state.facet(editable))
          update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
      }
    }
    destroy() {
      var _a2, _b, _c;
      this.stop();
      (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
      (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      this.removeWindowListeners(this.win);
      clearTimeout(this.parentCheck);
      clearTimeout(this.resizeTimeout);
      this.win.cancelAnimationFrame(this.delayedFlush);
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      if (this.editContext) {
        this.view.contentDOM.editContext = null;
        this.editContext.destroy();
      }
    }
  };
  function findChild(cView, dom, dir) {
    while (dom) {
      let curView = ContentView.get(dom);
      if (curView && curView.parent == cView)
        return curView;
      let parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  __name(findChild, "findChild");
  function buildSelectionRangeFromRange(view2, range) {
    let anchorNode = range.startContainer, anchorOffset = range.startOffset;
    let focusNode = range.endContainer, focusOffset = range.endOffset;
    let curAnchor = view2.docView.domAtPos(view2.state.selection.main.anchor);
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
      [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  __name(buildSelectionRangeFromRange, "buildSelectionRangeFromRange");
  function safariSelectionRangeHack(view2, selection) {
    if (selection.getComposedRanges) {
      let range = selection.getComposedRanges(view2.root)[0];
      if (range)
        return buildSelectionRangeFromRange(view2, range);
    }
    let found = null;
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found = event.getTargetRanges()[0];
    }
    __name(read, "read");
    view2.contentDOM.addEventListener("beforeinput", read, true);
    view2.dom.ownerDocument.execCommand("indent");
    view2.contentDOM.removeEventListener("beforeinput", read, true);
    return found ? buildSelectionRangeFromRange(view2, found) : null;
  }
  __name(safariSelectionRangeHack, "safariSelectionRangeHack");
  var EditContextManager = class {
    static {
      __name(this, "EditContextManager");
    }
    constructor(view2) {
      this.from = 0;
      this.to = 0;
      this.pendingContextChange = null;
      this.handlers = /* @__PURE__ */ Object.create(null);
      this.composing = null;
      this.resetRange(view2.state);
      let context = this.editContext = new window.EditContext({
        text: view2.state.doc.sliceString(this.from, this.to),
        selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view2.state.selection.main.anchor))),
        selectionEnd: this.toContextPos(view2.state.selection.main.head)
      });
      this.handlers.textupdate = (e2) => {
        let main = view2.state.selection.main, { anchor, head } = main;
        let from = this.toEditorPos(e2.updateRangeStart), to = this.toEditorPos(e2.updateRangeEnd);
        if (view2.inputState.composing >= 0 && !this.composing)
          this.composing = { contextBase: e2.updateRangeStart, editorBase: from, drifted: false };
        let change = { from, to, insert: Text.of(e2.text.split("\n")) };
        if (change.from == this.from && anchor < this.from)
          change.from = anchor;
        else if (change.to == this.to && anchor > this.to)
          change.to = anchor;
        if (change.from == change.to && !change.insert.length) {
          let newSel = EditorSelection.single(this.toEditorPos(e2.selectionStart), this.toEditorPos(e2.selectionEnd));
          if (!newSel.main.eq(main))
            view2.dispatch({ selection: newSel, userEvent: "select" });
          return;
        }
        if ((browser.mac || browser.android) && change.from == head - 1 && /^\. ?$/.test(e2.text) && view2.contentDOM.getAttribute("autocorrect") == "off")
          change = { from, to, insert: Text.of([e2.text.replace(".", " ")]) };
        this.pendingContextChange = change;
        if (!view2.state.readOnly) {
          let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
          applyDOMChangeInner(view2, change, EditorSelection.single(this.toEditorPos(e2.selectionStart, newLen), this.toEditorPos(e2.selectionEnd, newLen)));
        }
        if (this.pendingContextChange) {
          this.revertPending(view2.state);
          this.setSelection(view2.state);
        }
      };
      this.handlers.characterboundsupdate = (e2) => {
        let rects = [], prev = null;
        for (let i2 = this.toEditorPos(e2.rangeStart), end = this.toEditorPos(e2.rangeEnd); i2 < end; i2++) {
          let rect = view2.coordsForChar(i2);
          prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
          rects.push(prev);
        }
        context.updateCharacterBounds(e2.rangeStart, rects);
      };
      this.handlers.textformatupdate = (e2) => {
        let deco = [];
        for (let format of e2.getTextFormats()) {
          let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
          if (lineStyle != "None" && thickness != "None") {
            let from = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
            if (from < to) {
              let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
              deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
            }
          }
        }
        view2.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
      };
      this.handlers.compositionstart = () => {
        if (view2.inputState.composing < 0) {
          view2.inputState.composing = 0;
          view2.inputState.compositionFirstChange = true;
        }
      };
      this.handlers.compositionend = () => {
        view2.inputState.composing = -1;
        view2.inputState.compositionFirstChange = null;
        if (this.composing) {
          let { drifted } = this.composing;
          this.composing = null;
          if (drifted)
            this.reset(view2.state);
        }
      };
      for (let event in this.handlers)
        context.addEventListener(event, this.handlers[event]);
      this.measureReq = { read: /* @__PURE__ */ __name((view3) => {
        this.editContext.updateControlBounds(view3.contentDOM.getBoundingClientRect());
        let sel = getSelection(view3.root);
        if (sel && sel.rangeCount)
          this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
      }, "read") };
    }
    applyEdits(update) {
      let off = 0, abort = false, pending = this.pendingContextChange;
      update.changes.iterChanges((fromA, toA, _fromB, _toB, insert2) => {
        if (abort)
          return;
        let dLen = insert2.length - (toA - fromA);
        if (pending && toA >= pending.to) {
          if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert2)) {
            pending = this.pendingContextChange = null;
            off += dLen;
            this.to += dLen;
            return;
          } else {
            pending = null;
            this.revertPending(update.state);
          }
        }
        fromA += off;
        toA += off;
        if (toA <= this.from) {
          this.from += dLen;
          this.to += dLen;
        } else if (fromA < this.to) {
          if (fromA < this.from || toA > this.to || this.to - this.from + insert2.length > 3e4) {
            abort = true;
            return;
          }
          this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert2.toString());
          this.to += dLen;
        }
        off += dLen;
      });
      if (pending && !abort)
        this.revertPending(update.state);
      return !abort;
    }
    update(update) {
      let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
      if (this.composing && (this.composing.drifted || !update.changes.touchesRange(startSel.from, startSel.to) && update.transactions.some((tr) => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to)))) {
        this.composing.drifted = true;
        this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
      } else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
        this.pendingContextChange = null;
        this.reset(update.state);
      } else if (update.docChanged || update.selectionSet || reverted) {
        this.setSelection(update.state);
      }
      if (update.geometryChanged || update.docChanged || update.selectionSet)
        update.view.requestMeasure(this.measureReq);
    }
    resetRange(state) {
      let { head } = state.selection.main;
      this.from = Math.max(
        0,
        head - 1e4
        /* CxVp.Margin */
      );
      this.to = Math.min(
        state.doc.length,
        head + 1e4
        /* CxVp.Margin */
      );
    }
    reset(state) {
      this.resetRange(state);
      this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
      this.setSelection(state);
    }
    revertPending(state) {
      let pending = this.pendingContextChange;
      this.pendingContextChange = null;
      this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
    }
    setSelection(state) {
      let { main } = state.selection;
      let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
      let end = this.toContextPos(main.head);
      if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
        this.editContext.updateSelection(start, end);
    }
    rangeIsValid(state) {
      let { head } = state.selection.main;
      return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
    }
    toEditorPos(contextPos, clipLen = this.to - this.from) {
      contextPos = Math.min(contextPos, clipLen);
      let c2 = this.composing;
      return c2 && c2.drifted ? c2.editorBase + (contextPos - c2.contextBase) : contextPos + this.from;
    }
    toContextPos(editorPos) {
      let c2 = this.composing;
      return c2 && c2.drifted ? c2.contextBase + (editorPos - c2.editorBase) : editorPos - this.from;
    }
    destroy() {
      for (let event in this.handlers)
        this.editContext.removeEventListener(event, this.handlers[event]);
    }
  };
  var EditorView = class _EditorView {
    static {
      __name(this, "EditorView");
    }
    /**
    The current editor state.
    */
    get state() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
    get viewport() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
    get visibleRanges() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
    get inView() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
    one change has been made in the current composition.
    */
    get composing() {
      return !!this.inputState && this.inputState.composing > 0;
    }
    /**
    Indicates whether the user is currently in composing state. Note
    that on some platforms, like Android, this will be the case a
    lot, since just putting the cursor on a word starts a
    composition there.
    */
    get compositionStarted() {
      return !!this.inputState && this.inputState.composing >= 0;
    }
    /**
    The document or shadow root that the view lives in.
    */
    get root() {
      return this._root;
    }
    /**
    @internal
    */
    get win() {
      return this.dom.ownerDocument.defaultView || window;
    }
    /**
    Construct a new view. You'll want to either provide a `parent`
    option, or put `view.dom` into your document after creating a
    view, so that the user can see the editor.
    */
    constructor(config15 = {}) {
      var _a2;
      this.plugins = [];
      this.pluginMap = /* @__PURE__ */ new Map();
      this.editorAttrs = {};
      this.contentAttrs = {};
      this.bidiCache = [];
      this.destroyed = false;
      this.updateState = 2;
      this.measureScheduled = -1;
      this.measureRequests = [];
      this.contentDOM = document.createElement("div");
      this.scrollDOM = document.createElement("div");
      this.scrollDOM.tabIndex = -1;
      this.scrollDOM.className = "cm-scroller";
      this.scrollDOM.appendChild(this.contentDOM);
      this.announceDOM = document.createElement("div");
      this.announceDOM.className = "cm-announced";
      this.announceDOM.setAttribute("aria-live", "polite");
      this.dom = document.createElement("div");
      this.dom.appendChild(this.announceDOM);
      this.dom.appendChild(this.scrollDOM);
      if (config15.parent)
        config15.parent.appendChild(this.dom);
      let { dispatch } = config15;
      this.dispatchTransactions = config15.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));
      this.dispatch = this.dispatch.bind(this);
      this._root = config15.root || getRoot(config15.parent) || document;
      this.viewState = new ViewState(config15.state || EditorState.create(config15));
      if (config15.scrollTo && config15.scrollTo.is(scrollIntoView))
        this.viewState.scrollTarget = config15.scrollTo.value.clip(this.viewState.state);
      this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      for (let plugin of this.plugins)
        plugin.update(this);
      this.observer = new DOMObserver(this);
      this.inputState = new InputState(this);
      this.inputState.ensureHandlers(this.plugins);
      this.docView = new DocView(this);
      this.mountStyles();
      this.updateAttrs();
      this.updateState = 0;
      this.requestMeasure();
      if ((_a2 = document.fonts) === null || _a2 === void 0 ? void 0 : _a2.ready)
        document.fonts.ready.then(() => this.requestMeasure());
    }
    dispatch(...input) {
      let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
      this.dispatchTransactions(trs, this);
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
    update(transactions) {
      if (this.updateState != 0)
        throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      let redrawn = false, attrsChanged = false, update;
      let state = this.state;
      for (let tr of transactions) {
        if (tr.startState != state)
          throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
        state = tr.state;
      }
      if (this.destroyed) {
        this.viewState.state = state;
        return;
      }
      let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
      if (transactions.some((tr) => tr.annotation(isFocusChange))) {
        this.inputState.notifiedFocused = focus;
        focusFlag = 1;
      } else if (focus != this.inputState.notifiedFocused) {
        this.inputState.notifiedFocused = focus;
        dispatchFocus = focusChangeTransaction(state, focus);
        if (!dispatchFocus)
          focusFlag = 1;
      }
      let pendingKey = this.observer.delayedAndroidKey, domChange = null;
      if (pendingKey) {
        this.observer.clearDelayedAndroidKey();
        domChange = this.observer.readChange();
        if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
          domChange = null;
      } else {
        this.observer.clear();
      }
      if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
        return this.setState(state);
      update = ViewUpdate.create(this, state, transactions);
      update.flags |= focusFlag;
      let scrollTarget = this.viewState.scrollTarget;
      try {
        this.updateState = 2;
        for (let tr of transactions) {
          if (scrollTarget)
            scrollTarget = scrollTarget.map(tr.changes);
          if (tr.scrollIntoView) {
            let { main } = tr.state.selection;
            scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
          }
          for (let e2 of tr.effects)
            if (e2.is(scrollIntoView))
              scrollTarget = e2.value.clip(this.state);
        }
        this.viewState.update(update, scrollTarget);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules)
          this.mountStyles();
        attrsChanged = this.updateAttrs();
        this.showAnnouncements(transactions);
        this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
      } finally {
        this.updateState = 0;
      }
      if (update.startState.facet(theme) != update.state.facet(theme))
        this.viewState.mustMeasureContent = true;
      if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
        this.requestMeasure();
      if (redrawn)
        this.docViewUpdate();
      if (!update.empty)
        for (let listener of this.state.facet(updateListener)) {
          try {
            listener(update);
          } catch (e2) {
            logException(this.state, e2, "update listener");
          }
        }
      if (dispatchFocus || domChange)
        Promise.resolve().then(() => {
          if (dispatchFocus && this.state == dispatchFocus.startState)
            this.dispatch(dispatchFocus);
          if (domChange) {
            if (!applyDOMChange(this, domChange) && pendingKey.force)
              dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
          }
        });
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
    setState(newState) {
      if (this.updateState != 0)
        throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      if (this.destroyed) {
        this.viewState.state = newState;
        return;
      }
      this.updateState = 2;
      let hadFocus = this.hasFocus;
      try {
        for (let plugin of this.plugins)
          plugin.destroy(this);
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
        this.pluginMap.clear();
        for (let plugin of this.plugins)
          plugin.update(this);
        this.docView.destroy();
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this.plugins);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0;
      }
      if (hadFocus)
        this.focus();
      this.requestMeasure();
    }
    updatePlugins(update) {
      let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        let newPlugins = [];
        for (let spec of specs) {
          let found = prevSpecs.indexOf(spec);
          if (found < 0) {
            newPlugins.push(new PluginInstance(spec));
          } else {
            let plugin = this.plugins[found];
            plugin.mustUpdate = update;
            newPlugins.push(plugin);
          }
        }
        for (let plugin of this.plugins)
          if (plugin.mustUpdate != update)
            plugin.destroy(this);
        this.plugins = newPlugins;
        this.pluginMap.clear();
      } else {
        for (let p2 of this.plugins)
          p2.mustUpdate = update;
      }
      for (let i2 = 0; i2 < this.plugins.length; i2++)
        this.plugins[i2].update(this);
      if (prevSpecs != specs)
        this.inputState.ensureHandlers(this.plugins);
    }
    docViewUpdate() {
      for (let plugin of this.plugins) {
        let val = plugin.value;
        if (val && val.docViewUpdate) {
          try {
            val.docViewUpdate(this);
          } catch (e2) {
            logException(this.state, e2, "doc view update listener");
          }
        }
      }
    }
    /**
    @internal
    */
    measure(flush = true) {
      if (this.destroyed)
        return;
      if (this.measureScheduled > -1)
        this.win.cancelAnimationFrame(this.measureScheduled);
      if (this.observer.delayedAndroidKey) {
        this.measureScheduled = -1;
        this.requestMeasure();
        return;
      }
      this.measureScheduled = 0;
      if (flush)
        this.observer.forceFlush();
      let updated = null;
      let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
      let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
      if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
        scrollAnchorHeight = -1;
      this.viewState.scrollAnchorHeight = -1;
      try {
        for (let i2 = 0; ; i2++) {
          if (scrollAnchorHeight < 0) {
            if (isScrolledToBottom(sDOM)) {
              scrollAnchorPos = -1;
              scrollAnchorHeight = this.viewState.heightMap.height;
            } else {
              let block = this.viewState.scrollAnchorAt(scrollTop);
              scrollAnchorPos = block.from;
              scrollAnchorHeight = block.top;
            }
          }
          this.updateState = 1;
          let changed = this.viewState.measure(this);
          if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
            break;
          if (i2 > 5) {
            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
            break;
          }
          let measuring = [];
          if (!(changed & 4))
            [this.measureRequests, measuring] = [measuring, this.measureRequests];
          let measured = measuring.map((m2) => {
            try {
              return m2.read(this);
            } catch (e2) {
              logException(this.state, e2);
              return BadMeasure;
            }
          });
          let update = ViewUpdate.create(this, this.state, []), redrawn = false;
          update.flags |= changed;
          if (!updated)
            updated = update;
          else
            updated.flags |= changed;
          this.updateState = 2;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
            this.updateAttrs();
            redrawn = this.docView.update(update);
            if (redrawn)
              this.docViewUpdate();
          }
          for (let i3 = 0; i3 < measuring.length; i3++)
            if (measured[i3] != BadMeasure) {
              try {
                let m2 = measuring[i3];
                if (m2.write)
                  m2.write(measured[i3], this);
              } catch (e2) {
                logException(this.state, e2);
              }
            }
          if (redrawn)
            this.docView.updateSelection(true);
          if (!update.viewportChanged && this.measureRequests.length == 0) {
            if (this.viewState.editorHeight) {
              if (this.viewState.scrollTarget) {
                this.docView.scrollIntoView(this.viewState.scrollTarget);
                this.viewState.scrollTarget = null;
                scrollAnchorHeight = -1;
                continue;
              } else {
                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                let diff = newAnchorHeight - scrollAnchorHeight;
                if (diff > 1 || diff < -1) {
                  scrollTop = scrollTop + diff;
                  sDOM.scrollTop = scrollTop / this.scaleY;
                  scrollAnchorHeight = -1;
                  continue;
                }
              }
            }
            break;
          }
        }
      } finally {
        this.updateState = 0;
        this.measureScheduled = -1;
      }
      if (updated && !updated.empty)
        for (let listener of this.state.facet(updateListener))
          listener(updated);
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
    get themeClasses() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
    }
    updateAttrs() {
      let editorAttrs = attrsFromFacet(this, editorAttributes, {
        class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      let contentAttrs = {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        writingsuggestions: "false",
        translate: "no",
        contenteditable: !this.state.facet(editable) ? "false" : "true",
        class: "cm-content",
        style: `${browser.tabSize}: ${this.state.tabSize}`,
        role: "textbox",
        "aria-multiline": "true"
      };
      if (this.state.readOnly)
        contentAttrs["aria-readonly"] = "true";
      attrsFromFacet(this, contentAttributes, contentAttrs);
      let changed = this.observer.ignore(() => {
        let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
        let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
        return changedContent || changedEditor;
      });
      this.editorAttrs = editorAttrs;
      this.contentAttrs = contentAttrs;
      return changed;
    }
    showAnnouncements(trs) {
      let first = true;
      for (let tr of trs)
        for (let effect of tr.effects)
          if (effect.is(_EditorView.announce)) {
            if (first)
              this.announceDOM.textContent = "";
            first = false;
            let div = this.announceDOM.appendChild(document.createElement("div"));
            div.textContent = effect.value;
          }
    }
    mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      let nonce = this.state.facet(_EditorView.cspNonce);
      StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
    }
    readMeasured() {
      if (this.updateState == 2)
        throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 && this.measureScheduled > -1)
        this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
    requestMeasure(request) {
      if (this.measureScheduled < 0)
        this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
      if (request) {
        if (this.measureRequests.indexOf(request) > -1)
          return;
        if (request.key != null)
          for (let i2 = 0; i2 < this.measureRequests.length; i2++) {
            if (this.measureRequests[i2].key === request.key) {
              this.measureRequests[i2] = request;
              return;
            }
          }
        this.measureRequests.push(request);
      }
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
    plugin(plugin) {
      let known = this.pluginMap.get(plugin);
      if (known === void 0 || known && known.spec != plugin)
        this.pluginMap.set(plugin, known = this.plugins.find((p2) => p2.spec == plugin) || null);
      return known && known.update(this).value;
    }
    /**
    The top position of the document, in screen coordinates. This
    may be negative when the editor is scrolled down. Points
    directly to the top of the first line, not above the padding.
    */
    get documentTop() {
      return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    /**
    Reports the padding above and below the document.
    */
    get documentPadding() {
      return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
    }
    /**
    If the editor is transformed with CSS, this provides the scale
    along the X axis. Otherwise, it will just be 1. Note that
    transforms other than translation and scaling are not supported.
    */
    get scaleX() {
      return this.viewState.scaleX;
    }
    /**
    Provide the CSS transformed scale along the Y axis.
    */
    get scaleY() {
      return this.viewState.scaleY;
    }
    /**
    Find the text line or block widget at the given vertical
    position (which is interpreted as relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
    */
    elementAtHeight(height) {
      this.readMeasured();
      return this.viewState.elementAtHeight(height);
    }
    /**
    Find the line block (see
    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
    height, again interpreted relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
    */
    lineBlockAtHeight(height) {
      this.readMeasured();
      return this.viewState.lineBlockAtHeight(height);
    }
    /**
    Get the extent and vertical position of all [line
    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
    are relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
    */
    get viewportLineBlocks() {
      return this.viewState.viewportLines;
    }
    /**
    Find the line block around the given document position. A line
    block is a range delimited on both sides by either a
    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
    start/end of the document. It will usually just hold a line of
    text, but may be broken into multiple textblocks by block
    widgets.
    */
    lineBlockAt(pos) {
      return this.viewState.lineBlockAt(pos);
    }
    /**
    The editor's total content height.
    */
    get contentHeight() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. In
    bidirectional text, the line is traversed in visual order, using
    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    When the start position was the last one on the line, the
    returned position will be across the line break. If there is no
    further line, the original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
    moveByChar(start, forward, by) {
      return skipAtoms(this, start, moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
    moveByGroup(start, forward) {
      return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
    }
    /**
    Get the cursor position visually at the start or end of a line.
    Note that this may differ from the _logical_ position at its
    start or end (which is simply at `line.from`/`line.to`) if text
    at the start or end goes against the line's base text direction.
    */
    visualLineSide(line, end) {
      let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
      let span = order[end ? order.length - 1 : 0];
      return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
    moveToLineBoundary(start, forward, includeWrap = true) {
      return moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
    moveVertically(start, forward, distance) {
      return skipAtoms(this, start, moveVertically(this, start, forward, distance));
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    
    Note that for positions that aren't currently in
    `visibleRanges`, the resulting DOM position isn't necessarily
    meaningful (it may just point before or after a placeholder
    element).
    */
    domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
    posAtDOM(node, offset = 0) {
      return this.docView.posFromDOM(node, offset);
    }
    posAtCoords(coords, precise = true) {
      this.readMeasured();
      return posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
    coordsAtPos(pos, side = 1) {
      this.readMeasured();
      let rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right)
        return rect;
      let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
      let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    Return the rectangle around a given character. If `pos` does not
    point in front of a character that is in the viewport and
    rendered (i.e. not replaced, not a line break), this will return
    null. For space characters that are a line wrap point, this will
    return the position before the line break.
    */
    coordsForChar(pos) {
      this.readMeasured();
      return this.docView.coordsForChar(pos);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
    get defaultCharacterWidth() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
    get defaultLineHeight() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor's content element.
    */
    get textDirection() {
      return this.viewState.defaultTextDirection;
    }
    /**
    Find the text direction of the block at the given position, as
    assigned by CSS. If
    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
    isn't enabled, or the given position is outside of the viewport,
    this will always return the same as
    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
    this may trigger a DOM layout.
    */
    textDirectionAt(pos) {
      let perLine = this.state.facet(perLineTextDirection);
      if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
        return this.textDirection;
      this.readMeasured();
      return this.docView.textDirectionAt(pos);
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
    get lineWrapping() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
    bidiSpans(line) {
      if (line.length > MaxBidiLine)
        return trivialOrder(line.length);
      let dir = this.textDirectionAt(line.from), isolates;
      for (let entry of this.bidiCache) {
        if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
          return entry.order;
      }
      if (!isolates)
        isolates = getIsolatedRanges(this, line);
      let order = computeOrder(line.text, dir, isolates);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
      return order;
    }
    /**
    Check whether the editor has focus.
    */
    get hasFocus() {
      var _a2;
      return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
    focus() {
      this.observer.ignore(() => {
        focusPreventScroll(this.contentDOM);
        this.docView.updateSelection();
      });
    }
    /**
    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
    necessary when moving the editor's existing DOM to a new window or shadow root.
    */
    setRoot(root) {
      if (this._root != root) {
        this._root = root;
        this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
        this.mountStyles();
      }
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
    destroy() {
      if (this.root.activeElement == this.contentDOM)
        this.contentDOM.blur();
      for (let plugin of this.plugins)
        plugin.destroy(this);
      this.plugins = [];
      this.inputState.destroy();
      this.docView.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1)
        this.win.cancelAnimationFrame(this.measureScheduled);
      this.destroyed = true;
    }
    /**
    Returns an effect that can be
    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
    cause it to scroll the given position or range into view.
    */
    static scrollIntoView(pos, options = {}) {
      return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
    }
    /**
    Return an effect that resets the editor to its current (at the
    time this method was called) scroll position. Note that this
    only affects the editor's own scrollable element, not parents.
    See also
    [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
    
    The effect should be used with a document identical to the one
    it was created for. Failing to do so is not an error, but may
    not scroll to the expected position. You can
    [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
    */
    scrollSnapshot() {
      let { scrollTop, scrollLeft } = this.scrollDOM;
      let ref = this.viewState.scrollAnchorAt(scrollTop);
      return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
    }
    /**
    Enable or disable tab-focus mode, which disables key bindings
    for Tab and Shift-Tab, letting the browser's default
    focus-changing behavior go through instead. This is useful to
    prevent trapping keyboard users in your editor.
    
    Without argument, this toggles the mode. With a boolean, it
    enables (true) or disables it (false). Given a number, it
    temporarily enables the mode until that number of milliseconds
    have passed or another non-Tab key is pressed.
    */
    setTabFocusMode(to) {
      if (to == null)
        this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
      else if (typeof to == "boolean")
        this.inputState.tabFocusMode = to ? 0 : -1;
      else if (this.inputState.tabFocusMode != 0)
        this.inputState.tabFocusMode = Date.now() + to;
    }
    /**
    Returns an extension that can be used to add DOM event handlers.
    The value should be an object mapping event names to handler
    functions. For any given event, such functions are ordered by
    extension precedence, and the first handler to return true will
    be assumed to have handled that event, and no other handlers or
    built-in behavior will be activated for it. These are registered
    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
    for `scroll` handlers, which will be called any time the
    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
    its parent nodes is scrolled.
    */
    static domEventHandlers(handlers2) {
      return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
    }
    /**
    Create an extension that registers DOM event observers. Contrary
    to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
    observers can't be prevented from running by a higher-precedence
    handler returning true. They also don't prevent other handlers
    and observers from running when they return true, and should not
    call `preventDefault`.
    */
    static domEventObservers(observers2) {
      return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
    static theme(spec, options) {
      let prefix = StyleModule.newName();
      let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
      if (options && options.dark)
        result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
    static baseTheme(spec) {
      return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
    /**
    Retrieve an editor view instance from the view's DOM
    representation.
    */
    static findFromDOM(dom) {
      var _a2;
      let content2 = dom.querySelector(".cm-content");
      let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
      return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
    }
  };
  EditorView.styleModule = styleModule;
  EditorView.inputHandler = inputHandler;
  EditorView.clipboardInputFilter = clipboardInputFilter;
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  EditorView.scrollHandler = scrollHandler;
  EditorView.focusChangeEffect = focusChangeEffect;
  EditorView.perLineTextDirection = perLineTextDirection;
  EditorView.exceptionSink = exceptionSink;
  EditorView.updateListener = updateListener;
  EditorView.editable = editable;
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  EditorView.dragMovesSelection = dragMovesSelection$1;
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  EditorView.decorations = decorations;
  EditorView.outerDecorations = outerDecorations;
  EditorView.atomicRanges = atomicRanges;
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  EditorView.scrollMargins = scrollMargins;
  EditorView.darkTheme = darkTheme;
  EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: /* @__PURE__ */ __name((values) => values.length ? values[0] : "", "combine") });
  EditorView.contentAttributes = contentAttributes;
  EditorView.editorAttributes = editorAttributes;
  EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  EditorView.announce = /* @__PURE__ */ StateEffect.define();
  var MaxBidiLine = 4096;
  var BadMeasure = {};
  var CachedOrder = class _CachedOrder {
    static {
      __name(this, "CachedOrder");
    }
    constructor(from, to, dir, isolates, fresh, order) {
      this.from = from;
      this.to = to;
      this.dir = dir;
      this.isolates = isolates;
      this.fresh = fresh;
      this.order = order;
    }
    static update(cache, changes) {
      if (changes.empty && !cache.some((c2) => c2.fresh))
        return cache;
      let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
      for (let i2 = Math.max(0, cache.length - 10); i2 < cache.length; i2++) {
        let entry = cache[i2];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
          result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
      }
      return result;
    }
  };
  function attrsFromFacet(view2, facet2, base2) {
    for (let sources = view2.state.facet(facet2), i2 = sources.length - 1; i2 >= 0; i2--) {
      let source = sources[i2], value = typeof source == "function" ? source(view2) : source;
      if (value)
        combineAttrs(value, base2);
    }
    return base2;
  }
  __name(attrsFromFacet, "attrsFromFacet");
  var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name2, platform) {
    const parts = name2.split(/-(?!$)/);
    let result = parts[parts.length - 1];
    if (result == "Space")
      result = " ";
    let alt, ctrl, shift2, meta2;
    for (let i2 = 0; i2 < parts.length - 1; ++i2) {
      const mod = parts[i2];
      if (/^(cmd|meta|m)$/i.test(mod))
        meta2 = true;
      else if (/^a(lt)?$/i.test(mod))
        alt = true;
      else if (/^(c|ctrl|control)$/i.test(mod))
        ctrl = true;
      else if (/^s(hift)?$/i.test(mod))
        shift2 = true;
      else if (/^mod$/i.test(mod)) {
        if (platform == "mac")
          meta2 = true;
        else
          ctrl = true;
      } else
        throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt)
      result = "Alt-" + result;
    if (ctrl)
      result = "Ctrl-" + result;
    if (meta2)
      result = "Meta-" + result;
    if (shift2)
      result = "Shift-" + result;
    return result;
  }
  __name(normalizeKeyName, "normalizeKeyName");
  function modifiers(name2, event, shift2) {
    if (event.altKey)
      name2 = "Alt-" + name2;
    if (event.ctrlKey)
      name2 = "Ctrl-" + name2;
    if (event.metaKey)
      name2 = "Meta-" + name2;
    if (shift2 !== false && event.shiftKey)
      name2 = "Shift-" + name2;
    return name2;
  }
  __name(modifiers, "modifiers");
  var handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
    keydown(event, view2) {
      return runHandlers(getKeymap(view2.state), event, view2, "editor");
    }
  }));
  var keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
  var Keymaps = /* @__PURE__ */ new WeakMap();
  function getKeymap(state) {
    let bindings = state.facet(keymap);
    let map = Keymaps.get(bindings);
    if (!map)
      Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a2, b2) => a2.concat(b2), [])));
    return map;
  }
  __name(getKeymap, "getKeymap");
  function runScopeHandlers(view2, event, scope) {
    return runHandlers(getKeymap(view2.state), event, view2, scope);
  }
  __name(runScopeHandlers, "runScopeHandlers");
  var storedPrefix = null;
  var PrefixTimeout = 4e3;
  function buildKeymap(bindings, platform = currentPlatform) {
    let bound = /* @__PURE__ */ Object.create(null);
    let isPrefix = /* @__PURE__ */ Object.create(null);
    let checkPrefix = /* @__PURE__ */ __name((name2, is) => {
      let current = isPrefix[name2];
      if (current == null)
        isPrefix[name2] = is;
      else if (current != is)
        throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
    }, "checkPrefix");
    let add2 = /* @__PURE__ */ __name((scope, key, command2, preventDefault, stopPropagation) => {
      var _a2, _b;
      let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
      let parts = key.split(/ (?!$)/).map((k2) => normalizeKeyName(k2, platform));
      for (let i2 = 1; i2 < parts.length; i2++) {
        let prefix = parts.slice(0, i2).join(" ");
        checkPrefix(prefix, true);
        if (!scopeObj[prefix])
          scopeObj[prefix] = {
            preventDefault: true,
            stopPropagation: false,
            run: [(view2) => {
              let ourObj = storedPrefix = { view: view2, prefix, scope };
              setTimeout(() => {
                if (storedPrefix == ourObj)
                  storedPrefix = null;
              }, PrefixTimeout);
              return true;
            }]
          };
      }
      let full = parts.join(" ");
      checkPrefix(full, false);
      let binding = scopeObj[full] || (scopeObj[full] = {
        preventDefault: false,
        stopPropagation: false,
        run: ((_b = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
      });
      if (command2)
        binding.run.push(command2);
      if (preventDefault)
        binding.preventDefault = true;
      if (stopPropagation)
        binding.stopPropagation = true;
    }, "add");
    for (let b2 of bindings) {
      let scopes = b2.scope ? b2.scope.split(" ") : ["editor"];
      if (b2.any)
        for (let scope of scopes) {
          let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
          if (!scopeObj._any)
            scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
          let { any } = b2;
          for (let key in scopeObj)
            scopeObj[key].run.push((view2) => any(view2, currentKeyEvent));
        }
      let name2 = b2[platform] || b2.key;
      if (!name2)
        continue;
      for (let scope of scopes) {
        add2(scope, name2, b2.run, b2.preventDefault, b2.stopPropagation);
        if (b2.shift)
          add2(scope, "Shift-" + name2, b2.shift, b2.preventDefault, b2.stopPropagation);
      }
    }
    return bound;
  }
  __name(buildKeymap, "buildKeymap");
  var currentKeyEvent = null;
  function runHandlers(map, event, view2, scope) {
    currentKeyEvent = event;
    let name2 = keyName(event);
    let charCode = codePointAt2(name2, 0), isChar = codePointSize2(charCode) == name2.length && name2 != " ";
    let prefix = "", handled = false, prevented = false, stopPropagation = false;
    if (storedPrefix && storedPrefix.view == view2 && storedPrefix.scope == scope) {
      prefix = storedPrefix.prefix + " ";
      if (modifierCodes.indexOf(event.keyCode) < 0) {
        prevented = true;
        storedPrefix = null;
      }
    }
    let ran = /* @__PURE__ */ new Set();
    let runFor = /* @__PURE__ */ __name((binding) => {
      if (binding) {
        for (let cmd2 of binding.run)
          if (!ran.has(cmd2)) {
            ran.add(cmd2);
            if (cmd2(view2)) {
              if (binding.stopPropagation)
                stopPropagation = true;
              return true;
            }
          }
        if (binding.preventDefault) {
          if (binding.stopPropagation)
            stopPropagation = true;
          prevented = true;
        }
      }
      return false;
    }, "runFor");
    let scopeObj = map[scope], baseName, shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)])) {
        handled = true;
      } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
      !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
        if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
          handled = true;
        } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
          handled = true;
        }
      } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name2, event, true)])) {
        handled = true;
      }
      if (!handled && runFor(scopeObj._any))
        handled = true;
    }
    if (prevented)
      handled = true;
    if (handled && stopPropagation)
      event.stopPropagation();
    currentKeyEvent = null;
    return handled;
  }
  __name(runHandlers, "runHandlers");
  var RectangleMarker = class _RectangleMarker {
    static {
      __name(this, "RectangleMarker");
    }
    /**
    Create a marker with the given class and dimensions. If `width`
    is null, the DOM element will get no width style.
    */
    constructor(className, left, top2, width, height) {
      this.className = className;
      this.left = left;
      this.top = top2;
      this.width = width;
      this.height = height;
    }
    draw() {
      let elt = document.createElement("div");
      elt.className = this.className;
      this.adjust(elt);
      return elt;
    }
    update(elt, prev) {
      if (prev.className != this.className)
        return false;
      this.adjust(elt);
      return true;
    }
    adjust(elt) {
      elt.style.left = this.left + "px";
      elt.style.top = this.top + "px";
      if (this.width != null)
        elt.style.width = this.width + "px";
      elt.style.height = this.height + "px";
    }
    eq(p2) {
      return this.left == p2.left && this.top == p2.top && this.width == p2.width && this.height == p2.height && this.className == p2.className;
    }
    /**
    Create a set of rectangles for the given selection range,
    assigning them theclass`className`. Will create a single
    rectangle for empty ranges, and a set of selection-style
    rectangles covering the range's content (in a bidi-aware
    way) for non-empty ones.
    */
    static forRange(view2, className, range) {
      if (range.empty) {
        let pos = view2.coordsAtPos(range.head, range.assoc || 1);
        if (!pos)
          return [];
        let base2 = getBase(view2);
        return [new _RectangleMarker(className, pos.left - base2.left, pos.top - base2.top, null, pos.bottom - pos.top)];
      } else {
        return rectanglesForRange(view2, className, range);
      }
    }
  };
  function getBase(view2) {
    let rect = view2.scrollDOM.getBoundingClientRect();
    let left = view2.textDirection == Direction.LTR ? rect.left : rect.right - view2.scrollDOM.clientWidth * view2.scaleX;
    return { left: left - view2.scrollDOM.scrollLeft * view2.scaleX, top: rect.top - view2.scrollDOM.scrollTop * view2.scaleY };
  }
  __name(getBase, "getBase");
  function wrappedLine(view2, pos, side, inside2) {
    let coords = view2.coordsAtPos(pos, side * 2);
    if (!coords)
      return inside2;
    let editorRect = view2.dom.getBoundingClientRect();
    let y2 = (coords.top + coords.bottom) / 2;
    let left = view2.posAtCoords({ x: editorRect.left + 1, y: y2 });
    let right = view2.posAtCoords({ x: editorRect.right - 1, y: y2 });
    if (left == null || right == null)
      return inside2;
    return { from: Math.max(inside2.from, Math.min(left, right)), to: Math.min(inside2.to, Math.max(left, right)) };
  }
  __name(wrappedLine, "wrappedLine");
  function rectanglesForRange(view2, className, range) {
    if (range.to <= view2.viewport.from || range.from >= view2.viewport.to)
      return [];
    let from = Math.max(range.from, view2.viewport.from), to = Math.min(range.to, view2.viewport.to);
    let ltr = view2.textDirection == Direction.LTR;
    let content2 = view2.contentDOM, contentRect = content2.getBoundingClientRect(), base2 = getBase(view2);
    let lineElt = content2.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
    let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
    let startBlock = blockAt(view2, from, 1), endBlock = blockAt(view2, to, -1);
    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
    if (visualStart && (view2.lineWrapping || startBlock.widgetLineBreaks))
      visualStart = wrappedLine(view2, from, 1, visualStart);
    if (visualEnd && (view2.lineWrapping || endBlock.widgetLineBreaks))
      visualEnd = wrappedLine(view2, to, -1, visualEnd);
    if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
      return pieces(drawForLine(range.from, range.to, visualStart));
    } else {
      let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
      let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
      let between = [];
      if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view2.defaultLineHeight / 2 < bottom.top)
        between.push(piece(leftSide, top2.bottom, rightSide, bottom.top));
      else if (top2.bottom < bottom.top && view2.elementAtHeight((top2.bottom + bottom.top) / 2).type == BlockType.Text)
        top2.bottom = bottom.top = (top2.bottom + bottom.top) / 2;
      return pieces(top2).concat(between).concat(pieces(bottom));
    }
    function piece(left, top2, right, bottom) {
      return new RectangleMarker(className, left - base2.left, top2 - base2.top, right - left, bottom - top2);
    }
    __name(piece, "piece");
    function pieces({ top: top2, bottom, horizontal }) {
      let pieces2 = [];
      for (let i2 = 0; i2 < horizontal.length; i2 += 2)
        pieces2.push(piece(horizontal[i2], top2, horizontal[i2 + 1], bottom));
      return pieces2;
    }
    __name(pieces, "pieces");
    function drawForLine(from2, to2, line) {
      let top2 = 1e9, bottom = -1e9, horizontal = [];
      function addSpan(from3, fromOpen, to3, toOpen, dir) {
        let fromCoords = view2.coordsAtPos(from3, from3 == line.to ? -2 : 2);
        let toCoords = view2.coordsAtPos(to3, to3 == line.from ? 2 : -2);
        if (!fromCoords || !toCoords)
          return;
        top2 = Math.min(fromCoords.top, toCoords.top, top2);
        bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
        if (dir == Direction.LTR)
          horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
        else
          horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
      }
      __name(addSpan, "addSpan");
      let start = from2 !== null && from2 !== void 0 ? from2 : line.from, end = to2 !== null && to2 !== void 0 ? to2 : line.to;
      for (let r2 of view2.visibleRanges)
        if (r2.to > start && r2.from < end) {
          for (let pos = Math.max(r2.from, start), endPos = Math.min(r2.to, end); ; ) {
            let docLine = view2.state.doc.lineAt(pos);
            for (let span of view2.bidiSpans(docLine)) {
              let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
              if (spanFrom >= endPos)
                break;
              if (spanTo > pos)
                addSpan(Math.max(spanFrom, pos), from2 == null && spanFrom <= start, Math.min(spanTo, endPos), to2 == null && spanTo >= end, span.dir);
            }
            pos = docLine.to + 1;
            if (pos >= endPos)
              break;
          }
        }
      if (horizontal.length == 0)
        addSpan(start, from2 == null, end, to2 == null, view2.textDirection);
      return { top: top2, bottom, horizontal };
    }
    __name(drawForLine, "drawForLine");
    function drawForWidget(block, top2) {
      let y2 = contentRect.top + (top2 ? block.top : block.bottom);
      return { top: y2, bottom: y2, horizontal: [] };
    }
    __name(drawForWidget, "drawForWidget");
  }
  __name(rectanglesForRange, "rectanglesForRange");
  function sameMarker(a2, b2) {
    return a2.constructor == b2.constructor && a2.eq(b2);
  }
  __name(sameMarker, "sameMarker");
  var LayerView = class {
    static {
      __name(this, "LayerView");
    }
    constructor(view2, layer2) {
      this.view = view2;
      this.layer = layer2;
      this.drawn = [];
      this.scaleX = 1;
      this.scaleY = 1;
      this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
      this.dom = view2.scrollDOM.appendChild(document.createElement("div"));
      this.dom.classList.add("cm-layer");
      if (layer2.above)
        this.dom.classList.add("cm-layer-above");
      if (layer2.class)
        this.dom.classList.add(layer2.class);
      this.scale();
      this.dom.setAttribute("aria-hidden", "true");
      this.setOrder(view2.state);
      view2.requestMeasure(this.measureReq);
      if (layer2.mount)
        layer2.mount(this.dom, view2);
    }
    update(update) {
      if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
        this.setOrder(update.state);
      if (this.layer.update(update, this.dom) || update.geometryChanged) {
        this.scale();
        update.view.requestMeasure(this.measureReq);
      }
    }
    docViewUpdate(view2) {
      if (this.layer.updateOnDocViewUpdate !== false)
        view2.requestMeasure(this.measureReq);
    }
    setOrder(state) {
      let pos = 0, order = state.facet(layerOrder);
      while (pos < order.length && order[pos] != this.layer)
        pos++;
      this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
    }
    measure() {
      return this.layer.markers(this.view);
    }
    scale() {
      let { scaleX, scaleY } = this.view;
      if (scaleX != this.scaleX || scaleY != this.scaleY) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
      }
    }
    draw(markers) {
      if (markers.length != this.drawn.length || markers.some((p2, i2) => !sameMarker(p2, this.drawn[i2]))) {
        let old = this.dom.firstChild, oldI = 0;
        for (let marker of markers) {
          if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
            old = old.nextSibling;
            oldI++;
          } else {
            this.dom.insertBefore(marker.draw(), old);
          }
        }
        while (old) {
          let next = old.nextSibling;
          old.remove();
          old = next;
        }
        this.drawn = markers;
      }
    }
    destroy() {
      if (this.layer.destroy)
        this.layer.destroy(this.dom, this.view);
      this.dom.remove();
    }
  };
  var layerOrder = /* @__PURE__ */ Facet.define();
  function layer(config15) {
    return [
      ViewPlugin.define((v2) => new LayerView(v2, config15)),
      layerOrder.of(config15)
    ];
  }
  __name(layer, "layer");
  var selectionConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        cursorBlinkRate: 1200,
        drawRangeCursor: true
      }, {
        cursorBlinkRate: /* @__PURE__ */ __name((a2, b2) => Math.min(a2, b2), "cursorBlinkRate"),
        drawRangeCursor: /* @__PURE__ */ __name((a2, b2) => a2 || b2, "drawRangeCursor")
      });
    }
  });
  function drawSelection(config15 = {}) {
    return [
      selectionConfig.of(config15),
      cursorLayer,
      selectionLayer,
      hideNativeSelection,
      nativeSelectionHidden.of(true)
    ];
  }
  __name(drawSelection, "drawSelection");
  function configChanged(update) {
    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  __name(configChanged, "configChanged");
  var cursorLayer = /* @__PURE__ */ layer({
    above: true,
    markers(view2) {
      let { state } = view2, conf = state.facet(selectionConfig);
      let cursors = [];
      for (let r2 of state.selection.ranges) {
        let prim = r2 == state.selection.main;
        if (r2.empty || conf.drawRangeCursor) {
          let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
          let cursor = r2.empty ? r2 : EditorSelection.cursor(r2.head, r2.head > r2.anchor ? -1 : 1);
          for (let piece of RectangleMarker.forRange(view2, className, cursor))
            cursors.push(piece);
        }
      }
      return cursors;
    },
    update(update, dom) {
      if (update.transactions.some((tr) => tr.selection))
        dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
      let confChange = configChanged(update);
      if (confChange)
        setBlinkRate(update.state, dom);
      return update.docChanged || update.selectionSet || confChange;
    },
    mount(dom, view2) {
      setBlinkRate(view2.state, dom);
    },
    class: "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  __name(setBlinkRate, "setBlinkRate");
  var selectionLayer = /* @__PURE__ */ layer({
    above: false,
    markers(view2) {
      return view2.state.selection.ranges.map((r2) => r2.empty ? [] : RectangleMarker.forRange(view2, "cm-selectionBackground", r2)).reduce((a2, b2) => a2.concat(b2));
    },
    update(update, dom) {
      return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
    },
    class: "cm-selectionLayer"
  });
  var hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme({
    ".cm-line": {
      "& ::selection, &::selection": { backgroundColor: "transparent !important" },
      caretColor: "transparent !important"
    },
    ".cm-content": {
      caretColor: "transparent !important",
      "& :focus": {
        caretColor: "initial !important",
        "&::selection, & ::selection": {
          backgroundColor: "Highlight !important"
        }
      }
    }
  }));
  var setDropCursorPos = /* @__PURE__ */ StateEffect.define({
    map(pos, mapping) {
      return pos == null ? null : mapping.mapPos(pos);
    }
  });
  var dropCursorPos = /* @__PURE__ */ StateField.define({
    create() {
      return null;
    },
    update(pos, tr) {
      if (pos != null)
        pos = tr.changes.mapPos(pos);
      return tr.effects.reduce((pos2, e2) => e2.is(setDropCursorPos) ? e2.value : pos2, pos);
    }
  });
  var drawDropCursor = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.view = view2;
      this.cursor = null;
      this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
    }
    update(update) {
      var _a2;
      let cursorPos = update.state.field(dropCursorPos);
      if (cursorPos == null) {
        if (this.cursor != null) {
          (_a2 = this.cursor) === null || _a2 === void 0 ? void 0 : _a2.remove();
          this.cursor = null;
        }
      } else {
        if (!this.cursor) {
          this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
          this.cursor.className = "cm-dropCursor";
        }
        if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
          this.view.requestMeasure(this.measureReq);
      }
    }
    readPos() {
      let { view: view2 } = this;
      let pos = view2.state.field(dropCursorPos);
      let rect = pos != null && view2.coordsAtPos(pos);
      if (!rect)
        return null;
      let outer = view2.scrollDOM.getBoundingClientRect();
      return {
        left: rect.left - outer.left + view2.scrollDOM.scrollLeft * view2.scaleX,
        top: rect.top - outer.top + view2.scrollDOM.scrollTop * view2.scaleY,
        height: rect.bottom - rect.top
      };
    }
    drawCursor(pos) {
      if (this.cursor) {
        let { scaleX, scaleY } = this.view;
        if (pos) {
          this.cursor.style.left = pos.left / scaleX + "px";
          this.cursor.style.top = pos.top / scaleY + "px";
          this.cursor.style.height = pos.height / scaleY + "px";
        } else {
          this.cursor.style.left = "-100000px";
        }
      }
    }
    destroy() {
      if (this.cursor)
        this.cursor.remove();
    }
    setDropPos(pos) {
      if (this.view.state.field(dropCursorPos) != pos)
        this.view.dispatch({ effects: setDropCursorPos.of(pos) });
    }
  }, {
    eventObservers: {
      dragover(event) {
        this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
      },
      dragleave(event) {
        if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
          this.setDropPos(null);
      },
      dragend() {
        this.setDropPos(null);
      },
      drop() {
        this.setDropPos(null);
      }
    }
  });
  function dropCursor() {
    return [dropCursorPos, drawDropCursor];
  }
  __name(dropCursor, "dropCursor");
  function iterMatches(doc2, re2, from, to, f2) {
    re2.lastIndex = 0;
    for (let cursor = doc2.iterRange(from, to), pos = from, m2; !cursor.next().done; pos += cursor.value.length) {
      if (!cursor.lineBreak)
        while (m2 = re2.exec(cursor.value))
          f2(pos + m2.index, m2);
    }
  }
  __name(iterMatches, "iterMatches");
  function matchRanges(view2, maxLength) {
    let visible = view2.visibleRanges;
    if (visible.length == 1 && visible[0].from == view2.viewport.from && visible[0].to == view2.viewport.to)
      return visible;
    let result = [];
    for (let { from, to } of visible) {
      from = Math.max(view2.state.doc.lineAt(from).from, from - maxLength);
      to = Math.min(view2.state.doc.lineAt(to).to, to + maxLength);
      if (result.length && result[result.length - 1].to >= from)
        result[result.length - 1].to = to;
      else
        result.push({ from, to });
    }
    return result;
  }
  __name(matchRanges, "matchRanges");
  var MatchDecorator = class {
    static {
      __name(this, "MatchDecorator");
    }
    /**
    Create a decorator.
    */
    constructor(config15) {
      const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config15;
      if (!regexp.global)
        throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
      this.regexp = regexp;
      if (decorate) {
        this.addMatch = (match, view2, from, add2) => decorate(add2, from, from + match[0].length, match, view2);
      } else if (typeof decoration == "function") {
        this.addMatch = (match, view2, from, add2) => {
          let deco = decoration(match, view2, from);
          if (deco)
            add2(from, from + match[0].length, deco);
        };
      } else if (decoration) {
        this.addMatch = (match, _view, from, add2) => add2(from, from + match[0].length, decoration);
      } else {
        throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
      }
      this.boundary = boundary;
      this.maxLength = maxLength;
    }
    /**
    Compute the full set of decorations for matches in the given
    view's viewport. You'll want to call this when initializing your
    plugin.
    */
    createDeco(view2) {
      let build = new RangeSetBuilder(), add2 = build.add.bind(build);
      for (let { from, to } of matchRanges(view2, this.maxLength))
        iterMatches(view2.state.doc, this.regexp, from, to, (from2, m2) => this.addMatch(m2, view2, from2, add2));
      return build.finish();
    }
    /**
    Update a set of decorations for a view update. `deco` _must_ be
    the set of decorations produced by _this_ `MatchDecorator` for
    the view state before the update.
    */
    updateDeco(update, deco) {
      let changeFrom = 1e9, changeTo = -1;
      if (update.docChanged)
        update.changes.iterChanges((_f, _t2, from, to) => {
          if (to >= update.view.viewport.from && from <= update.view.viewport.to) {
            changeFrom = Math.min(from, changeFrom);
            changeTo = Math.max(to, changeTo);
          }
        });
      if (update.viewportMoved || changeTo - changeFrom > 1e3)
        return this.createDeco(update.view);
      if (changeTo > -1)
        return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
      return deco;
    }
    updateRange(view2, deco, updateFrom, updateTo) {
      for (let r2 of view2.visibleRanges) {
        let from = Math.max(r2.from, updateFrom), to = Math.min(r2.to, updateTo);
        if (to >= from) {
          let fromLine = view2.state.doc.lineAt(from), toLine = fromLine.to < to ? view2.state.doc.lineAt(to) : fromLine;
          let start = Math.max(r2.from, fromLine.from), end = Math.min(r2.to, toLine.to);
          if (this.boundary) {
            for (; from > fromLine.from; from--)
              if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                start = from;
                break;
              }
            for (; to < toLine.to; to++)
              if (this.boundary.test(toLine.text[to - toLine.from])) {
                end = to;
                break;
              }
          }
          let ranges = [], m2;
          let add2 = /* @__PURE__ */ __name((from2, to2, deco2) => ranges.push(deco2.range(from2, to2)), "add");
          if (fromLine == toLine) {
            this.regexp.lastIndex = start - fromLine.from;
            while ((m2 = this.regexp.exec(fromLine.text)) && m2.index < end - fromLine.from)
              this.addMatch(m2, view2, m2.index + fromLine.from, add2);
          } else {
            iterMatches(view2.state.doc, this.regexp, start, end, (from2, m3) => this.addMatch(m3, view2, from2, add2));
          }
          deco = deco.update({ filterFrom: start, filterTo: end, filter: /* @__PURE__ */ __name((from2, to2) => from2 < start || to2 > end, "filter"), add: ranges });
        }
      }
      return deco;
    }
  };
  var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  var Specials = /* @__PURE__ */ new RegExp("[\0-\b\n-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
  var Names = {
    0: "null",
    7: "bell",
    8: "backspace",
    10: "newline",
    11: "vertical tab",
    13: "carriage return",
    27: "escape",
    8203: "zero width space",
    8204: "zero width non-joiner",
    8205: "zero width joiner",
    8206: "left-to-right mark",
    8207: "right-to-left mark",
    8232: "line separator",
    8237: "left-to-right override",
    8238: "right-to-left override",
    8294: "left-to-right isolate",
    8295: "right-to-left isolate",
    8297: "pop directional isolate",
    8233: "paragraph separator",
    65279: "zero width no-break space",
    65532: "object replacement"
  };
  var _supportsTabSize = null;
  function supportsTabSize() {
    var _a2;
    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
      let styles = document.body.style;
      _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
    }
    return _supportsTabSize || false;
  }
  __name(supportsTabSize, "supportsTabSize");
  var specialCharConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      let config15 = combineConfig(configs, {
        render: null,
        specialChars: Specials,
        addSpecialChars: null
      });
      if (config15.replaceTabs = !supportsTabSize())
        config15.specialChars = new RegExp("	|" + config15.specialChars.source, UnicodeRegexpSupport);
      if (config15.addSpecialChars)
        config15.specialChars = new RegExp(config15.specialChars.source + "|" + config15.addSpecialChars.source, UnicodeRegexpSupport);
      return config15;
    }
  });
  function highlightSpecialChars(config15 = {}) {
    return [specialCharConfig.of(config15), specialCharPlugin()];
  }
  __name(highlightSpecialChars, "highlightSpecialChars");
  var _plugin = null;
  function specialCharPlugin() {
    return _plugin || (_plugin = ViewPlugin.fromClass(class {
      constructor(view2) {
        this.view = view2;
        this.decorations = Decoration.none;
        this.decorationCache = /* @__PURE__ */ Object.create(null);
        this.decorator = this.makeDecorator(view2.state.facet(specialCharConfig));
        this.decorations = this.decorator.createDeco(view2);
      }
      makeDecorator(conf) {
        return new MatchDecorator({
          regexp: conf.specialChars,
          decoration: /* @__PURE__ */ __name((m2, view2, pos) => {
            let { doc: doc2 } = view2.state;
            let code = codePointAt2(m2[0], 0);
            if (code == 9) {
              let line = doc2.lineAt(pos);
              let size = view2.state.tabSize, col = countColumn(line.text, size, pos - line.from);
              return Decoration.replace({
                widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
              });
            }
            return this.decorationCache[code] || (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
          }, "decoration"),
          boundary: conf.replaceTabs ? void 0 : /[^]/
        });
      }
      update(update) {
        let conf = update.state.facet(specialCharConfig);
        if (update.startState.facet(specialCharConfig) != conf) {
          this.decorator = this.makeDecorator(conf);
          this.decorations = this.decorator.createDeco(update.view);
        } else {
          this.decorations = this.decorator.updateDeco(update, this.decorations);
        }
      }
    }, {
      decorations: /* @__PURE__ */ __name((v2) => v2.decorations, "decorations")
    }));
  }
  __name(specialCharPlugin, "specialCharPlugin");
  var DefaultPlaceholder = "\u2022";
  function placeholder$1(code) {
    if (code >= 32)
      return DefaultPlaceholder;
    if (code == 10)
      return "\u2424";
    return String.fromCharCode(9216 + code);
  }
  __name(placeholder$1, "placeholder$1");
  var SpecialCharWidget = class extends WidgetType {
    static {
      __name(this, "SpecialCharWidget");
    }
    constructor(options, code) {
      super();
      this.options = options;
      this.code = code;
    }
    eq(other) {
      return other.code == this.code;
    }
    toDOM(view2) {
      let ph = placeholder$1(this.code);
      let desc = view2.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
      let custom = this.options.render && this.options.render(this.code, desc, ph);
      if (custom)
        return custom;
      let span = document.createElement("span");
      span.textContent = ph;
      span.title = desc;
      span.setAttribute("aria-label", desc);
      span.className = "cm-specialChar";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  };
  var TabWidget = class extends WidgetType {
    static {
      __name(this, "TabWidget");
    }
    constructor(width) {
      super();
      this.width = width;
    }
    eq(other) {
      return other.width == this.width;
    }
    toDOM() {
      let span = document.createElement("span");
      span.textContent = "	";
      span.className = "cm-tab";
      span.style.width = this.width + "px";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  };
  function highlightActiveLine() {
    return activeLineHighlighter;
  }
  __name(highlightActiveLine, "highlightActiveLine");
  var lineDeco = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
  var activeLineHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.decorations = this.getDeco(view2);
    }
    update(update) {
      if (update.docChanged || update.selectionSet)
        this.decorations = this.getDeco(update.view);
    }
    getDeco(view2) {
      let lastLineStart = -1, deco = [];
      for (let r2 of view2.state.selection.ranges) {
        let line = view2.lineBlockAt(r2.head);
        if (line.from > lastLineStart) {
          deco.push(lineDeco.range(line.from));
          lastLineStart = line.from;
        }
      }
      return Decoration.set(deco);
    }
  }, {
    decorations: /* @__PURE__ */ __name((v2) => v2.decorations, "decorations")
  });
  var keys = {
    Alt: [18, (e2) => !!e2.altKey],
    Control: [17, (e2) => !!e2.ctrlKey],
    Shift: [16, (e2) => !!e2.shiftKey],
    Meta: [91, (e2) => !!e2.metaKey]
  };
  var showCrosshair = { style: "cursor: crosshair" };
  function crosshairCursor(options = {}) {
    let [code, getter] = keys[options.key || "Alt"];
    let plugin = ViewPlugin.fromClass(class {
      constructor(view2) {
        this.view = view2;
        this.isDown = false;
      }
      set(isDown) {
        if (this.isDown != isDown) {
          this.isDown = isDown;
          this.view.update([]);
        }
      }
    }, {
      eventObservers: {
        keydown(e2) {
          this.set(e2.keyCode == code || getter(e2));
        },
        keyup(e2) {
          if (e2.keyCode == code || !getter(e2))
            this.set(false);
        },
        mousemove(e2) {
          this.set(getter(e2));
        }
      }
    });
    return [
      plugin,
      EditorView.contentAttributes.of((view2) => {
        var _a2;
        return ((_a2 = view2.plugin(plugin)) === null || _a2 === void 0 ? void 0 : _a2.isDown) ? showCrosshair : null;
      })
    ];
  }
  __name(crosshairCursor, "crosshairCursor");
  var Outside = "-10000px";
  var TooltipViewManager = class {
    static {
      __name(this, "TooltipViewManager");
    }
    constructor(view2, facet2, createTooltipView, removeTooltipView) {
      this.facet = facet2;
      this.createTooltipView = createTooltipView;
      this.removeTooltipView = removeTooltipView;
      this.input = view2.state.facet(facet2);
      this.tooltips = this.input.filter((t3) => t3);
      let prev = null;
      this.tooltipViews = this.tooltips.map((t3) => prev = createTooltipView(t3, prev));
    }
    update(update, above) {
      var _a2;
      let input = update.state.facet(this.facet);
      let tooltips = input.filter((x2) => x2);
      if (input === this.input) {
        for (let t3 of this.tooltipViews)
          if (t3.update)
            t3.update(update);
        return false;
      }
      let tooltipViews = [], newAbove = above ? [] : null;
      for (let i2 = 0; i2 < tooltips.length; i2++) {
        let tip = tooltips[i2], known = -1;
        if (!tip)
          continue;
        for (let i3 = 0; i3 < this.tooltips.length; i3++) {
          let other = this.tooltips[i3];
          if (other && other.create == tip.create)
            known = i3;
        }
        if (known < 0) {
          tooltipViews[i2] = this.createTooltipView(tip, i2 ? tooltipViews[i2 - 1] : null);
          if (newAbove)
            newAbove[i2] = !!tip.above;
        } else {
          let tooltipView = tooltipViews[i2] = this.tooltipViews[known];
          if (newAbove)
            newAbove[i2] = above[known];
          if (tooltipView.update)
            tooltipView.update(update);
        }
      }
      for (let t3 of this.tooltipViews)
        if (tooltipViews.indexOf(t3) < 0) {
          this.removeTooltipView(t3);
          (_a2 = t3.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t3);
        }
      if (above) {
        newAbove.forEach((val, i2) => above[i2] = val);
        above.length = newAbove.length;
      }
      this.input = input;
      this.tooltips = tooltips;
      this.tooltipViews = tooltipViews;
      return true;
    }
  };
  function windowSpace(view2) {
    let docElt = view2.dom.ownerDocument.documentElement;
    return { top: 0, left: 0, bottom: docElt.clientHeight, right: docElt.clientWidth };
  }
  __name(windowSpace, "windowSpace");
  var tooltipConfig = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => {
      var _a2, _b, _c;
      return {
        position: browser.ios ? "absolute" : ((_a2 = values.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
        parent: ((_b = values.find((conf) => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
        tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
      };
    }, "combine")
  });
  var knownHeight = /* @__PURE__ */ new WeakMap();
  var tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.view = view2;
      this.above = [];
      this.inView = true;
      this.madeAbsolute = false;
      this.lastTransaction = 0;
      this.measureTimeout = -1;
      let config15 = view2.state.facet(tooltipConfig);
      this.position = config15.position;
      this.parent = config15.parent;
      this.classes = view2.themeClasses;
      this.createContainer();
      this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
      this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
      this.manager = new TooltipViewManager(view2, showTooltip, (t3, p2) => this.createTooltip(t3, p2), (t3) => {
        if (this.resizeObserver)
          this.resizeObserver.unobserve(t3.dom);
        t3.dom.remove();
      });
      this.above = this.manager.tooltips.map((t3) => !!t3.above);
      this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
        if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
          this.measureSoon();
      }, { threshold: [1] }) : null;
      this.observeIntersection();
      view2.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
      this.maybeMeasure();
    }
    createContainer() {
      if (this.parent) {
        this.container = document.createElement("div");
        this.container.style.position = "relative";
        this.container.className = this.view.themeClasses;
        this.parent.appendChild(this.container);
      } else {
        this.container = this.view.dom;
      }
    }
    observeIntersection() {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
        for (let tooltip of this.manager.tooltipViews)
          this.intersectionObserver.observe(tooltip.dom);
      }
    }
    measureSoon() {
      if (this.measureTimeout < 0)
        this.measureTimeout = setTimeout(() => {
          this.measureTimeout = -1;
          this.maybeMeasure();
        }, 50);
    }
    update(update) {
      if (update.transactions.length)
        this.lastTransaction = Date.now();
      let updated = this.manager.update(update, this.above);
      if (updated)
        this.observeIntersection();
      let shouldMeasure = updated || update.geometryChanged;
      let newConfig = update.state.facet(tooltipConfig);
      if (newConfig.position != this.position && !this.madeAbsolute) {
        this.position = newConfig.position;
        for (let t3 of this.manager.tooltipViews)
          t3.dom.style.position = this.position;
        shouldMeasure = true;
      }
      if (newConfig.parent != this.parent) {
        if (this.parent)
          this.container.remove();
        this.parent = newConfig.parent;
        this.createContainer();
        for (let t3 of this.manager.tooltipViews)
          this.container.appendChild(t3.dom);
        shouldMeasure = true;
      } else if (this.parent && this.view.themeClasses != this.classes) {
        this.classes = this.container.className = this.view.themeClasses;
      }
      if (shouldMeasure)
        this.maybeMeasure();
    }
    createTooltip(tooltip, prev) {
      let tooltipView = tooltip.create(this.view);
      let before = prev ? prev.dom : null;
      tooltipView.dom.classList.add("cm-tooltip");
      if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
        let arrow = document.createElement("div");
        arrow.className = "cm-tooltip-arrow";
        tooltipView.dom.appendChild(arrow);
      }
      tooltipView.dom.style.position = this.position;
      tooltipView.dom.style.top = Outside;
      tooltipView.dom.style.left = "0px";
      this.container.insertBefore(tooltipView.dom, before);
      if (tooltipView.mount)
        tooltipView.mount(this.view);
      if (this.resizeObserver)
        this.resizeObserver.observe(tooltipView.dom);
      return tooltipView;
    }
    destroy() {
      var _a2, _b, _c;
      this.view.win.removeEventListener("resize", this.measureSoon);
      for (let tooltipView of this.manager.tooltipViews) {
        tooltipView.dom.remove();
        (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
      }
      if (this.parent)
        this.container.remove();
      (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
      clearTimeout(this.measureTimeout);
    }
    readMeasure() {
      let scaleX = 1, scaleY = 1, makeAbsolute = false;
      if (this.position == "fixed" && this.manager.tooltipViews.length) {
        let { dom } = this.manager.tooltipViews[0];
        if (browser.gecko) {
          makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
        } else if (dom.style.top == Outside && dom.style.left == "0px") {
          let rect = dom.getBoundingClientRect();
          makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
        }
      }
      if (makeAbsolute || this.position == "absolute") {
        if (this.parent) {
          let rect = this.parent.getBoundingClientRect();
          if (rect.width && rect.height) {
            scaleX = rect.width / this.parent.offsetWidth;
            scaleY = rect.height / this.parent.offsetHeight;
          }
        } else {
          ({ scaleX, scaleY } = this.view.viewState);
        }
      }
      let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
      return {
        visible: {
          left: visible.left + margins.left,
          top: visible.top + margins.top,
          right: visible.right - margins.right,
          bottom: visible.bottom - margins.bottom
        },
        parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
        pos: this.manager.tooltips.map((t3, i2) => {
          let tv = this.manager.tooltipViews[i2];
          return tv.getCoords ? tv.getCoords(t3.pos) : this.view.coordsAtPos(t3.pos);
        }),
        size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
        space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
        scaleX,
        scaleY,
        makeAbsolute
      };
    }
    writeMeasure(measured) {
      var _a2;
      if (measured.makeAbsolute) {
        this.madeAbsolute = true;
        this.position = "absolute";
        for (let t3 of this.manager.tooltipViews)
          t3.dom.style.position = "absolute";
      }
      let { visible, space, scaleX, scaleY } = measured;
      let others = [];
      for (let i2 = 0; i2 < this.manager.tooltips.length; i2++) {
        let tooltip = this.manager.tooltips[i2], tView = this.manager.tooltipViews[i2], { dom } = tView;
        let pos = measured.pos[i2], size = measured.size[i2];
        if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space.top) || pos.top >= Math.min(visible.bottom, space.bottom) || pos.right < Math.max(visible.left, space.left) - 0.1 || pos.left > Math.min(visible.right, space.right) + 0.1)) {
          dom.style.top = Outside;
          continue;
        }
        let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
        let arrowHeight = arrow ? 7 : 0;
        let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
        let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
        let left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space.right - width)) : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 : 0) - offset.x), space.right - width);
        let above = this.above[i2];
        if (!tooltip.strictSide && (above ? pos.top - height - arrowHeight - offset.y < space.top : pos.bottom + height + arrowHeight + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top)
          above = this.above[i2] = !above;
        let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
        if (spaceVert < height && tView.resize !== false) {
          if (spaceVert < this.view.defaultLineHeight) {
            dom.style.top = Outside;
            continue;
          }
          knownHeight.set(tView, height);
          dom.style.height = (height = spaceVert) / scaleY + "px";
        } else if (dom.style.height) {
          dom.style.height = "";
        }
        let top2 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
        let right = left + width;
        if (tView.overlap !== true) {
          for (let r2 of others)
            if (r2.left < right && r2.right > left && r2.top < top2 + height && r2.bottom > top2)
              top2 = above ? r2.top - height - 2 - arrowHeight : r2.bottom + arrowHeight + 2;
        }
        if (this.position == "absolute") {
          dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
          setLeftStyle(dom, (left - measured.parent.left) / scaleX);
        } else {
          dom.style.top = top2 / scaleY + "px";
          setLeftStyle(dom, left / scaleX);
        }
        if (arrow) {
          let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
          arrow.style.left = arrowLeft / scaleX + "px";
        }
        if (tView.overlap !== true)
          others.push({ left, top: top2, right, bottom: top2 + height });
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned)
          tView.positioned(measured.space);
      }
    }
    maybeMeasure() {
      if (this.manager.tooltips.length) {
        if (this.view.inView)
          this.view.requestMeasure(this.measureReq);
        if (this.inView != this.view.inView) {
          this.inView = this.view.inView;
          if (!this.inView)
            for (let tv of this.manager.tooltipViews)
              tv.dom.style.top = Outside;
        }
      }
    }
  }, {
    eventObservers: {
      scroll() {
        this.maybeMeasure();
      }
    }
  });
  function setLeftStyle(elt, value) {
    let current = parseInt(elt.style.left, 10);
    if (isNaN(current) || Math.abs(value - current) > 1)
      elt.style.left = value + "px";
  }
  __name(setLeftStyle, "setLeftStyle");
  var baseTheme = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-tooltip": {
      zIndex: 500,
      boxSizing: "border-box"
    },
    "&light .cm-tooltip": {
      border: "1px solid #bbb",
      backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
      borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tooltip-arrow": {
      height: `${7}px`,
      width: `${7 * 2}px`,
      position: "absolute",
      zIndex: -1,
      overflow: "hidden",
      "&:before, &:after": {
        content: "''",
        position: "absolute",
        width: 0,
        height: 0,
        borderLeft: `${7}px solid transparent`,
        borderRight: `${7}px solid transparent`
      },
      ".cm-tooltip-above &": {
        bottom: `-${7}px`,
        "&:before": {
          borderTop: `${7}px solid #bbb`
        },
        "&:after": {
          borderTop: `${7}px solid #f5f5f5`,
          bottom: "1px"
        }
      },
      ".cm-tooltip-below &": {
        top: `-${7}px`,
        "&:before": {
          borderBottom: `${7}px solid #bbb`
        },
        "&:after": {
          borderBottom: `${7}px solid #f5f5f5`,
          top: "1px"
        }
      }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
      "&:before": {
        borderTopColor: "#333338",
        borderBottomColor: "#333338"
      },
      "&:after": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      }
    }
  });
  var noOffset = { x: 0, y: 0 };
  var showTooltip = /* @__PURE__ */ Facet.define({
    enables: [tooltipPlugin, baseTheme]
  });
  var showHoverTooltip = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((inputs) => inputs.reduce((a2, i2) => a2.concat(i2), []), "combine")
  });
  var HoverTooltipHost = class _HoverTooltipHost {
    static {
      __name(this, "HoverTooltipHost");
    }
    // Needs to be static so that host tooltip instances always match
    static create(view2) {
      return new _HoverTooltipHost(view2);
    }
    constructor(view2) {
      this.view = view2;
      this.mounted = false;
      this.dom = document.createElement("div");
      this.dom.classList.add("cm-tooltip-hover");
      this.manager = new TooltipViewManager(view2, showHoverTooltip, (t3, p2) => this.createHostedView(t3, p2), (t3) => t3.dom.remove());
    }
    createHostedView(tooltip, prev) {
      let hostedView = tooltip.create(this.view);
      hostedView.dom.classList.add("cm-tooltip-section");
      this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
      if (this.mounted && hostedView.mount)
        hostedView.mount(this.view);
      return hostedView;
    }
    mount(view2) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.mount)
          hostedView.mount(view2);
      }
      this.mounted = true;
    }
    positioned(space) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.positioned)
          hostedView.positioned(space);
      }
    }
    update(update) {
      this.manager.update(update);
    }
    destroy() {
      var _a2;
      for (let t3 of this.manager.tooltipViews)
        (_a2 = t3.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t3);
    }
    passProp(name2) {
      let value = void 0;
      for (let view2 of this.manager.tooltipViews) {
        let given = view2[name2];
        if (given !== void 0) {
          if (value === void 0)
            value = given;
          else if (value !== given)
            return void 0;
        }
      }
      return value;
    }
    get offset() {
      return this.passProp("offset");
    }
    get getCoords() {
      return this.passProp("getCoords");
    }
    get overlap() {
      return this.passProp("overlap");
    }
    get resize() {
      return this.passProp("resize");
    }
  };
  var showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
    let tooltips = state.facet(showHoverTooltip);
    if (tooltips.length === 0)
      return null;
    return {
      pos: Math.min(...tooltips.map((t3) => t3.pos)),
      end: Math.max(...tooltips.map((t3) => {
        var _a2;
        return (_a2 = t3.end) !== null && _a2 !== void 0 ? _a2 : t3.pos;
      })),
      create: HoverTooltipHost.create,
      above: tooltips[0].above,
      arrow: tooltips.some((t3) => t3.arrow)
    };
  });
  var HoverPlugin = class {
    static {
      __name(this, "HoverPlugin");
    }
    constructor(view2, source, field, setHover, hoverTime) {
      this.view = view2;
      this.source = source;
      this.field = field;
      this.setHover = setHover;
      this.hoverTime = hoverTime;
      this.hoverTimeout = -1;
      this.restartTimeout = -1;
      this.pending = null;
      this.lastMove = { x: 0, y: 0, target: view2.dom, time: 0 };
      this.checkHover = this.checkHover.bind(this);
      view2.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
      view2.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
    }
    update() {
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(() => this.startHover(), 20);
      }
    }
    get active() {
      return this.view.state.field(this.field);
    }
    checkHover() {
      this.hoverTimeout = -1;
      if (this.active.length)
        return;
      let hovered = Date.now() - this.lastMove.time;
      if (hovered < this.hoverTime)
        this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
      else
        this.startHover();
    }
    startHover() {
      clearTimeout(this.restartTimeout);
      let { view: view2, lastMove } = this;
      let desc = view2.docView.nearest(lastMove.target);
      if (!desc)
        return;
      let pos, side = 1;
      if (desc instanceof WidgetView) {
        pos = desc.posAtStart;
      } else {
        pos = view2.posAtCoords(lastMove);
        if (pos == null)
          return;
        let posCoords = view2.coordsAtPos(pos);
        if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view2.defaultCharacterWidth || lastMove.x > posCoords.right + view2.defaultCharacterWidth)
          return;
        let bidi = view2.bidiSpans(view2.state.doc.lineAt(pos)).find((s2) => s2.from <= pos && s2.to >= pos);
        let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
        side = lastMove.x < posCoords.left ? -rtl : rtl;
      }
      let open = this.source(view2, pos, side);
      if (open === null || open === void 0 ? void 0 : open.then) {
        let pending = this.pending = { pos };
        open.then((result) => {
          if (this.pending == pending) {
            this.pending = null;
            if (result && !(Array.isArray(result) && !result.length))
              view2.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
          }
        }, (e2) => logException(view2.state, e2, "hover tooltip"));
      } else if (open && !(Array.isArray(open) && !open.length)) {
        view2.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
      }
    }
    get tooltip() {
      let plugin = this.view.plugin(tooltipPlugin);
      let index = plugin ? plugin.manager.tooltips.findIndex((t3) => t3.create == HoverTooltipHost.create) : -1;
      return index > -1 ? plugin.manager.tooltipViews[index] : null;
    }
    mousemove(event) {
      var _a2, _b;
      this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
      if (this.hoverTimeout < 0)
        this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
      let { active, tooltip } = this;
      if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
        let { pos } = active[0] || this.pending, end = (_b = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b !== void 0 ? _b : pos;
        if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
          this.view.dispatch({ effects: this.setHover.of([]) });
          this.pending = null;
        }
      }
    }
    mouseleave(event) {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      let { active } = this;
      if (active.length) {
        let { tooltip } = this;
        let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
        if (!inTooltip)
          this.view.dispatch({ effects: this.setHover.of([]) });
        else
          this.watchTooltipLeave(tooltip.dom);
      }
    }
    watchTooltipLeave(tooltip) {
      let watch = /* @__PURE__ */ __name((event) => {
        tooltip.removeEventListener("mouseleave", watch);
        if (this.active.length && !this.view.dom.contains(event.relatedTarget))
          this.view.dispatch({ effects: this.setHover.of([]) });
      }, "watch");
      tooltip.addEventListener("mouseleave", watch);
    }
    destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  };
  var tooltipMargin = 4;
  function isInTooltip(tooltip, event) {
    let { left, right, top: top2, bottom } = tooltip.getBoundingClientRect(), arrow;
    if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
      let arrowRect = arrow.getBoundingClientRect();
      top2 = Math.min(arrowRect.top, top2);
      bottom = Math.max(arrowRect.bottom, bottom);
    }
    return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin && event.clientY >= top2 - tooltipMargin && event.clientY <= bottom + tooltipMargin;
  }
  __name(isInTooltip, "isInTooltip");
  function isOverRange(view2, from, to, x2, y2, margin) {
    let rect = view2.scrollDOM.getBoundingClientRect();
    let docBottom = view2.documentTop + view2.documentPadding.top + view2.contentHeight;
    if (rect.left > x2 || rect.right < x2 || rect.top > y2 || Math.min(rect.bottom, docBottom) < y2)
      return false;
    let pos = view2.posAtCoords({ x: x2, y: y2 }, false);
    return pos >= from && pos <= to;
  }
  __name(isOverRange, "isOverRange");
  function hoverTooltip(source, options = {}) {
    let setHover = StateEffect.define();
    let hoverState = StateField.define({
      create() {
        return [];
      },
      update(value, tr) {
        if (value.length) {
          if (options.hideOnChange && (tr.docChanged || tr.selection))
            value = [];
          else if (options.hideOn)
            value = value.filter((v2) => !options.hideOn(tr, v2));
          if (tr.docChanged) {
            let mapped = [];
            for (let tooltip of value) {
              let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
              if (newPos != null) {
                let copy = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
                copy.pos = newPos;
                if (copy.end != null)
                  copy.end = tr.changes.mapPos(copy.end);
                mapped.push(copy);
              }
            }
            value = mapped;
          }
        }
        for (let effect of tr.effects) {
          if (effect.is(setHover))
            value = effect.value;
          if (effect.is(closeHoverTooltipEffect))
            value = [];
        }
        return value;
      },
      provide: /* @__PURE__ */ __name((f2) => showHoverTooltip.from(f2), "provide")
    });
    return {
      active: hoverState,
      extension: [
        hoverState,
        ViewPlugin.define((view2) => new HoverPlugin(
          view2,
          source,
          hoverState,
          setHover,
          options.hoverTime || 300
          /* Hover.Time */
        )),
        showHoverTooltipHost
      ]
    };
  }
  __name(hoverTooltip, "hoverTooltip");
  function getTooltip(view2, tooltip) {
    let plugin = view2.plugin(tooltipPlugin);
    if (!plugin)
      return null;
    let found = plugin.manager.tooltips.indexOf(tooltip);
    return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  __name(getTooltip, "getTooltip");
  var closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
  var panelConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      let topContainer, bottomContainer;
      for (let c2 of configs) {
        topContainer = topContainer || c2.topContainer;
        bottomContainer = bottomContainer || c2.bottomContainer;
      }
      return { topContainer, bottomContainer };
    }
  });
  function getPanel(view2, panel) {
    let plugin = view2.plugin(panelPlugin);
    let index = plugin ? plugin.specs.indexOf(panel) : -1;
    return index > -1 ? plugin.panels[index] : null;
  }
  __name(getPanel, "getPanel");
  var panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.input = view2.state.facet(showPanel);
      this.specs = this.input.filter((s2) => s2);
      this.panels = this.specs.map((spec) => spec(view2));
      let conf = view2.state.facet(panelConfig);
      this.top = new PanelGroup(view2, true, conf.topContainer);
      this.bottom = new PanelGroup(view2, false, conf.bottomContainer);
      this.top.sync(this.panels.filter((p2) => p2.top));
      this.bottom.sync(this.panels.filter((p2) => !p2.top));
      for (let p2 of this.panels) {
        p2.dom.classList.add("cm-panel");
        if (p2.mount)
          p2.mount();
      }
    }
    update(update) {
      let conf = update.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(update.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      let input = update.state.facet(showPanel);
      if (input != this.input) {
        let specs = input.filter((x2) => x2);
        let panels = [], top2 = [], bottom = [], mount = [];
        for (let spec of specs) {
          let known = this.specs.indexOf(spec), panel;
          if (known < 0) {
            panel = spec(update.view);
            mount.push(panel);
          } else {
            panel = this.panels[known];
            if (panel.update)
              panel.update(update);
          }
          panels.push(panel);
          (panel.top ? top2 : bottom).push(panel);
        }
        this.specs = specs;
        this.panels = panels;
        this.top.sync(top2);
        this.bottom.sync(bottom);
        for (let p2 of mount) {
          p2.dom.classList.add("cm-panel");
          if (p2.mount)
            p2.mount();
        }
      } else {
        for (let p2 of this.panels)
          if (p2.update)
            p2.update(update);
      }
    }
    destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }, {
    provide: /* @__PURE__ */ __name((plugin) => EditorView.scrollMargins.of((view2) => {
      let value = view2.plugin(plugin);
      return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
    }), "provide")
  });
  var PanelGroup = class {
    static {
      __name(this, "PanelGroup");
    }
    constructor(view2, top2, container) {
      this.view = view2;
      this.top = top2;
      this.container = container;
      this.dom = void 0;
      this.classes = "";
      this.panels = [];
      this.syncClasses();
    }
    sync(panels) {
      for (let p2 of this.panels)
        if (p2.destroy && panels.indexOf(p2) < 0)
          p2.destroy();
      this.panels = panels;
      this.syncDOM();
    }
    syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = void 0;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        let parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      let curDOM = this.dom.firstChild;
      for (let panel of this.panels) {
        if (panel.dom.parentNode == this.dom) {
          while (curDOM != panel.dom)
            curDOM = rm(curDOM);
          curDOM = curDOM.nextSibling;
        } else {
          this.dom.insertBefore(panel.dom, curDOM);
        }
      }
      while (curDOM)
        curDOM = rm(curDOM);
    }
    scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
    syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses)
        return;
      for (let cls of this.classes.split(" "))
        if (cls)
          this.container.classList.remove(cls);
      for (let cls of (this.classes = this.view.themeClasses).split(" "))
        if (cls)
          this.container.classList.add(cls);
    }
  };
  function rm(node) {
    let next = node.nextSibling;
    node.remove();
    return next;
  }
  __name(rm, "rm");
  var showPanel = /* @__PURE__ */ Facet.define({
    enables: panelPlugin
  });
  var GutterMarker = class extends RangeValue {
    static {
      __name(this, "GutterMarker");
    }
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
    eq(other) {
      return false;
    }
    /**
    Called if the marker has a `toDOM` method and its representation
    was removed from a gutter.
    */
    destroy(dom) {
    }
  };
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = void 0;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  var gutterLineClass = /* @__PURE__ */ Facet.define();
  var gutterWidgetClass = /* @__PURE__ */ Facet.define();
  var defaults = {
    class: "",
    renderEmptyElements: false,
    elementStyle: "",
    markers: /* @__PURE__ */ __name(() => RangeSet.empty, "markers"),
    lineMarker: /* @__PURE__ */ __name(() => null, "lineMarker"),
    widgetMarker: /* @__PURE__ */ __name(() => null, "widgetMarker"),
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {}
  };
  var activeGutters = /* @__PURE__ */ Facet.define();
  function gutter(config15) {
    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config15))];
  }
  __name(gutter, "gutter");
  var unfixGutters = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => values.some((x2) => x2), "combine")
  });
  function gutters(config15) {
    let result = [
      gutterView
    ];
    if (config15 && config15.fixed === false)
      result.push(unfixGutters.of(true));
    return result;
  }
  __name(gutters, "gutters");
  var gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.view = view2;
      this.prevViewport = view2.viewport;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutters";
      this.dom.setAttribute("aria-hidden", "true");
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      this.gutters = view2.state.facet(activeGutters).map((conf) => new SingleGutterView(view2, conf));
      for (let gutter2 of this.gutters)
        this.dom.appendChild(gutter2.dom);
      this.fixed = !view2.state.facet(unfixGutters);
      if (this.fixed) {
        this.dom.style.position = "sticky";
      }
      this.syncGutters(false);
      view2.scrollDOM.insertBefore(this.dom, view2.contentDOM);
    }
    update(update) {
      if (this.updateGutters(update)) {
        let vpA = this.prevViewport, vpB = update.view.viewport;
        let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
        this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
      }
      if (update.geometryChanged) {
        this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      }
      if (this.view.state.facet(unfixGutters) != !this.fixed) {
        this.fixed = !this.fixed;
        this.dom.style.position = this.fixed ? "sticky" : "";
      }
      this.prevViewport = update.view.viewport;
    }
    syncGutters(detach) {
      let after = this.dom.nextSibling;
      if (detach)
        this.dom.remove();
      let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
      let classSet = [];
      let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
      for (let line of this.view.viewportLineBlocks) {
        if (classSet.length)
          classSet = [];
        if (Array.isArray(line.type)) {
          let first = true;
          for (let b2 of line.type) {
            if (b2.type == BlockType.Text && first) {
              advanceCursor(lineClasses, classSet, b2.from);
              for (let cx of contexts)
                cx.line(this.view, b2, classSet);
              first = false;
            } else if (b2.widget) {
              for (let cx of contexts)
                cx.widget(this.view, b2);
            }
          }
        } else if (line.type == BlockType.Text) {
          advanceCursor(lineClasses, classSet, line.from);
          for (let cx of contexts)
            cx.line(this.view, line, classSet);
        } else if (line.widget) {
          for (let cx of contexts)
            cx.widget(this.view, line);
        }
      }
      for (let cx of contexts)
        cx.finish();
      if (detach)
        this.view.scrollDOM.insertBefore(this.dom, after);
    }
    updateGutters(update) {
      let prev = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
      let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
      if (prev == cur2) {
        for (let gutter2 of this.gutters)
          if (gutter2.update(update))
            change = true;
      } else {
        change = true;
        let gutters2 = [];
        for (let conf of cur2) {
          let known = prev.indexOf(conf);
          if (known < 0) {
            gutters2.push(new SingleGutterView(this.view, conf));
          } else {
            this.gutters[known].update(update);
            gutters2.push(this.gutters[known]);
          }
        }
        for (let g2 of this.gutters) {
          g2.dom.remove();
          if (gutters2.indexOf(g2) < 0)
            g2.destroy();
        }
        for (let g2 of gutters2)
          this.dom.appendChild(g2.dom);
        this.gutters = gutters2;
      }
      return change;
    }
    destroy() {
      for (let view2 of this.gutters)
        view2.destroy();
      this.dom.remove();
    }
  }, {
    provide: /* @__PURE__ */ __name((plugin) => EditorView.scrollMargins.of((view2) => {
      let value = view2.plugin(plugin);
      if (!value || value.gutters.length == 0 || !value.fixed)
        return null;
      return view2.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view2.scaleX } : { right: value.dom.offsetWidth * view2.scaleX };
    }), "provide")
  });
  function asArray2(val) {
    return Array.isArray(val) ? val : [val];
  }
  __name(asArray2, "asArray");
  function advanceCursor(cursor, collect, pos) {
    while (cursor.value && cursor.from <= pos) {
      if (cursor.from == pos)
        collect.push(cursor.value);
      cursor.next();
    }
  }
  __name(advanceCursor, "advanceCursor");
  var UpdateContext = class {
    static {
      __name(this, "UpdateContext");
    }
    constructor(gutter2, viewport, height) {
      this.gutter = gutter2;
      this.height = height;
      this.i = 0;
      this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
    }
    addElement(view2, block, markers) {
      let { gutter: gutter2 } = this, above = (block.top - this.height) / view2.scaleY, height = block.height / view2.scaleY;
      if (this.i == gutter2.elements.length) {
        let newElt = new GutterElement(view2, height, above, markers);
        gutter2.elements.push(newElt);
        gutter2.dom.appendChild(newElt.dom);
      } else {
        gutter2.elements[this.i].update(view2, height, above, markers);
      }
      this.height = block.bottom;
      this.i++;
    }
    line(view2, line, extraMarkers) {
      let localMarkers = [];
      advanceCursor(this.cursor, localMarkers, line.from);
      if (extraMarkers.length)
        localMarkers = localMarkers.concat(extraMarkers);
      let forLine = this.gutter.config.lineMarker(view2, line, localMarkers);
      if (forLine)
        localMarkers.unshift(forLine);
      let gutter2 = this.gutter;
      if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
        return;
      this.addElement(view2, line, localMarkers);
    }
    widget(view2, block) {
      let marker = this.gutter.config.widgetMarker(view2, block.widget, block), markers = marker ? [marker] : null;
      for (let cls of view2.state.facet(gutterWidgetClass)) {
        let marker2 = cls(view2, block.widget, block);
        if (marker2)
          (markers || (markers = [])).push(marker2);
      }
      if (markers)
        this.addElement(view2, block, markers);
    }
    finish() {
      let gutter2 = this.gutter;
      while (gutter2.elements.length > this.i) {
        let last = gutter2.elements.pop();
        gutter2.dom.removeChild(last.dom);
        last.destroy();
      }
    }
  };
  var SingleGutterView = class {
    static {
      __name(this, "SingleGutterView");
    }
    constructor(view2, config15) {
      this.view = view2;
      this.config = config15;
      this.elements = [];
      this.spacer = null;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
      for (let prop in config15.domEventHandlers) {
        this.dom.addEventListener(prop, (event) => {
          let target = event.target, y2;
          if (target != this.dom && this.dom.contains(target)) {
            while (target.parentNode != this.dom)
              target = target.parentNode;
            let rect = target.getBoundingClientRect();
            y2 = (rect.top + rect.bottom) / 2;
          } else {
            y2 = event.clientY;
          }
          let line = view2.lineBlockAtHeight(y2 - view2.documentTop);
          if (config15.domEventHandlers[prop](view2, line, event))
            event.preventDefault();
        });
      }
      this.markers = asArray2(config15.markers(view2));
      if (config15.initialSpacer) {
        this.spacer = new GutterElement(view2, 0, 0, [config15.initialSpacer(view2)]);
        this.dom.appendChild(this.spacer.dom);
        this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
      }
    }
    update(update) {
      let prevMarkers = this.markers;
      this.markers = asArray2(this.config.markers(update.view));
      if (this.spacer && this.config.updateSpacer) {
        let updated = this.config.updateSpacer(this.spacer.markers[0], update);
        if (updated != this.spacer.markers[0])
          this.spacer.update(update.view, 0, 0, [updated]);
      }
      let vp = update.view.viewport;
      return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
    }
    destroy() {
      for (let elt of this.elements)
        elt.destroy();
    }
  };
  var GutterElement = class {
    static {
      __name(this, "GutterElement");
    }
    constructor(view2, height, above, markers) {
      this.height = -1;
      this.above = 0;
      this.markers = [];
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutterElement";
      this.update(view2, height, above, markers);
    }
    update(view2, height, above, markers) {
      if (this.height != height) {
        this.height = height;
        this.dom.style.height = height + "px";
      }
      if (this.above != above)
        this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
      if (!sameMarkers(this.markers, markers))
        this.setMarkers(view2, markers);
    }
    setMarkers(view2, markers) {
      let cls = "cm-gutterElement", domPos = this.dom.firstChild;
      for (let iNew = 0, iOld = 0; ; ) {
        let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
        if (marker) {
          let c2 = marker.elementClass;
          if (c2)
            cls += " " + c2;
          for (let i2 = iOld; i2 < this.markers.length; i2++)
            if (this.markers[i2].compare(marker)) {
              skipTo = i2;
              matched = true;
              break;
            }
        } else {
          skipTo = this.markers.length;
        }
        while (iOld < skipTo) {
          let next = this.markers[iOld++];
          if (next.toDOM) {
            next.destroy(domPos);
            let after = domPos.nextSibling;
            domPos.remove();
            domPos = after;
          }
        }
        if (!marker)
          break;
        if (marker.toDOM) {
          if (matched)
            domPos = domPos.nextSibling;
          else
            this.dom.insertBefore(marker.toDOM(view2), domPos);
        }
        if (matched)
          iOld++;
      }
      this.dom.className = cls;
      this.markers = markers;
    }
    destroy() {
      this.setMarkers(null, []);
    }
  };
  function sameMarkers(a2, b2) {
    if (a2.length != b2.length)
      return false;
    for (let i2 = 0; i2 < a2.length; i2++)
      if (!a2[i2].compare(b2[i2]))
        return false;
    return true;
  }
  __name(sameMarkers, "sameMarkers");
  var lineNumberMarkers = /* @__PURE__ */ Facet.define();
  var lineNumberWidgetMarker = /* @__PURE__ */ Facet.define();
  var lineNumberConfig = /* @__PURE__ */ Facet.define({
    combine(values) {
      return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
        domEventHandlers(a2, b2) {
          let result = Object.assign({}, a2);
          for (let event in b2) {
            let exists = result[event], add2 = b2[event];
            result[event] = exists ? (view2, line, event2) => exists(view2, line, event2) || add2(view2, line, event2) : add2;
          }
          return result;
        }
      });
    }
  });
  var NumberMarker = class extends GutterMarker {
    static {
      __name(this, "NumberMarker");
    }
    constructor(number2) {
      super();
      this.number = number2;
    }
    eq(other) {
      return this.number == other.number;
    }
    toDOM() {
      return document.createTextNode(this.number);
    }
  };
  function formatNumber(view2, number2) {
    return view2.state.facet(lineNumberConfig).formatNumber(number2, view2.state);
  }
  __name(formatNumber, "formatNumber");
  var lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
    class: "cm-lineNumbers",
    renderEmptyElements: false,
    markers(view2) {
      return view2.state.facet(lineNumberMarkers);
    },
    lineMarker(view2, line, others) {
      if (others.some((m2) => m2.toDOM))
        return null;
      return new NumberMarker(formatNumber(view2, view2.state.doc.lineAt(line.from).number));
    },
    widgetMarker: /* @__PURE__ */ __name((view2, widget, block) => {
      for (let m2 of view2.state.facet(lineNumberWidgetMarker)) {
        let result = m2(view2, widget, block);
        if (result)
          return result;
      }
      return null;
    }, "widgetMarker"),
    lineMarkerChange: /* @__PURE__ */ __name((update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig), "lineMarkerChange"),
    initialSpacer(view2) {
      return new NumberMarker(formatNumber(view2, maxLineNumber(view2.state.doc.lines)));
    },
    updateSpacer(spacer, update) {
      let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
      return max == spacer.number ? spacer : new NumberMarker(max);
    },
    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  }));
  function lineNumbers(config15 = {}) {
    return [
      lineNumberConfig.of(config15),
      gutters(),
      lineNumberGutter
    ];
  }
  __name(lineNumbers, "lineNumbers");
  function maxLineNumber(lines) {
    let last = 9;
    while (last < lines)
      last = last * 10 + 9;
    return last;
  }
  __name(maxLineNumber, "maxLineNumber");
  var activeLineGutterMarker = /* @__PURE__ */ new class extends GutterMarker {
    constructor() {
      super(...arguments);
      this.elementClass = "cm-activeLineGutter";
    }
  }();
  var activeLineGutterHighlighter = /* @__PURE__ */ gutterLineClass.compute(["selection"], (state) => {
    let marks2 = [], last = -1;
    for (let range of state.selection.ranges) {
      let linePos = state.doc.lineAt(range.head).from;
      if (linePos > last) {
        last = linePos;
        marks2.push(activeLineGutterMarker.range(linePos));
      }
    }
    return RangeSet.of(marks2);
  });
  function highlightActiveLineGutter() {
    return activeLineGutterHighlighter;
  }
  __name(highlightActiveLineGutter, "highlightActiveLineGutter");

  // node_modules/@lezer/common/dist/index.js
  var DefaultBufferLength = 1024;
  var nextPropID = 0;
  var Range2 = class {
    static {
      __name(this, "Range");
    }
    constructor(from, to) {
      this.from = from;
      this.to = to;
    }
  };
  var NodeProp = class {
    static {
      __name(this, "NodeProp");
    }
    /**
    Create a new node prop type.
    */
    constructor(config15 = {}) {
      this.id = nextPropID++;
      this.perNode = !!config15.perNode;
      this.deserialize = config15.deserialize || (() => {
        throw new Error("This node type doesn't define a deserialize function");
      });
    }
    /**
    This is meant to be used with
    [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.ParserConfig.props) to compute
    prop values for each node type in the set. Takes a [match
    object](#common.NodeType^match) or function that returns undefined
    if the node type doesn't get this prop, and the prop's value if
    it does.
    */
    add(match) {
      if (this.perNode)
        throw new RangeError("Can't add per-node props to node types");
      if (typeof match != "function")
        match = NodeType.match(match);
      return (type) => {
        let result = match(type);
        return result === void 0 ? null : [this, result];
      };
    }
  };
  NodeProp.closedBy = new NodeProp({ deserialize: /* @__PURE__ */ __name((str) => str.split(" "), "deserialize") });
  NodeProp.openedBy = new NodeProp({ deserialize: /* @__PURE__ */ __name((str) => str.split(" "), "deserialize") });
  NodeProp.group = new NodeProp({ deserialize: /* @__PURE__ */ __name((str) => str.split(" "), "deserialize") });
  NodeProp.isolate = new NodeProp({ deserialize: /* @__PURE__ */ __name((value) => {
    if (value && value != "rtl" && value != "ltr" && value != "auto")
      throw new RangeError("Invalid value for isolate: " + value);
    return value || "auto";
  }, "deserialize") });
  NodeProp.contextHash = new NodeProp({ perNode: true });
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  NodeProp.mounted = new NodeProp({ perNode: true });
  var MountedTree = class {
    static {
      __name(this, "MountedTree");
    }
    constructor(tree, overlay, parser) {
      this.tree = tree;
      this.overlay = overlay;
      this.parser = parser;
    }
    /**
    @internal
    */
    static get(tree) {
      return tree && tree.props && tree.props[NodeProp.mounted.id];
    }
  };
  var noProps = /* @__PURE__ */ Object.create(null);
  var NodeType = class _NodeType {
    static {
      __name(this, "NodeType");
    }
    /**
    @internal
    */
    constructor(name2, props, id, flags = 0) {
      this.name = name2;
      this.props = props;
      this.id = id;
      this.flags = flags;
    }
    /**
    Define a node type.
    */
    static define(spec) {
      let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
      let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
      let type = new _NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props)
        for (let src of spec.props) {
          if (!Array.isArray(src))
            src = src(type);
          if (src) {
            if (src[0].perNode)
              throw new RangeError("Can't store a per-node prop on a node type");
            props[src[0].id] = src[1];
          }
        }
      return type;
    }
    /**
    Retrieves a node prop for this type. Will return `undefined` if
    the prop isn't present on this node.
    */
    prop(prop) {
      return this.props[prop.id];
    }
    /**
    True when this is the top node of a grammar.
    */
    get isTop() {
      return (this.flags & 1) > 0;
    }
    /**
    True when this node is produced by a skip rule.
    */
    get isSkipped() {
      return (this.flags & 2) > 0;
    }
    /**
    Indicates whether this is an error node.
    */
    get isError() {
      return (this.flags & 4) > 0;
    }
    /**
    When true, this node type doesn't correspond to a user-declared
    named node, for example because it is used to cache repetition.
    */
    get isAnonymous() {
      return (this.flags & 8) > 0;
    }
    /**
    Returns true when this node's name or one of its
    [groups](#common.NodeProp^group) matches the given string.
    */
    is(name2) {
      if (typeof name2 == "string") {
        if (this.name == name2)
          return true;
        let group = this.prop(NodeProp.group);
        return group ? group.indexOf(name2) > -1 : false;
      }
      return this.id == name2;
    }
    /**
    Create a function from node types to arbitrary values by
    specifying an object whose property names are node or
    [group](#common.NodeProp^group) names. Often useful with
    [`NodeProp.add`](#common.NodeProp.add). You can put multiple
    names, separated by spaces, in a single property name to map
    multiple node names to a single value.
    */
    static match(map) {
      let direct = /* @__PURE__ */ Object.create(null);
      for (let prop in map)
        for (let name2 of prop.split(" "))
          direct[name2] = map[prop];
      return (node) => {
        for (let groups = node.prop(NodeProp.group), i2 = -1; i2 < (groups ? groups.length : 0); i2++) {
          let found = direct[i2 < 0 ? node.name : groups[i2]];
          if (found)
            return found;
        }
      };
    }
  };
  NodeType.none = new NodeType(
    "",
    /* @__PURE__ */ Object.create(null),
    0,
    8
    /* NodeFlag.Anonymous */
  );
  var NodeSet = class _NodeSet {
    static {
      __name(this, "NodeSet");
    }
    /**
    Create a set with the given types. The `id` property of each
    type should correspond to its position within the array.
    */
    constructor(types2) {
      this.types = types2;
      for (let i2 = 0; i2 < types2.length; i2++)
        if (types2[i2].id != i2)
          throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
    /**
    Create a copy of this set with some node properties added. The
    arguments to this method can be created with
    [`NodeProp.add`](#common.NodeProp.add).
    */
    extend(...props) {
      let newTypes = [];
      for (let type of this.types) {
        let newProps = null;
        for (let source of props) {
          let add2 = source(type);
          if (add2) {
            if (!newProps)
              newProps = Object.assign({}, type.props);
            newProps[add2[0].id] = add2[1];
          }
        }
        newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
      }
      return new _NodeSet(newTypes);
    }
  };
  var CachedNode = /* @__PURE__ */ new WeakMap();
  var CachedInnerNode = /* @__PURE__ */ new WeakMap();
  var IterMode;
  (function(IterMode2) {
    IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
    IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
    IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
    IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  var Tree = class _Tree {
    static {
      __name(this, "Tree");
    }
    /**
    Construct a new tree. See also [`Tree.build`](#common.Tree^build).
    */
    constructor(type, children, positions, length, props) {
      this.type = type;
      this.children = children;
      this.positions = positions;
      this.length = length;
      this.props = null;
      if (props && props.length) {
        this.props = /* @__PURE__ */ Object.create(null);
        for (let [prop, value] of props)
          this.props[typeof prop == "number" ? prop : prop.id] = value;
      }
    }
    /**
    @internal
    */
    toString() {
      let mounted = MountedTree.get(this);
      if (mounted && !mounted.overlay)
        return mounted.tree.toString();
      let children = "";
      for (let ch of this.children) {
        let str = ch.toString();
        if (str) {
          if (children)
            children += ",";
          children += str;
        }
      }
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /**
    Get a [tree cursor](#common.TreeCursor) positioned at the top of
    the tree. Mode can be used to [control](#common.IterMode) which
    nodes the cursor visits.
    */
    cursor(mode = 0) {
      return new TreeCursor(this.topNode, mode);
    }
    /**
    Get a [tree cursor](#common.TreeCursor) pointing into this tree
    at the given position and side (see
    [`moveTo`](#common.TreeCursor.moveTo).
    */
    cursorAt(pos, side = 0, mode = 0) {
      let scope = CachedNode.get(this) || this.topNode;
      let cursor = new TreeCursor(scope);
      cursor.moveTo(pos, side);
      CachedNode.set(this, cursor._tree);
      return cursor;
    }
    /**
    Get a [syntax node](#common.SyntaxNode) object for the top of the
    tree.
    */
    get topNode() {
      return new TreeNode(this, 0, 0, null);
    }
    /**
    Get the [syntax node](#common.SyntaxNode) at the given position.
    If `side` is -1, this will move into nodes that end at the
    position. If 1, it'll move into nodes that start at the
    position. With 0, it'll only enter nodes that cover the position
    from both sides.
    
    Note that this will not enter
    [overlays](#common.MountedTree.overlay), and you often want
    [`resolveInner`](#common.Tree.resolveInner) instead.
    */
    resolve(pos, side = 0) {
      let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
      CachedNode.set(this, node);
      return node;
    }
    /**
    Like [`resolve`](#common.Tree.resolve), but will enter
    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
    pointing into the innermost overlaid tree at the given position
    (with parent links going through all parent structure, including
    the host trees).
    */
    resolveInner(pos, side = 0) {
      let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
      CachedInnerNode.set(this, node);
      return node;
    }
    /**
    In some situations, it can be useful to iterate through all
    nodes around a position, including those in overlays that don't
    directly cover the position. This method gives you an iterator
    that will produce all nodes, from small to big, around the given
    position.
    */
    resolveStack(pos, side = 0) {
      return stackIterator(this, pos, side);
    }
    /**
    Iterate over the tree and its children, calling `enter` for any
    node that touches the `from`/`to` region (if given) before
    running over such a node's children, and `leave` (if given) when
    leaving the node. When `enter` returns `false`, that node will
    not have its children iterated over (or `leave` called).
    */
    iterate(spec) {
      let { enter, leave, from = 0, to = this.length } = spec;
      let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
      for (let c2 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
        let entered = false;
        if (c2.from <= to && c2.to >= from && (!anon && c2.type.isAnonymous || enter(c2) !== false)) {
          if (c2.firstChild())
            continue;
          entered = true;
        }
        for (; ; ) {
          if (entered && leave && (anon || !c2.type.isAnonymous))
            leave(c2);
          if (c2.nextSibling())
            break;
          if (!c2.parent())
            return;
          entered = true;
        }
      }
    }
    /**
    Get the value of the given [node prop](#common.NodeProp) for this
    node. Works with both per-node and per-type props.
    */
    prop(prop) {
      return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
    }
    /**
    Returns the node's [per-node props](#common.NodeProp.perNode) in a
    format that can be passed to the [`Tree`](#common.Tree)
    constructor.
    */
    get propValues() {
      let result = [];
      if (this.props)
        for (let id in this.props)
          result.push([+id, this.props[id]]);
      return result;
    }
    /**
    Balance the direct children of this tree, producing a copy of
    which may have children grouped into subtrees with type
    [`NodeType.none`](#common.NodeType^none).
    */
    balance(config15 = {}) {
      return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new _Tree(this.type, children, positions, length, this.propValues), config15.makeTree || ((children, positions, length) => new _Tree(NodeType.none, children, positions, length)));
    }
    /**
    Build a tree from a postfix-ordered buffer of node information,
    or a cursor over such a buffer.
    */
    static build(data) {
      return buildTree(data);
    }
  };
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  var FlatBufferCursor = class _FlatBufferCursor {
    static {
      __name(this, "FlatBufferCursor");
    }
    constructor(buffer, index) {
      this.buffer = buffer;
      this.index = index;
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    get pos() {
      return this.index;
    }
    next() {
      this.index -= 4;
    }
    fork() {
      return new _FlatBufferCursor(this.buffer, this.index);
    }
  };
  var TreeBuffer = class _TreeBuffer {
    static {
      __name(this, "TreeBuffer");
    }
    /**
    Create a tree buffer.
    */
    constructor(buffer, length, set) {
      this.buffer = buffer;
      this.length = length;
      this.set = set;
    }
    /**
    @internal
    */
    get type() {
      return NodeType.none;
    }
    /**
    @internal
    */
    toString() {
      let result = [];
      for (let index = 0; index < this.buffer.length; ) {
        result.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result.join(",");
    }
    /**
    @internal
    */
    childString(index) {
      let id = this.buffer[index], endIndex = this.buffer[index + 3];
      let type = this.set.types[id], result = type.name;
      if (/\W/.test(result) && !type.isError)
        result = JSON.stringify(result);
      index += 4;
      if (endIndex == index)
        return result;
      let children = [];
      while (index < endIndex) {
        children.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /**
    @internal
    */
    findChild(startIndex, endIndex, dir, pos, side) {
      let { buffer } = this, pick = -1;
      for (let i2 = startIndex; i2 != endIndex; i2 = buffer[i2 + 3]) {
        if (checkSide(side, pos, buffer[i2 + 1], buffer[i2 + 2])) {
          pick = i2;
          if (dir > 0)
            break;
        }
      }
      return pick;
    }
    /**
    @internal
    */
    slice(startI, endI, from) {
      let b2 = this.buffer;
      let copy = new Uint16Array(endI - startI), len = 0;
      for (let i2 = startI, j2 = 0; i2 < endI; ) {
        copy[j2++] = b2[i2++];
        copy[j2++] = b2[i2++] - from;
        let to = copy[j2++] = b2[i2++] - from;
        copy[j2++] = b2[i2++] - startI;
        len = Math.max(len, to);
      }
      return new _TreeBuffer(copy, len, this.set);
    }
  };
  function checkSide(side, pos, from, to) {
    switch (side) {
      case -2:
        return from < pos;
      case -1:
        return to >= pos && from < pos;
      case 0:
        return from < pos && to > pos;
      case 1:
        return from <= pos && to > pos;
      case 2:
        return to > pos;
      case 4:
        return true;
    }
  }
  __name(checkSide, "checkSide");
  function resolveNode(node, pos, side, overlays) {
    var _a2;
    while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
      let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
      if (!parent)
        return node;
      node = parent;
    }
    let mode = overlays ? 0 : IterMode.IgnoreOverlays;
    if (overlays)
      for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
        if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
          node = parent;
      }
    for (; ; ) {
      let inner = node.enter(pos, side, mode);
      if (!inner)
        return node;
      node = inner;
    }
  }
  __name(resolveNode, "resolveNode");
  var BaseNode = class {
    static {
      __name(this, "BaseNode");
    }
    cursor(mode = 0) {
      return new TreeCursor(this, mode);
    }
    getChild(type, before = null, after = null) {
      let r2 = getChildren(this, type, before, after);
      return r2.length ? r2[0] : null;
    }
    getChildren(type, before = null, after = null) {
      return getChildren(this, type, before, after);
    }
    resolve(pos, side = 0) {
      return resolveNode(this, pos, side, false);
    }
    resolveInner(pos, side = 0) {
      return resolveNode(this, pos, side, true);
    }
    matchContext(context) {
      return matchNodeContext(this.parent, context);
    }
    enterUnfinishedNodesBefore(pos) {
      let scan = this.childBefore(pos), node = this;
      while (scan) {
        let last = scan.lastChild;
        if (!last || last.to != scan.to)
          break;
        if (last.type.isError && last.from == last.to) {
          node = scan;
          scan = last.prevSibling;
        } else {
          scan = last;
        }
      }
      return node;
    }
    get node() {
      return this;
    }
    get next() {
      return this.parent;
    }
  };
  var TreeNode = class _TreeNode extends BaseNode {
    static {
      __name(this, "TreeNode");
    }
    constructor(_tree, from, index, _parent) {
      super();
      this._tree = _tree;
      this.from = from;
      this.index = index;
      this._parent = _parent;
    }
    get type() {
      return this._tree.type;
    }
    get name() {
      return this._tree.type.name;
    }
    get to() {
      return this.from + this._tree.length;
    }
    nextChild(i2, dir, pos, side, mode = 0) {
      for (let parent = this; ; ) {
        for (let { children, positions } = parent._tree, e2 = dir > 0 ? children.length : -1; i2 != e2; i2 += dir) {
          let next = children[i2], start = positions[i2] + parent.from;
          if (!checkSide(side, pos, start, start + next.length))
            continue;
          if (next instanceof TreeBuffer) {
            if (mode & IterMode.ExcludeBuffers)
              continue;
            let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
            if (index > -1)
              return new BufferNode(new BufferContext(parent, next, i2, start), null, index);
          } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
            let mounted;
            if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
              return new _TreeNode(mounted.tree, start, i2, parent);
            let inner = new _TreeNode(next, start, i2, parent);
            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
          }
        }
        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
          return null;
        if (parent.index >= 0)
          i2 = parent.index + dir;
        else
          i2 = dir < 0 ? -1 : parent._parent._tree.children.length;
        parent = parent._parent;
        if (!parent)
          return null;
      }
    }
    get firstChild() {
      return this.nextChild(
        0,
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    get lastChild() {
      return this.nextChild(
        this._tree.children.length - 1,
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    childAfter(pos) {
      return this.nextChild(
        0,
        1,
        pos,
        2
        /* Side.After */
      );
    }
    childBefore(pos) {
      return this.nextChild(
        this._tree.children.length - 1,
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    enter(pos, side, mode = 0) {
      let mounted;
      if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
        let rPos = pos - this.from;
        for (let { from, to } of mounted.overlay) {
          if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
            return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
        }
      }
      return this.nextChild(0, 1, pos, side, mode);
    }
    nextSignificantParent() {
      let val = this;
      while (val.type.isAnonymous && val._parent)
        val = val._parent;
      return val;
    }
    get parent() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
    get nextSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(
        this.index + 1,
        1,
        0,
        4
        /* Side.DontCare */
      ) : null;
    }
    get prevSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(
        this.index - 1,
        -1,
        0,
        4
        /* Side.DontCare */
      ) : null;
    }
    get tree() {
      return this._tree;
    }
    toTree() {
      return this._tree;
    }
    /**
    @internal
    */
    toString() {
      return this._tree.toString();
    }
  };
  function getChildren(node, type, before, after) {
    let cur2 = node.cursor(), result = [];
    if (!cur2.firstChild())
      return result;
    if (before != null)
      for (let found = false; !found; ) {
        found = cur2.type.is(before);
        if (!cur2.nextSibling())
          return result;
      }
    for (; ; ) {
      if (after != null && cur2.type.is(after))
        return result;
      if (cur2.type.is(type))
        result.push(cur2.node);
      if (!cur2.nextSibling())
        return after == null ? result : [];
    }
  }
  __name(getChildren, "getChildren");
  function matchNodeContext(node, context, i2 = context.length - 1) {
    for (let p2 = node; i2 >= 0; p2 = p2.parent) {
      if (!p2)
        return false;
      if (!p2.type.isAnonymous) {
        if (context[i2] && context[i2] != p2.name)
          return false;
        i2--;
      }
    }
    return true;
  }
  __name(matchNodeContext, "matchNodeContext");
  var BufferContext = class {
    static {
      __name(this, "BufferContext");
    }
    constructor(parent, buffer, index, start) {
      this.parent = parent;
      this.buffer = buffer;
      this.index = index;
      this.start = start;
    }
  };
  var BufferNode = class _BufferNode extends BaseNode {
    static {
      __name(this, "BufferNode");
    }
    get name() {
      return this.type.name;
    }
    get from() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
    get to() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
    constructor(context, _parent, index) {
      super();
      this.context = context;
      this._parent = _parent;
      this.index = index;
      this.type = context.buffer.set.types[context.buffer.buffer[index]];
    }
    child(dir, pos, side) {
      let { buffer } = this.context;
      let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
      return index < 0 ? null : new _BufferNode(this.context, this, index);
    }
    get firstChild() {
      return this.child(
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    get lastChild() {
      return this.child(
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    childAfter(pos) {
      return this.child(
        1,
        pos,
        2
        /* Side.After */
      );
    }
    childBefore(pos) {
      return this.child(
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    enter(pos, side, mode = 0) {
      if (mode & IterMode.ExcludeBuffers)
        return null;
      let { buffer } = this.context;
      let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
      return index < 0 ? null : new _BufferNode(this.context, this, index);
    }
    get parent() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
    externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(
        this.context.index + dir,
        dir,
        0,
        4
        /* Side.DontCare */
      );
    }
    get nextSibling() {
      let { buffer } = this.context;
      let after = buffer.buffer[this.index + 3];
      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
        return new _BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
    get prevSibling() {
      let { buffer } = this.context;
      let parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart)
        return this.externalSibling(-1);
      return new _BufferNode(this.context, this._parent, buffer.findChild(
        parentStart,
        this.index,
        -1,
        0,
        4
        /* Side.DontCare */
      ));
    }
    get tree() {
      return null;
    }
    toTree() {
      let children = [], positions = [];
      let { buffer } = this.context;
      let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
      if (endI > startI) {
        let from = buffer.buffer[this.index + 1];
        children.push(buffer.slice(startI, endI, from));
        positions.push(0);
      }
      return new Tree(this.type, children, positions, this.to - this.from);
    }
    /**
    @internal
    */
    toString() {
      return this.context.buffer.childString(this.index);
    }
  };
  function iterStack(heads) {
    if (!heads.length)
      return null;
    let pick = 0, picked = heads[0];
    for (let i2 = 1; i2 < heads.length; i2++) {
      let node = heads[i2];
      if (node.from > picked.from || node.to < picked.to) {
        picked = node;
        pick = i2;
      }
    }
    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
    let newHeads = heads.slice();
    if (next)
      newHeads[pick] = next;
    else
      newHeads.splice(pick, 1);
    return new StackIterator(newHeads, picked);
  }
  __name(iterStack, "iterStack");
  var StackIterator = class {
    static {
      __name(this, "StackIterator");
    }
    constructor(heads, node) {
      this.heads = heads;
      this.node = node;
    }
    get next() {
      return iterStack(this.heads);
    }
  };
  function stackIterator(tree, pos, side) {
    let inner = tree.resolveInner(pos, side), layers = null;
    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
      if (scan.index < 0) {
        let parent = scan.parent;
        (layers || (layers = [inner])).push(parent.resolve(pos, side));
        scan = parent;
      } else {
        let mount = MountedTree.get(scan.tree);
        if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
          let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
          (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
        }
      }
    }
    return layers ? iterStack(layers) : inner;
  }
  __name(stackIterator, "stackIterator");
  var TreeCursor = class {
    static {
      __name(this, "TreeCursor");
    }
    /**
    Shorthand for `.type.name`.
    */
    get name() {
      return this.type.name;
    }
    /**
    @internal
    */
    constructor(node, mode = 0) {
      this.mode = mode;
      this.buffer = null;
      this.stack = [];
      this.index = 0;
      this.bufferNode = null;
      if (node instanceof TreeNode) {
        this.yieldNode(node);
      } else {
        this._tree = node.context.parent;
        this.buffer = node.context;
        for (let n2 = node._parent; n2; n2 = n2._parent)
          this.stack.unshift(n2.index);
        this.bufferNode = node;
        this.yieldBuf(node.index);
      }
    }
    yieldNode(node) {
      if (!node)
        return false;
      this._tree = node;
      this.type = node.type;
      this.from = node.from;
      this.to = node.to;
      return true;
    }
    yieldBuf(index, type) {
      this.index = index;
      let { start, buffer } = this.buffer;
      this.type = type || buffer.set.types[buffer.buffer[index]];
      this.from = start + buffer.buffer[index + 1];
      this.to = start + buffer.buffer[index + 2];
      return true;
    }
    /**
    @internal
    */
    yield(node) {
      if (!node)
        return false;
      if (node instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node);
      }
      this.buffer = node.context;
      return this.yieldBuf(node.index, node.type);
    }
    /**
    @internal
    */
    toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /**
    @internal
    */
    enterChild(dir, pos, side) {
      if (!this.buffer)
        return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
      let { buffer } = this.buffer;
      let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
      if (index < 0)
        return false;
      this.stack.push(this.index);
      return this.yieldBuf(index);
    }
    /**
    Move the cursor to this node's first child. When this returns
    false, the node has no child, and the cursor has not been moved.
    */
    firstChild() {
      return this.enterChild(
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    /**
    Move the cursor to this node's last child.
    */
    lastChild() {
      return this.enterChild(
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    /**
    Move the cursor to the first child that ends after `pos`.
    */
    childAfter(pos) {
      return this.enterChild(
        1,
        pos,
        2
        /* Side.After */
      );
    }
    /**
    Move to the last child that starts before `pos`.
    */
    childBefore(pos) {
      return this.enterChild(
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    /**
    Move the cursor to the child around `pos`. If side is -1 the
    child may end at that position, when 1 it may start there. This
    will also enter [overlaid](#common.MountedTree.overlay)
    [mounted](#common.NodeProp^mounted) trees unless `overlays` is
    set to false.
    */
    enter(pos, side, mode = this.mode) {
      if (!this.buffer)
        return this.yield(this._tree.enter(pos, side, mode));
      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
    }
    /**
    Move to the node's parent node, if this isn't the top node.
    */
    parent() {
      if (!this.buffer)
        return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
      if (this.stack.length)
        return this.yieldBuf(this.stack.pop());
      let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /**
    @internal
    */
    sibling(dir) {
      if (!this.buffer)
        return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
      let { buffer } = this.buffer, d2 = this.stack.length - 1;
      if (dir < 0) {
        let parentStart = d2 < 0 ? 0 : this.stack[d2] + 4;
        if (this.index != parentStart)
          return this.yieldBuf(buffer.findChild(
            parentStart,
            this.index,
            -1,
            0,
            4
            /* Side.DontCare */
          ));
      } else {
        let after = buffer.buffer[this.index + 3];
        if (after < (d2 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d2] + 3]))
          return this.yieldBuf(after);
      }
      return d2 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
    }
    /**
    Move to this node's next sibling, if any.
    */
    nextSibling() {
      return this.sibling(1);
    }
    /**
    Move to this node's previous sibling, if any.
    */
    prevSibling() {
      return this.sibling(-1);
    }
    atLastNode(dir) {
      let index, parent, { buffer } = this;
      if (buffer) {
        if (dir > 0) {
          if (this.index < buffer.buffer.buffer.length)
            return false;
        } else {
          for (let i2 = 0; i2 < this.index; i2++)
            if (buffer.buffer.buffer[i2 + 3] < this.index)
              return false;
        }
        ({ index, parent } = buffer);
      } else {
        ({ index, _parent: parent } = this._tree);
      }
      for (; parent; { index, _parent: parent } = parent) {
        if (index > -1)
          for (let i2 = index + dir, e2 = dir < 0 ? -1 : parent._tree.children.length; i2 != e2; i2 += dir) {
            let child = parent._tree.children[i2];
            if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
              return false;
          }
      }
      return true;
    }
    move(dir, enter) {
      if (enter && this.enterChild(
        dir,
        0,
        4
        /* Side.DontCare */
      ))
        return true;
      for (; ; ) {
        if (this.sibling(dir))
          return true;
        if (this.atLastNode(dir) || !this.parent())
          return false;
      }
    }
    /**
    Move to the next node in a
    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
    traversal, going from a node to its first child or, if the
    current node is empty or `enter` is false, its next sibling or
    the next sibling of the first parent node that has one.
    */
    next(enter = true) {
      return this.move(1, enter);
    }
    /**
    Move to the next node in a last-to-first pre-order traversal. A
    node is followed by its last child or, if it has none, its
    previous sibling or the previous sibling of the first parent
    node that has one.
    */
    prev(enter = true) {
      return this.move(-1, enter);
    }
    /**
    Move the cursor to the innermost node that covers `pos`. If
    `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    it will enter nodes that start at `pos`.
    */
    moveTo(pos, side = 0) {
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
        if (!this.parent())
          break;
      while (this.enterChild(1, pos, side)) {
      }
      return this;
    }
    /**
    Get a [syntax node](#common.SyntaxNode) at the cursor's current
    position.
    */
    get node() {
      if (!this.buffer)
        return this._tree;
      let cache = this.bufferNode, result = null, depth = 0;
      if (cache && cache.context == this.buffer) {
        scan: for (let index = this.index, d2 = this.stack.length; d2 >= 0; ) {
          for (let c2 = cache; c2; c2 = c2._parent)
            if (c2.index == index) {
              if (index == this.index)
                return c2;
              result = c2;
              depth = d2 + 1;
              break scan;
            }
          index = this.stack[--d2];
        }
      }
      for (let i2 = depth; i2 < this.stack.length; i2++)
        result = new BufferNode(this.buffer, result, this.stack[i2]);
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /**
    Get the [tree](#common.Tree) that represents the current node, if
    any. Will return null when the node is in a [tree
    buffer](#common.TreeBuffer).
    */
    get tree() {
      return this.buffer ? null : this._tree._tree;
    }
    /**
    Iterate over the current node and all its descendants, calling
    `enter` when entering a node and `leave`, if given, when leaving
    one. When `enter` returns `false`, any children of that node are
    skipped, and `leave` isn't called for it.
    */
    iterate(enter, leave) {
      for (let depth = 0; ; ) {
        let mustLeave = false;
        if (this.type.isAnonymous || enter(this) !== false) {
          if (this.firstChild()) {
            depth++;
            continue;
          }
          if (!this.type.isAnonymous)
            mustLeave = true;
        }
        for (; ; ) {
          if (mustLeave && leave)
            leave(this);
          mustLeave = this.type.isAnonymous;
          if (!depth)
            return;
          if (this.nextSibling())
            break;
          this.parent();
          depth--;
          mustLeave = true;
        }
      }
    }
    /**
    Test whether the current node matches a given context—a sequence
    of direct parent node names. Empty strings in the context array
    are treated as wildcards.
    */
    matchContext(context) {
      if (!this.buffer)
        return matchNodeContext(this.node.parent, context);
      let { buffer } = this.buffer, { types: types2 } = buffer.set;
      for (let i2 = context.length - 1, d2 = this.stack.length - 1; i2 >= 0; d2--) {
        if (d2 < 0)
          return matchNodeContext(this._tree, context, i2);
        let type = types2[buffer.buffer[this.stack[d2]]];
        if (!type.isAnonymous) {
          if (context[i2] && context[i2] != type.name)
            return false;
          i2--;
        }
      }
      return true;
    }
  };
  function hasChild(tree) {
    return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  __name(hasChild, "hasChild");
  function buildTree(data) {
    var _a2;
    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
    let types2 = nodeSet.types;
    let contextHash = 0, lookAhead = 0;
    function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth) {
      let { id, start, end, size } = cursor;
      let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
      while (size < 0) {
        cursor.next();
        if (size == -1) {
          let node2 = reused[id];
          children2.push(node2);
          positions2.push(start - parentStart);
          return;
        } else if (size == -3) {
          contextHash = id;
          return;
        } else if (size == -4) {
          lookAhead = id;
          return;
        } else {
          throw new RangeError(`Unrecognized record size: ${size}`);
        }
      }
      let type = types2[id], node, buffer2;
      let startPos = start - parentStart;
      if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
        let data2 = new Uint16Array(buffer2.size - buffer2.skip);
        let endPos = cursor.pos - buffer2.size, index = data2.length;
        while (cursor.pos > endPos)
          index = copyToBuffer(buffer2.start, data2, index);
        node = new TreeBuffer(data2, end - buffer2.start, nodeSet);
        startPos = buffer2.start - parentStart;
      } else {
        let endPos = cursor.pos - size;
        cursor.next();
        let localChildren = [], localPositions = [];
        let localInRepeat = id >= minRepeatType ? id : -1;
        let lastGroup = 0, lastEnd = end;
        while (cursor.pos > endPos) {
          if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
            if (cursor.end <= lastEnd - maxBufferLength) {
              makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              lastGroup = localChildren.length;
              lastEnd = cursor.end;
            }
            cursor.next();
          } else if (depth > 2500) {
            takeFlatNode(start, endPos, localChildren, localPositions);
          } else {
            takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
          }
        }
        if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
        localChildren.reverse();
        localPositions.reverse();
        if (localInRepeat > -1 && lastGroup > 0) {
          let make = makeBalanced(type, contextAtStart);
          node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
        } else {
          node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
        }
      }
      children2.push(node);
      positions2.push(startPos);
    }
    __name(takeNode, "takeNode");
    function takeFlatNode(parentStart, minPos, children2, positions2) {
      let nodes = [];
      let nodeCount = 0, stopAt = -1;
      while (cursor.pos > minPos) {
        let { id, start, end, size } = cursor;
        if (size > 4) {
          cursor.next();
        } else if (stopAt > -1 && start < stopAt) {
          break;
        } else {
          if (stopAt < 0)
            stopAt = end - maxBufferLength;
          nodes.push(id, start, end);
          nodeCount++;
          cursor.next();
        }
      }
      if (nodeCount) {
        let buffer2 = new Uint16Array(nodeCount * 4);
        let start = nodes[nodes.length - 2];
        for (let i2 = nodes.length - 3, j2 = 0; i2 >= 0; i2 -= 3) {
          buffer2[j2++] = nodes[i2];
          buffer2[j2++] = nodes[i2 + 1] - start;
          buffer2[j2++] = nodes[i2 + 2] - start;
          buffer2[j2++] = j2;
        }
        children2.push(new TreeBuffer(buffer2, nodes[2] - start, nodeSet));
        positions2.push(start - parentStart);
      }
    }
    __name(takeFlatNode, "takeFlatNode");
    function makeBalanced(type, contextHash2) {
      return (children2, positions2, length2) => {
        let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
        if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
          if (!lastI && last.type == type && last.length == length2)
            return last;
          if (lookAheadProp = last.prop(NodeProp.lookAhead))
            lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
        }
        return makeTree(type, children2, positions2, length2, lookAhead2, contextHash2);
      };
    }
    __name(makeBalanced, "makeBalanced");
    function makeRepeatLeaf(children2, positions2, base2, i2, from, to, type, lookAhead2, contextHash2) {
      let localChildren = [], localPositions = [];
      while (children2.length > i2) {
        localChildren.push(children2.pop());
        localPositions.push(positions2.pop() + base2 - from);
      }
      children2.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead2 - to, contextHash2));
      positions2.push(from - base2);
    }
    __name(makeRepeatLeaf, "makeRepeatLeaf");
    function makeTree(type, children2, positions2, length2, lookAhead2, contextHash2, props) {
      if (contextHash2) {
        let pair = [NodeProp.contextHash, contextHash2];
        props = props ? [pair].concat(props) : [pair];
      }
      if (lookAhead2 > 25) {
        let pair = [NodeProp.lookAhead, lookAhead2];
        props = props ? [pair].concat(props) : [pair];
      }
      return new Tree(type, children2, positions2, length2, props);
    }
    __name(makeTree, "makeTree");
    function findBufferSize(maxSize, inRepeat) {
      let fork = cursor.fork();
      let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
      let result = { size: 0, start: 0, skip: 0 };
      scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
        let nodeSize2 = fork.size;
        if (fork.id == inRepeat && nodeSize2 >= 0) {
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        let startPos = fork.pos - nodeSize2;
        if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
          break;
        let localSkipped = fork.id >= minRepeatType ? 4 : 0;
        let nodeStart2 = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3)
              localSkipped += 4;
            else
              break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = nodeStart2;
        size += nodeSize2;
        skip += localSkipped;
      }
      if (inRepeat < 0 || size == maxSize) {
        result.size = size;
        result.start = start;
        result.skip = skip;
      }
      return result.size > 4 ? result : void 0;
    }
    __name(findBufferSize, "findBufferSize");
    function copyToBuffer(bufferStart, buffer2, index) {
      let { id, start, end, size } = cursor;
      cursor.next();
      if (size >= 0 && id < minRepeatType) {
        let startIndex = index;
        if (size > 4) {
          let endPos = cursor.pos - (size - 4);
          while (cursor.pos > endPos)
            index = copyToBuffer(bufferStart, buffer2, index);
        }
        buffer2[--index] = startIndex;
        buffer2[--index] = end - bufferStart;
        buffer2[--index] = start - bufferStart;
        buffer2[--index] = id;
      } else if (size == -3) {
        contextHash = id;
      } else if (size == -4) {
        lookAhead = id;
      }
      return index;
    }
    __name(copyToBuffer, "copyToBuffer");
    let children = [], positions = [];
    while (cursor.pos > 0)
      takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
    let length = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
    return new Tree(types2[data.topID], children.reverse(), positions.reverse(), length);
  }
  __name(buildTree, "buildTree");
  var nodeSizeCache = /* @__PURE__ */ new WeakMap();
  function nodeSize(balanceType, node) {
    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
      return 1;
    let size = nodeSizeCache.get(node);
    if (size == null) {
      size = 1;
      for (let child of node.children) {
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
      nodeSizeCache.set(node, size);
    }
    return size;
  }
  __name(nodeSize, "nodeSize");
  function balanceRange(balanceType, children, positions, from, to, start, length, mkTop, mkTree) {
    let total = 0;
    for (let i2 = from; i2 < to; i2++)
      total += nodeSize(balanceType, children[i2]);
    let maxChild = Math.ceil(
      total * 1.5 / 8
      /* Balance.BranchFactor */
    );
    let localChildren = [], localPositions = [];
    function divide(children2, positions2, from2, to2, offset) {
      for (let i2 = from2; i2 < to2; ) {
        let groupFrom = i2, groupStart = positions2[i2], groupSize = nodeSize(balanceType, children2[i2]);
        i2++;
        for (; i2 < to2; i2++) {
          let nextSize = nodeSize(balanceType, children2[i2]);
          if (groupSize + nextSize >= maxChild)
            break;
          groupSize += nextSize;
        }
        if (i2 == groupFrom + 1) {
          if (groupSize > maxChild) {
            let only = children2[groupFrom];
            divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
            continue;
          }
          localChildren.push(children2[groupFrom]);
        } else {
          let length2 = positions2[i2 - 1] + children2[i2 - 1].length - groupStart;
          localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i2, groupStart, length2, null, mkTree));
        }
        localPositions.push(groupStart + offset - start);
      }
    }
    __name(divide, "divide");
    divide(children, positions, from, to, 0);
    return (mkTop || mkTree)(localChildren, localPositions, length);
  }
  __name(balanceRange, "balanceRange");
  var TreeFragment = class _TreeFragment {
    static {
      __name(this, "TreeFragment");
    }
    /**
    Construct a tree fragment. You'll usually want to use
    [`addTree`](#common.TreeFragment^addTree) and
    [`applyChanges`](#common.TreeFragment^applyChanges) instead of
    calling this directly.
    */
    constructor(from, to, tree, offset, openStart = false, openEnd = false) {
      this.from = from;
      this.to = to;
      this.tree = tree;
      this.offset = offset;
      this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
    }
    /**
    Whether the start of the fragment represents the start of a
    parse, or the end of a change. (In the second case, it may not
    be safe to reuse some nodes at the start, depending on the
    parsing algorithm.)
    */
    get openStart() {
      return (this.open & 1) > 0;
    }
    /**
    Whether the end of the fragment represents the end of a
    full-document parse, or the start of a change.
    */
    get openEnd() {
      return (this.open & 2) > 0;
    }
    /**
    Create a set of fragments from a freshly parsed tree, or update
    an existing set of fragments by replacing the ones that overlap
    with a tree with content from the new tree. When `partial` is
    true, the parse is treated as incomplete, and the resulting
    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
    true.
    */
    static addTree(tree, fragments = [], partial = false) {
      let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
      for (let f2 of fragments)
        if (f2.to > tree.length)
          result.push(f2);
      return result;
    }
    /**
    Apply a set of edits to an array of fragments, removing or
    splitting fragments as necessary to remove edited ranges, and
    adjusting offsets for fragments that moved.
    */
    static applyChanges(fragments, changes, minGap = 128) {
      if (!changes.length)
        return fragments;
      let result = [];
      let fI = 1, nextF = fragments.length ? fragments[0] : null;
      for (let cI = 0, pos = 0, off = 0; ; cI++) {
        let nextC = cI < changes.length ? changes[cI] : null;
        let nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap)
          while (nextF && nextF.from < nextPos) {
            let cut = nextF;
            if (pos >= cut.from || nextPos <= cut.to || off) {
              let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
              cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
            }
            if (cut)
              result.push(cut);
            if (nextF.to > nextPos)
              break;
            nextF = fI < fragments.length ? fragments[fI++] : null;
          }
        if (!nextC)
          break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
  };
  var Parser = class {
    static {
      __name(this, "Parser");
    }
    /**
    Start a parse, returning a [partial parse](#common.PartialParse)
    object. [`fragments`](#common.TreeFragment) can be passed in to
    make the parse incremental.
    
    By default, the entire input is parsed. You can pass `ranges`,
    which should be a sorted array of non-empty, non-overlapping
    ranges, to parse only those ranges. The tree returned in that
    case will start at `ranges[0].from`.
    */
    startParse(input, fragments, ranges) {
      if (typeof input == "string")
        input = new StringInput(input);
      ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r2) => new Range2(r2.from, r2.to)) : [new Range2(0, 0)];
      return this.createParse(input, fragments || [], ranges);
    }
    /**
    Run a full parse, returning the resulting tree.
    */
    parse(input, fragments, ranges) {
      let parse = this.startParse(input, fragments, ranges);
      for (; ; ) {
        let done = parse.advance();
        if (done)
          return done;
      }
    }
  };
  var StringInput = class {
    static {
      __name(this, "StringInput");
    }
    constructor(string2) {
      this.string = string2;
    }
    get length() {
      return this.string.length;
    }
    chunk(from) {
      return this.string.slice(from);
    }
    get lineChunks() {
      return false;
    }
    read(from, to) {
      return this.string.slice(from, to);
    }
  };
  var stoppedInner = new NodeProp({ perNode: true });

  // node_modules/@lezer/highlight/dist/index.js
  var nextTagID = 0;
  var Tag = class _Tag {
    static {
      __name(this, "Tag");
    }
    /**
    @internal
    */
    constructor(name2, set, base2, modified) {
      this.name = name2;
      this.set = set;
      this.base = base2;
      this.modified = modified;
      this.id = nextTagID++;
    }
    toString() {
      let { name: name2 } = this;
      for (let mod of this.modified)
        if (mod.name)
          name2 = `${mod.name}(${name2})`;
      return name2;
    }
    static define(nameOrParent, parent) {
      let name2 = typeof nameOrParent == "string" ? nameOrParent : "?";
      if (nameOrParent instanceof _Tag)
        parent = nameOrParent;
      if (parent === null || parent === void 0 ? void 0 : parent.base)
        throw new Error("Can not derive from a modified tag");
      let tag = new _Tag(name2, [], null, []);
      tag.set.push(tag);
      if (parent)
        for (let t3 of parent.set)
          tag.set.push(t3);
      return tag;
    }
    /**
    Define a tag _modifier_, which is a function that, given a tag,
    will return a tag that is a subtag of the original. Applying the
    same modifier to a twice tag will return the same value (`m1(t1)
    == m1(t1)`) and applying multiple modifiers will, regardless or
    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    
    When multiple modifiers are applied to a given base tag, each
    smaller set of modifiers is registered as a parent, so that for
    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    `m1(m3(t1)`, and so on.
    */
    static defineModifier(name2) {
      let mod = new Modifier(name2);
      return (tag) => {
        if (tag.modified.indexOf(mod) > -1)
          return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a2, b2) => a2.id - b2.id));
      };
    }
  };
  var nextModifierID = 0;
  var Modifier = class _Modifier {
    static {
      __name(this, "Modifier");
    }
    constructor(name2) {
      this.name = name2;
      this.instances = [];
      this.id = nextModifierID++;
    }
    static get(base2, mods) {
      if (!mods.length)
        return base2;
      let exists = mods[0].instances.find((t3) => t3.base == base2 && sameArray2(mods, t3.modified));
      if (exists)
        return exists;
      let set = [], tag = new Tag(base2.name, set, base2, mods);
      for (let m2 of mods)
        m2.instances.push(tag);
      let configs = powerSet(mods);
      for (let parent of base2.set)
        if (!parent.modified.length)
          for (let config15 of configs)
            set.push(_Modifier.get(parent, config15));
      return tag;
    }
  };
  function sameArray2(a2, b2) {
    return a2.length == b2.length && a2.every((x2, i2) => x2 == b2[i2]);
  }
  __name(sameArray2, "sameArray");
  function powerSet(array) {
    let sets = [[]];
    for (let i2 = 0; i2 < array.length; i2++) {
      for (let j2 = 0, e2 = sets.length; j2 < e2; j2++) {
        sets.push(sets[j2].concat(array[i2]));
      }
    }
    return sets.sort((a2, b2) => b2.length - a2.length);
  }
  __name(powerSet, "powerSet");
  function styleTags(spec) {
    let byName = /* @__PURE__ */ Object.create(null);
    for (let prop in spec) {
      let tags2 = spec[prop];
      if (!Array.isArray(tags2))
        tags2 = [tags2];
      for (let part of prop.split(" "))
        if (part) {
          let pieces = [], mode = 2, rest = part;
          for (let pos = 0; ; ) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1;
              break;
            }
            let m2 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m2)
              throw new RangeError("Invalid path: " + part);
            pieces.push(m2[0] == "*" ? "" : m2[0][0] == '"' ? JSON.parse(m2[0]) : m2[0]);
            pos += m2[0].length;
            if (pos == part.length)
              break;
            let next = part[pos++];
            if (pos == part.length && next == "!") {
              mode = 0;
              break;
            }
            if (next != "/")
              throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          let last = pieces.length - 1, inner = pieces[last];
          if (!inner)
            throw new RangeError("Invalid path: " + part);
          let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
    }
    return ruleNodeProp.add(byName);
  }
  __name(styleTags, "styleTags");
  var ruleNodeProp = new NodeProp();
  var Rule = class {
    static {
      __name(this, "Rule");
    }
    constructor(tags2, mode, context, next) {
      this.tags = tags2;
      this.mode = mode;
      this.context = context;
      this.next = next;
    }
    get opaque() {
      return this.mode == 0;
    }
    get inherit() {
      return this.mode == 1;
    }
    sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
    get depth() {
      return this.context ? this.context.length : 0;
    }
  };
  Rule.empty = new Rule([], 2, null);
  function tagHighlighter(tags2, options) {
    let map = /* @__PURE__ */ Object.create(null);
    for (let style of tags2) {
      if (!Array.isArray(style.tag))
        map[style.tag.id] = style.class;
      else
        for (let tag of style.tag)
          map[tag.id] = style.class;
    }
    let { scope, all = null } = options || {};
    return {
      style: /* @__PURE__ */ __name((tags3) => {
        let cls = all;
        for (let tag of tags3) {
          for (let sub of tag.set) {
            let tagClass = map[sub.id];
            if (tagClass) {
              cls = cls ? cls + " " + tagClass : tagClass;
              break;
            }
          }
        }
        return cls;
      }, "style"),
      scope
    };
  }
  __name(tagHighlighter, "tagHighlighter");
  function highlightTags(highlighters, tags2) {
    let result = null;
    for (let highlighter of highlighters) {
      let value = highlighter.style(tags2);
      if (value)
        result = result ? result + " " + value : value;
    }
    return result;
  }
  __name(highlightTags, "highlightTags");
  function highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {
    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
    builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
    builder.flush(to);
  }
  __name(highlightTree, "highlightTree");
  var HighlightBuilder = class {
    static {
      __name(this, "HighlightBuilder");
    }
    constructor(at2, highlighters, span) {
      this.at = at2;
      this.highlighters = highlighters;
      this.span = span;
      this.class = "";
    }
    startSpan(at2, cls) {
      if (cls != this.class) {
        this.flush(at2);
        if (at2 > this.at)
          this.at = at2;
        this.class = cls;
      }
    }
    flush(to) {
      if (to > this.at && this.class)
        this.span(this.at, to, this.class);
    }
    highlightRange(cursor, from, to, inheritedClass, highlighters) {
      let { type, from: start, to: end } = cursor;
      if (start >= to || end <= from)
        return;
      if (type.isTop)
        highlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(type));
      let cls = inheritedClass;
      let rule = getStyleTags(cursor) || Rule.empty;
      let tagCls = highlightTags(highlighters, rule.tags);
      if (tagCls) {
        if (cls)
          cls += " ";
        cls += tagCls;
        if (rule.mode == 1)
          inheritedClass += (inheritedClass ? " " : "") + tagCls;
      }
      this.startSpan(Math.max(from, start), cls);
      if (rule.opaque)
        return;
      let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
      if (mounted && mounted.overlay) {
        let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
        let innerHighlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(mounted.tree.type));
        let hasChild2 = cursor.firstChild();
        for (let i2 = 0, pos = start; ; i2++) {
          let next = i2 < mounted.overlay.length ? mounted.overlay[i2] : null;
          let nextPos = next ? next.from + start : end;
          let rangeFrom2 = Math.max(from, pos), rangeTo2 = Math.min(to, nextPos);
          if (rangeFrom2 < rangeTo2 && hasChild2) {
            while (cursor.from < rangeTo2) {
              this.highlightRange(cursor, rangeFrom2, rangeTo2, inheritedClass, highlighters);
              this.startSpan(Math.min(rangeTo2, cursor.to), cls);
              if (cursor.to >= nextPos || !cursor.nextSibling())
                break;
            }
          }
          if (!next || nextPos > to)
            break;
          pos = next.to + start;
          if (pos > from) {
            this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
            this.startSpan(Math.min(to, pos), cls);
          }
        }
        if (hasChild2)
          cursor.parent();
      } else if (cursor.firstChild()) {
        if (mounted)
          inheritedClass = "";
        do {
          if (cursor.to <= from)
            continue;
          if (cursor.from >= to)
            break;
          this.highlightRange(cursor, from, to, inheritedClass, highlighters);
          this.startSpan(Math.min(to, cursor.to), cls);
        } while (cursor.nextSibling());
        cursor.parent();
      }
    }
  };
  function getStyleTags(node) {
    let rule = node.type.prop(ruleNodeProp);
    while (rule && rule.context && !node.matchContext(rule.context))
      rule = rule.next;
    return rule || null;
  }
  __name(getStyleTags, "getStyleTags");
  var t = Tag.define;
  var comment = t();
  var name = t();
  var typeName = t(name);
  var propertyName = t(name);
  var literal = t();
  var string = t(literal);
  var number = t(literal);
  var content = t();
  var heading = t(content);
  var keyword = t();
  var operator = t();
  var punctuation = t();
  var bracket = t(punctuation);
  var meta = t();
  var tags = {
    /**
    A comment.
    */
    comment,
    /**
    A line [comment](#highlight.tags.comment).
    */
    lineComment: t(comment),
    /**
    A block [comment](#highlight.tags.comment).
    */
    blockComment: t(comment),
    /**
    A documentation [comment](#highlight.tags.comment).
    */
    docComment: t(comment),
    /**
    Any kind of identifier.
    */
    name,
    /**
    The [name](#highlight.tags.name) of a variable.
    */
    variableName: t(name),
    /**
    A type [name](#highlight.tags.name).
    */
    typeName,
    /**
    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
    */
    tagName: t(typeName),
    /**
    A property or field [name](#highlight.tags.name).
    */
    propertyName,
    /**
    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
    */
    attributeName: t(propertyName),
    /**
    The [name](#highlight.tags.name) of a class.
    */
    className: t(name),
    /**
    A label [name](#highlight.tags.name).
    */
    labelName: t(name),
    /**
    A namespace [name](#highlight.tags.name).
    */
    namespace: t(name),
    /**
    The [name](#highlight.tags.name) of a macro.
    */
    macroName: t(name),
    /**
    A literal value.
    */
    literal,
    /**
    A string [literal](#highlight.tags.literal).
    */
    string,
    /**
    A documentation [string](#highlight.tags.string).
    */
    docString: t(string),
    /**
    A character literal (subtag of [string](#highlight.tags.string)).
    */
    character: t(string),
    /**
    An attribute value (subtag of [string](#highlight.tags.string)).
    */
    attributeValue: t(string),
    /**
    A number [literal](#highlight.tags.literal).
    */
    number,
    /**
    An integer [number](#highlight.tags.number) literal.
    */
    integer: t(number),
    /**
    A floating-point [number](#highlight.tags.number) literal.
    */
    float: t(number),
    /**
    A boolean [literal](#highlight.tags.literal).
    */
    bool: t(literal),
    /**
    Regular expression [literal](#highlight.tags.literal).
    */
    regexp: t(literal),
    /**
    An escape [literal](#highlight.tags.literal), for example a
    backslash escape in a string.
    */
    escape: t(literal),
    /**
    A color [literal](#highlight.tags.literal).
    */
    color: t(literal),
    /**
    A URL [literal](#highlight.tags.literal).
    */
    url: t(literal),
    /**
    A language keyword.
    */
    keyword,
    /**
    The [keyword](#highlight.tags.keyword) for the self or this
    object.
    */
    self: t(keyword),
    /**
    The [keyword](#highlight.tags.keyword) for null.
    */
    null: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) denoting some atomic value.
    */
    atom: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that represents a unit.
    */
    unit: t(keyword),
    /**
    A modifier [keyword](#highlight.tags.keyword).
    */
    modifier: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that acts as an operator.
    */
    operatorKeyword: t(keyword),
    /**
    A control-flow related [keyword](#highlight.tags.keyword).
    */
    controlKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that defines something.
    */
    definitionKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) related to defining or
    interfacing with modules.
    */
    moduleKeyword: t(keyword),
    /**
    An operator.
    */
    operator,
    /**
    An [operator](#highlight.tags.operator) that dereferences something.
    */
    derefOperator: t(operator),
    /**
    Arithmetic-related [operator](#highlight.tags.operator).
    */
    arithmeticOperator: t(operator),
    /**
    Logical [operator](#highlight.tags.operator).
    */
    logicOperator: t(operator),
    /**
    Bit [operator](#highlight.tags.operator).
    */
    bitwiseOperator: t(operator),
    /**
    Comparison [operator](#highlight.tags.operator).
    */
    compareOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that updates its operand.
    */
    updateOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that defines something.
    */
    definitionOperator: t(operator),
    /**
    Type-related [operator](#highlight.tags.operator).
    */
    typeOperator: t(operator),
    /**
    Control-flow [operator](#highlight.tags.operator).
    */
    controlOperator: t(operator),
    /**
    Program or markup punctuation.
    */
    punctuation,
    /**
    [Punctuation](#highlight.tags.punctuation) that separates
    things.
    */
    separator: t(punctuation),
    /**
    Bracket-style [punctuation](#highlight.tags.punctuation).
    */
    bracket,
    /**
    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
    tokens).
    */
    angleBracket: t(bracket),
    /**
    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
    tokens).
    */
    squareBracket: t(bracket),
    /**
    Parentheses (usually `(` and `)` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    paren: t(bracket),
    /**
    Braces (usually `{` and `}` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    brace: t(bracket),
    /**
    Content, for example plain text in XML or markup documents.
    */
    content,
    /**
    [Content](#highlight.tags.content) that represents a heading.
    */
    heading,
    /**
    A level 1 [heading](#highlight.tags.heading).
    */
    heading1: t(heading),
    /**
    A level 2 [heading](#highlight.tags.heading).
    */
    heading2: t(heading),
    /**
    A level 3 [heading](#highlight.tags.heading).
    */
    heading3: t(heading),
    /**
    A level 4 [heading](#highlight.tags.heading).
    */
    heading4: t(heading),
    /**
    A level 5 [heading](#highlight.tags.heading).
    */
    heading5: t(heading),
    /**
    A level 6 [heading](#highlight.tags.heading).
    */
    heading6: t(heading),
    /**
    A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
    */
    contentSeparator: t(content),
    /**
    [Content](#highlight.tags.content) that represents a list.
    */
    list: t(content),
    /**
    [Content](#highlight.tags.content) that represents a quote.
    */
    quote: t(content),
    /**
    [Content](#highlight.tags.content) that is emphasized.
    */
    emphasis: t(content),
    /**
    [Content](#highlight.tags.content) that is styled strong.
    */
    strong: t(content),
    /**
    [Content](#highlight.tags.content) that is part of a link.
    */
    link: t(content),
    /**
    [Content](#highlight.tags.content) that is styled as code or
    monospace.
    */
    monospace: t(content),
    /**
    [Content](#highlight.tags.content) that has a strike-through
    style.
    */
    strikethrough: t(content),
    /**
    Inserted text in a change-tracking format.
    */
    inserted: t(),
    /**
    Deleted text.
    */
    deleted: t(),
    /**
    Changed text.
    */
    changed: t(),
    /**
    An invalid or unsyntactic element.
    */
    invalid: t(),
    /**
    Metadata or meta-instruction.
    */
    meta,
    /**
    [Metadata](#highlight.tags.meta) that applies to the entire
    document.
    */
    documentMeta: t(meta),
    /**
    [Metadata](#highlight.tags.meta) that annotates or adds
    attributes to a given syntactic element.
    */
    annotation: t(meta),
    /**
    Processing instruction or preprocessor directive. Subtag of
    [meta](#highlight.tags.meta).
    */
    processingInstruction: t(meta),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that a
    given element is being defined. Expected to be used with the
    various [name](#highlight.tags.name) tags.
    */
    definition: Tag.defineModifier("definition"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that
    something is constant. Mostly expected to be used with
    [variable names](#highlight.tags.variableName).
    */
    constant: Tag.defineModifier("constant"),
    /**
    [Modifier](#highlight.Tag^defineModifier) used to indicate that
    a [variable](#highlight.tags.variableName) or [property
    name](#highlight.tags.propertyName) is being called or defined
    as a function.
    */
    function: Tag.defineModifier("function"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that can be applied to
    [names](#highlight.tags.name) to indicate that they belong to
    the language's standard environment.
    */
    standard: Tag.defineModifier("standard"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates a given
    [names](#highlight.tags.name) is local to some scope.
    */
    local: Tag.defineModifier("local"),
    /**
    A generic variant [modifier](#highlight.Tag^defineModifier) that
    can be used to tag language-specific alternative variants of
    some common tag. It is recommended for themes to define special
    forms of at least the [string](#highlight.tags.string) and
    [variable name](#highlight.tags.variableName) tags, since those
    come up a lot.
    */
    special: Tag.defineModifier("special")
  };
  for (let name2 in tags) {
    let val = tags[name2];
    if (val instanceof Tag)
      val.name = name2;
  }
  var classHighlighter = tagHighlighter([
    { tag: tags.link, class: "tok-link" },
    { tag: tags.heading, class: "tok-heading" },
    { tag: tags.emphasis, class: "tok-emphasis" },
    { tag: tags.strong, class: "tok-strong" },
    { tag: tags.keyword, class: "tok-keyword" },
    { tag: tags.atom, class: "tok-atom" },
    { tag: tags.bool, class: "tok-bool" },
    { tag: tags.url, class: "tok-url" },
    { tag: tags.labelName, class: "tok-labelName" },
    { tag: tags.inserted, class: "tok-inserted" },
    { tag: tags.deleted, class: "tok-deleted" },
    { tag: tags.literal, class: "tok-literal" },
    { tag: tags.string, class: "tok-string" },
    { tag: tags.number, class: "tok-number" },
    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
    { tag: tags.variableName, class: "tok-variableName" },
    { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
    { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
    { tag: tags.special(tags.variableName), class: "tok-variableName2" },
    { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
    { tag: tags.typeName, class: "tok-typeName" },
    { tag: tags.namespace, class: "tok-namespace" },
    { tag: tags.className, class: "tok-className" },
    { tag: tags.macroName, class: "tok-macroName" },
    { tag: tags.propertyName, class: "tok-propertyName" },
    { tag: tags.operator, class: "tok-operator" },
    { tag: tags.comment, class: "tok-comment" },
    { tag: tags.meta, class: "tok-meta" },
    { tag: tags.invalid, class: "tok-invalid" },
    { tag: tags.punctuation, class: "tok-punctuation" }
  ]);

  // node_modules/@codemirror/language/dist/index.js
  var _a;
  var languageDataProp = /* @__PURE__ */ new NodeProp();
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? (values) => values.concat(baseData) : void 0
    });
  }
  __name(defineLanguageFacet, "defineLanguageFacet");
  var sublanguageProp = /* @__PURE__ */ new NodeProp();
  var Language = class {
    static {
      __name(this, "Language");
    }
    /**
    Construct a language object. If you need to invoke this
    directly, first define a data facet with
    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
    to the language's outer syntax node.
    */
    constructor(data, parser, extraExtensions = [], name2 = "") {
      this.data = data;
      this.name = name2;
      if (!EditorState.prototype.hasOwnProperty("tree"))
        Object.defineProperty(EditorState.prototype, "tree", { get() {
          return syntaxTree(this);
        } });
      this.parser = parser;
      this.extension = [
        language.of(this),
        EditorState.languageData.of((state, pos, side) => {
          let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);
          if (!data2)
            return [];
          let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);
          if (sub) {
            let innerNode = top2.resolve(pos - top2.from, side);
            for (let sublang of sub)
              if (sublang.test(innerNode, state)) {
                let data3 = state.facet(sublang.facet);
                return sublang.type == "replace" ? data3 : data3.concat(base2);
              }
          }
          return base2;
        })
      ].concat(extraExtensions);
    }
    /**
    Query whether this language is active at the given position.
    */
    isActiveAt(state, pos, side = -1) {
      return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
    findRegions(state) {
      let lang = state.facet(language);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
        return [{ from: 0, to: state.doc.length }];
      if (!lang || !lang.allowsNesting)
        return [];
      let result = [];
      let explore = /* @__PURE__ */ __name((tree, from) => {
        if (tree.prop(languageDataProp) == this.data) {
          result.push({ from, to: from + tree.length });
          return;
        }
        let mount = tree.prop(NodeProp.mounted);
        if (mount) {
          if (mount.tree.prop(languageDataProp) == this.data) {
            if (mount.overlay)
              for (let r2 of mount.overlay)
                result.push({ from: r2.from + from, to: r2.to + from });
            else
              result.push({ from, to: from + tree.length });
            return;
          } else if (mount.overlay) {
            let size = result.length;
            explore(mount.tree, mount.overlay[0].from + from);
            if (result.length > size)
              return;
          }
        }
        for (let i2 = 0; i2 < tree.children.length; i2++) {
          let ch = tree.children[i2];
          if (ch instanceof Tree)
            explore(ch, tree.positions[i2] + from);
        }
      }, "explore");
      explore(syntaxTree(state), 0);
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
    get allowsNesting() {
      return true;
    }
  };
  Language.setState = /* @__PURE__ */ StateEffect.define();
  function topNodeAt(state, pos, side) {
    let topLang = state.facet(language), tree = syntaxTree(state).topNode;
    if (!topLang || topLang.allowsNesting) {
      for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
        if (node.type.isTop)
          tree = node;
    }
    return tree;
  }
  __name(topNodeAt, "topNodeAt");
  function syntaxTree(state) {
    let field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  __name(syntaxTree, "syntaxTree");
  var DocInput = class {
    static {
      __name(this, "DocInput");
    }
    /**
    Create an input object for the given document.
    */
    constructor(doc2) {
      this.doc = doc2;
      this.cursorPos = 0;
      this.string = "";
      this.cursor = doc2.iter();
    }
    get length() {
      return this.doc.length;
    }
    syncTo(pos) {
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
    chunk(pos) {
      this.syncTo(pos);
      return this.string;
    }
    get lineChunks() {
      return true;
    }
    read(from, to) {
      let stringStart = this.cursorPos - this.string.length;
      if (from < stringStart || to >= this.cursorPos)
        return this.doc.sliceString(from, to);
      else
        return this.string.slice(from - stringStart, to - stringStart);
    }
  };
  var currentContext = null;
  var ParseContext = class _ParseContext {
    static {
      __name(this, "ParseContext");
    }
    constructor(parser, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
      this.parser = parser;
      this.state = state;
      this.fragments = fragments;
      this.tree = tree;
      this.treeLen = treeLen;
      this.viewport = viewport;
      this.skipped = skipped;
      this.scheduleOn = scheduleOn;
      this.parse = null;
      this.tempSkipped = [];
    }
    /**
    @internal
    */
    static create(parser, state, viewport) {
      return new _ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
    }
    startParse() {
      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
    }
    /**
    @internal
    */
    work(until, upto) {
      if (upto != null && upto >= this.state.doc.length)
        upto = void 0;
      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
        this.takeTree();
        return true;
      }
      return this.withContext(() => {
        var _a2;
        if (typeof until == "number") {
          let endTime = Date.now() + until;
          until = /* @__PURE__ */ __name(() => Date.now() > endTime, "until");
        }
        if (!this.parse)
          this.parse = this.startParse();
        if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
          this.parse.stopAt(upto);
        for (; ; ) {
          let done = this.parse.advance();
          if (done) {
            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
            this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
            this.tree = done;
            this.parse = null;
            if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
              this.parse = this.startParse();
            else
              return true;
          }
          if (until())
            return false;
        }
      });
    }
    /**
    @internal
    */
    takeTree() {
      let pos, tree;
      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
          this.parse.stopAt(pos);
        this.withContext(() => {
          while (!(tree = this.parse.advance())) {
          }
        });
        this.treeLen = pos;
        this.tree = tree;
        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
        this.parse = null;
      }
    }
    withContext(f2) {
      let prev = currentContext;
      currentContext = this;
      try {
        return f2();
      } finally {
        currentContext = prev;
      }
    }
    withoutTempSkipped(fragments) {
      for (let r2; r2 = this.tempSkipped.pop(); )
        fragments = cutFragments(fragments, r2.from, r2.to);
      return fragments;
    }
    /**
    @internal
    */
    changes(changes, newState) {
      let { fragments, tree, treeLen, viewport, skipped } = this;
      this.takeTree();
      if (!changes.empty) {
        let ranges = [];
        changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
        fragments = TreeFragment.applyChanges(fragments, ranges);
        tree = Tree.empty;
        treeLen = 0;
        viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
        if (this.skipped.length) {
          skipped = [];
          for (let r2 of this.skipped) {
            let from = changes.mapPos(r2.from, 1), to = changes.mapPos(r2.to, -1);
            if (from < to)
              skipped.push({ from, to });
          }
        }
      }
      return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
    updateViewport(viewport) {
      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
        return false;
      this.viewport = viewport;
      let startLen = this.skipped.length;
      for (let i2 = 0; i2 < this.skipped.length; i2++) {
        let { from, to } = this.skipped[i2];
        if (from < viewport.to && to > viewport.from) {
          this.fragments = cutFragments(this.fragments, from, to);
          this.skipped.splice(i2--, 1);
        }
      }
      if (this.skipped.length >= startLen)
        return false;
      this.reset();
      return true;
    }
    /**
    @internal
    */
    reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
    skipUntilInView(from, to) {
      this.skipped.push({ from, to });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
    static getSkippingParser(until) {
      return new class extends Parser {
        createParse(input, fragments, ranges) {
          let from = ranges[0].from, to = ranges[ranges.length - 1].to;
          let parser = {
            parsedPos: from,
            advance() {
              let cx = currentContext;
              if (cx) {
                for (let r2 of ranges)
                  cx.tempSkipped.push(r2);
                if (until)
                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
              }
              this.parsedPos = to;
              return new Tree(NodeType.none, [], [], to - from);
            },
            stoppedAt: null,
            stopAt() {
            }
          };
          return parser;
        }
      }();
    }
    /**
    @internal
    */
    isDone(upto) {
      upto = Math.min(upto, this.state.doc.length);
      let frags = this.fragments;
      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
    }
    /**
    Get the context for the current parse, or `null` if no editor
    parse is in progress.
    */
    static get() {
      return currentContext;
    }
  };
  function cutFragments(fragments, from, to) {
    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
  }
  __name(cutFragments, "cutFragments");
  var LanguageState = class _LanguageState {
    static {
      __name(this, "LanguageState");
    }
    constructor(context) {
      this.context = context;
      this.tree = context.tree;
    }
    apply(tr) {
      if (!tr.docChanged && this.tree == this.context.tree)
        return this;
      let newCx = this.context.changes(tr.changes, tr.state);
      let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
      if (!newCx.work(20, upto))
        newCx.takeTree();
      return new _LanguageState(newCx);
    }
    static init(state) {
      let vpTo = Math.min(3e3, state.doc.length);
      let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
      if (!parseState.work(20, vpTo))
        parseState.takeTree();
      return new _LanguageState(parseState);
    }
  };
  Language.state = /* @__PURE__ */ StateField.define({
    create: LanguageState.init,
    update(value, tr) {
      for (let e2 of tr.effects)
        if (e2.is(Language.setState))
          return e2.value;
      if (tr.startState.facet(language) != tr.state.facet(language))
        return LanguageState.init(tr.state);
      return value.apply(tr);
    }
  });
  var requestIdle = /* @__PURE__ */ __name((callback) => {
    let timeout = setTimeout(
      () => callback(),
      500
      /* Work.MaxPause */
    );
    return () => clearTimeout(timeout);
  }, "requestIdle");
  if (typeof requestIdleCallback != "undefined")
    requestIdle = /* @__PURE__ */ __name((callback) => {
      let idle = -1, timeout = setTimeout(
        () => {
          idle = requestIdleCallback(callback, {
            timeout: 500 - 100
            /* Work.MinPause */
          });
        },
        100
        /* Work.MinPause */
      );
      return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
    }, "requestIdle");
  var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
  var parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
    static {
      __name(this, "ParseWorker");
    }
    constructor(view2) {
      this.view = view2;
      this.working = null;
      this.workScheduled = 0;
      this.chunkEnd = -1;
      this.chunkBudget = -1;
      this.work = this.work.bind(this);
      this.scheduleWork();
    }
    update(update) {
      let cx = this.view.state.field(Language.state).context;
      if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
        this.scheduleWork();
      if (update.docChanged || update.selectionSet) {
        if (this.view.hasFocus)
          this.chunkBudget += 50;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
    scheduleWork() {
      if (this.working)
        return;
      let { state } = this.view, field = state.field(Language.state);
      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
        this.working = requestIdle(this.work);
    }
    work(deadline) {
      this.working = null;
      let now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        this.chunkEnd = now + 3e4;
        this.chunkBudget = 3e3;
      }
      if (this.chunkBudget <= 0)
        return;
      let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
      if (field.tree == field.context.tree && field.context.isDone(
        vpTo + 1e5
        /* Work.MaxParseAhead */
      ))
        return;
      let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
      let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
      let done = field.context.work(() => {
        return isInputPending && isInputPending() || Date.now() > endTime;
      }, vpTo + (viewportFirst ? 0 : 1e5));
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0) {
        field.context.takeTree();
        this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
      }
      if (this.chunkBudget > 0 && !(done && !viewportFirst))
        this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
    checkAsyncSchedule(cx) {
      if (cx.scheduleOn) {
        this.workScheduled++;
        cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
        cx.scheduleOn = null;
      }
    }
    destroy() {
      if (this.working)
        this.working();
    }
    isWorking() {
      return !!(this.working || this.workScheduled > 0);
    }
  }, {
    eventHandlers: { focus() {
      this.scheduleWork();
    } }
  });
  var language = /* @__PURE__ */ Facet.define({
    combine(languages) {
      return languages.length ? languages[0] : null;
    },
    enables: /* @__PURE__ */ __name((language2) => [
      Language.state,
      parseWorker,
      EditorView.contentAttributes.compute([language2], (state) => {
        let lang = state.facet(language2);
        return lang && lang.name ? { "data-language": lang.name } : {};
      })
    ], "enables")
  });
  var indentService = /* @__PURE__ */ Facet.define();
  var indentUnit = /* @__PURE__ */ Facet.define({
    combine: /* @__PURE__ */ __name((values) => {
      if (!values.length)
        return "  ";
      let unit = values[0];
      if (!unit || /\S/.test(unit) || Array.from(unit).some((e2) => e2 != unit[0]))
        throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
      return unit;
    }, "combine")
  });
  function getIndentUnit(state) {
    let unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  __name(getIndentUnit, "getIndentUnit");
  function indentString(state, cols) {
    let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
    if (ch == "	") {
      while (cols >= ts) {
        result += "	";
        cols -= ts;
      }
      ch = " ";
    }
    for (let i2 = 0; i2 < cols; i2++)
      result += ch;
    return result;
  }
  __name(indentString, "indentString");
  function getIndentation(context, pos) {
    if (context instanceof EditorState)
      context = new IndentContext(context);
    for (let service of context.state.facet(indentService)) {
      let result = service(context, pos);
      if (result !== void 0)
        return result;
    }
    let tree = syntaxTree(context.state);
    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  __name(getIndentation, "getIndentation");
  var IndentContext = class {
    static {
      __name(this, "IndentContext");
    }
    /**
    Create an indent context.
    */
    constructor(state, options = {}) {
      this.state = state;
      this.options = options;
      this.unit = getIndentUnit(state);
    }
    /**
    Get a description of the line at the given position, taking
    [simulated line
    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    into account. If there is such a break at `pos`, the `bias`
    argument determines whether the part of the line line before or
    after the break is used.
    */
    lineAt(pos, bias = 1) {
      let line = this.state.doc.lineAt(pos);
      let { simulateBreak, simulateDoubleBreak } = this.options;
      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
        if (simulateDoubleBreak && simulateBreak == pos)
          return { text: "", from: pos };
        else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
          return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
        else
          return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
      }
      return line;
    }
    /**
    Get the text directly after `pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    textAfterPos(pos, bias = 1) {
      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
        return "";
      let { text, from } = this.lineAt(pos, bias);
      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
    }
    /**
    Find the column for the given position.
    */
    column(pos, bias = 1) {
      let { text, from } = this.lineAt(pos, bias);
      let result = this.countColumn(text, pos - from);
      let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
      if (override > -1)
        result += override - this.countColumn(text, text.search(/\S|$/));
      return result;
    }
    /**
    Find the column position (taking tabs into account) of the given
    position in the given string.
    */
    countColumn(line, pos = line.length) {
      return countColumn(line, this.state.tabSize, pos);
    }
    /**
    Find the indentation column of the line at the given point.
    */
    lineIndent(pos, bias = 1) {
      let { text, from } = this.lineAt(pos, bias);
      let override = this.options.overrideIndentation;
      if (override) {
        let overriden = override(from);
        if (overriden > -1)
          return overriden;
      }
      return this.countColumn(text, text.search(/\S|$/));
    }
    /**
    Returns the [simulated line
    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    for this context, if any.
    */
    get simulatedBreak() {
      return this.options.simulateBreak || null;
    }
  };
  var indentNodeProp = /* @__PURE__ */ new NodeProp();
  function syntaxIndentation(cx, ast, pos) {
    let stack = ast.resolveStack(pos);
    let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
    if (inner != stack.node) {
      let add2 = [];
      for (let cur2 = inner; cur2 && !(cur2.from == stack.node.from && cur2.type == stack.node.type); cur2 = cur2.parent)
        add2.push(cur2);
      for (let i2 = add2.length - 1; i2 >= 0; i2--)
        stack = { node: add2[i2], next: stack };
    }
    return indentFor(stack, cx, pos);
  }
  __name(syntaxIndentation, "syntaxIndentation");
  function indentFor(stack, cx, pos) {
    for (let cur2 = stack; cur2; cur2 = cur2.next) {
      let strategy = indentStrategy(cur2.node);
      if (strategy)
        return strategy(TreeIndentContext.create(cx, pos, cur2));
    }
    return 0;
  }
  __name(indentFor, "indentFor");
  function ignoreClosed(cx) {
    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  __name(ignoreClosed, "ignoreClosed");
  function indentStrategy(tree) {
    let strategy = tree.type.prop(indentNodeProp);
    if (strategy)
      return strategy;
    let first = tree.firstChild, close;
    if (first && (close = first.type.prop(NodeProp.closedBy))) {
      let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
      return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last.from : void 0);
    }
    return tree.parent == null ? topIndent : null;
  }
  __name(indentStrategy, "indentStrategy");
  function topIndent() {
    return 0;
  }
  __name(topIndent, "topIndent");
  var TreeIndentContext = class _TreeIndentContext extends IndentContext {
    static {
      __name(this, "TreeIndentContext");
    }
    constructor(base2, pos, context) {
      super(base2.state, base2.options);
      this.base = base2;
      this.pos = pos;
      this.context = context;
    }
    /**
    The syntax tree node to which the indentation strategy
    applies.
    */
    get node() {
      return this.context.node;
    }
    /**
    @internal
    */
    static create(base2, pos, context) {
      return new _TreeIndentContext(base2, pos, context);
    }
    /**
    Get the text directly after `this.pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    get textAfter() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
    get baseIndent() {
      return this.baseIndentFor(this.node);
    }
    /**
    Get the indentation for the reference line of the given node
    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
    */
    baseIndentFor(node) {
      let line = this.state.doc.lineAt(node.from);
      for (; ; ) {
        let atBreak = node.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from)
          atBreak = atBreak.parent;
        if (isParent(atBreak, node))
          break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line.from);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
    continue() {
      return indentFor(this.context.next, this.base, this.pos);
    }
  };
  function isParent(parent, of) {
    for (let cur2 = of; cur2; cur2 = cur2.parent)
      if (parent == cur2)
        return true;
    return false;
  }
  __name(isParent, "isParent");
  function bracketedAligned(context) {
    let tree = context.node;
    let openToken = tree.childAfter(tree.from), last = tree.lastChild;
    if (!openToken)
      return null;
    let sim = context.options.simulateBreak;
    let openLine = context.state.doc.lineAt(openToken.from);
    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (let pos = openToken.to; ; ) {
      let next = tree.childAfter(pos);
      if (!next || next == last)
        return null;
      if (!next.type.isSkipped) {
        if (next.from >= lineEnd)
          return null;
        let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
        return { from: openToken.from, to: openToken.to + space };
      }
      pos = next.to;
    }
  }
  __name(bracketedAligned, "bracketedAligned");
  function delimitedStrategy(context, align, units, closing2, closedAt) {
    let after = context.textAfter, space = after.match(/^\s*/)[0].length;
    let closed = closing2 && after.slice(space, space + closing2.length) == closing2 || closedAt == context.pos + space;
    let aligned = align ? bracketedAligned(context) : null;
    if (aligned)
      return closed ? context.column(aligned.from) : context.column(aligned.to);
    return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  __name(delimitedStrategy, "delimitedStrategy");
  var DontIndentBeyond = 200;
  function indentOnInput() {
    return EditorState.transactionFilter.of((tr) => {
      if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
        return tr;
      let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
      if (!rules.length)
        return tr;
      let doc2 = tr.newDoc, { head } = tr.newSelection.main, line = doc2.lineAt(head);
      if (head > line.from + DontIndentBeyond)
        return tr;
      let lineStart = doc2.sliceString(line.from, head);
      if (!rules.some((r2) => r2.test(lineStart)))
        return tr;
      let { state } = tr, last = -1, changes = [];
      for (let { head: head2 } of state.selection.ranges) {
        let line2 = state.doc.lineAt(head2);
        if (line2.from == last)
          continue;
        last = line2.from;
        let indent = getIndentation(state, line2.from);
        if (indent == null)
          continue;
        let cur2 = /^\s*/.exec(line2.text)[0];
        let norm = indentString(state, indent);
        if (cur2 != norm)
          changes.push({ from: line2.from, to: line2.from + cur2.length, insert: norm });
      }
      return changes.length ? [tr, { changes, sequential: true }] : tr;
    });
  }
  __name(indentOnInput, "indentOnInput");
  var foldService = /* @__PURE__ */ Facet.define();
  var foldNodeProp = /* @__PURE__ */ new NodeProp();
  function syntaxFolding(state, start, end) {
    let tree = syntaxTree(state);
    if (tree.length < end)
      return null;
    let stack = tree.resolveStack(end, 1);
    let found = null;
    for (let iter = stack; iter; iter = iter.next) {
      let cur2 = iter.node;
      if (cur2.to <= end || cur2.from > end)
        continue;
      if (found && cur2.from < start)
        break;
      let prop = cur2.type.prop(foldNodeProp);
      if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
        let value = prop(cur2, state);
        if (value && value.from <= end && value.from >= start && value.to > end)
          found = value;
      }
    }
    return found;
  }
  __name(syntaxFolding, "syntaxFolding");
  function isUnfinished(node) {
    let ch = node.lastChild;
    return ch && ch.to == node.to && ch.type.isError;
  }
  __name(isUnfinished, "isUnfinished");
  function foldable(state, lineStart, lineEnd) {
    for (let service of state.facet(foldService)) {
      let result = service(state, lineStart, lineEnd);
      if (result)
        return result;
    }
    return syntaxFolding(state, lineStart, lineEnd);
  }
  __name(foldable, "foldable");
  function mapRange(range, mapping) {
    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
    return from >= to ? void 0 : { from, to };
  }
  __name(mapRange, "mapRange");
  var foldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
  var unfoldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
  function selectedLines(view2) {
    let lines = [];
    for (let { head } of view2.state.selection.ranges) {
      if (lines.some((l2) => l2.from <= head && l2.to >= head))
        continue;
      lines.push(view2.lineBlockAt(head));
    }
    return lines;
  }
  __name(selectedLines, "selectedLines");
  var foldState = /* @__PURE__ */ StateField.define({
    create() {
      return Decoration.none;
    },
    update(folded, tr) {
      folded = folded.map(tr.changes);
      for (let e2 of tr.effects) {
        if (e2.is(foldEffect) && !foldExists(folded, e2.value.from, e2.value.to)) {
          let { preparePlaceholder } = tr.state.facet(foldConfig);
          let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e2.value)) });
          folded = folded.update({ add: [widget.range(e2.value.from, e2.value.to)] });
        } else if (e2.is(unfoldEffect)) {
          folded = folded.update({
            filter: /* @__PURE__ */ __name((from, to) => e2.value.from != from || e2.value.to != to, "filter"),
            filterFrom: e2.value.from,
            filterTo: e2.value.to
          });
        }
      }
      if (tr.selection) {
        let onSelection = false, { head } = tr.selection.main;
        folded.between(head, head, (a2, b2) => {
          if (a2 < head && b2 > head)
            onSelection = true;
        });
        if (onSelection)
          folded = folded.update({
            filterFrom: head,
            filterTo: head,
            filter: /* @__PURE__ */ __name((a2, b2) => b2 <= head || a2 >= head, "filter")
          });
      }
      return folded;
    },
    provide: /* @__PURE__ */ __name((f2) => EditorView.decorations.from(f2), "provide"),
    toJSON(folded, state) {
      let ranges = [];
      folded.between(0, state.doc.length, (from, to) => {
        ranges.push(from, to);
      });
      return ranges;
    },
    fromJSON(value) {
      if (!Array.isArray(value) || value.length % 2)
        throw new RangeError("Invalid JSON for fold state");
      let ranges = [];
      for (let i2 = 0; i2 < value.length; ) {
        let from = value[i2++], to = value[i2++];
        if (typeof from != "number" || typeof to != "number")
          throw new RangeError("Invalid JSON for fold state");
        ranges.push(foldWidget.range(from, to));
      }
      return Decoration.set(ranges, true);
    }
  });
  function findFold(state, from, to) {
    var _a2;
    let found = null;
    (_a2 = state.field(foldState, false)) === null || _a2 === void 0 ? void 0 : _a2.between(from, to, (from2, to2) => {
      if (!found || found.from > from2)
        found = { from: from2, to: to2 };
    });
    return found;
  }
  __name(findFold, "findFold");
  function foldExists(folded, from, to) {
    let found = false;
    folded.between(from, from, (a2, b2) => {
      if (a2 == from && b2 == to)
        found = true;
    });
    return found;
  }
  __name(foldExists, "foldExists");
  function maybeEnable(state, other) {
    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  __name(maybeEnable, "maybeEnable");
  var foldCode = /* @__PURE__ */ __name((view2) => {
    for (let line of selectedLines(view2)) {
      let range = foldable(view2.state, line.from, line.to);
      if (range) {
        view2.dispatch({ effects: maybeEnable(view2.state, [foldEffect.of(range), announceFold(view2, range)]) });
        return true;
      }
    }
    return false;
  }, "foldCode");
  var unfoldCode = /* @__PURE__ */ __name((view2) => {
    if (!view2.state.field(foldState, false))
      return false;
    let effects = [];
    for (let line of selectedLines(view2)) {
      let folded = findFold(view2.state, line.from, line.to);
      if (folded)
        effects.push(unfoldEffect.of(folded), announceFold(view2, folded, false));
    }
    if (effects.length)
      view2.dispatch({ effects });
    return effects.length > 0;
  }, "unfoldCode");
  function announceFold(view2, range, fold = true) {
    let lineFrom = view2.state.doc.lineAt(range.from).number, lineTo = view2.state.doc.lineAt(range.to).number;
    return EditorView.announce.of(`${view2.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view2.state.phrase("to")} ${lineTo}.`);
  }
  __name(announceFold, "announceFold");
  var foldAll = /* @__PURE__ */ __name((view2) => {
    let { state } = view2, effects = [];
    for (let pos = 0; pos < state.doc.length; ) {
      let line = view2.lineBlockAt(pos), range = foldable(state, line.from, line.to);
      if (range)
        effects.push(foldEffect.of(range));
      pos = (range ? view2.lineBlockAt(range.to) : line).to + 1;
    }
    if (effects.length)
      view2.dispatch({ effects: maybeEnable(view2.state, effects) });
    return !!effects.length;
  }, "foldAll");
  var unfoldAll = /* @__PURE__ */ __name((view2) => {
    let field = view2.state.field(foldState, false);
    if (!field || !field.size)
      return false;
    let effects = [];
    field.between(0, view2.state.doc.length, (from, to) => {
      effects.push(unfoldEffect.of({ from, to }));
    });
    view2.dispatch({ effects });
    return true;
  }, "unfoldAll");
  var foldKeymap = [
    { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
    { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
    { key: "Ctrl-Alt-[", run: foldAll },
    { key: "Ctrl-Alt-]", run: unfoldAll }
  ];
  var defaultConfig = {
    placeholderDOM: null,
    preparePlaceholder: null,
    placeholderText: "\u2026"
  };
  var foldConfig = /* @__PURE__ */ Facet.define({
    combine(values) {
      return combineConfig(values, defaultConfig);
    }
  });
  function codeFolding(config15) {
    let result = [foldState, baseTheme$12];
    if (config15)
      result.push(foldConfig.of(config15));
    return result;
  }
  __name(codeFolding, "codeFolding");
  function widgetToDOM(view2, prepared) {
    let { state } = view2, conf = state.facet(foldConfig);
    let onclick = /* @__PURE__ */ __name((event) => {
      let line = view2.lineBlockAt(view2.posAtDOM(event.target));
      let folded = findFold(view2.state, line.from, line.to);
      if (folded)
        view2.dispatch({ effects: unfoldEffect.of(folded) });
      event.preventDefault();
    }, "onclick");
    if (conf.placeholderDOM)
      return conf.placeholderDOM(view2, onclick, prepared);
    let element = document.createElement("span");
    element.textContent = conf.placeholderText;
    element.setAttribute("aria-label", state.phrase("folded code"));
    element.title = state.phrase("unfold");
    element.className = "cm-foldPlaceholder";
    element.onclick = onclick;
    return element;
  }
  __name(widgetToDOM, "widgetToDOM");
  var foldWidget = /* @__PURE__ */ Decoration.replace({ widget: /* @__PURE__ */ new class extends WidgetType {
    toDOM(view2) {
      return widgetToDOM(view2, null);
    }
  }() });
  var PreparedFoldWidget = class extends WidgetType {
    static {
      __name(this, "PreparedFoldWidget");
    }
    constructor(value) {
      super();
      this.value = value;
    }
    eq(other) {
      return this.value == other.value;
    }
    toDOM(view2) {
      return widgetToDOM(view2, this.value);
    }
  };
  var foldGutterDefaults = {
    openText: "\u2304",
    closedText: "\u203A",
    markerDOM: null,
    domEventHandlers: {},
    foldingChanged: /* @__PURE__ */ __name(() => false, "foldingChanged")
  };
  var FoldMarker = class extends GutterMarker {
    static {
      __name(this, "FoldMarker");
    }
    constructor(config15, open) {
      super();
      this.config = config15;
      this.open = open;
    }
    eq(other) {
      return this.config == other.config && this.open == other.open;
    }
    toDOM(view2) {
      if (this.config.markerDOM)
        return this.config.markerDOM(this.open);
      let span = document.createElement("span");
      span.textContent = this.open ? this.config.openText : this.config.closedText;
      span.title = view2.state.phrase(this.open ? "Fold line" : "Unfold line");
      return span;
    }
  };
  function foldGutter(config15 = {}) {
    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config15);
    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
    let markers = ViewPlugin.fromClass(class {
      constructor(view2) {
        this.from = view2.viewport.from;
        this.markers = this.buildMarkers(view2);
      }
      update(update) {
        if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update))
          this.markers = this.buildMarkers(update.view);
      }
      buildMarkers(view2) {
        let builder = new RangeSetBuilder();
        for (let line of view2.viewportLineBlocks) {
          let mark = findFold(view2.state, line.from, line.to) ? canUnfold : foldable(view2.state, line.from, line.to) ? canFold : null;
          if (mark)
            builder.add(line.from, line.from, mark);
        }
        return builder.finish();
      }
    });
    let { domEventHandlers } = fullConfig;
    return [
      markers,
      gutter({
        class: "cm-foldGutter",
        markers(view2) {
          var _a2;
          return ((_a2 = view2.plugin(markers)) === null || _a2 === void 0 ? void 0 : _a2.markers) || RangeSet.empty;
        },
        initialSpacer() {
          return new FoldMarker(fullConfig, false);
        },
        domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: /* @__PURE__ */ __name((view2, line, event) => {
          if (domEventHandlers.click && domEventHandlers.click(view2, line, event))
            return true;
          let folded = findFold(view2.state, line.from, line.to);
          if (folded) {
            view2.dispatch({ effects: unfoldEffect.of(folded) });
            return true;
          }
          let range = foldable(view2.state, line.from, line.to);
          if (range) {
            view2.dispatch({ effects: foldEffect.of(range) });
            return true;
          }
          return false;
        }, "click") })
      }),
      codeFolding()
    ];
  }
  __name(foldGutter, "foldGutter");
  var baseTheme$12 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-foldPlaceholder": {
      backgroundColor: "#eee",
      border: "1px solid #ddd",
      color: "#888",
      borderRadius: ".2em",
      margin: "0 1px",
      padding: "0 1px",
      cursor: "pointer"
    },
    ".cm-foldGutter span": {
      padding: "0 1px",
      cursor: "pointer"
    }
  });
  var HighlightStyle = class _HighlightStyle {
    static {
      __name(this, "HighlightStyle");
    }
    constructor(specs, options) {
      this.specs = specs;
      let modSpec;
      function def(spec) {
        let cls = StyleModule.newName();
        (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
        return cls;
      }
      __name(def, "def");
      const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
      const scopeOpt = options.scope;
      this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
      this.style = tagHighlighter(specs.map((style) => ({
        tag: style.tag,
        class: style.class || def(Object.assign({}, style, { tag: null }))
      })), {
        all
      }).style;
      this.module = modSpec ? new StyleModule(modSpec) : null;
      this.themeType = options.themeType;
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The specs must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighter
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
    static define(specs, options) {
      return new _HighlightStyle(specs, options || {});
    }
  };
  var highlighterFacet = /* @__PURE__ */ Facet.define();
  var fallbackHighlighter = /* @__PURE__ */ Facet.define({
    combine(values) {
      return values.length ? [values[0]] : null;
    }
  });
  function getHighlighters(state) {
    let main = state.facet(highlighterFacet);
    return main.length ? main : state.facet(fallbackHighlighter);
  }
  __name(getHighlighters, "getHighlighters");
  function syntaxHighlighting(highlighter, options) {
    let ext = [treeHighlighter], themeType;
    if (highlighter instanceof HighlightStyle) {
      if (highlighter.module)
        ext.push(EditorView.styleModule.of(highlighter.module));
      themeType = highlighter.themeType;
    }
    if (options === null || options === void 0 ? void 0 : options.fallback)
      ext.push(fallbackHighlighter.of(highlighter));
    else if (themeType)
      ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
        return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
      }));
    else
      ext.push(highlighterFacet.of(highlighter));
    return ext;
  }
  __name(syntaxHighlighting, "syntaxHighlighting");
  var TreeHighlighter = class {
    static {
      __name(this, "TreeHighlighter");
    }
    constructor(view2) {
      this.markCache = /* @__PURE__ */ Object.create(null);
      this.tree = syntaxTree(view2.state);
      this.decorations = this.buildDeco(view2, getHighlighters(view2.state));
      this.decoratedTo = view2.viewport.to;
    }
    update(update) {
      let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
      let styleChange = highlighters != getHighlighters(update.startState);
      let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
      if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
        this.decorations = this.decorations.map(update.changes);
        this.decoratedTo = decoratedToMapped;
      } else if (tree != this.tree || update.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(update.view, highlighters);
        this.decoratedTo = viewport.to;
      }
    }
    buildDeco(view2, highlighters) {
      if (!highlighters || !this.tree.length)
        return Decoration.none;
      let builder = new RangeSetBuilder();
      for (let { from, to } of view2.visibleRanges) {
        highlightTree(this.tree, highlighters, (from2, to2, style) => {
          builder.add(from2, to2, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
        }, from, to);
      }
      return builder.finish();
    }
  };
  var treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
    decorations: /* @__PURE__ */ __name((v2) => v2.decorations, "decorations")
  }));
  var defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
    {
      tag: tags.meta,
      color: "#404740"
    },
    {
      tag: tags.link,
      textDecoration: "underline"
    },
    {
      tag: tags.heading,
      textDecoration: "underline",
      fontWeight: "bold"
    },
    {
      tag: tags.emphasis,
      fontStyle: "italic"
    },
    {
      tag: tags.strong,
      fontWeight: "bold"
    },
    {
      tag: tags.strikethrough,
      textDecoration: "line-through"
    },
    {
      tag: tags.keyword,
      color: "#708"
    },
    {
      tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
      color: "#219"
    },
    {
      tag: [tags.literal, tags.inserted],
      color: "#164"
    },
    {
      tag: [tags.string, tags.deleted],
      color: "#a11"
    },
    {
      tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
      color: "#e40"
    },
    {
      tag: /* @__PURE__ */ tags.definition(tags.variableName),
      color: "#00f"
    },
    {
      tag: /* @__PURE__ */ tags.local(tags.variableName),
      color: "#30a"
    },
    {
      tag: [tags.typeName, tags.namespace],
      color: "#085"
    },
    {
      tag: tags.className,
      color: "#167"
    },
    {
      tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
      color: "#256"
    },
    {
      tag: /* @__PURE__ */ tags.definition(tags.propertyName),
      color: "#00c"
    },
    {
      tag: tags.comment,
      color: "#940"
    },
    {
      tag: tags.invalid,
      color: "#f00"
    }
  ]);
  var baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
    "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
    "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  var DefaultScanDist = 1e4;
  var DefaultBrackets = "()[]{}";
  var bracketMatchingConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        afterCursor: true,
        brackets: DefaultBrackets,
        maxScanDistance: DefaultScanDist,
        renderMatch: defaultRenderMatch
      });
    }
  });
  var matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" });
  var nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
    let decorations2 = [];
    let mark = match.matched ? matchingMark : nonmatchingMark;
    decorations2.push(mark.range(match.start.from, match.start.to));
    if (match.end)
      decorations2.push(mark.range(match.end.from, match.end.to));
    return decorations2;
  }
  __name(defaultRenderMatch, "defaultRenderMatch");
  var bracketMatchingState = /* @__PURE__ */ StateField.define({
    create() {
      return Decoration.none;
    },
    update(deco, tr) {
      if (!tr.docChanged && !tr.selection)
        return deco;
      let decorations2 = [];
      let config15 = tr.state.facet(bracketMatchingConfig);
      for (let range of tr.state.selection.ranges) {
        if (!range.empty)
          continue;
        let match = matchBrackets(tr.state, range.head, -1, config15) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config15) || config15.afterCursor && (matchBrackets(tr.state, range.head, 1, config15) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config15));
        if (match)
          decorations2 = decorations2.concat(config15.renderMatch(match, tr.state));
      }
      return Decoration.set(decorations2, true);
    },
    provide: /* @__PURE__ */ __name((f2) => EditorView.decorations.from(f2), "provide")
  });
  var bracketMatchingUnique = [
    bracketMatchingState,
    baseTheme2
  ];
  function bracketMatching(config15 = {}) {
    return [bracketMatchingConfig.of(config15), bracketMatchingUnique];
  }
  __name(bracketMatching, "bracketMatching");
  var bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
  function matchingNodes(node, dir, brackets) {
    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
    if (byProp)
      return byProp;
    if (node.name.length == 1) {
      let index = brackets.indexOf(node.name);
      if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
        return [brackets[index + dir]];
    }
    return null;
  }
  __name(matchingNodes, "matchingNodes");
  function findHandle(node) {
    let hasHandle = node.type.prop(bracketMatchingHandle);
    return hasHandle ? hasHandle(node.node) : node;
  }
  __name(findHandle, "findHandle");
  function matchBrackets(state, pos, dir, config15 = {}) {
    let maxScanDistance = config15.maxScanDistance || DefaultScanDist, brackets = config15.brackets || DefaultBrackets;
    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
    for (let cur2 = node; cur2; cur2 = cur2.parent) {
      let matches = matchingNodes(cur2.type, dir, brackets);
      if (matches && cur2.from < cur2.to) {
        let handle = findHandle(cur2);
        if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
          return matchMarkedBrackets(state, pos, dir, cur2, handle, matches, brackets);
      }
    }
    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  __name(matchBrackets, "matchBrackets");
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
      do {
        if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
          if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
            let endHandle = findHandle(cursor);
            return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
          } else if (matchingNodes(cursor.type, dir, brackets)) {
            depth++;
          } else if (matchingNodes(cursor.type, -dir, brackets)) {
            if (depth == 0) {
              let endHandle = findHandle(cursor);
              return {
                start: firstToken,
                end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
                matched: false
              };
            }
            depth--;
          }
        }
      } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
    return { start: firstToken, matched: false };
  }
  __name(matchMarkedBrackets, "matchMarkedBrackets");
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
    let bracket2 = brackets.indexOf(startCh);
    if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
      return null;
    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
    for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
      let text = iter.value;
      if (dir < 0)
        distance += text.length;
      let basePos = pos + distance * dir;
      for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
        let found = brackets.indexOf(text[pos2]);
        if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
          continue;
        if (found % 2 == 0 == dir > 0) {
          depth++;
        } else if (depth == 1) {
          return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
        } else {
          depth--;
        }
      }
      if (dir > 0)
        distance += text.length;
    }
    return iter.done ? { start: startToken, matched: false } : null;
  }
  __name(matchPlainBrackets, "matchPlainBrackets");
  var noTokens = /* @__PURE__ */ Object.create(null);
  var typeArray = [NodeType.none];
  var warned = [];
  var byTag = /* @__PURE__ */ Object.create(null);
  var defaultTable = /* @__PURE__ */ Object.create(null);
  for (let [legacyName, name2] of [
    ["variable", "variableName"],
    ["variable-2", "variableName.special"],
    ["string-2", "string.special"],
    ["def", "variableName.definition"],
    ["tag", "tagName"],
    ["attribute", "attributeName"],
    ["type", "typeName"],
    ["builtin", "variableName.standard"],
    ["qualifier", "modifier"],
    ["error", "invalid"],
    ["header", "heading"],
    ["property", "propertyName"]
  ])
    defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1)
      return;
    warned.push(part);
    console.warn(msg);
  }
  __name(warnForPart, "warnForPart");
  function createTokenType(extra, tagStr) {
    let tags$1 = [];
    for (let name3 of tagStr.split(" ")) {
      let found = [];
      for (let part of name3.split(".")) {
        let value = extra[part] || tags[part];
        if (!value) {
          warnForPart(part, `Unknown highlighting tag ${part}`);
        } else if (typeof value == "function") {
          if (!found.length)
            warnForPart(part, `Modifier ${part} used at start of tag`);
          else
            found = found.map(value);
        } else {
          if (found.length)
            warnForPart(part, `Tag ${part} used as modifier`);
          else
            found = Array.isArray(value) ? value : [value];
        }
      }
      for (let tag of found)
        tags$1.push(tag);
    }
    if (!tags$1.length)
      return 0;
    let name2 = tagStr.replace(/ /g, "_"), key = name2 + " " + tags$1.map((t3) => t3.id);
    let known = byTag[key];
    if (known)
      return known.id;
    let type = byTag[key] = NodeType.define({
      id: typeArray.length,
      name: name2,
      props: [styleTags({ [name2]: tags$1 })]
    });
    typeArray.push(type);
    return type.id;
  }
  __name(createTokenType, "createTokenType");
  var marks = {
    rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
    ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
    auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
  };

  // node_modules/@codemirror/commands/dist/index.js
  var toggleComment = /* @__PURE__ */ __name((target) => {
    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config15 = getConfig(target.state, line.from);
    return config15.line ? toggleLineComment(target) : config15.block ? toggleBlockCommentByLine(target) : false;
  }, "toggleComment");
  function command(f2, option) {
    return ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let tr = f2(option, state);
      if (!tr)
        return false;
      dispatch(state.update(tr));
      return true;
    };
  }
  __name(command, "command");
  var toggleLineComment = /* @__PURE__ */ command(
    changeLineComment,
    0
    /* CommentOption.Toggle */
  );
  var toggleBlockComment = /* @__PURE__ */ command(
    changeBlockComment,
    0
    /* CommentOption.Toggle */
  );
  var toggleBlockCommentByLine = /* @__PURE__ */ command(
    (o2, s2) => changeBlockComment(o2, s2, selectedLineRanges(s2)),
    0
    /* CommentOption.Toggle */
  );
  function getConfig(state, pos) {
    let data = state.languageDataAt("commentTokens", pos, 1);
    return data.length ? data[0] : {};
  }
  __name(getConfig, "getConfig");
  var SearchMargin = 50;
  function findBlockComment(state, { open, close }, from, to) {
    let textBefore = state.sliceDoc(from - SearchMargin, from);
    let textAfter = state.sliceDoc(to, to + SearchMargin);
    let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
    let beforeOff = textBefore.length - spaceBefore;
    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
      return {
        open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
        close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
      };
    }
    let startText, endText;
    if (to - from <= 2 * SearchMargin) {
      startText = endText = state.sliceDoc(from, to);
    } else {
      startText = state.sliceDoc(from, from + SearchMargin);
      endText = state.sliceDoc(to - SearchMargin, to);
    }
    let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
    let endOff = endText.length - endSpace - close.length;
    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
      return {
        open: {
          pos: from + startSpace + open.length,
          margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
        },
        close: {
          pos: to - endSpace - close.length,
          margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
        }
      };
    }
    return null;
  }
  __name(findBlockComment, "findBlockComment");
  function selectedLineRanges(state) {
    let ranges = [];
    for (let r2 of state.selection.ranges) {
      let fromLine = state.doc.lineAt(r2.from);
      let toLine = r2.to <= fromLine.to ? fromLine : state.doc.lineAt(r2.to);
      if (toLine.from > fromLine.from && toLine.from == r2.to)
        toLine = r2.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r2.to - 1);
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last].to > fromLine.from)
        ranges[last].to = toLine.to;
      else
        ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
    }
    return ranges;
  }
  __name(selectedLineRanges, "selectedLineRanges");
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
    let tokens = ranges.map((r2) => getConfig(state, r2.from).block);
    if (!tokens.every((c2) => c2))
      return null;
    let comments = ranges.map((r2, i2) => findBlockComment(state, tokens[i2], r2.from, r2.to));
    if (option != 2 && !comments.every((c2) => c2)) {
      return { changes: state.changes(ranges.map((range, i2) => {
        if (comments[i2])
          return [];
        return [{ from: range.from, insert: tokens[i2].open + " " }, { from: range.to, insert: " " + tokens[i2].close }];
      })) };
    } else if (option != 1 && comments.some((c2) => c2)) {
      let changes = [];
      for (let i2 = 0, comment2; i2 < comments.length; i2++)
        if (comment2 = comments[i2]) {
          let token = tokens[i2], { open, close } = comment2;
          changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
        }
      return { changes };
    }
    return null;
  }
  __name(changeBlockComment, "changeBlockComment");
  function changeLineComment(option, state, ranges = state.selection.ranges) {
    let lines = [];
    let prevLine = -1;
    for (let { from, to } of ranges) {
      let startI = lines.length, minIndent = 1e9;
      let token = getConfig(state, from).line;
      if (!token)
        continue;
      for (let pos = from; pos <= to; ) {
        let line = state.doc.lineAt(pos);
        if (line.from > prevLine && (from == to || to > line.from)) {
          prevLine = line.from;
          let indent = /^\s*/.exec(line.text)[0].length;
          let empty2 = indent == line.length;
          let comment2 = line.text.slice(indent, indent + token.length) == token ? indent : -1;
          if (indent < line.text.length && indent < minIndent)
            minIndent = indent;
          lines.push({ line, comment: comment2, token, indent, empty: empty2, single: false });
        }
        pos = line.to + 1;
      }
      if (minIndent < 1e9) {
        for (let i2 = startI; i2 < lines.length; i2++)
          if (lines[i2].indent < lines[i2].line.text.length)
            lines[i2].indent = minIndent;
      }
      if (lines.length == startI + 1)
        lines[startI].single = true;
    }
    if (option != 2 && lines.some((l2) => l2.comment < 0 && (!l2.empty || l2.single))) {
      let changes = [];
      for (let { line, token, indent, empty: empty2, single } of lines)
        if (single || !empty2)
          changes.push({ from: line.from + indent, insert: token + " " });
      let changeSet = state.changes(changes);
      return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
    } else if (option != 1 && lines.some((l2) => l2.comment >= 0)) {
      let changes = [];
      for (let { line, comment: comment2, token } of lines)
        if (comment2 >= 0) {
          let from = line.from + comment2, to = from + token.length;
          if (line.text[to - line.from] == " ")
            to++;
          changes.push({ from, to });
        }
      return { changes };
    }
    return null;
  }
  __name(changeLineComment, "changeLineComment");
  var fromHistory = /* @__PURE__ */ Annotation.define();
  var isolateHistory = /* @__PURE__ */ Annotation.define();
  var invertedEffects = /* @__PURE__ */ Facet.define();
  var historyConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        minDepth: 100,
        newGroupDelay: 500,
        joinToEvent: /* @__PURE__ */ __name((_t2, isAdjacent2) => isAdjacent2, "joinToEvent")
      }, {
        minDepth: Math.max,
        newGroupDelay: Math.min,
        joinToEvent: /* @__PURE__ */ __name((a2, b2) => (tr, adj) => a2(tr, adj) || b2(tr, adj), "joinToEvent")
      });
    }
  });
  var historyField_ = /* @__PURE__ */ StateField.define({
    create() {
      return HistoryState.empty;
    },
    update(state, tr) {
      let config15 = tr.state.facet(historyConfig);
      let fromHist = tr.annotation(fromHistory);
      if (fromHist) {
        let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
        let other = from == 0 ? state.undone : state.done;
        if (item)
          other = updateBranch(other, other.length, config15.minDepth, item);
        else
          other = addSelection(other, tr.startState.selection);
        return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
      }
      let isolate = tr.annotation(isolateHistory);
      if (isolate == "full" || isolate == "before")
        state = state.isolate();
      if (tr.annotation(Transaction.addToHistory) === false)
        return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
      let event = HistEvent.fromTransaction(tr);
      let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
      if (event)
        state = state.addChanges(event, time, userEvent, config15, tr);
      else if (tr.selection)
        state = state.addSelection(tr.startState.selection, time, userEvent, config15.newGroupDelay);
      if (isolate == "full" || isolate == "after")
        state = state.isolate();
      return state;
    },
    toJSON(value) {
      return { done: value.done.map((e2) => e2.toJSON()), undone: value.undone.map((e2) => e2.toJSON()) };
    },
    fromJSON(json) {
      return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
    }
  });
  function history(config15 = {}) {
    return [
      historyField_,
      historyConfig.of(config15),
      EditorView.domEventHandlers({
        beforeinput(e2, view2) {
          let command2 = e2.inputType == "historyUndo" ? undo : e2.inputType == "historyRedo" ? redo : null;
          if (!command2)
            return false;
          e2.preventDefault();
          return command2(view2);
        }
      })
    ];
  }
  __name(history, "history");
  function cmd(side, selection) {
    return function({ state, dispatch }) {
      if (!selection && state.readOnly)
        return false;
      let historyState = state.field(historyField_, false);
      if (!historyState)
        return false;
      let tr = historyState.pop(side, state, selection);
      if (!tr)
        return false;
      dispatch(tr);
      return true;
    };
  }
  __name(cmd, "cmd");
  var undo = /* @__PURE__ */ cmd(0, false);
  var redo = /* @__PURE__ */ cmd(1, false);
  var undoSelection = /* @__PURE__ */ cmd(0, true);
  var redoSelection = /* @__PURE__ */ cmd(1, true);
  var HistEvent = class _HistEvent {
    static {
      __name(this, "HistEvent");
    }
    constructor(changes, effects, mapped, startSelection, selectionsAfter) {
      this.changes = changes;
      this.effects = effects;
      this.mapped = mapped;
      this.startSelection = startSelection;
      this.selectionsAfter = selectionsAfter;
    }
    setSelAfter(after) {
      return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
    }
    toJSON() {
      var _a2, _b, _c;
      return {
        changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
        selectionsAfter: this.selectionsAfter.map((s2) => s2.toJSON())
      };
    }
    static fromJSON(json) {
      return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
    }
    // This does not check `addToHistory` and such, it assumes the
    // transaction needs to be converted to an item. Returns null when
    // there are no changes or effects in the transaction.
    static fromTransaction(tr, selection) {
      let effects = none2;
      for (let invert of tr.startState.facet(invertedEffects)) {
        let result = invert(tr);
        if (result.length)
          effects = effects.concat(result);
      }
      if (!effects.length && tr.changes.empty)
        return null;
      return new _HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection || tr.startState.selection, none2);
    }
    static selection(selections) {
      return new _HistEvent(void 0, none2, void 0, void 0, selections);
    }
  };
  function updateBranch(branch, to, maxLen, newEvent) {
    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
    let newBranch = branch.slice(start, to);
    newBranch.push(newEvent);
    return newBranch;
  }
  __name(updateBranch, "updateBranch");
  function isAdjacent(a2, b2) {
    let ranges = [], isAdjacent2 = false;
    a2.iterChangedRanges((f2, t3) => ranges.push(f2, t3));
    b2.iterChangedRanges((_f, _t2, f2, t3) => {
      for (let i2 = 0; i2 < ranges.length; ) {
        let from = ranges[i2++], to = ranges[i2++];
        if (t3 >= from && f2 <= to)
          isAdjacent2 = true;
      }
    });
    return isAdjacent2;
  }
  __name(isAdjacent, "isAdjacent");
  function eqSelectionShape(a2, b2) {
    return a2.ranges.length == b2.ranges.length && a2.ranges.filter((r2, i2) => r2.empty != b2.ranges[i2].empty).length === 0;
  }
  __name(eqSelectionShape, "eqSelectionShape");
  function conc(a2, b2) {
    return !a2.length ? b2 : !b2.length ? a2 : a2.concat(b2);
  }
  __name(conc, "conc");
  var none2 = [];
  var MaxSelectionsPerEvent = 200;
  function addSelection(branch, selection) {
    if (!branch.length) {
      return [HistEvent.selection([selection])];
    } else {
      let lastEvent = branch[branch.length - 1];
      let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
      if (sels.length && sels[sels.length - 1].eq(selection))
        return branch;
      sels.push(selection);
      return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
    }
  }
  __name(addSelection, "addSelection");
  function popSelection(branch) {
    let last = branch[branch.length - 1];
    let newBranch = branch.slice();
    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
    return newBranch;
  }
  __name(popSelection, "popSelection");
  function addMappingToBranch(branch, mapping) {
    if (!branch.length)
      return branch;
    let length = branch.length, selections = none2;
    while (length) {
      let event = mapEvent(branch[length - 1], mapping, selections);
      if (event.changes && !event.changes.empty || event.effects.length) {
        let result = branch.slice(0, length);
        result[length - 1] = event;
        return result;
      } else {
        mapping = event.mapped;
        length--;
        selections = event.selectionsAfter;
      }
    }
    return selections.length ? [HistEvent.selection(selections)] : none2;
  }
  __name(addMappingToBranch, "addMappingToBranch");
  function mapEvent(event, mapping, extraSelections) {
    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s2) => s2.map(mapping)) : none2, extraSelections);
    if (!event.changes)
      return HistEvent.selection(selections);
    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  __name(mapEvent, "mapEvent");
  var joinableUserEvent = /^(input\.type|delete)($|\.)/;
  var HistoryState = class _HistoryState {
    static {
      __name(this, "HistoryState");
    }
    constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
      this.done = done;
      this.undone = undone;
      this.prevTime = prevTime;
      this.prevUserEvent = prevUserEvent;
    }
    isolate() {
      return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
    }
    addChanges(event, time, userEvent, config15, tr) {
      let done = this.done, lastEvent = done[done.length - 1];
      if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config15.newGroupDelay && config15.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
      userEvent == "input.type.compose")) {
        done = updateBranch(done, done.length - 1, config15.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none2));
      } else {
        done = updateBranch(done, done.length, config15.minDepth, event);
      }
      return new _HistoryState(done, none2, time, userEvent);
    }
    addSelection(selection, time, userEvent, newGroupDelay) {
      let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none2;
      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
        return this;
      return new _HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
    }
    addMapping(mapping) {
      return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
    }
    pop(side, state, onlySelection) {
      let branch = side == 0 ? this.done : this.undone;
      if (branch.length == 0)
        return null;
      let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
      if (onlySelection && event.selectionsAfter.length) {
        return state.update({
          selection: event.selectionsAfter[event.selectionsAfter.length - 1],
          annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
          userEvent: side == 0 ? "select.undo" : "select.redo",
          scrollIntoView: true
        });
      } else if (!event.changes) {
        return null;
      } else {
        let rest = branch.length == 1 ? none2 : branch.slice(0, branch.length - 1);
        if (event.mapped)
          rest = addMappingToBranch(rest, event.mapped);
        return state.update({
          changes: event.changes,
          selection: event.startSelection,
          effects: event.effects,
          annotations: fromHistory.of({ side, rest, selection }),
          filter: false,
          userEvent: side == 0 ? "undo" : "redo",
          scrollIntoView: true
        });
      }
    }
  };
  HistoryState.empty = /* @__PURE__ */ new HistoryState(none2, none2);
  var historyKeymap = [
    { key: "Mod-z", run: undo, preventDefault: true },
    { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
    { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
    { key: "Mod-u", run: undoSelection, preventDefault: true },
    { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
  ];
  function updateSel(sel, by) {
    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  __name(updateSel, "updateSel");
  function setSel(state, selection) {
    return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  __name(setSel, "setSel");
  function moveSel({ state, dispatch }, how) {
    let selection = updateSel(state.selection, how);
    if (selection.eq(state.selection, true))
      return false;
    dispatch(setSel(state, selection));
    return true;
  }
  __name(moveSel, "moveSel");
  function rangeEnd(range, forward) {
    return EditorSelection.cursor(forward ? range.to : range.from);
  }
  __name(rangeEnd, "rangeEnd");
  function cursorByChar(view2, forward) {
    return moveSel(view2, (range) => range.empty ? view2.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  __name(cursorByChar, "cursorByChar");
  function ltrAtCursor(view2) {
    return view2.textDirectionAt(view2.state.selection.main.head) == Direction.LTR;
  }
  __name(ltrAtCursor, "ltrAtCursor");
  var cursorCharLeft = /* @__PURE__ */ __name((view2) => cursorByChar(view2, !ltrAtCursor(view2)), "cursorCharLeft");
  var cursorCharRight = /* @__PURE__ */ __name((view2) => cursorByChar(view2, ltrAtCursor(view2)), "cursorCharRight");
  function cursorByGroup(view2, forward) {
    return moveSel(view2, (range) => range.empty ? view2.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  __name(cursorByGroup, "cursorByGroup");
  var cursorGroupLeft = /* @__PURE__ */ __name((view2) => cursorByGroup(view2, !ltrAtCursor(view2)), "cursorGroupLeft");
  var cursorGroupRight = /* @__PURE__ */ __name((view2) => cursorByGroup(view2, ltrAtCursor(view2)), "cursorGroupRight");
  var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
  function interestingNode(state, node, bracketProp) {
    if (node.type.prop(bracketProp))
      return true;
    let len = node.to - node.from;
    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  __name(interestingNode, "interestingNode");
  function moveBySyntax(state, start, forward) {
    let pos = syntaxTree(state).resolveInner(start.head);
    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
    for (let at2 = start.head; ; ) {
      let next = forward ? pos.childAfter(at2) : pos.childBefore(at2);
      if (!next)
        break;
      if (interestingNode(state, next, bracketProp))
        pos = next;
      else
        at2 = forward ? next.to : next.from;
    }
    let bracket2 = pos.type.prop(bracketProp), match, newPos;
    if (bracket2 && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
      newPos = forward ? match.end.to : match.end.from;
    else
      newPos = forward ? pos.to : pos.from;
    return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  __name(moveBySyntax, "moveBySyntax");
  var cursorSyntaxLeft = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => moveBySyntax(view2.state, range, !ltrAtCursor(view2))), "cursorSyntaxLeft");
  var cursorSyntaxRight = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => moveBySyntax(view2.state, range, ltrAtCursor(view2))), "cursorSyntaxRight");
  function cursorByLine(view2, forward) {
    return moveSel(view2, (range) => {
      if (!range.empty)
        return rangeEnd(range, forward);
      let moved = view2.moveVertically(range, forward);
      return moved.head != range.head ? moved : view2.moveToLineBoundary(range, forward);
    });
  }
  __name(cursorByLine, "cursorByLine");
  var cursorLineUp = /* @__PURE__ */ __name((view2) => cursorByLine(view2, false), "cursorLineUp");
  var cursorLineDown = /* @__PURE__ */ __name((view2) => cursorByLine(view2, true), "cursorLineDown");
  function pageInfo(view2) {
    let selfScroll = view2.scrollDOM.clientHeight < view2.scrollDOM.scrollHeight - 2;
    let marginTop = 0, marginBottom = 0, height;
    if (selfScroll) {
      for (let source of view2.state.facet(EditorView.scrollMargins)) {
        let margins = source(view2);
        if (margins === null || margins === void 0 ? void 0 : margins.top)
          marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
        if (margins === null || margins === void 0 ? void 0 : margins.bottom)
          marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
      }
      height = view2.scrollDOM.clientHeight - marginTop - marginBottom;
    } else {
      height = (view2.dom.ownerDocument.defaultView || window).innerHeight;
    }
    return {
      marginTop,
      marginBottom,
      selfScroll,
      height: Math.max(view2.defaultLineHeight, height - 5)
    };
  }
  __name(pageInfo, "pageInfo");
  function cursorByPage(view2, forward) {
    let page = pageInfo(view2);
    let { state } = view2, selection = updateSel(state.selection, (range) => {
      return range.empty ? view2.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
    });
    if (selection.eq(state.selection))
      return false;
    let effect;
    if (page.selfScroll) {
      let startPos = view2.coordsAtPos(state.selection.main.head);
      let scrollRect = view2.scrollDOM.getBoundingClientRect();
      let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
      if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
        effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
    }
    view2.dispatch(setSel(state, selection), { effects: effect });
    return true;
  }
  __name(cursorByPage, "cursorByPage");
  var cursorPageUp = /* @__PURE__ */ __name((view2) => cursorByPage(view2, false), "cursorPageUp");
  var cursorPageDown = /* @__PURE__ */ __name((view2) => cursorByPage(view2, true), "cursorPageDown");
  function moveByLineBoundary(view2, start, forward) {
    let line = view2.lineBlockAt(start.head), moved = view2.moveToLineBoundary(start, forward);
    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
      moved = view2.moveToLineBoundary(start, forward, false);
    if (!forward && moved.head == line.from && line.length) {
      let space = /^\s*/.exec(view2.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
      if (space && start.head != line.from + space)
        moved = EditorSelection.cursor(line.from + space);
    }
    return moved;
  }
  __name(moveByLineBoundary, "moveByLineBoundary");
  var cursorLineBoundaryForward = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => moveByLineBoundary(view2, range, true)), "cursorLineBoundaryForward");
  var cursorLineBoundaryBackward = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => moveByLineBoundary(view2, range, false)), "cursorLineBoundaryBackward");
  var cursorLineBoundaryLeft = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => moveByLineBoundary(view2, range, !ltrAtCursor(view2))), "cursorLineBoundaryLeft");
  var cursorLineBoundaryRight = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => moveByLineBoundary(view2, range, ltrAtCursor(view2))), "cursorLineBoundaryRight");
  var cursorLineStart = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => EditorSelection.cursor(view2.lineBlockAt(range.head).from, 1)), "cursorLineStart");
  var cursorLineEnd = /* @__PURE__ */ __name((view2) => moveSel(view2, (range) => EditorSelection.cursor(view2.lineBlockAt(range.head).to, -1)), "cursorLineEnd");
  function toMatchingBracket(state, dispatch, extend) {
    let found = false, selection = updateSel(state.selection, (range) => {
      let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
      if (!matching || !matching.end)
        return range;
      found = true;
      let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
      return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
    });
    if (!found)
      return false;
    dispatch(setSel(state, selection));
    return true;
  }
  __name(toMatchingBracket, "toMatchingBracket");
  var cursorMatchingBracket = /* @__PURE__ */ __name(({ state, dispatch }) => toMatchingBracket(state, dispatch, false), "cursorMatchingBracket");
  function extendSel(target, how) {
    let selection = updateSel(target.state.selection, (range) => {
      let head = how(range);
      return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
    });
    if (selection.eq(target.state.selection))
      return false;
    target.dispatch(setSel(target.state, selection));
    return true;
  }
  __name(extendSel, "extendSel");
  function selectByChar(view2, forward) {
    return extendSel(view2, (range) => view2.moveByChar(range, forward));
  }
  __name(selectByChar, "selectByChar");
  var selectCharLeft = /* @__PURE__ */ __name((view2) => selectByChar(view2, !ltrAtCursor(view2)), "selectCharLeft");
  var selectCharRight = /* @__PURE__ */ __name((view2) => selectByChar(view2, ltrAtCursor(view2)), "selectCharRight");
  function selectByGroup(view2, forward) {
    return extendSel(view2, (range) => view2.moveByGroup(range, forward));
  }
  __name(selectByGroup, "selectByGroup");
  var selectGroupLeft = /* @__PURE__ */ __name((view2) => selectByGroup(view2, !ltrAtCursor(view2)), "selectGroupLeft");
  var selectGroupRight = /* @__PURE__ */ __name((view2) => selectByGroup(view2, ltrAtCursor(view2)), "selectGroupRight");
  var selectSyntaxLeft = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => moveBySyntax(view2.state, range, !ltrAtCursor(view2))), "selectSyntaxLeft");
  var selectSyntaxRight = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => moveBySyntax(view2.state, range, ltrAtCursor(view2))), "selectSyntaxRight");
  function selectByLine(view2, forward) {
    return extendSel(view2, (range) => view2.moveVertically(range, forward));
  }
  __name(selectByLine, "selectByLine");
  var selectLineUp = /* @__PURE__ */ __name((view2) => selectByLine(view2, false), "selectLineUp");
  var selectLineDown = /* @__PURE__ */ __name((view2) => selectByLine(view2, true), "selectLineDown");
  function selectByPage(view2, forward) {
    return extendSel(view2, (range) => view2.moveVertically(range, forward, pageInfo(view2).height));
  }
  __name(selectByPage, "selectByPage");
  var selectPageUp = /* @__PURE__ */ __name((view2) => selectByPage(view2, false), "selectPageUp");
  var selectPageDown = /* @__PURE__ */ __name((view2) => selectByPage(view2, true), "selectPageDown");
  var selectLineBoundaryForward = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => moveByLineBoundary(view2, range, true)), "selectLineBoundaryForward");
  var selectLineBoundaryBackward = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => moveByLineBoundary(view2, range, false)), "selectLineBoundaryBackward");
  var selectLineBoundaryLeft = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => moveByLineBoundary(view2, range, !ltrAtCursor(view2))), "selectLineBoundaryLeft");
  var selectLineBoundaryRight = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => moveByLineBoundary(view2, range, ltrAtCursor(view2))), "selectLineBoundaryRight");
  var selectLineStart = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => EditorSelection.cursor(view2.lineBlockAt(range.head).from)), "selectLineStart");
  var selectLineEnd = /* @__PURE__ */ __name((view2) => extendSel(view2, (range) => EditorSelection.cursor(view2.lineBlockAt(range.head).to)), "selectLineEnd");
  var cursorDocStart = /* @__PURE__ */ __name(({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: 0 }));
    return true;
  }, "cursorDocStart");
  var cursorDocEnd = /* @__PURE__ */ __name(({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.doc.length }));
    return true;
  }, "cursorDocEnd");
  var selectDocStart = /* @__PURE__ */ __name(({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
    return true;
  }, "selectDocStart");
  var selectDocEnd = /* @__PURE__ */ __name(({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
    return true;
  }, "selectDocEnd");
  var selectAll = /* @__PURE__ */ __name(({ state, dispatch }) => {
    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
    return true;
  }, "selectAll");
  var selectLine = /* @__PURE__ */ __name(({ state, dispatch }) => {
    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
    return true;
  }, "selectLine");
  var selectParentSyntax = /* @__PURE__ */ __name(({ state, dispatch }) => {
    let selection = updateSel(state.selection, (range) => {
      let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
      if (range.empty) {
        let stackBefore = tree.resolveStack(range.from, -1);
        if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
          stack = stackBefore;
      }
      for (let cur2 = stack; cur2; cur2 = cur2.next) {
        let { node } = cur2;
        if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && cur2.next)
          return EditorSelection.range(node.to, node.from);
      }
      return range;
    });
    if (selection.eq(state.selection))
      return false;
    dispatch(setSel(state, selection));
    return true;
  }, "selectParentSyntax");
  var simplifySelection = /* @__PURE__ */ __name(({ state, dispatch }) => {
    let cur2 = state.selection, selection = null;
    if (cur2.ranges.length > 1)
      selection = EditorSelection.create([cur2.main]);
    else if (!cur2.main.empty)
      selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
    if (!selection)
      return false;
    dispatch(setSel(state, selection));
    return true;
  }, "simplifySelection");
  function deleteBy(target, by) {
    if (target.state.readOnly)
      return false;
    let event = "delete.selection", { state } = target;
    let changes = state.changeByRange((range) => {
      let { from, to } = range;
      if (from == to) {
        let towards = by(range);
        if (towards < from) {
          event = "delete.backward";
          towards = skipAtomic(target, towards, false);
        } else if (towards > from) {
          event = "delete.forward";
          towards = skipAtomic(target, towards, true);
        }
        from = Math.min(from, towards);
        to = Math.max(to, towards);
      } else {
        from = skipAtomic(target, from, false);
        to = skipAtomic(target, to, true);
      }
      return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
    });
    if (changes.changes.empty)
      return false;
    target.dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
    }));
    return true;
  }
  __name(deleteBy, "deleteBy");
  function skipAtomic(target, pos, forward) {
    if (target instanceof EditorView)
      for (let ranges of target.state.facet(EditorView.atomicRanges).map((f2) => f2(target)))
        ranges.between(pos, pos, (from, to) => {
          if (from < pos && to > pos)
            pos = forward ? to : from;
        });
    return pos;
  }
  __name(skipAtomic, "skipAtomic");
  var deleteByChar = /* @__PURE__ */ __name((target, forward, byIndentUnit) => deleteBy(target, (range) => {
    let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
    if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "	")
        return pos - 1;
      let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
      for (let i2 = 0; i2 < drop && before[before.length - 1 - i2] == " "; i2++)
        pos--;
      targetPos = pos;
    } else {
      targetPos = findClusterBreak2(line.text, pos - line.from, forward, forward) + line.from;
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
        targetPos += forward ? 1 : -1;
      else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
        targetPos = findClusterBreak2(line.text, targetPos - line.from, false, false) + line.from;
    }
    return targetPos;
  }), "deleteByChar");
  var deleteCharBackward = /* @__PURE__ */ __name((view2) => deleteByChar(view2, false, true), "deleteCharBackward");
  var deleteCharForward = /* @__PURE__ */ __name((view2) => deleteByChar(view2, true, false), "deleteCharForward");
  var deleteByGroup = /* @__PURE__ */ __name((target, forward) => deleteBy(target, (range) => {
    let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
    let categorize = state.charCategorizer(pos);
    for (let cat = null; ; ) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
          pos += forward ? 1 : -1;
        break;
      }
      let next = findClusterBreak2(line.text, pos - line.from, forward) + line.from;
      let nextChar2 = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      let nextCat = categorize(nextChar2);
      if (cat != null && nextCat != cat)
        break;
      if (nextChar2 != " " || pos != range.head)
        cat = nextCat;
      pos = next;
    }
    return pos;
  }), "deleteByGroup");
  var deleteGroupBackward = /* @__PURE__ */ __name((target) => deleteByGroup(target, false), "deleteGroupBackward");
  var deleteGroupForward = /* @__PURE__ */ __name((target) => deleteByGroup(target, true), "deleteGroupForward");
  var deleteToLineEnd = /* @__PURE__ */ __name((view2) => deleteBy(view2, (range) => {
    let lineEnd = view2.lineBlockAt(range.head).to;
    return range.head < lineEnd ? lineEnd : Math.min(view2.state.doc.length, range.head + 1);
  }), "deleteToLineEnd");
  var deleteLineBoundaryBackward = /* @__PURE__ */ __name((view2) => deleteBy(view2, (range) => {
    let lineStart = view2.moveToLineBoundary(range, false).head;
    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
  }), "deleteLineBoundaryBackward");
  var deleteLineBoundaryForward = /* @__PURE__ */ __name((view2) => deleteBy(view2, (range) => {
    let lineStart = view2.moveToLineBoundary(range, true).head;
    return range.head < lineStart ? lineStart : Math.min(view2.state.doc.length, range.head + 1);
  }), "deleteLineBoundaryForward");
  var splitLine = /* @__PURE__ */ __name(({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      return {
        changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
        range: EditorSelection.cursor(range.from)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  }, "splitLine");
  var transposeChars = /* @__PURE__ */ __name(({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      if (!range.empty || range.from == 0 || range.from == state.doc.length)
        return { range };
      let pos = range.from, line = state.doc.lineAt(pos);
      let from = pos == line.from ? pos - 1 : findClusterBreak2(line.text, pos - line.from, false) + line.from;
      let to = pos == line.to ? pos + 1 : findClusterBreak2(line.text, pos - line.from, true) + line.from;
      return {
        changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
        range: EditorSelection.cursor(to)
      };
    });
    if (changes.changes.empty)
      return false;
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
    return true;
  }, "transposeChars");
  function selectedLineBlocks(state) {
    let blocks = [], upto = -1;
    for (let range of state.selection.ranges) {
      let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from)
        endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        let prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
      }
      upto = endLine.number + 1;
    }
    return blocks;
  }
  __name(selectedLineBlocks, "selectedLineBlocks");
  function moveLine(state, dispatch, forward) {
    if (state.readOnly)
      return false;
    let changes = [], ranges = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward ? block.to == state.doc.length : block.from == 0)
        continue;
      let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      let size = nextLine.length + 1;
      if (forward) {
        changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
        for (let r2 of block.ranges)
          ranges.push(EditorSelection.range(Math.min(state.doc.length, r2.anchor + size), Math.min(state.doc.length, r2.head + size)));
      } else {
        changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
        for (let r2 of block.ranges)
          ranges.push(EditorSelection.range(r2.anchor - size, r2.head - size));
      }
    }
    if (!changes.length)
      return false;
    dispatch(state.update({
      changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: "move.line"
    }));
    return true;
  }
  __name(moveLine, "moveLine");
  var moveLineUp = /* @__PURE__ */ __name(({ state, dispatch }) => moveLine(state, dispatch, false), "moveLineUp");
  var moveLineDown = /* @__PURE__ */ __name(({ state, dispatch }) => moveLine(state, dispatch, true), "moveLineDown");
  function copyLine(state, dispatch, forward) {
    if (state.readOnly)
      return false;
    let changes = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward)
        changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
      else
        changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
    }
    dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
    return true;
  }
  __name(copyLine, "copyLine");
  var copyLineUp = /* @__PURE__ */ __name(({ state, dispatch }) => copyLine(state, dispatch, false), "copyLineUp");
  var copyLineDown = /* @__PURE__ */ __name(({ state, dispatch }) => copyLine(state, dispatch, true), "copyLineDown");
  var deleteLine = /* @__PURE__ */ __name((view2) => {
    if (view2.state.readOnly)
      return false;
    let { state } = view2, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
      if (from > 0)
        from--;
      else if (to < state.doc.length)
        to++;
      return { from, to };
    }));
    let selection = updateSel(state.selection, (range) => {
      let dist2 = void 0;
      if (view2.lineWrapping) {
        let block = view2.lineBlockAt(range.head), pos = view2.coordsAtPos(range.head, range.assoc || 1);
        if (pos)
          dist2 = block.bottom + view2.documentTop - pos.bottom + view2.defaultLineHeight / 2;
      }
      return view2.moveVertically(range, true, dist2);
    }).map(changes);
    view2.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
    return true;
  }, "deleteLine");
  function isBetweenBrackets(state, pos) {
    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
      return { from: pos, to: pos };
    let context = syntaxTree(state).resolveInner(pos);
    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
      return { from: before.to, to: after.from };
    return null;
  }
  __name(isBetweenBrackets, "isBetweenBrackets");
  var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
  var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
  function newlineAndIndent(atEof) {
    return ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let changes = state.changeByRange((range) => {
        let { from, to } = range, line = state.doc.lineAt(from);
        let explode = !atEof && from == to && isBetweenBrackets(state, from);
        if (atEof)
          from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
        let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
        let indent = getIndentation(cx, from);
        if (indent == null)
          indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
        while (to < line.to && /\s/.test(line.text[to - line.from]))
          to++;
        if (explode)
          ({ from, to } = explode);
        else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
          from = line.from;
        let insert2 = ["", indentString(state, indent)];
        if (explode)
          insert2.push(indentString(state, cx.lineIndent(line.from, -1)));
        return {
          changes: { from, to, insert: Text.of(insert2) },
          range: EditorSelection.cursor(from + 1 + insert2[1].length)
        };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
    };
  }
  __name(newlineAndIndent, "newlineAndIndent");
  function changeBySelectedLine(state, f2) {
    let atLine = -1;
    return state.changeByRange((range) => {
      let changes = [];
      for (let pos = range.from; pos <= range.to; ) {
        let line = state.doc.lineAt(pos);
        if (line.number > atLine && (range.empty || range.to > line.from)) {
          f2(line, changes, range);
          atLine = line.number;
        }
        pos = line.to + 1;
      }
      let changeSet = state.changes(changes);
      return {
        changes,
        range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
      };
    });
  }
  __name(changeBySelectedLine, "changeBySelectedLine");
  var indentSelection = /* @__PURE__ */ __name(({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let updated = /* @__PURE__ */ Object.create(null);
    let context = new IndentContext(state, { overrideIndentation: /* @__PURE__ */ __name((start) => {
      let found = updated[start];
      return found == null ? -1 : found;
    }, "overrideIndentation") });
    let changes = changeBySelectedLine(state, (line, changes2, range) => {
      let indent = getIndentation(context, line.from);
      if (indent == null)
        return;
      if (!/\S/.test(line.text))
        indent = 0;
      let cur2 = /^\s*/.exec(line.text)[0];
      let norm = indentString(state, indent);
      if (cur2 != norm || range.from < line.from + cur2.length) {
        updated[line.from] = indent;
        changes2.push({ from: line.from, to: line.from + cur2.length, insert: norm });
      }
    });
    if (!changes.changes.empty)
      dispatch(state.update(changes, { userEvent: "indent" }));
    return true;
  }, "indentSelection");
  var indentMore = /* @__PURE__ */ __name(({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      changes.push({ from: line.from, insert: state.facet(indentUnit) });
    }), { userEvent: "input.indent" }));
    return true;
  }, "indentMore");
  var indentLess = /* @__PURE__ */ __name(({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      let space = /^\s*/.exec(line.text)[0];
      if (!space)
        return;
      let col = countColumn(space, state.tabSize), keep = 0;
      let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
      while (keep < space.length && keep < insert2.length && space.charCodeAt(keep) == insert2.charCodeAt(keep))
        keep++;
      changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert2.slice(keep) });
    }), { userEvent: "delete.dedent" }));
    return true;
  }, "indentLess");
  var toggleTabFocusMode = /* @__PURE__ */ __name((view2) => {
    view2.setTabFocusMode();
    return true;
  }, "toggleTabFocusMode");
  var emacsStyleKeymap = [
    { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
    { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
    { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
    { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
    { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
    { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
    { key: "Ctrl-d", run: deleteCharForward },
    { key: "Ctrl-h", run: deleteCharBackward },
    { key: "Ctrl-k", run: deleteToLineEnd },
    { key: "Ctrl-Alt-h", run: deleteGroupBackward },
    { key: "Ctrl-o", run: splitLine },
    { key: "Ctrl-t", run: transposeChars },
    { key: "Ctrl-v", run: cursorPageDown }
  ];
  var standardKeymap = /* @__PURE__ */ [
    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
    { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
    { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
    { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
    { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
    { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
    { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
    { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
    { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
    { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
    { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
    { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
    { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
    { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
    { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
    { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
    { key: "Mod-a", run: selectAll },
    { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
    { key: "Delete", run: deleteCharForward },
    { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
    { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
    { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
    { mac: "Mod-Delete", run: deleteLineBoundaryForward }
  ].concat(/* @__PURE__ */ emacsStyleKeymap.map((b2) => ({ mac: b2.key, run: b2.run, shift: b2.shift })));
  var defaultKeymap = /* @__PURE__ */ [
    { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
    { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
    { key: "Alt-ArrowUp", run: moveLineUp },
    { key: "Shift-Alt-ArrowUp", run: copyLineUp },
    { key: "Alt-ArrowDown", run: moveLineDown },
    { key: "Shift-Alt-ArrowDown", run: copyLineDown },
    { key: "Escape", run: simplifySelection },
    { key: "Mod-Enter", run: insertBlankLine },
    { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
    { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
    { key: "Mod-[", run: indentLess },
    { key: "Mod-]", run: indentMore },
    { key: "Mod-Alt-\\", run: indentSelection },
    { key: "Shift-Mod-k", run: deleteLine },
    { key: "Shift-Mod-\\", run: cursorMatchingBracket },
    { key: "Mod-/", run: toggleComment },
    { key: "Alt-A", run: toggleBlockComment },
    { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
  ].concat(standardKeymap);

  // node_modules/crelt/index.js
  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i2 = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name2 in next) if (Object.prototype.hasOwnProperty.call(next, name2)) {
        var value = next[name2];
        if (typeof value == "string") elt.setAttribute(name2, value);
        else if (value != null) elt[name2] = value;
      }
      i2++;
    }
    for (; i2 < arguments.length; i2++) add(elt, arguments[i2]);
    return elt;
  }
  __name(crelt, "crelt");
  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) {
    } else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i2 = 0; i2 < child.length; i2++) add(elt, child[i2]);
    } else {
      throw new RangeError("Unsupported child node: " + child);
    }
  }
  __name(add, "add");

  // node_modules/@codemirror/lint/dist/index.js
  var SelectedDiagnostic = class {
    static {
      __name(this, "SelectedDiagnostic");
    }
    constructor(from, to, diagnostic) {
      this.from = from;
      this.to = to;
      this.diagnostic = diagnostic;
    }
  };
  var LintState = class _LintState {
    static {
      __name(this, "LintState");
    }
    constructor(diagnostics, panel, selected) {
      this.diagnostics = diagnostics;
      this.panel = panel;
      this.selected = selected;
    }
    static init(diagnostics, panel, state) {
      let diagnosticFilter = state.facet(lintConfig).markerFilter;
      if (diagnosticFilter)
        diagnostics = diagnosticFilter(diagnostics, state);
      let sorted = diagnostics.slice().sort((a2, b2) => a2.from - b2.from || a2.to - b2.to);
      let deco = new RangeSetBuilder(), active = [], pos = 0;
      for (let i2 = 0; ; ) {
        let next = i2 == sorted.length ? null : sorted[i2];
        if (!next && !active.length)
          break;
        let from, to;
        if (active.length) {
          from = pos;
          to = active.reduce((p2, d2) => Math.min(p2, d2.to), next && next.from > from ? next.from : 1e8);
        } else {
          from = next.from;
          to = next.to;
          active.push(next);
          i2++;
        }
        while (i2 < sorted.length) {
          let next2 = sorted[i2];
          if (next2.from == from && (next2.to > next2.from || next2.to == from)) {
            active.push(next2);
            i2++;
            to = Math.min(next2.to, to);
          } else {
            to = Math.min(next2.from, to);
            break;
          }
        }
        let sev = maxSeverity(active);
        if (active.some((d2) => d2.from == d2.to || d2.from == d2.to - 1 && state.doc.lineAt(d2.from).to == d2.from)) {
          deco.add(from, from, Decoration.widget({
            widget: new DiagnosticWidget(sev),
            diagnostics: active.slice()
          }));
        } else {
          let markClass = active.reduce((c2, d2) => d2.markClass ? c2 + " " + d2.markClass : c2, "");
          deco.add(from, to, Decoration.mark({
            class: "cm-lintRange cm-lintRange-" + sev + markClass,
            diagnostics: active.slice(),
            inclusiveEnd: active.some((a2) => a2.to > to)
          }));
        }
        pos = to;
        for (let i3 = 0; i3 < active.length; i3++)
          if (active[i3].to <= pos)
            active.splice(i3--, 1);
      }
      let set = deco.finish();
      return new _LintState(set, panel, findDiagnostic(set));
    }
  };
  function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
    let found = null;
    diagnostics.between(after, 1e9, (from, to, { spec }) => {
      if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
        return;
      if (!found)
        found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);
      else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
        return false;
      else
        found = new SelectedDiagnostic(found.from, to, found.diagnostic);
    });
    return found;
  }
  __name(findDiagnostic, "findDiagnostic");
  function hideTooltip(tr, tooltip) {
    let from = tooltip.pos, to = tooltip.end || from;
    let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
    if (result != null)
      return result;
    let line = tr.startState.doc.lineAt(tooltip.pos);
    return !!(tr.effects.some((e2) => e2.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
  }
  __name(hideTooltip, "hideTooltip");
  function maybeEnableLint(state, effects) {
    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
  }
  __name(maybeEnableLint, "maybeEnableLint");
  function setDiagnostics(state, diagnostics) {
    return {
      effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
    };
  }
  __name(setDiagnostics, "setDiagnostics");
  var setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
  var togglePanel = /* @__PURE__ */ StateEffect.define();
  var movePanelSelection = /* @__PURE__ */ StateEffect.define();
  var lintState = /* @__PURE__ */ StateField.define({
    create() {
      return new LintState(Decoration.none, null, null);
    },
    update(value, tr) {
      if (tr.docChanged && value.diagnostics.size) {
        let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
        if (value.selected) {
          let selPos = tr.changes.mapPos(value.selected.from, 1);
          selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
        }
        if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
          panel = null;
        value = new LintState(mapped, panel, selected);
      }
      for (let effect of tr.effects) {
        if (effect.is(setDiagnosticsEffect)) {
          let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
          value = LintState.init(effect.value, panel, tr.state);
        } else if (effect.is(togglePanel)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
      return value;
    },
    provide: /* @__PURE__ */ __name((f2) => [
      showPanel.from(f2, (val) => val.panel),
      EditorView.decorations.from(f2, (s2) => s2.diagnostics)
    ], "provide")
  });
  var activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
  function lintTooltip(view2, pos, side) {
    let { diagnostics } = view2.state.field(lintState);
    let found, start = -1, end = -1;
    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
      if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
        found = spec.diagnostics;
        start = from;
        end = to;
        return false;
      }
    });
    let diagnosticFilter = view2.state.facet(lintConfig).tooltipFilter;
    if (found && diagnosticFilter)
      found = diagnosticFilter(found, view2.state);
    if (!found)
      return null;
    return {
      pos: start,
      end,
      above: view2.state.doc.lineAt(start).to < end,
      create() {
        return { dom: diagnosticsTooltip(view2, found) };
      }
    };
  }
  __name(lintTooltip, "lintTooltip");
  function diagnosticsTooltip(view2, diagnostics) {
    return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d2) => renderDiagnostic(view2, d2, false)));
  }
  __name(diagnosticsTooltip, "diagnosticsTooltip");
  var openLintPanel = /* @__PURE__ */ __name((view2) => {
    let field = view2.state.field(lintState, false);
    if (!field || !field.panel)
      view2.dispatch({ effects: maybeEnableLint(view2.state, [togglePanel.of(true)]) });
    let panel = getPanel(view2, LintPanel.open);
    if (panel)
      panel.dom.querySelector(".cm-panel-lint ul").focus();
    return true;
  }, "openLintPanel");
  var closeLintPanel = /* @__PURE__ */ __name((view2) => {
    let field = view2.state.field(lintState, false);
    if (!field || !field.panel)
      return false;
    view2.dispatch({ effects: togglePanel.of(false) });
    return true;
  }, "closeLintPanel");
  var nextDiagnostic = /* @__PURE__ */ __name((view2) => {
    let field = view2.state.field(lintState, false);
    if (!field)
      return false;
    let sel = view2.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
    if (!next.value) {
      next = field.diagnostics.iter(0);
      if (!next.value || next.from == sel.from && next.to == sel.to)
        return false;
    }
    view2.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
    return true;
  }, "nextDiagnostic");
  var lintKeymap = [
    { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
    { key: "F8", run: nextDiagnostic }
  ];
  var lintPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.view = view2;
      this.timeout = -1;
      this.set = true;
      let { delay } = view2.state.facet(lintConfig);
      this.lintTime = Date.now() + delay;
      this.run = this.run.bind(this);
      this.timeout = setTimeout(this.run, delay);
    }
    run() {
      clearTimeout(this.timeout);
      let now = Date.now();
      if (now < this.lintTime - 10) {
        this.timeout = setTimeout(this.run, this.lintTime - now);
      } else {
        this.set = false;
        let { state } = this.view, { sources } = state.facet(lintConfig);
        if (sources.length)
          batchResults(sources.map((s2) => Promise.resolve(s2(this.view))), (annotations) => {
            if (this.view.state.doc == state.doc)
              this.view.dispatch(setDiagnostics(this.view.state, annotations.reduce((a2, b2) => a2.concat(b2))));
          }, (error) => {
            logException(this.view.state, error);
          });
      }
    }
    update(update) {
      let config15 = update.state.facet(lintConfig);
      if (update.docChanged || config15 != update.startState.facet(lintConfig) || config15.needsRefresh && config15.needsRefresh(update)) {
        this.lintTime = Date.now() + config15.delay;
        if (!this.set) {
          this.set = true;
          this.timeout = setTimeout(this.run, config15.delay);
        }
      }
    }
    force() {
      if (this.set) {
        this.lintTime = Date.now();
        this.run();
      }
    }
    destroy() {
      clearTimeout(this.timeout);
    }
  });
  function batchResults(promises, sink, error) {
    let collected = [], timeout = -1;
    for (let p2 of promises)
      p2.then((value) => {
        collected.push(value);
        clearTimeout(timeout);
        if (collected.length == promises.length)
          sink(collected);
        else
          timeout = setTimeout(() => sink(collected), 200);
      }, error);
  }
  __name(batchResults, "batchResults");
  var lintConfig = /* @__PURE__ */ Facet.define({
    combine(input) {
      return Object.assign({ sources: input.map((i2) => i2.source).filter((x2) => x2 != null) }, combineConfig(input.map((i2) => i2.config), {
        delay: 750,
        markerFilter: null,
        tooltipFilter: null,
        needsRefresh: null,
        hideOn: /* @__PURE__ */ __name(() => null, "hideOn")
      }, {
        needsRefresh: /* @__PURE__ */ __name((a2, b2) => !a2 ? b2 : !b2 ? a2 : (u2) => a2(u2) || b2(u2), "needsRefresh")
      }));
    }
  });
  function linter(source, config15 = {}) {
    return [
      lintConfig.of({ source, config: config15 }),
      lintPlugin,
      lintExtensions
    ];
  }
  __name(linter, "linter");
  function assignKeys(actions) {
    let assigned = [];
    if (actions)
      actions: for (let { name: name2 } of actions) {
        for (let i2 = 0; i2 < name2.length; i2++) {
          let ch = name2[i2];
          if (/[a-zA-Z]/.test(ch) && !assigned.some((c2) => c2.toLowerCase() == ch.toLowerCase())) {
            assigned.push(ch);
            continue actions;
          }
        }
        assigned.push("");
      }
    return assigned;
  }
  __name(assignKeys, "assignKeys");
  function renderDiagnostic(view2, diagnostic, inPanel) {
    var _a2;
    let keys2 = inPanel ? assignKeys(diagnostic.actions) : [];
    return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view2) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i2) => {
      let fired = false, click = /* @__PURE__ */ __name((e2) => {
        e2.preventDefault();
        if (fired)
          return;
        fired = true;
        let found = findDiagnostic(view2.state.field(lintState).diagnostics, diagnostic);
        if (found)
          action.apply(view2, found.from, found.to);
      }, "click");
      let { name: name2 } = action, keyIndex = keys2[i2] ? name2.indexOf(keys2[i2]) : -1;
      let nameElt = keyIndex < 0 ? name2 : [
        name2.slice(0, keyIndex),
        crelt("u", name2.slice(keyIndex, keyIndex + 1)),
        name2.slice(keyIndex + 1)
      ];
      return crelt("button", {
        type: "button",
        class: "cm-diagnosticAction",
        onclick: click,
        onmousedown: click,
        "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys2[i2]})"`}.`
      }, nameElt);
    }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
  }
  __name(renderDiagnostic, "renderDiagnostic");
  var DiagnosticWidget = class extends WidgetType {
    static {
      __name(this, "DiagnosticWidget");
    }
    constructor(sev) {
      super();
      this.sev = sev;
    }
    eq(other) {
      return other.sev == this.sev;
    }
    toDOM() {
      return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
    }
  };
  var PanelItem = class {
    static {
      __name(this, "PanelItem");
    }
    constructor(view2, diagnostic) {
      this.diagnostic = diagnostic;
      this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
      this.dom = renderDiagnostic(view2, diagnostic, true);
      this.dom.id = this.id;
      this.dom.setAttribute("role", "option");
    }
  };
  var LintPanel = class _LintPanel {
    static {
      __name(this, "LintPanel");
    }
    constructor(view2) {
      this.view = view2;
      this.items = [];
      let onkeydown = /* @__PURE__ */ __name((event) => {
        if (event.keyCode == 27) {
          closeLintPanel(this.view);
          this.view.focus();
        } else if (event.keyCode == 38 || event.keyCode == 33) {
          this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
        } else if (event.keyCode == 40 || event.keyCode == 34) {
          this.moveSelection((this.selectedIndex + 1) % this.items.length);
        } else if (event.keyCode == 36) {
          this.moveSelection(0);
        } else if (event.keyCode == 35) {
          this.moveSelection(this.items.length - 1);
        } else if (event.keyCode == 13) {
          this.view.focus();
        } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
          let { diagnostic } = this.items[this.selectedIndex], keys2 = assignKeys(diagnostic.actions);
          for (let i2 = 0; i2 < keys2.length; i2++)
            if (keys2[i2].toUpperCase().charCodeAt(0) == event.keyCode) {
              let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
              if (found)
                diagnostic.actions[i2].apply(view2, found.from, found.to);
            }
        } else {
          return;
        }
        event.preventDefault();
      }, "onkeydown");
      let onclick = /* @__PURE__ */ __name((event) => {
        for (let i2 = 0; i2 < this.items.length; i2++) {
          if (this.items[i2].dom.contains(event.target))
            this.moveSelection(i2);
        }
      }, "onclick");
      this.list = crelt("ul", {
        tabIndex: 0,
        role: "listbox",
        "aria-label": this.view.state.phrase("Diagnostics"),
        onkeydown,
        onclick
      });
      this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
        type: "button",
        name: "close",
        "aria-label": this.view.state.phrase("close"),
        onclick: /* @__PURE__ */ __name(() => closeLintPanel(this.view), "onclick")
      }, "\xD7"));
      this.update();
    }
    get selectedIndex() {
      let selected = this.view.state.field(lintState).selected;
      if (!selected)
        return -1;
      for (let i2 = 0; i2 < this.items.length; i2++)
        if (this.items[i2].diagnostic == selected.diagnostic)
          return i2;
      return -1;
    }
    update() {
      let { diagnostics, selected } = this.view.state.field(lintState);
      let i2 = 0, needsSync = false, newSelectedItem = null;
      let seen = /* @__PURE__ */ new Set();
      diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
        for (let diagnostic of spec.diagnostics) {
          if (seen.has(diagnostic))
            continue;
          seen.add(diagnostic);
          let found = -1, item;
          for (let j2 = i2; j2 < this.items.length; j2++)
            if (this.items[j2].diagnostic == diagnostic) {
              found = j2;
              break;
            }
          if (found < 0) {
            item = new PanelItem(this.view, diagnostic);
            this.items.splice(i2, 0, item);
            needsSync = true;
          } else {
            item = this.items[found];
            if (found > i2) {
              this.items.splice(i2, found - i2);
              needsSync = true;
            }
          }
          if (selected && item.diagnostic == selected.diagnostic) {
            if (!item.dom.hasAttribute("aria-selected")) {
              item.dom.setAttribute("aria-selected", "true");
              newSelectedItem = item;
            }
          } else if (item.dom.hasAttribute("aria-selected")) {
            item.dom.removeAttribute("aria-selected");
          }
          i2++;
        }
      });
      while (i2 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: /* @__PURE__ */ __name(() => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }), "read"),
          write: /* @__PURE__ */ __name(({ sel, panel }) => {
            let scaleY = panel.height / this.list.offsetHeight;
            if (sel.top < panel.top)
              this.list.scrollTop -= (panel.top - sel.top) / scaleY;
            else if (sel.bottom > panel.bottom)
              this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
          }, "write")
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync)
        this.sync();
    }
    sync() {
      let domPos = this.list.firstChild;
      function rm2() {
        let prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      __name(rm2, "rm");
      for (let item of this.items) {
        if (item.dom.parentNode == this.list) {
          while (domPos != item.dom)
            rm2();
          domPos = item.dom.nextSibling;
        } else {
          this.list.insertBefore(item.dom, domPos);
        }
      }
      while (domPos)
        rm2();
    }
    moveSelection(selectedIndex) {
      if (this.selectedIndex < 0)
        return;
      let field = this.view.state.field(lintState);
      let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection)
        return;
      this.view.dispatch({
        selection: { anchor: selection.from, head: selection.to },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
    static open(view2) {
      return new _LintPanel(view2);
    }
  };
  function svg(content2, attrs = `viewBox="0 0 40 40"`) {
    return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content2)}</svg>')`;
  }
  __name(svg, "svg");
  function underline(color) {
    return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  __name(underline, "underline");
  var baseTheme3 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-diagnostic": {
      padding: "3px 6px 3px 8px",
      marginLeft: "-1px",
      display: "block",
      whiteSpace: "pre-wrap"
    },
    ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
    ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
    ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
    ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
    ".cm-diagnosticAction": {
      font: "inherit",
      border: "none",
      padding: "2px 4px",
      backgroundColor: "#444",
      color: "white",
      borderRadius: "3px",
      marginLeft: "8px",
      cursor: "pointer"
    },
    ".cm-diagnosticSource": {
      fontSize: "70%",
      opacity: 0.7
    },
    ".cm-lintRange": {
      backgroundPosition: "left bottom",
      backgroundRepeat: "repeat-x",
      paddingBottom: "0.7px"
    },
    ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
    ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
    ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
    ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
    ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
    ".cm-tooltip-lint": {
      padding: 0,
      margin: 0
    },
    ".cm-lintPoint": {
      position: "relative",
      "&:after": {
        content: '""',
        position: "absolute",
        bottom: 0,
        left: "-2px",
        borderLeft: "3px solid transparent",
        borderRight: "3px solid transparent",
        borderBottom: "4px solid #d11"
      }
    },
    ".cm-lintPoint-warning": {
      "&:after": { borderBottomColor: "orange" }
    },
    ".cm-lintPoint-info": {
      "&:after": { borderBottomColor: "#999" }
    },
    ".cm-lintPoint-hint": {
      "&:after": { borderBottomColor: "#66d" }
    },
    ".cm-panel.cm-panel-lint": {
      position: "relative",
      "& ul": {
        maxHeight: "100px",
        overflowY: "auto",
        "& [aria-selected]": {
          backgroundColor: "#ddd",
          "& u": { textDecoration: "underline" }
        },
        "&:focus [aria-selected]": {
          background_fallback: "#bdf",
          backgroundColor: "Highlight",
          color_fallback: "white",
          color: "HighlightText"
        },
        "& u": { textDecoration: "none" },
        padding: 0,
        margin: 0
      },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "2px",
        background: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      }
    }
  });
  function severityWeight(sev) {
    return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
  }
  __name(severityWeight, "severityWeight");
  function maxSeverity(diagnostics) {
    let sev = "hint", weight = 1;
    for (let d2 of diagnostics) {
      let w2 = severityWeight(d2.severity);
      if (w2 > weight) {
        weight = w2;
        sev = d2.severity;
      }
    }
    return sev;
  }
  __name(maxSeverity, "maxSeverity");
  var lintExtensions = [
    lintState,
    /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
      let { selected, panel } = state.field(lintState);
      return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
        activeMark.range(selected.from, selected.to)
      ]);
    }),
    /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
    baseTheme3
  ];

  // node_modules/@codemirror/search/dist/index.js
  var basicNormalize = typeof String.prototype.normalize == "function" ? (x2) => x2.normalize("NFKD") : (x2) => x2;
  var SearchCursor = class {
    static {
      __name(this, "SearchCursor");
    }
    /**
    Create a text cursor. The query is the search string, `from` to
    `to` provides the region to search.
    
    When `normalize` is given, it will be called, on both the query
    string and the content it is matched against, before comparing.
    You can, for example, create a case-insensitive search by
    passing `s => s.toLowerCase()`.
    
    Text is always normalized with
    [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
    (when supported).
    */
    constructor(text, query, from = 0, to = text.length, normalize, test) {
      this.test = test;
      this.value = { from: 0, to: 0 };
      this.done = false;
      this.matches = [];
      this.buffer = "";
      this.bufferPos = 0;
      this.iter = text.iterRange(from, to);
      this.bufferStart = from;
      this.normalize = normalize ? (x2) => normalize(basicNormalize(x2)) : basicNormalize;
      this.query = this.normalize(query);
    }
    peek() {
      if (this.bufferPos == this.buffer.length) {
        this.bufferStart += this.buffer.length;
        this.iter.next();
        if (this.iter.done)
          return -1;
        this.bufferPos = 0;
        this.buffer = this.iter.value;
      }
      return codePointAt2(this.buffer, this.bufferPos);
    }
    /**
    Look for the next match. Updates the iterator's
    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
    at least once before using the cursor.
    */
    next() {
      while (this.matches.length)
        this.matches.pop();
      return this.nextOverlapping();
    }
    /**
    The `next` method will ignore matches that partially overlap a
    previous match. This method behaves like `next`, but includes
    such matches.
    */
    nextOverlapping() {
      for (; ; ) {
        let next = this.peek();
        if (next < 0) {
          this.done = true;
          return this;
        }
        let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
        this.bufferPos += codePointSize2(next);
        let norm = this.normalize(str);
        if (norm.length)
          for (let i2 = 0, pos = start; ; i2++) {
            let code = norm.charCodeAt(i2);
            let match = this.match(code, pos, this.bufferPos + this.bufferStart);
            if (i2 == norm.length - 1) {
              if (match) {
                this.value = match;
                return this;
              }
              break;
            }
            if (pos == start && i2 < str.length && str.charCodeAt(i2) == code)
              pos++;
          }
      }
    }
    match(code, pos, end) {
      let match = null;
      for (let i2 = 0; i2 < this.matches.length; i2 += 2) {
        let index = this.matches[i2], keep = false;
        if (this.query.charCodeAt(index) == code) {
          if (index == this.query.length - 1) {
            match = { from: this.matches[i2 + 1], to: end };
          } else {
            this.matches[i2]++;
            keep = true;
          }
        }
        if (!keep) {
          this.matches.splice(i2, 2);
          i2 -= 2;
        }
      }
      if (this.query.charCodeAt(0) == code) {
        if (this.query.length == 1)
          match = { from: pos, to: end };
        else
          this.matches.push(1, pos);
      }
      if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
        match = null;
      return match;
    }
  };
  if (typeof Symbol != "undefined")
    SearchCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  var empty = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") };
  var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
  var RegExpCursor = class {
    static {
      __name(this, "RegExpCursor");
    }
    /**
    Create a cursor that will search the given range in the given
    document. `query` should be the raw pattern (as you'd pass it to
    `new RegExp`).
    */
    constructor(text, query, options, from = 0, to = text.length) {
      this.text = text;
      this.to = to;
      this.curLine = "";
      this.done = false;
      this.value = empty;
      if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
        return new MultilineRegExpCursor(text, query, options, from, to);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.iter = text.iter();
      let startLine = text.lineAt(from);
      this.curLineStart = startLine.from;
      this.matchPos = toCharEnd(text, from);
      this.getLine(this.curLineStart);
    }
    getLine(skip) {
      this.iter.next(skip);
      if (this.iter.lineBreak) {
        this.curLine = "";
      } else {
        this.curLine = this.iter.value;
        if (this.curLineStart + this.curLine.length > this.to)
          this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
        this.iter.next();
      }
    }
    nextLine() {
      this.curLineStart = this.curLineStart + this.curLine.length + 1;
      if (this.curLineStart > this.to)
        this.curLine = "";
      else
        this.getLine(0);
    }
    /**
    Move to the next match, if there is one.
    */
    next() {
      for (let off = this.matchPos - this.curLineStart; ; ) {
        this.re.lastIndex = off;
        let match = this.matchPos <= this.to && this.re.exec(this.curLine);
        if (match) {
          let from = this.curLineStart + match.index, to = from + match[0].length;
          this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
          if (from == this.curLineStart + this.curLine.length)
            this.nextLine();
          if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
            this.value = { from, to, match };
            return this;
          }
          off = this.matchPos - this.curLineStart;
        } else if (this.curLineStart + this.curLine.length < this.to) {
          this.nextLine();
          off = 0;
        } else {
          this.done = true;
          return this;
        }
      }
    }
  };
  var flattened = /* @__PURE__ */ new WeakMap();
  var FlattenedDoc = class _FlattenedDoc {
    static {
      __name(this, "FlattenedDoc");
    }
    constructor(from, text) {
      this.from = from;
      this.text = text;
    }
    get to() {
      return this.from + this.text.length;
    }
    static get(doc2, from, to) {
      let cached = flattened.get(doc2);
      if (!cached || cached.from >= to || cached.to <= from) {
        let flat = new _FlattenedDoc(from, doc2.sliceString(from, to));
        flattened.set(doc2, flat);
        return flat;
      }
      if (cached.from == from && cached.to == to)
        return cached;
      let { text, from: cachedFrom } = cached;
      if (cachedFrom > from) {
        text = doc2.sliceString(from, cachedFrom) + text;
        cachedFrom = from;
      }
      if (cached.to < to)
        text += doc2.sliceString(cached.to, to);
      flattened.set(doc2, new _FlattenedDoc(cachedFrom, text));
      return new _FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
    }
  };
  var MultilineRegExpCursor = class {
    static {
      __name(this, "MultilineRegExpCursor");
    }
    constructor(text, query, options, from, to) {
      this.text = text;
      this.to = to;
      this.done = false;
      this.value = empty;
      this.matchPos = toCharEnd(text, from);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.flat = FlattenedDoc.get(text, from, this.chunkEnd(
        from + 5e3
        /* Chunk.Base */
      ));
    }
    chunkEnd(pos) {
      return pos >= this.to ? this.to : this.text.lineAt(pos).to;
    }
    next() {
      for (; ; ) {
        let off = this.re.lastIndex = this.matchPos - this.flat.from;
        let match = this.re.exec(this.flat.text);
        if (match && !match[0] && match.index == off) {
          this.re.lastIndex = off + 1;
          match = this.re.exec(this.flat.text);
        }
        if (match) {
          let from = this.flat.from + match.index, to = from + match[0].length;
          if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {
            this.value = { from, to, match };
            this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
            return this;
          }
        }
        if (this.flat.to == this.to) {
          this.done = true;
          return this;
        }
        this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
      }
    }
  };
  if (typeof Symbol != "undefined") {
    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  }
  function validRegExp(source) {
    try {
      new RegExp(source, baseFlags);
      return true;
    } catch (_a2) {
      return false;
    }
  }
  __name(validRegExp, "validRegExp");
  function toCharEnd(text, pos) {
    if (pos >= text.length)
      return pos;
    let line = text.lineAt(pos), next;
    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 56320 && next < 57344)
      pos++;
    return pos;
  }
  __name(toCharEnd, "toCharEnd");
  function createLineDialog(view2) {
    let line = String(view2.state.doc.lineAt(view2.state.selection.main.head).number);
    let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
    let dom = crelt("form", {
      class: "cm-gotoLine",
      onkeydown: /* @__PURE__ */ __name((event) => {
        if (event.keyCode == 27) {
          event.preventDefault();
          view2.dispatch({ effects: dialogEffect.of(false) });
          view2.focus();
        } else if (event.keyCode == 13) {
          event.preventDefault();
          go();
        }
      }, "onkeydown"),
      onsubmit: /* @__PURE__ */ __name((event) => {
        event.preventDefault();
        go();
      }, "onsubmit")
    }, crelt("label", view2.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view2.state.phrase("go")), crelt("button", {
      name: "close",
      onclick: /* @__PURE__ */ __name(() => {
        view2.dispatch({ effects: dialogEffect.of(false) });
        view2.focus();
      }, "onclick"),
      "aria-label": view2.state.phrase("close"),
      type: "button"
    }, ["\xD7"]));
    function go() {
      let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
      if (!match)
        return;
      let { state } = view2, startLine = state.doc.lineAt(state.selection.main.head);
      let [, sign, ln2, cl, percent] = match;
      let col = cl ? +cl.slice(1) : 0;
      let line2 = ln2 ? +ln2 : startLine.number;
      if (ln2 && percent) {
        let pc = line2 / 100;
        if (sign)
          pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
        line2 = Math.round(state.doc.lines * pc);
      } else if (ln2 && sign) {
        line2 = line2 * (sign == "-" ? -1 : 1) + startLine.number;
      }
      let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line2)));
      let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
      view2.dispatch({
        effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: "center" })],
        selection
      });
      view2.focus();
    }
    __name(go, "go");
    return { dom };
  }
  __name(createLineDialog, "createLineDialog");
  var dialogEffect = /* @__PURE__ */ StateEffect.define();
  var dialogField = /* @__PURE__ */ StateField.define({
    create() {
      return true;
    },
    update(value, tr) {
      for (let e2 of tr.effects)
        if (e2.is(dialogEffect))
          value = e2.value;
      return value;
    },
    provide: /* @__PURE__ */ __name((f2) => showPanel.from(f2, (val) => val ? createLineDialog : null), "provide")
  });
  var gotoLine = /* @__PURE__ */ __name((view2) => {
    let panel = getPanel(view2, createLineDialog);
    if (!panel) {
      let effects = [dialogEffect.of(true)];
      if (view2.state.field(dialogField, false) == null)
        effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
      view2.dispatch({ effects });
      panel = getPanel(view2, createLineDialog);
    }
    if (panel)
      panel.dom.querySelector("input").select();
    return true;
  }, "gotoLine");
  var baseTheme$13 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-panel.cm-gotoLine": {
      padding: "2px 6px 4px",
      position: "relative",
      "& label": { fontSize: "80%" },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        bottom: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: "0"
      }
    }
  });
  var defaultHighlightOptions = {
    highlightWordAroundCursor: false,
    minSelectionLength: 1,
    maxMatches: 100,
    wholeWords: false
  };
  var highlightConfig = /* @__PURE__ */ Facet.define({
    combine(options) {
      return combineConfig(options, defaultHighlightOptions, {
        highlightWordAroundCursor: /* @__PURE__ */ __name((a2, b2) => a2 || b2, "highlightWordAroundCursor"),
        minSelectionLength: Math.min,
        maxMatches: Math.min
      });
    }
  });
  function highlightSelectionMatches(options) {
    let ext = [defaultTheme, matchHighlighter];
    if (options)
      ext.push(highlightConfig.of(options));
    return ext;
  }
  __name(highlightSelectionMatches, "highlightSelectionMatches");
  var matchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch" });
  var mainMatchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
  function insideWordBoundaries(check, state, from, to) {
    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
  }
  __name(insideWordBoundaries, "insideWordBoundaries");
  function insideWord(check, state, from, to) {
    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
  }
  __name(insideWord, "insideWord");
  var matchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.decorations = this.getDeco(view2);
    }
    update(update) {
      if (update.selectionSet || update.docChanged || update.viewportChanged)
        this.decorations = this.getDeco(update.view);
    }
    getDeco(view2) {
      let conf = view2.state.facet(highlightConfig);
      let { state } = view2, sel = state.selection;
      if (sel.ranges.length > 1)
        return Decoration.none;
      let range = sel.main, query, check = null;
      if (range.empty) {
        if (!conf.highlightWordAroundCursor)
          return Decoration.none;
        let word = state.wordAt(range.head);
        if (!word)
          return Decoration.none;
        check = state.charCategorizer(range.head);
        query = state.sliceDoc(word.from, word.to);
      } else {
        let len = range.to - range.from;
        if (len < conf.minSelectionLength || len > 200)
          return Decoration.none;
        if (conf.wholeWords) {
          query = state.sliceDoc(range.from, range.to);
          check = state.charCategorizer(range.head);
          if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
            return Decoration.none;
        } else {
          query = state.sliceDoc(range.from, range.to);
          if (!query)
            return Decoration.none;
        }
      }
      let deco = [];
      for (let part of view2.visibleRanges) {
        let cursor = new SearchCursor(state.doc, query, part.from, part.to);
        while (!cursor.next().done) {
          let { from, to } = cursor.value;
          if (!check || insideWordBoundaries(check, state, from, to)) {
            if (range.empty && from <= range.from && to >= range.to)
              deco.push(mainMatchDeco.range(from, to));
            else if (from >= range.to || to <= range.from)
              deco.push(matchDeco.range(from, to));
            if (deco.length > conf.maxMatches)
              return Decoration.none;
          }
        }
      }
      return Decoration.set(deco);
    }
  }, {
    decorations: /* @__PURE__ */ __name((v2) => v2.decorations, "decorations")
  });
  var defaultTheme = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
    ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
  });
  var selectWord = /* @__PURE__ */ __name(({ state, dispatch }) => {
    let { selection } = state;
    let newSel = EditorSelection.create(selection.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
    if (newSel.eq(selection))
      return false;
    dispatch(state.update({ selection: newSel }));
    return true;
  }, "selectWord");
  function findNextOccurrence(state, query) {
    let { main, ranges } = state.selection;
    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
      cursor.next();
      if (cursor.done) {
        if (cycled)
          return null;
        cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
        cycled = true;
      } else {
        if (cycled && ranges.some((r2) => r2.from == cursor.value.from))
          continue;
        if (fullWord) {
          let word2 = state.wordAt(cursor.value.from);
          if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
            continue;
        }
        return cursor.value;
      }
    }
  }
  __name(findNextOccurrence, "findNextOccurrence");
  var selectNextOccurrence = /* @__PURE__ */ __name(({ state, dispatch }) => {
    let { ranges } = state.selection;
    if (ranges.some((sel) => sel.from === sel.to))
      return selectWord({ state, dispatch });
    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
    if (state.selection.ranges.some((r2) => state.sliceDoc(r2.from, r2.to) != searchedText))
      return false;
    let range = findNextOccurrence(state, searchedText);
    if (!range)
      return false;
    dispatch(state.update({
      selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
      effects: EditorView.scrollIntoView(range.to)
    }));
    return true;
  }, "selectNextOccurrence");
  var searchConfigFacet = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        top: false,
        caseSensitive: false,
        literal: false,
        regexp: false,
        wholeWord: false,
        createPanel: /* @__PURE__ */ __name((view2) => new SearchPanel(view2), "createPanel"),
        scrollToMatch: /* @__PURE__ */ __name((range) => EditorView.scrollIntoView(range), "scrollToMatch")
      });
    }
  });
  function search(config15) {
    return config15 ? [searchConfigFacet.of(config15), searchExtensions] : searchExtensions;
  }
  __name(search, "search");
  var SearchQuery = class {
    static {
      __name(this, "SearchQuery");
    }
    /**
    Create a query object.
    */
    constructor(config15) {
      this.search = config15.search;
      this.caseSensitive = !!config15.caseSensitive;
      this.literal = !!config15.literal;
      this.regexp = !!config15.regexp;
      this.replace = config15.replace || "";
      this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
      this.unquoted = this.unquote(this.search);
      this.wholeWord = !!config15.wholeWord;
    }
    /**
    @internal
    */
    unquote(text) {
      return this.literal ? text : text.replace(/\\([nrt\\])/g, (_2, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "	" : "\\");
    }
    /**
    Compare this query to another query.
    */
    eq(other) {
      return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
    }
    /**
    @internal
    */
    create() {
      return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
    }
    /**
    Get a search cursor for this query, searching through the given
    range in the given state.
    */
    getCursor(state, from = 0, to) {
      let st2 = state.doc ? state : EditorState.create({ doc: state });
      if (to == null)
        to = st2.doc.length;
      return this.regexp ? regexpCursor(this, st2, from, to) : stringCursor(this, st2, from, to);
    }
  };
  var QueryType2 = class {
    static {
      __name(this, "QueryType");
    }
    constructor(spec) {
      this.spec = spec;
    }
  };
  function stringCursor(spec, state, from, to) {
    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? void 0 : (x2) => x2.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
  }
  __name(stringCursor, "stringCursor");
  function stringWordTest(doc2, categorizer) {
    return (from, to, buf, bufPos) => {
      if (bufPos > from || bufPos + buf.length < to) {
        bufPos = Math.max(0, from - 2);
        buf = doc2.sliceString(bufPos, Math.min(doc2.length, to + 2));
      }
      return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
    };
  }
  __name(stringWordTest, "stringWordTest");
  var StringQuery = class extends QueryType2 {
    static {
      __name(this, "StringQuery");
    }
    constructor(spec) {
      super(spec);
    }
    nextMatch(state, curFrom, curTo) {
      let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
      if (cursor.done) {
        let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
        cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();
      }
      return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;
    }
    // Searching in reverse is, rather than implementing an inverted search
    // cursor, done by scanning chunk after chunk forward.
    prevMatchInRange(state, from, to) {
      for (let pos = to; ; ) {
        let start = Math.max(from, pos - 1e4 - this.spec.unquoted.length);
        let cursor = stringCursor(this.spec, state, start, pos), range = null;
        while (!cursor.nextOverlapping().done)
          range = cursor.value;
        if (range)
          return range;
        if (start == from)
          return null;
        pos -= 1e4;
      }
    }
    prevMatch(state, curFrom, curTo) {
      let found = this.prevMatchInRange(state, 0, curFrom);
      if (!found)
        found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
      return found && (found.from != curFrom || found.to != curTo) ? found : null;
    }
    getReplacement(_result) {
      return this.spec.unquote(this.spec.replace);
    }
    matchAll(state, limit) {
      let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit)
          return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
    highlight(state, from, to, add2) {
      let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
      while (!cursor.next().done)
        add2(cursor.value.from, cursor.value.to);
    }
  };
  function regexpCursor(spec, state, from, to) {
    return new RegExpCursor(state.doc, spec.search, {
      ignoreCase: !spec.caseSensitive,
      test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
    }, from, to);
  }
  __name(regexpCursor, "regexpCursor");
  function charBefore(str, index) {
    return str.slice(findClusterBreak2(str, index, false), index);
  }
  __name(charBefore, "charBefore");
  function charAfter(str, index) {
    return str.slice(index, findClusterBreak2(str, index));
  }
  __name(charAfter, "charAfter");
  function regexpWordTest(categorizer) {
    return (_from, _to, match) => !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
  }
  __name(regexpWordTest, "regexpWordTest");
  var RegExpQuery = class extends QueryType2 {
    static {
      __name(this, "RegExpQuery");
    }
    nextMatch(state, curFrom, curTo) {
      let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
      if (cursor.done)
        cursor = regexpCursor(this.spec, state, 0, curFrom).next();
      return cursor.done ? null : cursor.value;
    }
    prevMatchInRange(state, from, to) {
      for (let size = 1; ; size++) {
        let start = Math.max(
          from,
          to - size * 1e4
          /* FindPrev.ChunkSize */
        );
        let cursor = regexpCursor(this.spec, state, start, to), range = null;
        while (!cursor.next().done)
          range = cursor.value;
        if (range && (start == from || range.from > start + 10))
          return range;
        if (start == from)
          return null;
      }
    }
    prevMatch(state, curFrom, curTo) {
      return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
    }
    getReplacement(result) {
      return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (m2, i2) => {
        if (i2 == "&")
          return result.match[0];
        if (i2 == "$")
          return "$";
        for (let l2 = i2.length; l2 > 0; l2--) {
          let n2 = +i2.slice(0, l2);
          if (n2 > 0 && n2 < result.match.length)
            return result.match[n2] + i2.slice(l2);
        }
        return m2;
      });
    }
    matchAll(state, limit) {
      let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit)
          return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
    highlight(state, from, to, add2) {
      let cursor = regexpCursor(this.spec, state, Math.max(
        0,
        from - 250
        /* RegExp.HighlightMargin */
      ), Math.min(to + 250, state.doc.length));
      while (!cursor.next().done)
        add2(cursor.value.from, cursor.value.to);
    }
  };
  var setSearchQuery = /* @__PURE__ */ StateEffect.define();
  var togglePanel2 = /* @__PURE__ */ StateEffect.define();
  var searchState = /* @__PURE__ */ StateField.define({
    create(state) {
      return new SearchState(defaultQuery(state).create(), null);
    },
    update(value, tr) {
      for (let effect of tr.effects) {
        if (effect.is(setSearchQuery))
          value = new SearchState(effect.value.create(), value.panel);
        else if (effect.is(togglePanel2))
          value = new SearchState(value.query, effect.value ? createSearchPanel : null);
      }
      return value;
    },
    provide: /* @__PURE__ */ __name((f2) => showPanel.from(f2, (val) => val.panel), "provide")
  });
  var SearchState = class {
    static {
      __name(this, "SearchState");
    }
    constructor(query, panel) {
      this.query = query;
      this.panel = panel;
    }
  };
  var matchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
  var selectedMatchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
  var searchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.view = view2;
      this.decorations = this.highlight(view2.state.field(searchState));
    }
    update(update) {
      let state = update.state.field(searchState);
      if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
        this.decorations = this.highlight(state);
    }
    highlight({ query, panel }) {
      if (!panel || !query.spec.valid)
        return Decoration.none;
      let { view: view2 } = this;
      let builder = new RangeSetBuilder();
      for (let i2 = 0, ranges = view2.visibleRanges, l2 = ranges.length; i2 < l2; i2++) {
        let { from, to } = ranges[i2];
        while (i2 < l2 - 1 && to > ranges[i2 + 1].from - 2 * 250)
          to = ranges[++i2].to;
        query.highlight(view2.state, from, to, (from2, to2) => {
          let selected = view2.state.selection.ranges.some((r2) => r2.from == from2 && r2.to == to2);
          builder.add(from2, to2, selected ? selectedMatchMark : matchMark);
        });
      }
      return builder.finish();
    }
  }, {
    decorations: /* @__PURE__ */ __name((v2) => v2.decorations, "decorations")
  });
  function searchCommand(f2) {
    return (view2) => {
      let state = view2.state.field(searchState, false);
      return state && state.query.spec.valid ? f2(view2, state) : openSearchPanel(view2);
    };
  }
  __name(searchCommand, "searchCommand");
  var findNext = /* @__PURE__ */ searchCommand((view2, { query }) => {
    let { to } = view2.state.selection.main;
    let next = query.nextMatch(view2.state, to, to);
    if (!next)
      return false;
    let selection = EditorSelection.single(next.from, next.to);
    let config15 = view2.state.facet(searchConfigFacet);
    view2.dispatch({
      selection,
      effects: [announceMatch(view2, next), config15.scrollToMatch(selection.main, view2)],
      userEvent: "select.search"
    });
    selectSearchInput(view2);
    return true;
  });
  var findPrevious = /* @__PURE__ */ searchCommand((view2, { query }) => {
    let { state } = view2, { from } = state.selection.main;
    let prev = query.prevMatch(state, from, from);
    if (!prev)
      return false;
    let selection = EditorSelection.single(prev.from, prev.to);
    let config15 = view2.state.facet(searchConfigFacet);
    view2.dispatch({
      selection,
      effects: [announceMatch(view2, prev), config15.scrollToMatch(selection.main, view2)],
      userEvent: "select.search"
    });
    selectSearchInput(view2);
    return true;
  });
  var selectMatches = /* @__PURE__ */ searchCommand((view2, { query }) => {
    let ranges = query.matchAll(view2.state, 1e3);
    if (!ranges || !ranges.length)
      return false;
    view2.dispatch({
      selection: EditorSelection.create(ranges.map((r2) => EditorSelection.range(r2.from, r2.to))),
      userEvent: "select.search.matches"
    });
    return true;
  });
  var selectSelectionMatches = /* @__PURE__ */ __name(({ state, dispatch }) => {
    let sel = state.selection;
    if (sel.ranges.length > 1 || sel.main.empty)
      return false;
    let { from, to } = sel.main;
    let ranges = [], main = 0;
    for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur2.next().done; ) {
      if (ranges.length > 1e3)
        return false;
      if (cur2.value.from == from)
        main = ranges.length;
      ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
    }
    dispatch(state.update({
      selection: EditorSelection.create(ranges, main),
      userEvent: "select.search.matches"
    }));
    return true;
  }, "selectSelectionMatches");
  var replaceNext = /* @__PURE__ */ searchCommand((view2, { query }) => {
    let { state } = view2, { from, to } = state.selection.main;
    if (state.readOnly)
      return false;
    let match = query.nextMatch(state, from, from);
    if (!match)
      return false;
    let next = match;
    let changes = [], selection, replacement;
    let effects = [];
    if (next.from == from && next.to == to) {
      replacement = state.toText(query.getReplacement(next));
      changes.push({ from: next.from, to: next.to, insert: replacement });
      next = query.nextMatch(state, next.from, next.to);
      effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
    }
    let changeSet = view2.state.changes(changes);
    if (next) {
      selection = EditorSelection.single(next.from, next.to).map(changeSet);
      effects.push(announceMatch(view2, next));
      effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view2));
    }
    view2.dispatch({
      changes: changeSet,
      selection,
      effects,
      userEvent: "input.replace"
    });
    return true;
  });
  var replaceAll = /* @__PURE__ */ searchCommand((view2, { query }) => {
    if (view2.state.readOnly)
      return false;
    let changes = query.matchAll(view2.state, 1e9).map((match) => {
      let { from, to } = match;
      return { from, to, insert: query.getReplacement(match) };
    });
    if (!changes.length)
      return false;
    let announceText = view2.state.phrase("replaced $ matches", changes.length) + ".";
    view2.dispatch({
      changes,
      effects: EditorView.announce.of(announceText),
      userEvent: "input.replace.all"
    });
    return true;
  });
  function createSearchPanel(view2) {
    return view2.state.facet(searchConfigFacet).createPanel(view2);
  }
  __name(createSearchPanel, "createSearchPanel");
  function defaultQuery(state, fallback) {
    var _a2, _b, _c, _d, _e2;
    let sel = state.selection.main;
    let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
    if (fallback && !selText)
      return fallback;
    let config15 = state.facet(searchConfigFacet);
    return new SearchQuery({
      search: ((_a2 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a2 !== void 0 ? _a2 : config15.literal) ? selText : selText.replace(/\n/g, "\\n"),
      caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config15.caseSensitive,
      literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config15.literal,
      regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config15.regexp,
      wholeWord: (_e2 = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e2 !== void 0 ? _e2 : config15.wholeWord
    });
  }
  __name(defaultQuery, "defaultQuery");
  function getSearchInput(view2) {
    let panel = getPanel(view2, createSearchPanel);
    return panel && panel.dom.querySelector("[main-field]");
  }
  __name(getSearchInput, "getSearchInput");
  function selectSearchInput(view2) {
    let input = getSearchInput(view2);
    if (input && input == view2.root.activeElement)
      input.select();
  }
  __name(selectSearchInput, "selectSearchInput");
  var openSearchPanel = /* @__PURE__ */ __name((view2) => {
    let state = view2.state.field(searchState, false);
    if (state && state.panel) {
      let searchInput = getSearchInput(view2);
      if (searchInput && searchInput != view2.root.activeElement) {
        let query = defaultQuery(view2.state, state.query.spec);
        if (query.valid)
          view2.dispatch({ effects: setSearchQuery.of(query) });
        searchInput.focus();
        searchInput.select();
      }
    } else {
      view2.dispatch({ effects: [
        togglePanel2.of(true),
        state ? setSearchQuery.of(defaultQuery(view2.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
      ] });
    }
    return true;
  }, "openSearchPanel");
  var closeSearchPanel = /* @__PURE__ */ __name((view2) => {
    let state = view2.state.field(searchState, false);
    if (!state || !state.panel)
      return false;
    let panel = getPanel(view2, createSearchPanel);
    if (panel && panel.dom.contains(view2.root.activeElement))
      view2.focus();
    view2.dispatch({ effects: togglePanel2.of(false) });
    return true;
  }, "closeSearchPanel");
  var searchKeymap = [
    { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
    { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
    { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
    { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
    { key: "Mod-Shift-l", run: selectSelectionMatches },
    { key: "Mod-Alt-g", run: gotoLine },
    { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
  ];
  var SearchPanel = class {
    static {
      __name(this, "SearchPanel");
    }
    constructor(view2) {
      this.view = view2;
      let query = this.query = view2.state.field(searchState).query.spec;
      this.commit = this.commit.bind(this);
      this.searchField = crelt("input", {
        value: query.search,
        placeholder: phrase(view2, "Find"),
        "aria-label": phrase(view2, "Find"),
        class: "cm-textfield",
        name: "search",
        form: "",
        "main-field": "true",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.replaceField = crelt("input", {
        value: query.replace,
        placeholder: phrase(view2, "Replace"),
        "aria-label": phrase(view2, "Replace"),
        class: "cm-textfield",
        name: "replace",
        form: "",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.caseField = crelt("input", {
        type: "checkbox",
        name: "case",
        form: "",
        checked: query.caseSensitive,
        onchange: this.commit
      });
      this.reField = crelt("input", {
        type: "checkbox",
        name: "re",
        form: "",
        checked: query.regexp,
        onchange: this.commit
      });
      this.wordField = crelt("input", {
        type: "checkbox",
        name: "word",
        form: "",
        checked: query.wholeWord,
        onchange: this.commit
      });
      function button(name2, onclick, content2) {
        return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content2);
      }
      __name(button, "button");
      this.dom = crelt("div", { onkeydown: /* @__PURE__ */ __name((e2) => this.keydown(e2), "onkeydown"), class: "cm-search" }, [
        this.searchField,
        button("next", () => findNext(view2), [phrase(view2, "next")]),
        button("prev", () => findPrevious(view2), [phrase(view2, "previous")]),
        button("select", () => selectMatches(view2), [phrase(view2, "all")]),
        crelt("label", null, [this.caseField, phrase(view2, "match case")]),
        crelt("label", null, [this.reField, phrase(view2, "regexp")]),
        crelt("label", null, [this.wordField, phrase(view2, "by word")]),
        ...view2.state.readOnly ? [] : [
          crelt("br"),
          this.replaceField,
          button("replace", () => replaceNext(view2), [phrase(view2, "replace")]),
          button("replaceAll", () => replaceAll(view2), [phrase(view2, "replace all")])
        ],
        crelt("button", {
          name: "close",
          onclick: /* @__PURE__ */ __name(() => closeSearchPanel(view2), "onclick"),
          "aria-label": phrase(view2, "close"),
          type: "button"
        }, ["\xD7"])
      ]);
    }
    commit() {
      let query = new SearchQuery({
        search: this.searchField.value,
        caseSensitive: this.caseField.checked,
        regexp: this.reField.checked,
        wholeWord: this.wordField.checked,
        replace: this.replaceField.value
      });
      if (!query.eq(this.query)) {
        this.query = query;
        this.view.dispatch({ effects: setSearchQuery.of(query) });
      }
    }
    keydown(e2) {
      if (runScopeHandlers(this.view, e2, "search-panel")) {
        e2.preventDefault();
      } else if (e2.keyCode == 13 && e2.target == this.searchField) {
        e2.preventDefault();
        (e2.shiftKey ? findPrevious : findNext)(this.view);
      } else if (e2.keyCode == 13 && e2.target == this.replaceField) {
        e2.preventDefault();
        replaceNext(this.view);
      }
    }
    update(update) {
      for (let tr of update.transactions)
        for (let effect of tr.effects) {
          if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
            this.setQuery(effect.value);
        }
    }
    setQuery(query) {
      this.query = query;
      this.searchField.value = query.search;
      this.replaceField.value = query.replace;
      this.caseField.checked = query.caseSensitive;
      this.reField.checked = query.regexp;
      this.wordField.checked = query.wholeWord;
    }
    mount() {
      this.searchField.select();
    }
    get pos() {
      return 80;
    }
    get top() {
      return this.view.state.facet(searchConfigFacet).top;
    }
  };
  function phrase(view2, phrase2) {
    return view2.state.phrase(phrase2);
  }
  __name(phrase, "phrase");
  var AnnounceMargin = 30;
  var Break = /[\s\.,:;?!]/;
  function announceMatch(view2, { from, to }) {
    let line = view2.state.doc.lineAt(from), lineEnd = view2.state.doc.lineAt(to).to;
    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
    let text = view2.state.sliceDoc(start, end);
    if (start != line.from) {
      for (let i2 = 0; i2 < AnnounceMargin; i2++)
        if (!Break.test(text[i2 + 1]) && Break.test(text[i2])) {
          text = text.slice(i2);
          break;
        }
    }
    if (end != lineEnd) {
      for (let i2 = text.length - 1; i2 > text.length - AnnounceMargin; i2--)
        if (!Break.test(text[i2 - 1]) && Break.test(text[i2])) {
          text = text.slice(0, i2);
          break;
        }
    }
    return EditorView.announce.of(`${view2.state.phrase("current match")}. ${text} ${view2.state.phrase("on line")} ${line.number}.`);
  }
  __name(announceMatch, "announceMatch");
  var baseTheme4 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-panel.cm-search": {
      padding: "2px 6px 4px",
      position: "relative",
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      },
      "& input, & button, & label": {
        margin: ".2em .6em .2em 0"
      },
      "& input[type=checkbox]": {
        marginRight: ".2em"
      },
      "& label": {
        fontSize: "80%",
        whiteSpace: "pre"
      }
    },
    "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
    "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
    "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
    "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
  });
  var searchExtensions = [
    searchState,
    /* @__PURE__ */ Prec.low(searchHighlighter),
    baseTheme4
  ];

  // node_modules/@codemirror/autocomplete/dist/index.js
  var CompletionContext = class {
    static {
      __name(this, "CompletionContext");
    }
    /**
    Create a new completion context. (Mostly useful for testing
    completion sources—in the editor, the extension will create
    these for you.)
    */
    constructor(state, pos, explicit, view2) {
      this.state = state;
      this.pos = pos;
      this.explicit = explicit;
      this.view = view2;
      this.abortListeners = [];
      this.abortOnDocChange = false;
    }
    /**
    Get the extent, content, and (if there is a token) type of the
    token before `this.pos`.
    */
    tokenBefore(types2) {
      let token = syntaxTree(this.state).resolveInner(this.pos, -1);
      while (token && types2.indexOf(token.name) < 0)
        token = token.parent;
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
    matchBefore(expr) {
      let line = this.state.doc.lineAt(this.pos);
      let start = Math.max(line.from, this.pos - 250);
      let str = line.text.slice(start - line.from, this.pos - line.from);
      let found = str.search(ensureAnchor(expr, false));
      return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
    get aborted() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    
    By default, running queries will not be aborted for regular
    typing or backspacing, on the assumption that they are likely to
    return a result with a
    [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
    allows the result to be used after all. Passing `onDocChange:
    true` will cause this query to be aborted for any document
    change.
    */
    addEventListener(type, listener, options) {
      if (type == "abort" && this.abortListeners) {
        this.abortListeners.push(listener);
        if (options && options.onDocChange)
          this.abortOnDocChange = true;
      }
    }
  };
  function toSet(chars) {
    let flat = Object.keys(chars).join("");
    let words = /\w/.test(flat);
    if (words)
      flat = flat.replace(/\w/g, "");
    return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  __name(toSet, "toSet");
  function prefixMatch(options) {
    let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
    for (let { label } of options) {
      first[label[0]] = true;
      for (let i2 = 1; i2 < label.length; i2++)
        rest[label[i2]] = true;
    }
    let source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  __name(prefixMatch, "prefixMatch");
  function completeFromList(list) {
    let options = list.map((o2) => typeof o2 == "string" ? { label: o2 } : o2);
    let [validFor, match] = options.every((o2) => /^\w+$/.test(o2.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
    return (context) => {
      let token = context.matchBefore(match);
      return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
    };
  }
  __name(completeFromList, "completeFromList");
  var Option = class {
    static {
      __name(this, "Option");
    }
    constructor(completion, source, match, score2) {
      this.completion = completion;
      this.source = source;
      this.match = match;
      this.score = score2;
    }
  };
  function cur(state) {
    return state.selection.main.from;
  }
  __name(cur, "cur");
  function ensureAnchor(expr, start) {
    var _a2;
    let { source } = expr;
    let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
    if (!addStart && !addEnd)
      return expr;
    return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
  }
  __name(ensureAnchor, "ensureAnchor");
  var pickedCompletion = /* @__PURE__ */ Annotation.define();
  function insertCompletionText(state, text, from, to) {
    let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
    return Object.assign(Object.assign({}, state.changeByRange((range) => {
      if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
        return { range };
      let lines = state.toText(text);
      return {
        changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
        range: EditorSelection.cursor(range.from + fromOff + lines.length)
      };
    })), { scrollIntoView: true, userEvent: "input.complete" });
  }
  __name(insertCompletionText, "insertCompletionText");
  var SourceCache = /* @__PURE__ */ new WeakMap();
  function asSource(source) {
    if (!Array.isArray(source))
      return source;
    let known = SourceCache.get(source);
    if (!known)
      SourceCache.set(source, known = completeFromList(source));
    return known;
  }
  __name(asSource, "asSource");
  var startCompletionEffect = /* @__PURE__ */ StateEffect.define();
  var closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
  var FuzzyMatcher = class {
    static {
      __name(this, "FuzzyMatcher");
    }
    constructor(pattern) {
      this.pattern = pattern;
      this.chars = [];
      this.folded = [];
      this.any = [];
      this.precise = [];
      this.byWord = [];
      this.score = 0;
      this.matched = [];
      for (let p2 = 0; p2 < pattern.length; ) {
        let char = codePointAt2(pattern, p2), size = codePointSize2(char);
        this.chars.push(char);
        let part = pattern.slice(p2, p2 + size), upper = part.toUpperCase();
        this.folded.push(codePointAt2(upper == part ? part.toLowerCase() : upper, 0));
        p2 += size;
      }
      this.astral = pattern.length != this.chars.length;
    }
    ret(score2, matched) {
      this.score = score2;
      this.matched = matched;
      return this;
    }
    // Matches a given word (completion) against the pattern (input).
    // Will return a boolean indicating whether there was a match and,
    // on success, set `this.score` to the score, `this.matched` to an
    // array of `from, to` pairs indicating the matched parts of `word`.
    //
    // The score is a number that is more negative the worse the match
    // is. See `Penalty` above.
    match(word) {
      if (this.pattern.length == 0)
        return this.ret(-100, []);
      if (word.length < this.pattern.length)
        return null;
      let { chars, folded, any, precise, byWord } = this;
      if (chars.length == 1) {
        let first = codePointAt2(word, 0), firstSize = codePointSize2(first);
        let score2 = firstSize == word.length ? 0 : -100;
        if (first == chars[0]) ;
        else if (first == folded[0])
          score2 += -200;
        else
          return null;
        return this.ret(score2, [0, firstSize]);
      }
      let direct = word.indexOf(this.pattern);
      if (direct == 0)
        return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
      let len = chars.length, anyTo = 0;
      if (direct < 0) {
        for (let i2 = 0, e2 = Math.min(word.length, 200); i2 < e2 && anyTo < len; ) {
          let next = codePointAt2(word, i2);
          if (next == chars[anyTo] || next == folded[anyTo])
            any[anyTo++] = i2;
          i2 += codePointSize2(next);
        }
        if (anyTo < len)
          return null;
      }
      let preciseTo = 0;
      let byWordTo = 0, byWordFolded = false;
      let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
      let hasLower = /[a-z]/.test(word), wordAdjacent = true;
      for (let i2 = 0, e2 = Math.min(word.length, 200), prevType = 0; i2 < e2 && byWordTo < len; ) {
        let next = codePointAt2(word, i2);
        if (direct < 0) {
          if (preciseTo < len && next == chars[preciseTo])
            precise[preciseTo++] = i2;
          if (adjacentTo < len) {
            if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
              if (adjacentTo == 0)
                adjacentStart = i2;
              adjacentEnd = i2 + 1;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        let ch, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 : ch != ch.toUpperCase() ? 2 : 0;
        if (!i2 || type == 1 && hasLower || prevType == 0 && type != 0) {
          if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true))
            byWord[byWordTo++] = i2;
          else if (byWord.length)
            wordAdjacent = false;
        }
        prevType = type;
        i2 += codePointSize2(next);
      }
      if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
        return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0)
        return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
      if (direct > -1)
        return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
      if (adjacentTo == len)
        return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
      if (byWordTo == len)
        return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
      return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
    }
    result(score2, positions, word) {
      let result = [], i2 = 0;
      for (let pos of positions) {
        let to = pos + (this.astral ? codePointSize2(codePointAt2(word, pos)) : 1);
        if (i2 && result[i2 - 1] == pos)
          result[i2 - 1] = to;
        else {
          result[i2++] = pos;
          result[i2++] = to;
        }
      }
      return this.ret(score2 - word.length, result);
    }
  };
  var StrictMatcher = class {
    static {
      __name(this, "StrictMatcher");
    }
    constructor(pattern) {
      this.pattern = pattern;
      this.matched = [];
      this.score = 0;
      this.folded = pattern.toLowerCase();
    }
    match(word) {
      if (word.length < this.pattern.length)
        return null;
      let start = word.slice(0, this.pattern.length);
      let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 : null;
      if (match == null)
        return null;
      this.matched = [0, start.length];
      this.score = match + (word.length == this.pattern.length ? 0 : -100);
      return this;
    }
  };
  var completionConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        activateOnTyping: true,
        activateOnCompletion: /* @__PURE__ */ __name(() => false, "activateOnCompletion"),
        activateOnTypingDelay: 100,
        selectOnOpen: true,
        override: null,
        closeOnBlur: true,
        maxRenderedOptions: 100,
        defaultKeymap: true,
        tooltipClass: /* @__PURE__ */ __name(() => "", "tooltipClass"),
        optionClass: /* @__PURE__ */ __name(() => "", "optionClass"),
        aboveCursor: false,
        icons: true,
        addToOptions: [],
        positionInfo: defaultPositionInfo,
        filterStrict: false,
        compareCompletions: /* @__PURE__ */ __name((a2, b2) => a2.label.localeCompare(b2.label), "compareCompletions"),
        interactionDelay: 75,
        updateSyncTime: 100
      }, {
        defaultKeymap: /* @__PURE__ */ __name((a2, b2) => a2 && b2, "defaultKeymap"),
        closeOnBlur: /* @__PURE__ */ __name((a2, b2) => a2 && b2, "closeOnBlur"),
        icons: /* @__PURE__ */ __name((a2, b2) => a2 && b2, "icons"),
        tooltipClass: /* @__PURE__ */ __name((a2, b2) => (c2) => joinClass(a2(c2), b2(c2)), "tooltipClass"),
        optionClass: /* @__PURE__ */ __name((a2, b2) => (c2) => joinClass(a2(c2), b2(c2)), "optionClass"),
        addToOptions: /* @__PURE__ */ __name((a2, b2) => a2.concat(b2), "addToOptions"),
        filterStrict: /* @__PURE__ */ __name((a2, b2) => a2 || b2, "filterStrict")
      });
    }
  });
  function joinClass(a2, b2) {
    return a2 ? b2 ? a2 + " " + b2 : a2 : b2;
  }
  __name(joinClass, "joinClass");
  function defaultPositionInfo(view2, list, option, info, space, tooltip) {
    let rtl = view2.textDirection == Direction.RTL, left = rtl, narrow = false;
    let side = "top", offset, maxWidth;
    let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
    if (left && spaceLeft < Math.min(infoWidth, spaceRight))
      left = false;
    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
      left = true;
    if (infoWidth <= (left ? spaceLeft : spaceRight)) {
      offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
      maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
    } else {
      narrow = true;
      maxWidth = Math.min(
        400,
        (rtl ? list.right : space.right - list.left) - 30
        /* Info.Margin */
      );
      let spaceBelow = space.bottom - list.bottom;
      if (spaceBelow >= infoHeight || spaceBelow > list.top) {
        offset = option.bottom - list.top;
      } else {
        side = "bottom";
        offset = list.bottom - option.top;
      }
    }
    let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
    let scaleX = (list.right - list.left) / tooltip.offsetWidth;
    return {
      style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
      class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
    };
  }
  __name(defaultPositionInfo, "defaultPositionInfo");
  function optionContent(config15) {
    let content2 = config15.addToOptions.slice();
    if (config15.icons)
      content2.push({
        render(completion) {
          let icon = document.createElement("div");
          icon.classList.add("cm-completionIcon");
          if (completion.type)
            icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
          icon.setAttribute("aria-hidden", "true");
          return icon;
        },
        position: 20
      });
    content2.push({
      render(completion, _s, _v, match) {
        let labelElt = document.createElement("span");
        labelElt.className = "cm-completionLabel";
        let label = completion.displayLabel || completion.label, off = 0;
        for (let j2 = 0; j2 < match.length; ) {
          let from = match[j2++], to = match[j2++];
          if (from > off)
            labelElt.appendChild(document.createTextNode(label.slice(off, from)));
          let span = labelElt.appendChild(document.createElement("span"));
          span.appendChild(document.createTextNode(label.slice(from, to)));
          span.className = "cm-completionMatchedText";
          off = to;
        }
        if (off < label.length)
          labelElt.appendChild(document.createTextNode(label.slice(off)));
        return labelElt;
      },
      position: 50
    }, {
      render(completion) {
        if (!completion.detail)
          return null;
        let detailElt = document.createElement("span");
        detailElt.className = "cm-completionDetail";
        detailElt.textContent = completion.detail;
        return detailElt;
      },
      position: 80
    });
    return content2.sort((a2, b2) => a2.position - b2.position).map((a2) => a2.render);
  }
  __name(optionContent, "optionContent");
  function rangeAroundSelected(total, selected, max) {
    if (total <= max)
      return { from: 0, to: total };
    if (selected < 0)
      selected = 0;
    if (selected <= total >> 1) {
      let off2 = Math.floor(selected / max);
      return { from: off2 * max, to: (off2 + 1) * max };
    }
    let off = Math.floor((total - selected) / max);
    return { from: total - (off + 1) * max, to: total - off * max };
  }
  __name(rangeAroundSelected, "rangeAroundSelected");
  var CompletionTooltip = class {
    static {
      __name(this, "CompletionTooltip");
    }
    constructor(view2, stateField, applyCompletion2) {
      this.view = view2;
      this.stateField = stateField;
      this.applyCompletion = applyCompletion2;
      this.info = null;
      this.infoDestroy = null;
      this.placeInfoReq = {
        read: /* @__PURE__ */ __name(() => this.measureInfo(), "read"),
        write: /* @__PURE__ */ __name((pos) => this.placeInfo(pos), "write"),
        key: this
      };
      this.space = null;
      this.currentClass = "";
      let cState = view2.state.field(stateField);
      let { options, selected } = cState.open;
      let config15 = view2.state.facet(completionConfig);
      this.optionContent = optionContent(config15);
      this.optionClass = config15.optionClass;
      this.tooltipClass = config15.tooltipClass;
      this.range = rangeAroundSelected(options.length, selected, config15.maxRenderedOptions);
      this.dom = document.createElement("div");
      this.dom.className = "cm-tooltip-autocomplete";
      this.updateTooltipClass(view2.state);
      this.dom.addEventListener("mousedown", (e2) => {
        let { options: options2 } = view2.state.field(stateField).open;
        for (let dom = e2.target, match; dom && dom != this.dom; dom = dom.parentNode) {
          if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options2.length) {
            this.applyCompletion(view2, options2[+match[1]]);
            e2.preventDefault();
            return;
          }
        }
      });
      this.dom.addEventListener("focusout", (e2) => {
        let state = view2.state.field(this.stateField, false);
        if (state && state.tooltip && view2.state.facet(completionConfig).closeOnBlur && e2.relatedTarget != view2.contentDOM)
          view2.dispatch({ effects: closeCompletionEffect.of(null) });
      });
      this.showOptions(options, cState.id);
    }
    mount() {
      this.updateSel();
    }
    showOptions(options, id) {
      if (this.list)
        this.list.remove();
      this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
      this.list.addEventListener("scroll", () => {
        if (this.info)
          this.view.requestMeasure(this.placeInfoReq);
      });
    }
    update(update) {
      var _a2;
      let cState = update.state.field(this.stateField);
      let prevState = update.startState.field(this.stateField);
      this.updateTooltipClass(update.state);
      if (cState != prevState) {
        let { options, selected, disabled } = cState.open;
        if (!prevState.open || prevState.open.options != options) {
          this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(options, cState.id);
        }
        this.updateSel();
        if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
          this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
      }
    }
    updateTooltipClass(state) {
      let cls = this.tooltipClass(state);
      if (cls != this.currentClass) {
        for (let c2 of this.currentClass.split(" "))
          if (c2)
            this.dom.classList.remove(c2);
        for (let c2 of cls.split(" "))
          if (c2)
            this.dom.classList.add(c2);
        this.currentClass = cls;
      }
    }
    positioned(space) {
      this.space = space;
      if (this.info)
        this.view.requestMeasure(this.placeInfoReq);
    }
    updateSel() {
      let cState = this.view.state.field(this.stateField), open = cState.open;
      if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.showOptions(open.options, cState.id);
      }
      if (this.updateSelectedOption(open.selected)) {
        this.destroyInfo();
        let { completion } = open.options[open.selected];
        let { info } = completion;
        if (!info)
          return;
        let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
        if (!infoResult)
          return;
        if ("then" in infoResult) {
          infoResult.then((obj) => {
            if (obj && this.view.state.field(this.stateField, false) == cState)
              this.addInfoPane(obj, completion);
          }).catch((e2) => logException(this.view.state, e2, "completion info"));
        } else {
          this.addInfoPane(infoResult, completion);
        }
      }
    }
    addInfoPane(content2, completion) {
      this.destroyInfo();
      let wrap = this.info = document.createElement("div");
      wrap.className = "cm-tooltip cm-completionInfo";
      if (content2.nodeType != null) {
        wrap.appendChild(content2);
        this.infoDestroy = null;
      } else {
        let { dom, destroy } = content2;
        wrap.appendChild(dom);
        this.infoDestroy = destroy || null;
      }
      this.dom.appendChild(wrap);
      this.view.requestMeasure(this.placeInfoReq);
    }
    updateSelectedOption(selected) {
      let set = null;
      for (let opt = this.list.firstChild, i2 = this.range.from; opt; opt = opt.nextSibling, i2++) {
        if (opt.nodeName != "LI" || !opt.id) {
          i2--;
        } else if (i2 == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected"))
            opt.removeAttribute("aria-selected");
        }
      }
      if (set)
        scrollIntoView2(this.list, set);
      return set;
    }
    measureInfo() {
      let sel = this.dom.querySelector("[aria-selected]");
      if (!sel || !this.info)
        return null;
      let listRect = this.dom.getBoundingClientRect();
      let infoRect = this.info.getBoundingClientRect();
      let selRect = sel.getBoundingClientRect();
      let space = this.space;
      if (!space) {
        let docElt = this.dom.ownerDocument.documentElement;
        space = { left: 0, top: 0, right: docElt.clientWidth, bottom: docElt.clientHeight };
      }
      if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10)
        return null;
      return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
    }
    placeInfo(pos) {
      if (this.info) {
        if (pos) {
          if (pos.style)
            this.info.style.cssText = pos.style;
          this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
        } else {
          this.info.style.cssText = "top: -1e6px";
        }
      }
    }
    createListBox(options, id, range) {
      const ul = document.createElement("ul");
      ul.id = id;
      ul.setAttribute("role", "listbox");
      ul.setAttribute("aria-expanded", "true");
      ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
      ul.addEventListener("mousedown", (e2) => {
        if (e2.target == ul)
          e2.preventDefault();
      });
      let curSection = null;
      for (let i2 = range.from; i2 < range.to; i2++) {
        let { completion, match } = options[i2], { section } = completion;
        if (section) {
          let name2 = typeof section == "string" ? section : section.name;
          if (name2 != curSection && (i2 > range.from || range.from == 0)) {
            curSection = name2;
            if (typeof section != "string" && section.header) {
              ul.appendChild(section.header(section));
            } else {
              let header = ul.appendChild(document.createElement("completion-section"));
              header.textContent = name2;
            }
          }
        }
        const li = ul.appendChild(document.createElement("li"));
        li.id = id + "-" + i2;
        li.setAttribute("role", "option");
        let cls = this.optionClass(completion);
        if (cls)
          li.className = cls;
        for (let source of this.optionContent) {
          let node = source(completion, this.view.state, this.view, match);
          if (node)
            li.appendChild(node);
        }
      }
      if (range.from)
        ul.classList.add("cm-completionListIncompleteTop");
      if (range.to < options.length)
        ul.classList.add("cm-completionListIncompleteBottom");
      return ul;
    }
    destroyInfo() {
      if (this.info) {
        if (this.infoDestroy)
          this.infoDestroy();
        this.info.remove();
        this.info = null;
      }
    }
    destroy() {
      this.destroyInfo();
    }
  };
  function completionTooltip(stateField, applyCompletion2) {
    return (view2) => new CompletionTooltip(view2, stateField, applyCompletion2);
  }
  __name(completionTooltip, "completionTooltip");
  function scrollIntoView2(container, element) {
    let parent = container.getBoundingClientRect();
    let self = element.getBoundingClientRect();
    let scaleY = parent.height / container.offsetHeight;
    if (self.top < parent.top)
      container.scrollTop -= (parent.top - self.top) / scaleY;
    else if (self.bottom > parent.bottom)
      container.scrollTop += (self.bottom - parent.bottom) / scaleY;
  }
  __name(scrollIntoView2, "scrollIntoView");
  function score(option) {
    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
  }
  __name(score, "score");
  function sortOptions(active, state) {
    let options = [];
    let sections = null;
    let addOption = /* @__PURE__ */ __name((option) => {
      options.push(option);
      let { section } = option.completion;
      if (section) {
        if (!sections)
          sections = [];
        let name2 = typeof section == "string" ? section : section.name;
        if (!sections.some((s2) => s2.name == name2))
          sections.push(typeof section == "string" ? { name: name2 } : section);
      }
    }, "addOption");
    let conf = state.facet(completionConfig);
    for (let a2 of active)
      if (a2.hasResult()) {
        let getMatch = a2.result.getMatch;
        if (a2.result.filter === false) {
          for (let option of a2.result.options) {
            addOption(new Option(option, a2.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
          }
        } else {
          let pattern = state.sliceDoc(a2.from, a2.to), match;
          let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
          for (let option of a2.result.options)
            if (match = matcher.match(option.label)) {
              let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
              addOption(new Option(option, a2.source, matched, match.score + (option.boost || 0)));
            }
        }
      }
    if (sections) {
      let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
      let cmp = /* @__PURE__ */ __name((a2, b2) => {
        var _a2, _b;
        return ((_a2 = a2.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b = b2.rank) !== null && _b !== void 0 ? _b : 1e9) || (a2.name < b2.name ? -1 : 1);
      }, "cmp");
      for (let s2 of sections.sort(cmp)) {
        pos -= 1e5;
        sectionOrder[s2.name] = pos;
      }
      for (let option of options) {
        let { section } = option.completion;
        if (section)
          option.score += sectionOrder[typeof section == "string" ? section : section.name];
      }
    }
    let result = [], prev = null;
    let compare2 = conf.compareCompletions;
    for (let opt of options.sort((a2, b2) => b2.score - a2.score || compare2(a2.completion, b2.completion))) {
      let cur2 = opt.completion;
      if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
        result.push(opt);
      else if (score(opt.completion) > score(prev))
        result[result.length - 1] = opt;
      prev = opt.completion;
    }
    return result;
  }
  __name(sortOptions, "sortOptions");
  var CompletionDialog = class _CompletionDialog {
    static {
      __name(this, "CompletionDialog");
    }
    constructor(options, attrs, tooltip, timestamp, selected, disabled) {
      this.options = options;
      this.attrs = attrs;
      this.tooltip = tooltip;
      this.timestamp = timestamp;
      this.selected = selected;
      this.disabled = disabled;
    }
    setSelected(selected, id) {
      return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
    }
    static build(active, state, id, prev, conf, didSetActive) {
      if (prev && !didSetActive && active.some((s2) => s2.isPending))
        return prev.setDisabled();
      let options = sortOptions(active, state);
      if (!options.length)
        return prev && active.some((a2) => a2.isPending) ? prev.setDisabled() : null;
      let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
      if (prev && prev.selected != selected && prev.selected != -1) {
        let selectedValue = prev.options[prev.selected].completion;
        for (let i2 = 0; i2 < options.length; i2++)
          if (options[i2].completion == selectedValue) {
            selected = i2;
            break;
          }
      }
      return new _CompletionDialog(options, makeAttrs(id, selected), {
        pos: active.reduce((a2, b2) => b2.hasResult() ? Math.min(a2, b2.from) : a2, 1e8),
        create: createTooltip,
        above: conf.aboveCursor
      }, prev ? prev.timestamp : Date.now(), selected, false);
    }
    map(changes) {
      return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
    }
    setDisabled() {
      return new _CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
    }
  };
  var CompletionState = class _CompletionState {
    static {
      __name(this, "CompletionState");
    }
    constructor(active, id, open) {
      this.active = active;
      this.id = id;
      this.open = open;
    }
    static start() {
      return new _CompletionState(none3, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
    update(tr) {
      let { state } = tr, conf = state.facet(completionConfig);
      let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      let active = sources.map((source) => {
        let value = this.active.find((s2) => s2.source == source) || new ActiveSource(
          source,
          this.active.some(
            (a2) => a2.state != 0
            /* State.Inactive */
          ) ? 1 : 0
          /* State.Inactive */
        );
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every((a2, i2) => a2 == this.active[i2]))
        active = this.active;
      let open = this.open, didSet = tr.effects.some((e2) => e2.is(setActiveEffect));
      if (open && tr.docChanged)
        open = open.map(tr.changes);
      if (tr.selection || active.some((a2) => a2.hasResult() && tr.changes.touchesRange(a2.from, a2.to)) || !sameResults(active, this.active) || didSet)
        open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
      else if (open && open.disabled && !active.some((a2) => a2.isPending))
        open = null;
      if (!open && active.every((a2) => !a2.isPending) && active.some((a2) => a2.hasResult()))
        active = active.map((a2) => a2.hasResult() ? new ActiveSource(
          a2.source,
          0
          /* State.Inactive */
        ) : a2);
      for (let effect of tr.effects)
        if (effect.is(setSelectedEffect))
          open = open && open.setSelected(effect.value, this.id);
      return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
    }
    get tooltip() {
      return this.open ? this.open.tooltip : null;
    }
    get attrs() {
      return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs2;
    }
  };
  function sameResults(a2, b2) {
    if (a2 == b2)
      return true;
    for (let iA = 0, iB = 0; ; ) {
      while (iA < a2.length && !a2[iA].hasResult())
        iA++;
      while (iB < b2.length && !b2[iB].hasResult())
        iB++;
      let endA = iA == a2.length, endB = iB == b2.length;
      if (endA || endB)
        return endA == endB;
      if (a2[iA++].result != b2[iB++].result)
        return false;
    }
  }
  __name(sameResults, "sameResults");
  var baseAttrs = {
    "aria-autocomplete": "list"
  };
  var noAttrs2 = {};
  function makeAttrs(id, selected) {
    let result = {
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-controls": id
    };
    if (selected > -1)
      result["aria-activedescendant"] = id + "-" + selected;
    return result;
  }
  __name(makeAttrs, "makeAttrs");
  var none3 = [];
  function getUpdateType(tr, conf) {
    if (tr.isUserEvent("input.complete")) {
      let completion = tr.annotation(pickedCompletion);
      if (completion && conf.activateOnCompletion(completion))
        return 4 | 8;
    }
    let typing = tr.isUserEvent("input.type");
    return typing && conf.activateOnTyping ? 4 | 1 : typing ? 1 : tr.isUserEvent("delete.backward") ? 2 : tr.selection ? 8 : tr.docChanged ? 16 : 0;
  }
  __name(getUpdateType, "getUpdateType");
  var ActiveSource = class _ActiveSource {
    static {
      __name(this, "ActiveSource");
    }
    constructor(source, state, explicit = false) {
      this.source = source;
      this.state = state;
      this.explicit = explicit;
    }
    hasResult() {
      return false;
    }
    get isPending() {
      return this.state == 1;
    }
    update(tr, conf) {
      let type = getUpdateType(tr, conf), value = this;
      if (type & 8 || type & 16 && this.touches(tr))
        value = new _ActiveSource(
          value.source,
          0
          /* State.Inactive */
        );
      if (type & 4 && value.state == 0)
        value = new _ActiveSource(
          this.source,
          1
          /* State.Pending */
        );
      value = value.updateFor(tr, type);
      for (let effect of tr.effects) {
        if (effect.is(startCompletionEffect))
          value = new _ActiveSource(value.source, 1, effect.value);
        else if (effect.is(closeCompletionEffect))
          value = new _ActiveSource(
            value.source,
            0
            /* State.Inactive */
          );
        else if (effect.is(setActiveEffect)) {
          for (let active of effect.value)
            if (active.source == value.source)
              value = active;
        }
      }
      return value;
    }
    updateFor(tr, type) {
      return this.map(tr.changes);
    }
    map(changes) {
      return this;
    }
    touches(tr) {
      return tr.changes.touchesRange(cur(tr.state));
    }
  };
  var ActiveResult = class _ActiveResult extends ActiveSource {
    static {
      __name(this, "ActiveResult");
    }
    constructor(source, explicit, limit, result, from, to) {
      super(source, 3, explicit);
      this.limit = limit;
      this.result = result;
      this.from = from;
      this.to = to;
    }
    hasResult() {
      return true;
    }
    updateFor(tr, type) {
      var _a2;
      if (!(type & 3))
        return this.map(tr.changes);
      let result = this.result;
      if (result.map && !tr.changes.empty)
        result = result.map(result, tr.changes);
      let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
      let pos = cur(tr.state);
      if (pos > to || !result || type & 2 && (cur(tr.startState) == this.from || pos < this.limit))
        return new ActiveSource(
          this.source,
          type & 4 ? 1 : 0
          /* State.Inactive */
        );
      let limit = tr.changes.mapPos(this.limit);
      if (checkValid(result.validFor, tr.state, from, to))
        return new _ActiveResult(this.source, this.explicit, limit, result, from, to);
      if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false))))
        return new _ActiveResult(this.source, this.explicit, limit, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr.state));
      return new ActiveSource(this.source, 1, this.explicit);
    }
    map(mapping) {
      if (mapping.empty)
        return this;
      let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
      if (!result)
        return new ActiveSource(
          this.source,
          0
          /* State.Inactive */
        );
      return new _ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
    }
    touches(tr) {
      return tr.changes.touchesRange(this.from, this.to);
    }
  };
  function checkValid(validFor, state, from, to) {
    if (!validFor)
      return false;
    let text = state.sliceDoc(from, to);
    return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  __name(checkValid, "checkValid");
  var setActiveEffect = /* @__PURE__ */ StateEffect.define({
    map(sources, mapping) {
      return sources.map((s2) => s2.map(mapping));
    }
  });
  var setSelectedEffect = /* @__PURE__ */ StateEffect.define();
  var completionState = /* @__PURE__ */ StateField.define({
    create() {
      return CompletionState.start();
    },
    update(value, tr) {
      return value.update(tr);
    },
    provide: /* @__PURE__ */ __name((f2) => [
      showTooltip.from(f2, (val) => val.tooltip),
      EditorView.contentAttributes.from(f2, (state) => state.attrs)
    ], "provide")
  });
  function applyCompletion(view2, option) {
    const apply = option.completion.apply || option.completion.label;
    let result = view2.state.field(completionState).active.find((a2) => a2.source == option.source);
    if (!(result instanceof ActiveResult))
      return false;
    if (typeof apply == "string")
      view2.dispatch(Object.assign(Object.assign({}, insertCompletionText(view2.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
    else
      apply(view2, option.completion, result.from, result.to);
    return true;
  }
  __name(applyCompletion, "applyCompletion");
  var createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
  function moveCompletionSelection(forward, by = "option") {
    return (view2) => {
      let cState = view2.state.field(completionState, false);
      if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view2.state.facet(completionConfig).interactionDelay)
        return false;
      let step = 1, tooltip;
      if (by == "page" && (tooltip = getTooltip(view2, cState.open.tooltip)))
        step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
      let { length } = cState.open.options;
      let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
      if (selected < 0)
        selected = by == "page" ? 0 : length - 1;
      else if (selected >= length)
        selected = by == "page" ? length - 1 : 0;
      view2.dispatch({ effects: setSelectedEffect.of(selected) });
      return true;
    };
  }
  __name(moveCompletionSelection, "moveCompletionSelection");
  var acceptCompletion = /* @__PURE__ */ __name((view2) => {
    let cState = view2.state.field(completionState, false);
    if (view2.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view2.state.facet(completionConfig).interactionDelay)
      return false;
    return applyCompletion(view2, cState.open.options[cState.open.selected]);
  }, "acceptCompletion");
  var startCompletion = /* @__PURE__ */ __name((view2) => {
    let cState = view2.state.field(completionState, false);
    if (!cState)
      return false;
    view2.dispatch({ effects: startCompletionEffect.of(true) });
    return true;
  }, "startCompletion");
  var closeCompletion = /* @__PURE__ */ __name((view2) => {
    let cState = view2.state.field(completionState, false);
    if (!cState || !cState.active.some(
      (a2) => a2.state != 0
      /* State.Inactive */
    ))
      return false;
    view2.dispatch({ effects: closeCompletionEffect.of(null) });
    return true;
  }, "closeCompletion");
  var RunningQuery = class {
    static {
      __name(this, "RunningQuery");
    }
    constructor(active, context) {
      this.active = active;
      this.context = context;
      this.time = Date.now();
      this.updates = [];
      this.done = void 0;
    }
  };
  var MaxUpdateCount = 50;
  var MinAbortTime = 1e3;
  var completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view2) {
      this.view = view2;
      this.debounceUpdate = -1;
      this.running = [];
      this.debounceAccept = -1;
      this.pendingStart = false;
      this.composing = 0;
      for (let active of view2.state.field(completionState).active)
        if (active.isPending)
          this.startQuery(active);
    }
    update(update) {
      let cState = update.state.field(completionState);
      let conf = update.state.facet(completionConfig);
      if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
        return;
      let doesReset = update.transactions.some((tr) => {
        let type = getUpdateType(tr, conf);
        return type & 8 || (tr.selection || tr.docChanged) && !(type & 3);
      });
      for (let i2 = 0; i2 < this.running.length; i2++) {
        let query = this.running[i2];
        if (doesReset || query.context.abortOnDocChange && update.docChanged || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
          for (let handler of query.context.abortListeners) {
            try {
              handler();
            } catch (e2) {
              logException(this.view.state, e2);
            }
          }
          query.context.abortListeners = null;
          this.running.splice(i2--, 1);
        } else {
          query.updates.push(...update.transactions);
        }
      }
      if (this.debounceUpdate > -1)
        clearTimeout(this.debounceUpdate);
      if (update.transactions.some((tr) => tr.effects.some((e2) => e2.is(startCompletionEffect))))
        this.pendingStart = true;
      let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
      this.debounceUpdate = cState.active.some((a2) => a2.isPending && !this.running.some((q2) => q2.active.source == a2.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
      if (this.composing != 0)
        for (let tr of update.transactions) {
          if (tr.isUserEvent("input.type"))
            this.composing = 2;
          else if (this.composing == 2 && tr.selection)
            this.composing = 3;
        }
    }
    startUpdate() {
      this.debounceUpdate = -1;
      this.pendingStart = false;
      let { state } = this.view, cState = state.field(completionState);
      for (let active of cState.active) {
        if (active.isPending && !this.running.some((r2) => r2.active.source == active.source))
          this.startQuery(active);
      }
      if (this.running.length && cState.open && cState.open.disabled)
        this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
    }
    startQuery(active) {
      let { state } = this.view, pos = cur(state);
      let context = new CompletionContext(state, pos, active.explicit, this.view);
      let pending = new RunningQuery(active, context);
      this.running.push(pending);
      Promise.resolve(active.source(context)).then((result) => {
        if (!pending.context.aborted) {
          pending.done = result || null;
          this.scheduleAccept();
        }
      }, (err) => {
        this.view.dispatch({ effects: closeCompletionEffect.of(null) });
        logException(this.view.state, err);
      });
    }
    scheduleAccept() {
      if (this.running.every((q2) => q2.done !== void 0))
        this.accept();
      else if (this.debounceAccept < 0)
        this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
    accept() {
      var _a2;
      if (this.debounceAccept > -1)
        clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      let updated = [];
      let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
      for (let i2 = 0; i2 < this.running.length; i2++) {
        let query = this.running[i2];
        if (query.done === void 0)
          continue;
        this.running.splice(i2--, 1);
        if (query.done) {
          let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
          let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
          let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : pos);
          for (let tr of query.updates)
            active = active.update(tr, conf);
          if (active.hasResult()) {
            updated.push(active);
            continue;
          }
        }
        let current = cState.active.find((a2) => a2.source == query.active.source);
        if (current && current.isPending) {
          if (query.done == null) {
            let active = new ActiveSource(
              query.active.source,
              0
              /* State.Inactive */
            );
            for (let tr of query.updates)
              active = active.update(tr, conf);
            if (!active.isPending)
              updated.push(active);
          } else {
            this.startQuery(current);
          }
        }
      }
      if (updated.length || cState.open && cState.open.disabled)
        this.view.dispatch({ effects: setActiveEffect.of(updated) });
    }
  }, {
    eventHandlers: {
      blur(event) {
        let state = this.view.state.field(completionState, false);
        if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
          let dialog = state.open && getTooltip(this.view, state.open.tooltip);
          if (!dialog || !dialog.dom.contains(event.relatedTarget))
            setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
        }
      },
      compositionstart() {
        this.composing = 1;
      },
      compositionend() {
        if (this.composing == 3) {
          setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
        }
        this.composing = 0;
      }
    }
  });
  var windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
  var commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
    keydown(event, view2) {
      let field = view2.state.field(completionState, false);
      if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
        return false;
      let option = field.open.options[field.open.selected];
      let result = field.active.find((a2) => a2.source == option.source);
      let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
      if (commitChars && commitChars.indexOf(event.key) > -1)
        applyCompletion(view2, option);
      return false;
    }
  }));
  var baseTheme5 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
      "& > ul": {
        fontFamily: "monospace",
        whiteSpace: "nowrap",
        overflow: "hidden auto",
        maxWidth_fallback: "700px",
        maxWidth: "min(700px, 95vw)",
        minWidth: "250px",
        maxHeight: "10em",
        height: "100%",
        listStyle: "none",
        margin: 0,
        padding: 0,
        "& > li, & > completion-section": {
          padding: "1px 3px",
          lineHeight: 1.2
        },
        "& > li": {
          overflowX: "hidden",
          textOverflow: "ellipsis",
          cursor: "pointer"
        },
        "& > completion-section": {
          display: "list-item",
          borderBottom: "1px solid silver",
          paddingLeft: "0.5em",
          opacity: 0.7
        }
      }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#17c",
      color: "white"
    },
    "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#777"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#347",
      color: "white"
    },
    "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#444"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
      content: '"\xB7\xB7\xB7"',
      opacity: 0.5,
      display: "block",
      textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
      position: "absolute",
      padding: "3px 9px",
      width: "max-content",
      maxWidth: `${400}px`,
      boxSizing: "border-box",
      whiteSpace: "pre-line"
    },
    ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
    ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
    ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
    ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
    "&light .cm-snippetField": { backgroundColor: "#00000022" },
    "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
    ".cm-snippetFieldPosition": {
      verticalAlign: "text-top",
      width: 0,
      height: "1.15em",
      display: "inline-block",
      margin: "0 -0.7px -.7em",
      borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
      textDecoration: "underline"
    },
    ".cm-completionDetail": {
      marginLeft: "0.5em",
      fontStyle: "italic"
    },
    ".cm-completionIcon": {
      fontSize: "90%",
      width: ".8em",
      display: "inline-block",
      textAlign: "center",
      paddingRight: ".6em",
      opacity: "0.6",
      boxSizing: "content-box"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
      "&:after": { content: "'\u0192'" }
    },
    ".cm-completionIcon-class": {
      "&:after": { content: "'\u25CB'" }
    },
    ".cm-completionIcon-interface": {
      "&:after": { content: "'\u25CC'" }
    },
    ".cm-completionIcon-variable": {
      "&:after": { content: "'\u{1D465}'" }
    },
    ".cm-completionIcon-constant": {
      "&:after": { content: "'\u{1D436}'" }
    },
    ".cm-completionIcon-type": {
      "&:after": { content: "'\u{1D461}'" }
    },
    ".cm-completionIcon-enum": {
      "&:after": { content: "'\u222A'" }
    },
    ".cm-completionIcon-property": {
      "&:after": { content: "'\u25A1'" }
    },
    ".cm-completionIcon-keyword": {
      "&:after": { content: "'\u{1F511}\uFE0E'" }
      // Disable emoji rendering
    },
    ".cm-completionIcon-namespace": {
      "&:after": { content: "'\u25A2'" }
    },
    ".cm-completionIcon-text": {
      "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
    }
  });
  var defaults2 = {
    brackets: ["(", "[", "{", "'", '"'],
    before: ")]}:;>",
    stringPrefixes: []
  };
  var closeBracketEffect = /* @__PURE__ */ StateEffect.define({
    map(value, mapping) {
      let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
      return mapped == null ? void 0 : mapped;
    }
  });
  var closedBracket = /* @__PURE__ */ new class extends RangeValue {
  }();
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  var bracketState = /* @__PURE__ */ StateField.define({
    create() {
      return RangeSet.empty;
    },
    update(value, tr) {
      value = value.map(tr.changes);
      if (tr.selection) {
        let line = tr.state.doc.lineAt(tr.selection.main.head);
        value = value.update({ filter: /* @__PURE__ */ __name((from) => from >= line.from && from <= line.to, "filter") });
      }
      for (let effect of tr.effects)
        if (effect.is(closeBracketEffect))
          value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
      return value;
    }
  });
  function closeBrackets() {
    return [inputHandler2, bracketState];
  }
  __name(closeBrackets, "closeBrackets");
  var definedClosing = "()[]{}<>\xAB\xBB\xBB\xAB\uFF3B\uFF3D\uFF5B\uFF5D";
  function closing(ch) {
    for (let i2 = 0; i2 < definedClosing.length; i2 += 2)
      if (definedClosing.charCodeAt(i2) == ch)
        return definedClosing.charAt(i2 + 1);
    return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  __name(closing, "closing");
  function config(state, pos) {
    return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
  }
  __name(config, "config");
  var android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
  var inputHandler2 = /* @__PURE__ */ EditorView.inputHandler.of((view2, from, to, insert2) => {
    if ((android ? view2.composing : view2.compositionStarted) || view2.state.readOnly)
      return false;
    let sel = view2.state.selection.main;
    if (insert2.length > 2 || insert2.length == 2 && codePointSize2(codePointAt2(insert2, 0)) == 1 || from != sel.from || to != sel.to)
      return false;
    let tr = insertBracket(view2.state, insert2);
    if (!tr)
      return false;
    view2.dispatch(tr);
    return true;
  });
  var deleteBracketPair = /* @__PURE__ */ __name(({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults2.brackets;
    let dont = null, changes = state.changeByRange((range) => {
      if (range.empty) {
        let before = prevChar(state.doc, range.head);
        for (let token of tokens) {
          if (token == before && nextChar(state.doc, range.head) == closing(codePointAt2(token, 0)))
            return {
              changes: { from: range.head - token.length, to: range.head + token.length },
              range: EditorSelection.cursor(range.head - token.length)
            };
        }
      }
      return { range: dont = range };
    });
    if (!dont)
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
    return !dont;
  }, "deleteBracketPair");
  var closeBracketsKeymap = [
    { key: "Backspace", run: deleteBracketPair }
  ];
  function insertBracket(state, bracket2) {
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults2.brackets;
    for (let tok of tokens) {
      let closed = closing(codePointAt2(tok, 0));
      if (bracket2 == tok)
        return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
      if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
        return handleClose(state, tok, closed);
    }
    return null;
  }
  __name(insertBracket, "insertBracket");
  function closedBracketAt(state, pos) {
    let found = false;
    state.field(bracketState).between(0, state.doc.length, (from) => {
      if (from == pos)
        found = true;
    });
    return found;
  }
  __name(closedBracketAt, "closedBracketAt");
  function nextChar(doc2, pos) {
    let next = doc2.sliceString(pos, pos + 2);
    return next.slice(0, codePointSize2(codePointAt2(next, 0)));
  }
  __name(nextChar, "nextChar");
  function prevChar(doc2, pos) {
    let prev = doc2.sliceString(pos - 2, pos);
    return codePointSize2(codePointAt2(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  __name(prevChar, "prevChar");
  function handleOpen(state, open, close, closeBefore) {
    let dont = null, changes = state.changeByRange((range) => {
      if (!range.empty)
        return {
          changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
          effects: closeBracketEffect.of(range.to + open.length),
          range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
        };
      let next = nextChar(state.doc, range.head);
      if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
        return {
          changes: { insert: open + close, from: range.head },
          effects: closeBracketEffect.of(range.head + open.length),
          range: EditorSelection.cursor(range.head + open.length)
        };
      return { range: dont = range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  __name(handleOpen, "handleOpen");
  function handleClose(state, _open, close) {
    let dont = null, changes = state.changeByRange((range) => {
      if (range.empty && nextChar(state.doc, range.head) == close)
        return {
          changes: { from: range.head, to: range.head + close.length, insert: close },
          range: EditorSelection.cursor(range.head + close.length)
        };
      return dont = { range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  __name(handleClose, "handleClose");
  function handleSame(state, token, allowTriple, config15) {
    let stringPrefixes = config15.stringPrefixes || defaults2.stringPrefixes;
    let dont = null, changes = state.changeByRange((range) => {
      if (!range.empty)
        return {
          changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
          effects: closeBracketEffect.of(range.to + token.length),
          range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
        };
      let pos = range.head, next = nextChar(state.doc, pos), start;
      if (next == token) {
        if (nodeStart(state, pos)) {
          return {
            changes: { insert: token + token, from: pos },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (closedBracketAt(state, pos)) {
          let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
          let content2 = isTriple ? token + token + token : token;
          return {
            changes: { from: pos, to: pos + content2.length, insert: content2 },
            range: EditorSelection.cursor(pos + content2.length)
          };
        }
      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
        return {
          changes: { insert: token + token + token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
        if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
          return {
            changes: { insert: token + token, from: pos },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
      }
      return { range: dont = range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  __name(handleSame, "handleSame");
  function nodeStart(state, pos) {
    let tree = syntaxTree(state).resolveInner(pos + 1);
    return tree.parent && tree.from == pos;
  }
  __name(nodeStart, "nodeStart");
  function probablyInString(state, pos, quoteToken, prefixes) {
    let node = syntaxTree(state).resolveInner(pos, -1);
    let maxPrefix = prefixes.reduce((m2, p2) => Math.max(m2, p2.length), 0);
    for (let i2 = 0; i2 < 5; i2++) {
      let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
      let quotePos = start.indexOf(quoteToken);
      if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
        let first = node.firstChild;
        while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
          if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
            return false;
          first = first.firstChild;
        }
        return true;
      }
      let parent = node.to == pos && node.parent;
      if (!parent)
        break;
      node = parent;
    }
    return false;
  }
  __name(probablyInString, "probablyInString");
  function canStartStringAt(state, pos, prefixes) {
    let charCat = state.charCategorizer(pos);
    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
      return pos;
    for (let prefix of prefixes) {
      let start = pos - prefix.length;
      if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
        return start;
    }
    return -1;
  }
  __name(canStartStringAt, "canStartStringAt");
  function autocompletion(config15 = {}) {
    return [
      commitCharacters,
      completionState,
      completionConfig.of(config15),
      completionPlugin,
      completionKeymapExt,
      baseTheme5
    ];
  }
  __name(autocompletion, "autocompletion");
  var completionKeymap = [
    { key: "Ctrl-Space", run: startCompletion },
    { mac: "Alt-`", run: startCompletion },
    { key: "Escape", run: closeCompletion },
    { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
    { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
    { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
    { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
    { key: "Enter", run: acceptCompletion }
  ];
  var completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

  // node_modules/antlr4/dist/antlr4.web.mjs
  var t2 = { 763: () => {
  } };
  var e = {};
  function n(s2) {
    var i2 = e[s2];
    if (void 0 !== i2) return i2.exports;
    var r2 = e[s2] = { exports: {} };
    return t2[s2](r2, r2.exports, n), r2.exports;
  }
  __name(n, "n");
  n.d = (t3, e2) => {
    for (var s2 in e2) n.o(e2, s2) && !n.o(t3, s2) && Object.defineProperty(t3, s2, { enumerable: true, get: e2[s2] });
  }, n.o = (t3, e2) => Object.prototype.hasOwnProperty.call(t3, e2);
  var s = {};
  n.d(s, { MG: /* @__PURE__ */ __name(() => $, "MG"), fr: /* @__PURE__ */ __name(() => Lt, "fr"), sR: /* @__PURE__ */ __name(() => Ae, "sR"), Zo: /* @__PURE__ */ __name(() => ke, "Zo"), iH: /* @__PURE__ */ __name(() => Re, "iH"), rt: /* @__PURE__ */ __name(() => Pt, "rt"), jB: /* @__PURE__ */ __name(() => be, "jB"), M8: /* @__PURE__ */ __name(() => le, "M8"), $t: /* @__PURE__ */ __name(() => Ce, "$t"), aq: /* @__PURE__ */ __name(() => me, "aq"), pG: /* @__PURE__ */ __name(() => Ot, "pG"), eP: /* @__PURE__ */ __name(() => Te, "eP"), KU: /* @__PURE__ */ __name(() => xe, "KU"), zW: /* @__PURE__ */ __name(() => Ie, "zW"), IX: /* @__PURE__ */ __name(() => E, "IX"), mY: /* @__PURE__ */ __name(() => _, "mY"), a7: /* @__PURE__ */ __name(() => j, "a7"), JG: /* @__PURE__ */ __name(() => Ut, "JG"), ay: /* @__PURE__ */ __name(() => Xt, "ay"), X2: /* @__PURE__ */ __name(() => ee, "X2"), WU: /* @__PURE__ */ __name(() => de, "WU"), Uw: /* @__PURE__ */ __name(() => ge, "Uw"), gw: /* @__PURE__ */ __name(() => pe, "gw"), iX: /* @__PURE__ */ __name(() => Fe, "iX"), re: /* @__PURE__ */ __name(() => se, "re"), Pg: /* @__PURE__ */ __name(() => Be, "Pg"), tD: /* @__PURE__ */ __name(() => ie3, "tD"), R$: /* @__PURE__ */ __name(() => te, "R$"), Dj: /* @__PURE__ */ __name(() => Ft, "Dj"), m7: /* @__PURE__ */ __name(() => U, "m7"), NZ: /* @__PURE__ */ __name(() => P, "NZ"), xo: /* @__PURE__ */ __name(() => b, "xo"), ou: /* @__PURE__ */ __name(() => i, "ou"), qC: /* @__PURE__ */ __name(() => ze, "qC"), mD: /* @__PURE__ */ __name(() => d, "mD"), Ay: /* @__PURE__ */ __name(() => Ye, "Ay") });
  var i = class {
    static {
      __name(this, "i");
    }
    constructor() {
      this.source = null, this.type = null, this.channel = null, this.start = null, this.stop = null, this.tokenIndex = null, this.line = null, this.column = null, this._text = null;
    }
    getTokenSource() {
      return this.source[0];
    }
    getInputStream() {
      return this.source[1];
    }
    get text() {
      return this._text;
    }
    set text(t3) {
      this._text = t3;
    }
  };
  function r(t3, e2) {
    if (!Array.isArray(t3) || !Array.isArray(e2)) return false;
    if (t3 === e2) return true;
    if (t3.length !== e2.length) return false;
    for (let n2 = 0; n2 < t3.length; n2++) if (!(t3[n2] === e2[n2] || t3[n2].equals && t3[n2].equals(e2[n2]))) return false;
    return true;
  }
  __name(r, "r");
  i.INVALID_TYPE = 0, i.EPSILON = -2, i.MIN_USER_TOKEN_TYPE = 1, i.EOF = -1, i.DEFAULT_CHANNEL = 0, i.HIDDEN_CHANNEL = 1;
  var o = Math.round(Math.random() * Math.pow(2, 32));
  function a(t3) {
    if (!t3) return 0;
    const e2 = typeof t3, n2 = "string" === e2 ? t3 : !("object" !== e2 || !t3.toString) && t3.toString();
    if (!n2) return 0;
    let s2, i2;
    const r2 = 3 & n2.length, a2 = n2.length - r2;
    let l2 = o;
    const h2 = 3432918353, c2 = 461845907;
    let u2 = 0;
    for (; u2 < a2; ) i2 = 255 & n2.charCodeAt(u2) | (255 & n2.charCodeAt(++u2)) << 8 | (255 & n2.charCodeAt(++u2)) << 16 | (255 & n2.charCodeAt(++u2)) << 24, ++u2, i2 = (65535 & i2) * h2 + (((i2 >>> 16) * h2 & 65535) << 16) & 4294967295, i2 = i2 << 15 | i2 >>> 17, i2 = (65535 & i2) * c2 + (((i2 >>> 16) * c2 & 65535) << 16) & 4294967295, l2 ^= i2, l2 = l2 << 13 | l2 >>> 19, s2 = 5 * (65535 & l2) + ((5 * (l2 >>> 16) & 65535) << 16) & 4294967295, l2 = 27492 + (65535 & s2) + ((58964 + (s2 >>> 16) & 65535) << 16);
    switch (i2 = 0, r2) {
      case 3:
        i2 ^= (255 & n2.charCodeAt(u2 + 2)) << 16;
      case 2:
        i2 ^= (255 & n2.charCodeAt(u2 + 1)) << 8;
      case 1:
        i2 ^= 255 & n2.charCodeAt(u2), i2 = (65535 & i2) * h2 + (((i2 >>> 16) * h2 & 65535) << 16) & 4294967295, i2 = i2 << 15 | i2 >>> 17, i2 = (65535 & i2) * c2 + (((i2 >>> 16) * c2 & 65535) << 16) & 4294967295, l2 ^= i2;
    }
    return l2 ^= n2.length, l2 ^= l2 >>> 16, l2 = 2246822507 * (65535 & l2) + ((2246822507 * (l2 >>> 16) & 65535) << 16) & 4294967295, l2 ^= l2 >>> 13, l2 = 3266489909 * (65535 & l2) + ((3266489909 * (l2 >>> 16) & 65535) << 16) & 4294967295, l2 ^= l2 >>> 16, l2 >>> 0;
  }
  __name(a, "a");
  var l = class _l {
    static {
      __name(this, "l");
    }
    constructor() {
      this.count = 0, this.hash = 0;
    }
    update() {
      for (let t3 = 0; t3 < arguments.length; t3++) {
        const e2 = arguments[t3];
        if (null != e2) if (Array.isArray(e2)) this.update.apply(this, e2);
        else {
          let t4 = 0;
          switch (typeof e2) {
            case "undefined":
            case "function":
              continue;
            case "number":
            case "boolean":
              t4 = e2;
              break;
            case "string":
              t4 = a(e2);
              break;
            default:
              e2.updateHashCode ? e2.updateHashCode(this) : console.log("No updateHashCode for " + e2.toString());
              continue;
          }
          t4 *= 3432918353, t4 = t4 << 15 | t4 >>> 17, t4 *= 461845907, this.count = this.count + 1;
          let n2 = this.hash ^ t4;
          n2 = n2 << 13 | n2 >>> 19, n2 = 5 * n2 + 3864292196, this.hash = n2;
        }
      }
    }
    finish() {
      let t3 = this.hash ^ 4 * this.count;
      return t3 ^= t3 >>> 16, t3 *= 2246822507, t3 ^= t3 >>> 13, t3 *= 3266489909, t3 ^= t3 >>> 16, t3;
    }
    static hashStuff() {
      const t3 = new _l();
      return t3.update.apply(t3, arguments), t3.finish();
    }
  };
  function h(t3) {
    return t3 ? "string" == typeof t3 ? a(t3) : t3.hashCode() : -1;
  }
  __name(h, "h");
  function c(t3, e2) {
    return t3 && t3.equals ? t3.equals(e2) : t3 === e2;
  }
  __name(c, "c");
  function u(t3) {
    return null === t3 ? "null" : t3;
  }
  __name(u, "u");
  function d(t3) {
    return Array.isArray(t3) ? "[" + t3.map(u).join(", ") + "]" : "null";
  }
  __name(d, "d");
  var g = class {
    static {
      __name(this, "g");
    }
    constructor(t3, e2) {
      this.buckets = new Array(16), this.threshold = Math.floor(12), this.itemCount = 0, this.hashFunction = t3 || h, this.equalsFunction = e2 || c;
    }
    get(t3) {
      if (null == t3) return t3;
      const e2 = this._getBucket(t3);
      if (!e2) return null;
      for (const n2 of e2) if (this.equalsFunction(n2, t3)) return n2;
      return null;
    }
    add(t3) {
      return this.getOrAdd(t3) === t3;
    }
    getOrAdd(t3) {
      this._expand();
      const e2 = this._getSlot(t3);
      let n2 = this.buckets[e2];
      if (!n2) return n2 = [t3], this.buckets[e2] = n2, this.itemCount++, t3;
      for (const e3 of n2) if (this.equalsFunction(e3, t3)) return e3;
      return n2.push(t3), this.itemCount++, t3;
    }
    has(t3) {
      return null != this.get(t3);
    }
    values() {
      return this.buckets.filter((t3) => null != t3).flat(1);
    }
    toString() {
      return d(this.values());
    }
    get length() {
      return this.itemCount;
    }
    _getSlot(t3) {
      return this.hashFunction(t3) & this.buckets.length - 1;
    }
    _getBucket(t3) {
      return this.buckets[this._getSlot(t3)];
    }
    _expand() {
      if (this.itemCount <= this.threshold) return;
      const t3 = this.buckets, e2 = 2 * this.buckets.length;
      this.buckets = new Array(e2), this.threshold = Math.floor(0.75 * e2);
      for (const e3 of t3) if (e3) for (const t4 of e3) {
        const e4 = this._getSlot(t4);
        let n2 = this.buckets[e4];
        n2 || (n2 = [], this.buckets[e4] = n2), n2.push(t4);
      }
    }
  };
  var p = class _p {
    static {
      __name(this, "p");
    }
    hashCode() {
      const t3 = new l();
      return this.updateHashCode(t3), t3.finish();
    }
    evaluate(t3, e2) {
    }
    evalPrecedence(t3, e2) {
      return this;
    }
    static andContext(t3, e2) {
      if (null === t3 || t3 === _p.NONE) return e2;
      if (null === e2 || e2 === _p.NONE) return t3;
      const n2 = new f(t3, e2);
      return 1 === n2.opnds.length ? n2.opnds[0] : n2;
    }
    static orContext(t3, e2) {
      if (null === t3) return e2;
      if (null === e2) return t3;
      if (t3 === _p.NONE || e2 === _p.NONE) return _p.NONE;
      const n2 = new x(t3, e2);
      return 1 === n2.opnds.length ? n2.opnds[0] : n2;
    }
  };
  var f = class _f extends p {
    static {
      __name(this, "f");
    }
    constructor(t3, e2) {
      super();
      const n2 = new g();
      t3 instanceof _f ? t3.opnds.map(function(t4) {
        n2.add(t4);
      }) : n2.add(t3), e2 instanceof _f ? e2.opnds.map(function(t4) {
        n2.add(t4);
      }) : n2.add(e2);
      const s2 = T(n2);
      if (s2.length > 0) {
        let t4 = null;
        s2.map(function(e3) {
          (null === t4 || e3.precedence < t4.precedence) && (t4 = e3);
        }), n2.add(t4);
      }
      this.opnds = Array.from(n2.values());
    }
    equals(t3) {
      return this === t3 || t3 instanceof _f && r(this.opnds, t3.opnds);
    }
    updateHashCode(t3) {
      t3.update(this.opnds, "AND");
    }
    evaluate(t3, e2) {
      for (let n2 = 0; n2 < this.opnds.length; n2++) if (!this.opnds[n2].evaluate(t3, e2)) return false;
      return true;
    }
    evalPrecedence(t3, e2) {
      let n2 = false;
      const s2 = [];
      for (let i3 = 0; i3 < this.opnds.length; i3++) {
        const r2 = this.opnds[i3], o2 = r2.evalPrecedence(t3, e2);
        if (n2 |= o2 !== r2, null === o2) return null;
        o2 !== p.NONE && s2.push(o2);
      }
      if (!n2) return this;
      if (0 === s2.length) return p.NONE;
      let i2 = null;
      return s2.map(function(t4) {
        i2 = null === i2 ? t4 : p.andContext(i2, t4);
      }), i2;
    }
    toString() {
      const t3 = this.opnds.map((t4) => t4.toString());
      return (t3.length > 3 ? t3.slice(3) : t3).join("&&");
    }
  };
  var x = class _x extends p {
    static {
      __name(this, "x");
    }
    constructor(t3, e2) {
      super();
      const n2 = new g();
      t3 instanceof _x ? t3.opnds.map(function(t4) {
        n2.add(t4);
      }) : n2.add(t3), e2 instanceof _x ? e2.opnds.map(function(t4) {
        n2.add(t4);
      }) : n2.add(e2);
      const s2 = T(n2);
      if (s2.length > 0) {
        const t4 = s2.sort(function(t5, e4) {
          return t5.compareTo(e4);
        }), e3 = t4[t4.length - 1];
        n2.add(e3);
      }
      this.opnds = Array.from(n2.values());
    }
    equals(t3) {
      return this === t3 || t3 instanceof _x && r(this.opnds, t3.opnds);
    }
    updateHashCode(t3) {
      t3.update(this.opnds, "OR");
    }
    evaluate(t3, e2) {
      for (let n2 = 0; n2 < this.opnds.length; n2++) if (this.opnds[n2].evaluate(t3, e2)) return true;
      return false;
    }
    evalPrecedence(t3, e2) {
      let n2 = false;
      const s2 = [];
      for (let i2 = 0; i2 < this.opnds.length; i2++) {
        const r2 = this.opnds[i2], o2 = r2.evalPrecedence(t3, e2);
        if (n2 |= o2 !== r2, o2 === p.NONE) return p.NONE;
        null !== o2 && s2.push(o2);
      }
      if (!n2) return this;
      if (0 === s2.length) return null;
      return s2.map(function(t4) {
        return t4;
      }), null;
    }
    toString() {
      const t3 = this.opnds.map((t4) => t4.toString());
      return (t3.length > 3 ? t3.slice(3) : t3).join("||");
    }
  };
  function T(t3) {
    const e2 = [];
    return t3.values().map(function(t4) {
      t4 instanceof p.PrecedencePredicate && e2.push(t4);
    }), e2;
  }
  __name(T, "T");
  function S(t3, e2) {
    if (null === t3) {
      const t4 = { state: null, alt: null, context: null, semanticContext: null };
      return e2 && (t4.reachesIntoOuterContext = 0), t4;
    }
    {
      const n2 = {};
      return n2.state = t3.state || null, n2.alt = void 0 === t3.alt ? null : t3.alt, n2.context = t3.context || null, n2.semanticContext = t3.semanticContext || null, e2 && (n2.reachesIntoOuterContext = t3.reachesIntoOuterContext || 0, n2.precedenceFilterSuppressed = t3.precedenceFilterSuppressed || false), n2;
    }
  }
  __name(S, "S");
  var m = class _m {
    static {
      __name(this, "m");
    }
    constructor(t3, e2) {
      this.checkContext(t3, e2), t3 = S(t3), e2 = S(e2, true), this.state = null !== t3.state ? t3.state : e2.state, this.alt = null !== t3.alt ? t3.alt : e2.alt, this.context = null !== t3.context ? t3.context : e2.context, this.semanticContext = null !== t3.semanticContext ? t3.semanticContext : null !== e2.semanticContext ? e2.semanticContext : p.NONE, this.reachesIntoOuterContext = e2.reachesIntoOuterContext, this.precedenceFilterSuppressed = e2.precedenceFilterSuppressed;
    }
    checkContext(t3, e2) {
      null !== t3.context && void 0 !== t3.context || null !== e2 && null !== e2.context && void 0 !== e2.context || (this.context = null);
    }
    hashCode() {
      const t3 = new l();
      return this.updateHashCode(t3), t3.finish();
    }
    updateHashCode(t3) {
      t3.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _m && this.state.stateNumber === t3.state.stateNumber && this.alt === t3.alt && (null === this.context ? null === t3.context : this.context.equals(t3.context)) && this.semanticContext.equals(t3.semanticContext) && this.precedenceFilterSuppressed === t3.precedenceFilterSuppressed;
    }
    hashCodeForConfigSet() {
      const t3 = new l();
      return t3.update(this.state.stateNumber, this.alt, this.semanticContext), t3.finish();
    }
    equalsForConfigSet(t3) {
      return this === t3 || t3 instanceof _m && this.state.stateNumber === t3.state.stateNumber && this.alt === t3.alt && this.semanticContext.equals(t3.semanticContext);
    }
    toString() {
      return "(" + this.state + "," + this.alt + (null !== this.context ? ",[" + this.context.toString() + "]" : "") + (this.semanticContext !== p.NONE ? "," + this.semanticContext.toString() : "") + (this.reachesIntoOuterContext > 0 ? ",up=" + this.reachesIntoOuterContext : "") + ")";
    }
  };
  var E = class _E {
    static {
      __name(this, "E");
    }
    constructor(t3, e2) {
      this.start = t3, this.stop = e2;
    }
    clone() {
      return new _E(this.start, this.stop);
    }
    contains(t3) {
      return t3 >= this.start && t3 < this.stop;
    }
    toString() {
      return this.start === this.stop - 1 ? this.start.toString() : this.start.toString() + ".." + (this.stop - 1).toString();
    }
    get length() {
      return this.stop - this.start;
    }
  };
  E.INVALID_INTERVAL = new E(-1, -2);
  var _ = class __ {
    static {
      __name(this, "_");
    }
    constructor() {
      this.intervals = null, this.readOnly = false;
    }
    first(t3) {
      return null === this.intervals || 0 === this.intervals.length ? i.INVALID_TYPE : this.intervals[0].start;
    }
    addOne(t3) {
      this.addInterval(new E(t3, t3 + 1));
    }
    addRange(t3, e2) {
      this.addInterval(new E(t3, e2 + 1));
    }
    addInterval(t3) {
      if (null === this.intervals) this.intervals = [], this.intervals.push(t3.clone());
      else {
        for (let e2 = 0; e2 < this.intervals.length; e2++) {
          const n2 = this.intervals[e2];
          if (t3.stop < n2.start) return void this.intervals.splice(e2, 0, t3);
          if (t3.stop === n2.start) return void (this.intervals[e2] = new E(t3.start, n2.stop));
          if (t3.start <= n2.stop) return this.intervals[e2] = new E(Math.min(n2.start, t3.start), Math.max(n2.stop, t3.stop)), void this.reduce(e2);
        }
        this.intervals.push(t3.clone());
      }
    }
    addSet(t3) {
      return null !== t3.intervals && t3.intervals.forEach((t4) => this.addInterval(t4), this), this;
    }
    reduce(t3) {
      if (t3 < this.intervals.length - 1) {
        const e2 = this.intervals[t3], n2 = this.intervals[t3 + 1];
        e2.stop >= n2.stop ? (this.intervals.splice(t3 + 1, 1), this.reduce(t3)) : e2.stop >= n2.start && (this.intervals[t3] = new E(e2.start, n2.stop), this.intervals.splice(t3 + 1, 1));
      }
    }
    complement(t3, e2) {
      const n2 = new __();
      return n2.addInterval(new E(t3, e2 + 1)), null !== this.intervals && this.intervals.forEach((t4) => n2.removeRange(t4)), n2;
    }
    contains(t3) {
      if (null === this.intervals) return false;
      for (let e2 = 0; e2 < this.intervals.length; e2++) if (this.intervals[e2].contains(t3)) return true;
      return false;
    }
    removeRange(t3) {
      if (t3.start === t3.stop - 1) this.removeOne(t3.start);
      else if (null !== this.intervals) {
        let e2 = 0;
        for (let n2 = 0; n2 < this.intervals.length; n2++) {
          const n3 = this.intervals[e2];
          if (t3.stop <= n3.start) return;
          if (t3.start > n3.start && t3.stop < n3.stop) {
            this.intervals[e2] = new E(n3.start, t3.start);
            const s2 = new E(t3.stop, n3.stop);
            return void this.intervals.splice(e2, 0, s2);
          }
          t3.start <= n3.start && t3.stop >= n3.stop ? (this.intervals.splice(e2, 1), e2 -= 1) : t3.start < n3.stop ? this.intervals[e2] = new E(n3.start, t3.start) : t3.stop < n3.stop && (this.intervals[e2] = new E(t3.stop, n3.stop)), e2 += 1;
        }
      }
    }
    removeOne(t3) {
      if (null !== this.intervals) for (let e2 = 0; e2 < this.intervals.length; e2++) {
        const n2 = this.intervals[e2];
        if (t3 < n2.start) return;
        if (t3 === n2.start && t3 === n2.stop - 1) return void this.intervals.splice(e2, 1);
        if (t3 === n2.start) return void (this.intervals[e2] = new E(n2.start + 1, n2.stop));
        if (t3 === n2.stop - 1) return void (this.intervals[e2] = new E(n2.start, n2.stop - 1));
        if (t3 < n2.stop - 1) {
          const s2 = new E(n2.start, t3);
          return n2.start = t3 + 1, void this.intervals.splice(e2, 0, s2);
        }
      }
    }
    toString(t3, e2, n2) {
      return t3 = t3 || null, e2 = e2 || null, n2 = n2 || false, null === this.intervals ? "{}" : null !== t3 || null !== e2 ? this.toTokenString(t3, e2) : n2 ? this.toCharString() : this.toIndexString();
    }
    toCharString() {
      const t3 = [];
      for (let e2 = 0; e2 < this.intervals.length; e2++) {
        const n2 = this.intervals[e2];
        n2.stop === n2.start + 1 ? n2.start === i.EOF ? t3.push("<EOF>") : t3.push("'" + String.fromCharCode(n2.start) + "'") : t3.push("'" + String.fromCharCode(n2.start) + "'..'" + String.fromCharCode(n2.stop - 1) + "'");
      }
      return t3.length > 1 ? "{" + t3.join(", ") + "}" : t3[0];
    }
    toIndexString() {
      const t3 = [];
      for (let e2 = 0; e2 < this.intervals.length; e2++) {
        const n2 = this.intervals[e2];
        n2.stop === n2.start + 1 ? n2.start === i.EOF ? t3.push("<EOF>") : t3.push(n2.start.toString()) : t3.push(n2.start.toString() + ".." + (n2.stop - 1).toString());
      }
      return t3.length > 1 ? "{" + t3.join(", ") + "}" : t3[0];
    }
    toTokenString(t3, e2) {
      const n2 = [];
      for (let s2 = 0; s2 < this.intervals.length; s2++) {
        const i2 = this.intervals[s2];
        for (let s3 = i2.start; s3 < i2.stop; s3++) n2.push(this.elementName(t3, e2, s3));
      }
      return n2.length > 1 ? "{" + n2.join(", ") + "}" : n2[0];
    }
    elementName(t3, e2, n2) {
      return n2 === i.EOF ? "<EOF>" : n2 === i.EPSILON ? "<EPSILON>" : t3[n2] || e2[n2];
    }
    get length() {
      return this.intervals.map((t3) => t3.length).reduce((t3, e2) => t3 + e2);
    }
  };
  var C2 = class _C {
    static {
      __name(this, "C");
    }
    constructor() {
      this.atn = null, this.stateNumber = _C.INVALID_STATE_NUMBER, this.stateType = null, this.ruleIndex = 0, this.epsilonOnlyTransitions = false, this.transitions = [], this.nextTokenWithinRule = null;
    }
    toString() {
      return this.stateNumber;
    }
    equals(t3) {
      return t3 instanceof _C && this.stateNumber === t3.stateNumber;
    }
    isNonGreedyExitState() {
      return false;
    }
    addTransition(t3, e2) {
      void 0 === e2 && (e2 = -1), 0 === this.transitions.length ? this.epsilonOnlyTransitions = t3.isEpsilon : this.epsilonOnlyTransitions !== t3.isEpsilon && (this.epsilonOnlyTransitions = false), -1 === e2 ? this.transitions.push(t3) : this.transitions.splice(e2, 1, t3);
    }
  };
  C2.INVALID_TYPE = 0, C2.BASIC = 1, C2.RULE_START = 2, C2.BLOCK_START = 3, C2.PLUS_BLOCK_START = 4, C2.STAR_BLOCK_START = 5, C2.TOKEN_START = 6, C2.RULE_STOP = 7, C2.BLOCK_END = 8, C2.STAR_LOOP_BACK = 9, C2.STAR_LOOP_ENTRY = 10, C2.PLUS_LOOP_BACK = 11, C2.LOOP_END = 12, C2.serializationNames = ["INVALID", "BASIC", "RULE_START", "BLOCK_START", "PLUS_BLOCK_START", "STAR_BLOCK_START", "TOKEN_START", "RULE_STOP", "BLOCK_END", "STAR_LOOP_BACK", "STAR_LOOP_ENTRY", "PLUS_LOOP_BACK", "LOOP_END"], C2.INVALID_STATE_NUMBER = -1;
  var A = class extends C2 {
    static {
      __name(this, "A");
    }
    constructor() {
      return super(), this.stateType = C2.RULE_STOP, this;
    }
  };
  var N = class {
    static {
      __name(this, "N");
    }
    constructor(t3) {
      if (null == t3) throw "target cannot be null.";
      this.target = t3, this.isEpsilon = false, this.label = null;
    }
  };
  N.EPSILON = 1, N.RANGE = 2, N.RULE = 3, N.PREDICATE = 4, N.ATOM = 5, N.ACTION = 6, N.SET = 7, N.NOT_SET = 8, N.WILDCARD = 9, N.PRECEDENCE = 10, N.serializationNames = ["INVALID", "EPSILON", "RANGE", "RULE", "PREDICATE", "ATOM", "ACTION", "SET", "NOT_SET", "WILDCARD", "PRECEDENCE"], N.serializationTypes = { EpsilonTransition: N.EPSILON, RangeTransition: N.RANGE, RuleTransition: N.RULE, PredicateTransition: N.PREDICATE, AtomTransition: N.ATOM, ActionTransition: N.ACTION, SetTransition: N.SET, NotSetTransition: N.NOT_SET, WildcardTransition: N.WILDCARD, PrecedencePredicateTransition: N.PRECEDENCE };
  var k = class extends N {
    static {
      __name(this, "k");
    }
    constructor(t3, e2, n2, s2) {
      super(t3), this.ruleIndex = e2, this.precedence = n2, this.followState = s2, this.serializationType = N.RULE, this.isEpsilon = true;
    }
    matches(t3, e2, n2) {
      return false;
    }
  };
  var I = class extends N {
    static {
      __name(this, "I");
    }
    constructor(t3, e2) {
      super(t3), this.serializationType = N.SET, null != e2 ? this.label = e2 : (this.label = new _(), this.label.addOne(i.INVALID_TYPE));
    }
    matches(t3, e2, n2) {
      return this.label.contains(t3);
    }
    toString() {
      return this.label.toString();
    }
  };
  var y = class extends I {
    static {
      __name(this, "y");
    }
    constructor(t3, e2) {
      super(t3, e2), this.serializationType = N.NOT_SET;
    }
    matches(t3, e2, n2) {
      return t3 >= e2 && t3 <= n2 && !super.matches(t3, e2, n2);
    }
    toString() {
      return "~" + super.toString();
    }
  };
  var L = class extends N {
    static {
      __name(this, "L");
    }
    constructor(t3) {
      super(t3), this.serializationType = N.WILDCARD;
    }
    matches(t3, e2, n2) {
      return t3 >= e2 && t3 <= n2;
    }
    toString() {
      return ".";
    }
  };
  var O = class extends N {
    static {
      __name(this, "O");
    }
    constructor(t3) {
      super(t3);
    }
  };
  var R = class {
    static {
      __name(this, "R");
    }
  };
  var w = class extends R {
    static {
      __name(this, "w");
    }
  };
  var v = class extends w {
    static {
      __name(this, "v");
    }
  };
  var P = class extends v {
    static {
      __name(this, "P");
    }
    get ruleContext() {
      throw new Error("missing interface implementation");
    }
  };
  var b = class extends v {
    static {
      __name(this, "b");
    }
  };
  var D = class extends b {
    static {
      __name(this, "D");
    }
  };
  var F = { toStringTree: /* @__PURE__ */ __name(function(t3, e2, n2) {
    e2 = e2 || null, null !== (n2 = n2 || null) && (e2 = n2.ruleNames);
    let s2 = F.getNodeText(t3, e2);
    s2 = function(t4) {
      return t4 = t4.replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r");
    }(s2);
    const i2 = t3.getChildCount();
    if (0 === i2) return s2;
    let r2 = "(" + s2 + " ";
    i2 > 0 && (s2 = F.toStringTree(t3.getChild(0), e2), r2 = r2.concat(s2));
    for (let n3 = 1; n3 < i2; n3++) s2 = F.toStringTree(t3.getChild(n3), e2), r2 = r2.concat(" " + s2);
    return r2 = r2.concat(")"), r2;
  }, "toStringTree"), getNodeText: /* @__PURE__ */ __name(function(t3, e2, n2) {
    if (e2 = e2 || null, null !== (n2 = n2 || null) && (e2 = n2.ruleNames), null !== e2) {
      if (t3 instanceof P) {
        const n3 = t3.ruleContext.getAltNumber();
        return 0 != n3 ? e2[t3.ruleIndex] + ":" + n3 : e2[t3.ruleIndex];
      }
      if (t3 instanceof D) return t3.toString();
      if (t3 instanceof b && null !== t3.symbol) return t3.symbol.text;
    }
    const s2 = t3.getPayload();
    return s2 instanceof i ? s2.text : t3.getPayload().toString();
  }, "getNodeText"), getChildren: /* @__PURE__ */ __name(function(t3) {
    const e2 = [];
    for (let n2 = 0; n2 < t3.getChildCount(); n2++) e2.push(t3.getChild(n2));
    return e2;
  }, "getChildren"), getAncestors: /* @__PURE__ */ __name(function(t3) {
    let e2 = [];
    for (t3 = t3.getParent(); null !== t3; ) e2 = [t3].concat(e2), t3 = t3.getParent();
    return e2;
  }, "getAncestors"), findAllTokenNodes: /* @__PURE__ */ __name(function(t3, e2) {
    return F.findAllNodes(t3, e2, true);
  }, "findAllTokenNodes"), findAllRuleNodes: /* @__PURE__ */ __name(function(t3, e2) {
    return F.findAllNodes(t3, e2, false);
  }, "findAllRuleNodes"), findAllNodes: /* @__PURE__ */ __name(function(t3, e2, n2) {
    const s2 = [];
    return F._findAllNodes(t3, e2, n2, s2), s2;
  }, "findAllNodes"), _findAllNodes: /* @__PURE__ */ __name(function(t3, e2, n2, s2) {
    n2 && t3 instanceof b ? t3.symbol.type === e2 && s2.push(t3) : !n2 && t3 instanceof P && t3.ruleIndex === e2 && s2.push(t3);
    for (let i2 = 0; i2 < t3.getChildCount(); i2++) F._findAllNodes(t3.getChild(i2), e2, n2, s2);
  }, "_findAllNodes"), descendants: /* @__PURE__ */ __name(function(t3) {
    let e2 = [t3];
    for (let n2 = 0; n2 < t3.getChildCount(); n2++) e2 = e2.concat(F.descendants(t3.getChild(n2)));
    return e2;
  }, "descendants") };
  var M = F;
  var U = class extends P {
    static {
      __name(this, "U");
    }
    constructor(t3, e2) {
      super(), this.parentCtx = t3 || null, this.invokingState = e2 || -1;
    }
    depth() {
      let t3 = 0, e2 = this;
      for (; null !== e2; ) e2 = e2.parentCtx, t3 += 1;
      return t3;
    }
    isEmpty() {
      return -1 === this.invokingState;
    }
    getSourceInterval() {
      return E.INVALID_INTERVAL;
    }
    get ruleContext() {
      return this;
    }
    getPayload() {
      return this;
    }
    getText() {
      return 0 === this.getChildCount() ? "" : this.children.map(function(t3) {
        return t3.getText();
      }).join("");
    }
    getAltNumber() {
      return 0;
    }
    setAltNumber(t3) {
    }
    getChild(t3) {
      return null;
    }
    getChildCount() {
      return 0;
    }
    accept(t3) {
      return t3.visitChildren(this);
    }
    toStringTree(t3, e2) {
      return M.toStringTree(this, t3, e2);
    }
    toString(t3, e2) {
      t3 = t3 || null, e2 = e2 || null;
      let n2 = this, s2 = "[";
      for (; null !== n2 && n2 !== e2; ) {
        if (null === t3) n2.isEmpty() || (s2 += n2.invokingState);
        else {
          const e3 = n2.ruleIndex;
          s2 += e3 >= 0 && e3 < t3.length ? t3[e3] : "" + e3;
        }
        null === n2.parentCtx || null === t3 && n2.parentCtx.isEmpty() || (s2 += " "), n2 = n2.parentCtx;
      }
      return s2 += "]", s2;
    }
  };
  var B = class _B {
    static {
      __name(this, "B");
    }
    constructor(t3) {
      this.cachedHashCode = t3;
    }
    isEmpty() {
      return this === _B.EMPTY;
    }
    hasEmptyPath() {
      return this.getReturnState(this.length - 1) === _B.EMPTY_RETURN_STATE;
    }
    hashCode() {
      return this.cachedHashCode;
    }
    updateHashCode(t3) {
      t3.update(this.cachedHashCode);
    }
  };
  B.EMPTY = null, B.EMPTY_RETURN_STATE = 2147483647, B.globalNodeCount = 1, B.id = B.globalNodeCount, B.trace_atn_sim = false;
  var z = class _z extends B {
    static {
      __name(this, "z");
    }
    constructor(t3, e2) {
      const n2 = new l();
      return n2.update(t3, e2), super(n2.finish()), this.parents = t3, this.returnStates = e2, this;
    }
    isEmpty() {
      return this.returnStates[0] === B.EMPTY_RETURN_STATE;
    }
    getParent(t3) {
      return this.parents[t3];
    }
    getReturnState(t3) {
      return this.returnStates[t3];
    }
    equals(t3) {
      return this === t3 || t3 instanceof _z && this.hashCode() === t3.hashCode() && r(this.returnStates, t3.returnStates) && r(this.parents, t3.parents);
    }
    toString() {
      if (this.isEmpty()) return "[]";
      {
        let t3 = "[";
        for (let e2 = 0; e2 < this.returnStates.length; e2++) e2 > 0 && (t3 += ", "), this.returnStates[e2] !== B.EMPTY_RETURN_STATE ? (t3 += this.returnStates[e2], null !== this.parents[e2] ? t3 = t3 + " " + this.parents[e2] : t3 += "null") : t3 += "$";
        return t3 + "]";
      }
    }
    get length() {
      return this.returnStates.length;
    }
  };
  var V = class _V extends B {
    static {
      __name(this, "V");
    }
    constructor(t3, e2) {
      let n2 = 0;
      const s2 = new l();
      null !== t3 ? s2.update(t3, e2) : s2.update(1), n2 = s2.finish(), super(n2), this.parentCtx = t3, this.returnState = e2;
    }
    getParent(t3) {
      return this.parentCtx;
    }
    getReturnState(t3) {
      return this.returnState;
    }
    equals(t3) {
      return this === t3 || t3 instanceof _V && this.hashCode() === t3.hashCode() && this.returnState === t3.returnState && (null == this.parentCtx ? null == t3.parentCtx : this.parentCtx.equals(t3.parentCtx));
    }
    toString() {
      const t3 = null === this.parentCtx ? "" : this.parentCtx.toString();
      return 0 === t3.length ? this.returnState === B.EMPTY_RETURN_STATE ? "$" : "" + this.returnState : this.returnState + " " + t3;
    }
    get length() {
      return 1;
    }
    static create(t3, e2) {
      return e2 === B.EMPTY_RETURN_STATE && null === t3 ? B.EMPTY : new _V(t3, e2);
    }
  };
  var q = class extends V {
    static {
      __name(this, "q");
    }
    constructor() {
      super(null, B.EMPTY_RETURN_STATE);
    }
    isEmpty() {
      return true;
    }
    getParent(t3) {
      return null;
    }
    getReturnState(t3) {
      return this.returnState;
    }
    equals(t3) {
      return this === t3;
    }
    toString() {
      return "$";
    }
  };
  B.EMPTY = new q();
  var H = class {
    static {
      __name(this, "H");
    }
    constructor(t3, e2) {
      this.buckets = new Array(16), this.threshold = Math.floor(12), this.itemCount = 0, this.hashFunction = t3 || h, this.equalsFunction = e2 || c;
    }
    set(t3, e2) {
      this._expand();
      const n2 = this._getSlot(t3);
      let s2 = this.buckets[n2];
      if (!s2) return s2 = [[t3, e2]], this.buckets[n2] = s2, this.itemCount++, e2;
      const i2 = s2.find((e3) => this.equalsFunction(e3[0], t3), this);
      if (i2) {
        const t4 = i2[1];
        return i2[1] = e2, t4;
      }
      return s2.push([t3, e2]), this.itemCount++, e2;
    }
    containsKey(t3) {
      const e2 = this._getBucket(t3);
      return !!e2 && !!e2.find((e3) => this.equalsFunction(e3[0], t3), this);
    }
    get(t3) {
      const e2 = this._getBucket(t3);
      if (!e2) return null;
      const n2 = e2.find((e3) => this.equalsFunction(e3[0], t3), this);
      return n2 ? n2[1] : null;
    }
    entries() {
      return this.buckets.filter((t3) => null != t3).flat(1);
    }
    getKeys() {
      return this.entries().map((t3) => t3[0]);
    }
    getValues() {
      return this.entries().map((t3) => t3[1]);
    }
    toString() {
      return "[" + this.entries().map((t3) => "{" + t3[0] + ":" + t3[1] + "}").join(", ") + "]";
    }
    get length() {
      return this.itemCount;
    }
    _getSlot(t3) {
      return this.hashFunction(t3) & this.buckets.length - 1;
    }
    _getBucket(t3) {
      return this.buckets[this._getSlot(t3)];
    }
    _expand() {
      if (this.itemCount <= this.threshold) return;
      const t3 = this.buckets, e2 = 2 * this.buckets.length;
      this.buckets = new Array(e2), this.threshold = Math.floor(0.75 * e2);
      for (const e3 of t3) if (e3) for (const t4 of e3) {
        const e4 = this._getSlot(t4[0]);
        let n2 = this.buckets[e4];
        n2 || (n2 = [], this.buckets[e4] = n2), n2.push(t4);
      }
    }
  };
  function K(t3, e2) {
    if (null == e2 && (e2 = U.EMPTY), null === e2.parentCtx || e2 === U.EMPTY) return B.EMPTY;
    const n2 = K(t3, e2.parentCtx), s2 = t3.states[e2.invokingState].transitions[0];
    return V.create(n2, s2.followState.stateNumber);
  }
  __name(K, "K");
  function Y(t3, e2, n2) {
    if (t3.isEmpty()) return t3;
    let s2 = n2.get(t3) || null;
    if (null !== s2) return s2;
    if (s2 = e2.get(t3), null !== s2) return n2.set(t3, s2), s2;
    let i2 = false, r2 = [];
    for (let s3 = 0; s3 < r2.length; s3++) {
      const o3 = Y(t3.getParent(s3), e2, n2);
      if (i2 || o3 !== t3.getParent(s3)) {
        if (!i2) {
          r2 = [];
          for (let e3 = 0; e3 < t3.length; e3++) r2[e3] = t3.getParent(e3);
          i2 = true;
        }
        r2[s3] = o3;
      }
    }
    if (!i2) return e2.add(t3), n2.set(t3, t3), t3;
    let o2 = null;
    return o2 = 0 === r2.length ? B.EMPTY : 1 === r2.length ? V.create(r2[0], t3.getReturnState(0)) : new z(r2, t3.returnStates), e2.add(o2), n2.set(o2, o2), n2.set(t3, o2), o2;
  }
  __name(Y, "Y");
  function G(t3, e2, n2, s2) {
    if (t3 === e2) return t3;
    if (t3 instanceof V && e2 instanceof V) return function(t4, e3, n3, s3) {
      if (null !== s3) {
        let n4 = s3.get(t4, e3);
        if (null !== n4) return n4;
        if (n4 = s3.get(e3, t4), null !== n4) return n4;
      }
      const i2 = function(t5, e4, n4) {
        if (n4) {
          if (t5 === B.EMPTY) return B.EMPTY;
          if (e4 === B.EMPTY) return B.EMPTY;
        } else {
          if (t5 === B.EMPTY && e4 === B.EMPTY) return B.EMPTY;
          if (t5 === B.EMPTY) {
            const t6 = [e4.returnState, B.EMPTY_RETURN_STATE], n5 = [e4.parentCtx, null];
            return new z(n5, t6);
          }
          if (e4 === B.EMPTY) {
            const e5 = [t5.returnState, B.EMPTY_RETURN_STATE], n5 = [t5.parentCtx, null];
            return new z(n5, e5);
          }
        }
        return null;
      }(t4, e3, n3);
      if (null !== i2) return null !== s3 && s3.set(t4, e3, i2), i2;
      if (t4.returnState === e3.returnState) {
        const i3 = G(t4.parentCtx, e3.parentCtx, n3, s3);
        if (i3 === t4.parentCtx) return t4;
        if (i3 === e3.parentCtx) return e3;
        const r2 = V.create(i3, t4.returnState);
        return null !== s3 && s3.set(t4, e3, r2), r2;
      }
      {
        let n4 = null;
        if ((t4 === e3 || null !== t4.parentCtx && t4.parentCtx === e3.parentCtx) && (n4 = t4.parentCtx), null !== n4) {
          const i4 = [t4.returnState, e3.returnState];
          t4.returnState > e3.returnState && (i4[0] = e3.returnState, i4[1] = t4.returnState);
          const r3 = new z([n4, n4], i4);
          return null !== s3 && s3.set(t4, e3, r3), r3;
        }
        const i3 = [t4.returnState, e3.returnState];
        let r2 = [t4.parentCtx, e3.parentCtx];
        t4.returnState > e3.returnState && (i3[0] = e3.returnState, i3[1] = t4.returnState, r2 = [e3.parentCtx, t4.parentCtx]);
        const o2 = new z(r2, i3);
        return null !== s3 && s3.set(t4, e3, o2), o2;
      }
    }(t3, e2, n2, s2);
    if (n2) {
      if (t3 instanceof q) return t3;
      if (e2 instanceof q) return e2;
    }
    return t3 instanceof V && (t3 = new z([t3.getParent()], [t3.returnState])), e2 instanceof V && (e2 = new z([e2.getParent()], [e2.returnState])), function(t4, e3, n3, s3) {
      if (null !== s3) {
        let n4 = s3.get(t4, e3);
        if (null !== n4) return B.trace_atn_sim && console.log("mergeArrays a=" + t4 + ",b=" + e3 + " -> previous"), n4;
        if (n4 = s3.get(e3, t4), null !== n4) return B.trace_atn_sim && console.log("mergeArrays a=" + t4 + ",b=" + e3 + " -> previous"), n4;
      }
      let i2 = 0, r2 = 0, o2 = 0, a2 = new Array(t4.returnStates.length + e3.returnStates.length).fill(0), l2 = new Array(t4.returnStates.length + e3.returnStates.length).fill(null);
      for (; i2 < t4.returnStates.length && r2 < e3.returnStates.length; ) {
        const h3 = t4.parents[i2], c2 = e3.parents[r2];
        if (t4.returnStates[i2] === e3.returnStates[r2]) {
          const e4 = t4.returnStates[i2];
          e4 === B.EMPTY_RETURN_STATE && null === h3 && null === c2 || null !== h3 && null !== c2 && h3 === c2 ? (l2[o2] = h3, a2[o2] = e4) : (l2[o2] = G(h3, c2, n3, s3), a2[o2] = e4), i2 += 1, r2 += 1;
        } else t4.returnStates[i2] < e3.returnStates[r2] ? (l2[o2] = h3, a2[o2] = t4.returnStates[i2], i2 += 1) : (l2[o2] = c2, a2[o2] = e3.returnStates[r2], r2 += 1);
        o2 += 1;
      }
      if (i2 < t4.returnStates.length) for (let e4 = i2; e4 < t4.returnStates.length; e4++) l2[o2] = t4.parents[e4], a2[o2] = t4.returnStates[e4], o2 += 1;
      else for (let t5 = r2; t5 < e3.returnStates.length; t5++) l2[o2] = e3.parents[t5], a2[o2] = e3.returnStates[t5], o2 += 1;
      if (o2 < l2.length) {
        if (1 === o2) {
          const n4 = V.create(l2[0], a2[0]);
          return null !== s3 && s3.set(t4, e3, n4), n4;
        }
        l2 = l2.slice(0, o2), a2 = a2.slice(0, o2);
      }
      const h2 = new z(l2, a2);
      return h2.equals(t4) ? (null !== s3 && s3.set(t4, e3, t4), B.trace_atn_sim && console.log("mergeArrays a=" + t4 + ",b=" + e3 + " -> a"), t4) : h2.equals(e3) ? (null !== s3 && s3.set(t4, e3, e3), B.trace_atn_sim && console.log("mergeArrays a=" + t4 + ",b=" + e3 + " -> b"), e3) : (function(t5) {
        const e4 = new H();
        for (let n4 = 0; n4 < t5.length; n4++) {
          const s4 = t5[n4];
          e4.containsKey(s4) || e4.set(s4, s4);
        }
        for (let n4 = 0; n4 < t5.length; n4++) t5[n4] = e4.get(t5[n4]);
      }(l2), null !== s3 && s3.set(t4, e3, h2), B.trace_atn_sim && console.log("mergeArrays a=" + t4 + ",b=" + e3 + " -> " + h2), h2);
    }(t3, e2, n2, s2);
  }
  __name(G, "G");
  var W = class _W {
    static {
      __name(this, "W");
    }
    constructor() {
      this.data = new Uint32Array(1);
    }
    set(t3) {
      _W._checkIndex(t3), this._resize(t3), this.data[t3 >>> 5] |= 1 << t3 % 32;
    }
    get(t3) {
      _W._checkIndex(t3);
      const e2 = t3 >>> 5;
      return !(e2 >= this.data.length || !(this.data[e2] & 1 << t3 % 32));
    }
    clear(t3) {
      _W._checkIndex(t3);
      const e2 = t3 >>> 5;
      e2 < this.data.length && (this.data[e2] &= ~(1 << t3));
    }
    or(t3) {
      const e2 = Math.min(this.data.length, t3.data.length);
      for (let n2 = 0; n2 < e2; ++n2) this.data[n2] |= t3.data[n2];
      if (this.data.length < t3.data.length) {
        this._resize((t3.data.length << 5) - 1);
        const n2 = t3.data.length;
        for (let s2 = e2; s2 < n2; ++s2) this.data[s2] = t3.data[s2];
      }
    }
    values() {
      const t3 = new Array(this.length);
      let e2 = 0;
      const n2 = this.data.length;
      for (let s2 = 0; s2 < n2; ++s2) {
        let n3 = this.data[s2];
        for (; 0 !== n3; ) {
          const i2 = n3 & -n3;
          t3[e2++] = (s2 << 5) + _W._bitCount(i2 - 1), n3 ^= i2;
        }
      }
      return t3;
    }
    minValue() {
      for (let t3 = 0; t3 < this.data.length; ++t3) {
        let e2 = this.data[t3];
        if (0 !== e2) {
          let n2 = 0;
          for (; !(1 & e2); ) n2++, e2 >>= 1;
          return n2 + 32 * t3;
        }
      }
      return 0;
    }
    hashCode() {
      return l.hashStuff(this.values());
    }
    equals(t3) {
      return t3 instanceof _W && r(this.data, t3.data);
    }
    toString() {
      return "{" + this.values().join(", ") + "}";
    }
    get length() {
      return this.data.map((t3) => _W._bitCount(t3)).reduce((t3, e2) => t3 + e2, 0);
    }
    _resize(t3) {
      const e2 = t3 + 32 >>> 5;
      if (e2 <= this.data.length) return;
      const n2 = new Uint32Array(e2);
      n2.set(this.data), n2.fill(0, this.data.length), this.data = n2;
    }
    static _checkIndex(t3) {
      if (t3 < 0) throw new RangeError("index cannot be negative");
    }
    static _bitCount(t3) {
      return t3 = (t3 = (858993459 & (t3 -= t3 >> 1 & 1431655765)) + (t3 >> 2 & 858993459)) + (t3 >> 4) & 252645135, t3 += t3 >> 8, 0 + (t3 += t3 >> 16) & 63;
    }
  };
  var j = class _j {
    static {
      __name(this, "j");
    }
    constructor(t3) {
      this.atn = t3;
    }
    getDecisionLookahead(t3) {
      if (null === t3) return null;
      const e2 = t3.transitions.length, n2 = [];
      for (let s2 = 0; s2 < e2; s2++) {
        n2[s2] = new _();
        const e3 = new g(), i2 = false;
        this._LOOK(t3.transition(s2).target, null, B.EMPTY, n2[s2], e3, new W(), i2, false), (0 === n2[s2].length || n2[s2].contains(_j.HIT_PRED)) && (n2[s2] = null);
      }
      return n2;
    }
    LOOK(t3, e2, n2) {
      const s2 = new _(), i2 = null !== (n2 = n2 || null) ? K(t3.atn, n2) : null;
      return this._LOOK(t3, e2, i2, s2, new g(), new W(), true, true), s2;
    }
    _LOOK(t3, e2, n2, s2, r2, o2, a2, l2) {
      const h2 = new m({ state: t3, alt: 0, context: n2 }, null);
      if (!r2.has(h2)) {
        if (r2.add(h2), t3 === e2) {
          if (null === n2) return void s2.addOne(i.EPSILON);
          if (n2.isEmpty() && l2) return void s2.addOne(i.EOF);
        }
        if (t3 instanceof A) {
          if (null === n2) return void s2.addOne(i.EPSILON);
          if (n2.isEmpty() && l2) return void s2.addOne(i.EOF);
          if (n2 !== B.EMPTY) {
            const i2 = o2.get(t3.ruleIndex);
            try {
              o2.clear(t3.ruleIndex);
              for (let t4 = 0; t4 < n2.length; t4++) {
                const i3 = this.atn.states[n2.getReturnState(t4)];
                this._LOOK(i3, e2, n2.getParent(t4), s2, r2, o2, a2, l2);
              }
            } finally {
              i2 && o2.set(t3.ruleIndex);
            }
            return;
          }
        }
        for (let h3 = 0; h3 < t3.transitions.length; h3++) {
          const c2 = t3.transitions[h3];
          if (c2.constructor === k) {
            if (o2.get(c2.target.ruleIndex)) continue;
            const t4 = V.create(n2, c2.followState.stateNumber);
            try {
              o2.set(c2.target.ruleIndex), this._LOOK(c2.target, e2, t4, s2, r2, o2, a2, l2);
            } finally {
              o2.clear(c2.target.ruleIndex);
            }
          } else if (c2 instanceof O) a2 ? this._LOOK(c2.target, e2, n2, s2, r2, o2, a2, l2) : s2.addOne(_j.HIT_PRED);
          else if (c2.isEpsilon) this._LOOK(c2.target, e2, n2, s2, r2, o2, a2, l2);
          else if (c2.constructor === L) s2.addRange(i.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
          else {
            let t4 = c2.label;
            null !== t4 && (c2 instanceof y && (t4 = t4.complement(i.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType)), s2.addSet(t4));
          }
        }
      }
    }
  };
  j.HIT_PRED = i.INVALID_TYPE;
  var $ = class {
    static {
      __name(this, "$");
    }
    constructor(t3, e2) {
      this.grammarType = t3, this.maxTokenType = e2, this.states = [], this.decisionToState = [], this.ruleToStartState = [], this.ruleToStopState = null, this.modeNameToStartState = {}, this.ruleToTokenType = null, this.lexerActions = null, this.modeToStartState = [];
    }
    nextTokensInContext(t3, e2) {
      return new j(this).LOOK(t3, null, e2);
    }
    nextTokensNoContext(t3) {
      return null !== t3.nextTokenWithinRule || (t3.nextTokenWithinRule = this.nextTokensInContext(t3, null), t3.nextTokenWithinRule.readOnly = true), t3.nextTokenWithinRule;
    }
    nextTokens(t3, e2) {
      return void 0 === e2 ? this.nextTokensNoContext(t3) : this.nextTokensInContext(t3, e2);
    }
    addState(t3) {
      null !== t3 && (t3.atn = this, t3.stateNumber = this.states.length), this.states.push(t3);
    }
    removeState(t3) {
      this.states[t3.stateNumber] = null;
    }
    defineDecisionState(t3) {
      return this.decisionToState.push(t3), t3.decision = this.decisionToState.length - 1, t3.decision;
    }
    getDecisionState(t3) {
      return 0 === this.decisionToState.length ? null : this.decisionToState[t3];
    }
    getExpectedTokens(t3, e2) {
      if (t3 < 0 || t3 >= this.states.length) throw "Invalid state number.";
      const n2 = this.states[t3];
      let s2 = this.nextTokens(n2);
      if (!s2.contains(i.EPSILON)) return s2;
      const r2 = new _();
      for (r2.addSet(s2), r2.removeOne(i.EPSILON); null !== e2 && e2.invokingState >= 0 && s2.contains(i.EPSILON); ) {
        const t4 = this.states[e2.invokingState].transitions[0];
        s2 = this.nextTokens(t4.followState), r2.addSet(s2), r2.removeOne(i.EPSILON), e2 = e2.parentCtx;
      }
      return s2.contains(i.EPSILON) && r2.addOne(i.EOF), r2;
    }
  };
  $.INVALID_ALT_NUMBER = 0;
  var X = class extends C2 {
    static {
      __name(this, "X");
    }
    constructor() {
      super(), this.stateType = C2.BASIC;
    }
  };
  var J = class extends C2 {
    static {
      __name(this, "J");
    }
    constructor() {
      return super(), this.decision = -1, this.nonGreedy = false, this;
    }
  };
  var Z = class extends J {
    static {
      __name(this, "Z");
    }
    constructor() {
      return super(), this.endState = null, this;
    }
  };
  var Q = class extends C2 {
    static {
      __name(this, "Q");
    }
    constructor() {
      return super(), this.stateType = C2.BLOCK_END, this.startState = null, this;
    }
  };
  var tt = class extends C2 {
    static {
      __name(this, "tt");
    }
    constructor() {
      return super(), this.stateType = C2.LOOP_END, this.loopBackState = null, this;
    }
  };
  var et = class extends C2 {
    static {
      __name(this, "et");
    }
    constructor() {
      return super(), this.stateType = C2.RULE_START, this.stopState = null, this.isPrecedenceRule = false, this;
    }
  };
  var nt = class extends J {
    static {
      __name(this, "nt");
    }
    constructor() {
      return super(), this.stateType = C2.TOKEN_START, this;
    }
  };
  var st = class extends J {
    static {
      __name(this, "st");
    }
    constructor() {
      return super(), this.stateType = C2.PLUS_LOOP_BACK, this;
    }
  };
  var it = class extends C2 {
    static {
      __name(this, "it");
    }
    constructor() {
      return super(), this.stateType = C2.STAR_LOOP_BACK, this;
    }
  };
  var rt = class extends J {
    static {
      __name(this, "rt");
    }
    constructor() {
      return super(), this.stateType = C2.STAR_LOOP_ENTRY, this.loopBackState = null, this.isPrecedenceDecision = null, this;
    }
  };
  var ot = class extends Z {
    static {
      __name(this, "ot");
    }
    constructor() {
      return super(), this.stateType = C2.PLUS_BLOCK_START, this.loopBackState = null, this;
    }
  };
  var at = class extends Z {
    static {
      __name(this, "at");
    }
    constructor() {
      return super(), this.stateType = C2.STAR_BLOCK_START, this;
    }
  };
  var lt = class extends Z {
    static {
      __name(this, "lt");
    }
    constructor() {
      return super(), this.stateType = C2.BLOCK_START, this;
    }
  };
  var ht = class extends N {
    static {
      __name(this, "ht");
    }
    constructor(t3, e2) {
      super(t3), this.label_ = e2, this.label = this.makeLabel(), this.serializationType = N.ATOM;
    }
    makeLabel() {
      const t3 = new _();
      return t3.addOne(this.label_), t3;
    }
    matches(t3, e2, n2) {
      return this.label_ === t3;
    }
    toString() {
      return this.label_;
    }
  };
  var ct = class extends N {
    static {
      __name(this, "ct");
    }
    constructor(t3, e2, n2) {
      super(t3), this.serializationType = N.RANGE, this.start = e2, this.stop = n2, this.label = this.makeLabel();
    }
    makeLabel() {
      const t3 = new _();
      return t3.addRange(this.start, this.stop), t3;
    }
    matches(t3, e2, n2) {
      return t3 >= this.start && t3 <= this.stop;
    }
    toString() {
      return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
    }
  };
  var ut = class extends N {
    static {
      __name(this, "ut");
    }
    constructor(t3, e2, n2, s2) {
      super(t3), this.serializationType = N.ACTION, this.ruleIndex = e2, this.actionIndex = void 0 === n2 ? -1 : n2, this.isCtxDependent = void 0 !== s2 && s2, this.isEpsilon = true;
    }
    matches(t3, e2, n2) {
      return false;
    }
    toString() {
      return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
  };
  var dt = class extends N {
    static {
      __name(this, "dt");
    }
    constructor(t3, e2) {
      super(t3), this.serializationType = N.EPSILON, this.isEpsilon = true, this.outermostPrecedenceReturn = e2;
    }
    matches(t3, e2, n2) {
      return false;
    }
    toString() {
      return "epsilon";
    }
  };
  var gt = class _gt extends p {
    static {
      __name(this, "gt");
    }
    constructor(t3, e2, n2) {
      super(), this.ruleIndex = void 0 === t3 ? -1 : t3, this.predIndex = void 0 === e2 ? -1 : e2, this.isCtxDependent = void 0 !== n2 && n2;
    }
    evaluate(t3, e2) {
      const n2 = this.isCtxDependent ? e2 : null;
      return t3.sempred(n2, this.ruleIndex, this.predIndex);
    }
    updateHashCode(t3) {
      t3.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _gt && this.ruleIndex === t3.ruleIndex && this.predIndex === t3.predIndex && this.isCtxDependent === t3.isCtxDependent;
    }
    toString() {
      return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
    }
  };
  p.NONE = new gt();
  var pt = class extends O {
    static {
      __name(this, "pt");
    }
    constructor(t3, e2, n2, s2) {
      super(t3), this.serializationType = N.PREDICATE, this.ruleIndex = e2, this.predIndex = n2, this.isCtxDependent = s2, this.isEpsilon = true;
    }
    matches(t3, e2, n2) {
      return false;
    }
    getPredicate() {
      return new gt(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    toString() {
      return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
  };
  var ft = class _ft extends p {
    static {
      __name(this, "ft");
    }
    constructor(t3) {
      super(), this.precedence = void 0 === t3 ? 0 : t3;
    }
    evaluate(t3, e2) {
      return t3.precpred(e2, this.precedence);
    }
    evalPrecedence(t3, e2) {
      return t3.precpred(e2, this.precedence) ? p.NONE : null;
    }
    compareTo(t3) {
      return this.precedence - t3.precedence;
    }
    updateHashCode(t3) {
      t3.update(this.precedence);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _ft && this.precedence === t3.precedence;
    }
    toString() {
      return "{" + this.precedence + ">=prec}?";
    }
  };
  p.PrecedencePredicate = ft;
  var xt = class extends O {
    static {
      __name(this, "xt");
    }
    constructor(t3, e2) {
      super(t3), this.serializationType = N.PRECEDENCE, this.precedence = e2, this.isEpsilon = true;
    }
    matches(t3, e2, n2) {
      return false;
    }
    getPredicate() {
      return new ft(this.precedence);
    }
    toString() {
      return this.precedence + " >= _p";
    }
  };
  var Tt = class {
    static {
      __name(this, "Tt");
    }
    constructor(t3) {
      void 0 === t3 && (t3 = null), this.readOnly = false, this.verifyATN = null === t3 || t3.verifyATN, this.generateRuleBypassTransitions = null !== t3 && t3.generateRuleBypassTransitions;
    }
  };
  Tt.defaultOptions = new Tt(), Tt.defaultOptions.readOnly = true;
  var St = class {
    static {
      __name(this, "St");
    }
    constructor(t3) {
      this.actionType = t3, this.isPositionDependent = false;
    }
    hashCode() {
      const t3 = new l();
      return this.updateHashCode(t3), t3.finish();
    }
    updateHashCode(t3) {
      t3.update(this.actionType);
    }
    equals(t3) {
      return this === t3;
    }
  };
  var mt = class extends St {
    static {
      __name(this, "mt");
    }
    constructor() {
      super(6);
    }
    execute(t3) {
      t3.skip();
    }
    toString() {
      return "skip";
    }
  };
  mt.INSTANCE = new mt();
  var Et = class _Et extends St {
    static {
      __name(this, "Et");
    }
    constructor(t3) {
      super(0), this.channel = t3;
    }
    execute(t3) {
      t3._channel = this.channel;
    }
    updateHashCode(t3) {
      t3.update(this.actionType, this.channel);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _Et && this.channel === t3.channel;
    }
    toString() {
      return "channel(" + this.channel + ")";
    }
  };
  var _t = class __t extends St {
    static {
      __name(this, "_t");
    }
    constructor(t3, e2) {
      super(1), this.ruleIndex = t3, this.actionIndex = e2, this.isPositionDependent = true;
    }
    execute(t3) {
      t3.action(null, this.ruleIndex, this.actionIndex);
    }
    updateHashCode(t3) {
      t3.update(this.actionType, this.ruleIndex, this.actionIndex);
    }
    equals(t3) {
      return this === t3 || t3 instanceof __t && this.ruleIndex === t3.ruleIndex && this.actionIndex === t3.actionIndex;
    }
  };
  var Ct = class extends St {
    static {
      __name(this, "Ct");
    }
    constructor() {
      super(3);
    }
    execute(t3) {
      t3.more();
    }
    toString() {
      return "more";
    }
  };
  Ct.INSTANCE = new Ct();
  var At = class _At extends St {
    static {
      __name(this, "At");
    }
    constructor(t3) {
      super(7), this.type = t3;
    }
    execute(t3) {
      t3.type = this.type;
    }
    updateHashCode(t3) {
      t3.update(this.actionType, this.type);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _At && this.type === t3.type;
    }
    toString() {
      return "type(" + this.type + ")";
    }
  };
  var Nt = class _Nt extends St {
    static {
      __name(this, "Nt");
    }
    constructor(t3) {
      super(5), this.mode = t3;
    }
    execute(t3) {
      t3.pushMode(this.mode);
    }
    updateHashCode(t3) {
      t3.update(this.actionType, this.mode);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _Nt && this.mode === t3.mode;
    }
    toString() {
      return "pushMode(" + this.mode + ")";
    }
  };
  var kt = class extends St {
    static {
      __name(this, "kt");
    }
    constructor() {
      super(4);
    }
    execute(t3) {
      t3.popMode();
    }
    toString() {
      return "popMode";
    }
  };
  kt.INSTANCE = new kt();
  var It = class _It extends St {
    static {
      __name(this, "It");
    }
    constructor(t3) {
      super(2), this.mode = t3;
    }
    execute(t3) {
      t3.setMode(this.mode);
    }
    updateHashCode(t3) {
      t3.update(this.actionType, this.mode);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _It && this.mode === t3.mode;
    }
    toString() {
      return "mode(" + this.mode + ")";
    }
  };
  function yt(t3, e2) {
    const n2 = [];
    return n2[t3 - 1] = e2, n2.map(function(t4) {
      return e2;
    });
  }
  __name(yt, "yt");
  var Lt = class {
    static {
      __name(this, "Lt");
    }
    constructor(t3) {
      null == t3 && (t3 = Tt.defaultOptions), this.deserializationOptions = t3, this.stateFactories = null, this.actionFactories = null;
    }
    deserialize(t3) {
      const e2 = this.reset(t3);
      this.checkVersion(e2), e2 && this.skipUUID();
      const n2 = this.readATN();
      this.readStates(n2, e2), this.readRules(n2, e2), this.readModes(n2);
      const s2 = [];
      return this.readSets(n2, s2, this.readInt.bind(this)), e2 && this.readSets(n2, s2, this.readInt32.bind(this)), this.readEdges(n2, s2), this.readDecisions(n2), this.readLexerActions(n2, e2), this.markPrecedenceDecisions(n2), this.verifyATN(n2), this.deserializationOptions.generateRuleBypassTransitions && 1 === n2.grammarType && (this.generateRuleBypassTransitions(n2), this.verifyATN(n2)), n2;
    }
    reset(t3) {
      if (3 === (t3.charCodeAt ? t3.charCodeAt(0) : t3[0])) {
        const e2 = /* @__PURE__ */ __name(function(t4) {
          const e3 = t4.charCodeAt(0);
          return e3 > 1 ? e3 - 2 : e3 + 65534;
        }, "e"), n2 = t3.split("").map(e2);
        return n2[0] = t3.charCodeAt(0), this.data = n2, this.pos = 0, true;
      }
      return this.data = t3, this.pos = 0, false;
    }
    skipUUID() {
      let t3 = 0;
      for (; t3++ < 8; ) this.readInt();
    }
    checkVersion(t3) {
      const e2 = this.readInt();
      if (!t3 && 4 !== e2) throw "Could not deserialize ATN with version " + e2 + " (expected 4).";
    }
    readATN() {
      const t3 = this.readInt(), e2 = this.readInt();
      return new $(t3, e2);
    }
    readStates(t3, e2) {
      let n2, s2, i2;
      const r2 = [], o2 = [], a2 = this.readInt();
      for (let n3 = 0; n3 < a2; n3++) {
        const n4 = this.readInt();
        if (n4 === C2.INVALID_TYPE) {
          t3.addState(null);
          continue;
        }
        let s3 = this.readInt();
        e2 && 65535 === s3 && (s3 = -1);
        const i3 = this.stateFactory(n4, s3);
        if (n4 === C2.LOOP_END) {
          const t4 = this.readInt();
          r2.push([i3, t4]);
        } else if (i3 instanceof Z) {
          const t4 = this.readInt();
          o2.push([i3, t4]);
        }
        t3.addState(i3);
      }
      for (n2 = 0; n2 < r2.length; n2++) s2 = r2[n2], s2[0].loopBackState = t3.states[s2[1]];
      for (n2 = 0; n2 < o2.length; n2++) s2 = o2[n2], s2[0].endState = t3.states[s2[1]];
      let l2 = this.readInt();
      for (n2 = 0; n2 < l2; n2++) i2 = this.readInt(), t3.states[i2].nonGreedy = true;
      let h2 = this.readInt();
      for (n2 = 0; n2 < h2; n2++) i2 = this.readInt(), t3.states[i2].isPrecedenceRule = true;
    }
    readRules(t3, e2) {
      let n2;
      const s2 = this.readInt();
      for (0 === t3.grammarType && (t3.ruleToTokenType = yt(s2, 0)), t3.ruleToStartState = yt(s2, 0), n2 = 0; n2 < s2; n2++) {
        const s3 = this.readInt();
        if (t3.ruleToStartState[n2] = t3.states[s3], 0 === t3.grammarType) {
          let s4 = this.readInt();
          e2 && 65535 === s4 && (s4 = i.EOF), t3.ruleToTokenType[n2] = s4;
        }
      }
      for (t3.ruleToStopState = yt(s2, 0), n2 = 0; n2 < t3.states.length; n2++) {
        const e3 = t3.states[n2];
        e3 instanceof A && (t3.ruleToStopState[e3.ruleIndex] = e3, t3.ruleToStartState[e3.ruleIndex].stopState = e3);
      }
    }
    readModes(t3) {
      const e2 = this.readInt();
      for (let n2 = 0; n2 < e2; n2++) {
        let e3 = this.readInt();
        t3.modeToStartState.push(t3.states[e3]);
      }
    }
    readSets(t3, e2, n2) {
      const s2 = this.readInt();
      for (let t4 = 0; t4 < s2; t4++) {
        const t5 = new _();
        e2.push(t5);
        const s3 = this.readInt();
        0 !== this.readInt() && t5.addOne(-1);
        for (let e3 = 0; e3 < s3; e3++) {
          const e4 = n2(), s4 = n2();
          t5.addRange(e4, s4);
        }
      }
    }
    readEdges(t3, e2) {
      let n2, s2, i2, r2, o2;
      const a2 = this.readInt();
      for (n2 = 0; n2 < a2; n2++) {
        const n3 = this.readInt(), s3 = this.readInt(), i3 = this.readInt(), o3 = this.readInt(), a3 = this.readInt(), l2 = this.readInt();
        r2 = this.edgeFactory(t3, i3, n3, s3, o3, a3, l2, e2), t3.states[n3].addTransition(r2);
      }
      for (n2 = 0; n2 < t3.states.length; n2++) for (i2 = t3.states[n2], s2 = 0; s2 < i2.transitions.length; s2++) {
        const e3 = i2.transitions[s2];
        if (!(e3 instanceof k)) continue;
        let n3 = -1;
        t3.ruleToStartState[e3.target.ruleIndex].isPrecedenceRule && 0 === e3.precedence && (n3 = e3.target.ruleIndex), r2 = new dt(e3.followState, n3), t3.ruleToStopState[e3.target.ruleIndex].addTransition(r2);
      }
      for (n2 = 0; n2 < t3.states.length; n2++) {
        if (i2 = t3.states[n2], i2 instanceof Z) {
          if (null === i2.endState) throw "IllegalState";
          if (null !== i2.endState.startState) throw "IllegalState";
          i2.endState.startState = i2;
        }
        if (i2 instanceof st) for (s2 = 0; s2 < i2.transitions.length; s2++) o2 = i2.transitions[s2].target, o2 instanceof ot && (o2.loopBackState = i2);
        else if (i2 instanceof it) for (s2 = 0; s2 < i2.transitions.length; s2++) o2 = i2.transitions[s2].target, o2 instanceof rt && (o2.loopBackState = i2);
      }
    }
    readDecisions(t3) {
      const e2 = this.readInt();
      for (let n2 = 0; n2 < e2; n2++) {
        const e3 = this.readInt(), s2 = t3.states[e3];
        t3.decisionToState.push(s2), s2.decision = n2;
      }
    }
    readLexerActions(t3, e2) {
      if (0 === t3.grammarType) {
        const n2 = this.readInt();
        t3.lexerActions = yt(n2, null);
        for (let s2 = 0; s2 < n2; s2++) {
          const n3 = this.readInt();
          let i2 = this.readInt();
          e2 && 65535 === i2 && (i2 = -1);
          let r2 = this.readInt();
          e2 && 65535 === r2 && (r2 = -1), t3.lexerActions[s2] = this.lexerActionFactory(n3, i2, r2);
        }
      }
    }
    generateRuleBypassTransitions(t3) {
      let e2;
      const n2 = t3.ruleToStartState.length;
      for (e2 = 0; e2 < n2; e2++) t3.ruleToTokenType[e2] = t3.maxTokenType + e2 + 1;
      for (e2 = 0; e2 < n2; e2++) this.generateRuleBypassTransition(t3, e2);
    }
    generateRuleBypassTransition(t3, e2) {
      let n2, s2;
      const i2 = new lt();
      i2.ruleIndex = e2, t3.addState(i2);
      const r2 = new Q();
      r2.ruleIndex = e2, t3.addState(r2), i2.endState = r2, t3.defineDecisionState(i2), r2.startState = i2;
      let o2 = null, a2 = null;
      if (t3.ruleToStartState[e2].isPrecedenceRule) {
        for (a2 = null, n2 = 0; n2 < t3.states.length; n2++) if (s2 = t3.states[n2], this.stateIsEndStateFor(s2, e2)) {
          a2 = s2, o2 = s2.loopBackState.transitions[0];
          break;
        }
        if (null === o2) throw "Couldn't identify final state of the precedence rule prefix section.";
      } else a2 = t3.ruleToStopState[e2];
      for (n2 = 0; n2 < t3.states.length; n2++) {
        s2 = t3.states[n2];
        for (let t4 = 0; t4 < s2.transitions.length; t4++) {
          const e3 = s2.transitions[t4];
          e3 !== o2 && e3.target === a2 && (e3.target = r2);
        }
      }
      const l2 = t3.ruleToStartState[e2], h2 = l2.transitions.length;
      for (; h2 > 0; ) i2.addTransition(l2.transitions[h2 - 1]), l2.transitions = l2.transitions.slice(-1);
      t3.ruleToStartState[e2].addTransition(new dt(i2)), r2.addTransition(new dt(a2));
      const c2 = new X();
      t3.addState(c2), c2.addTransition(new ht(r2, t3.ruleToTokenType[e2])), i2.addTransition(new dt(c2));
    }
    stateIsEndStateFor(t3, e2) {
      if (t3.ruleIndex !== e2) return null;
      if (!(t3 instanceof rt)) return null;
      const n2 = t3.transitions[t3.transitions.length - 1].target;
      return n2 instanceof tt && n2.epsilonOnlyTransitions && n2.transitions[0].target instanceof A ? t3 : null;
    }
    markPrecedenceDecisions(t3) {
      for (let e2 = 0; e2 < t3.states.length; e2++) {
        const n2 = t3.states[e2];
        if (n2 instanceof rt && t3.ruleToStartState[n2.ruleIndex].isPrecedenceRule) {
          const t4 = n2.transitions[n2.transitions.length - 1].target;
          t4 instanceof tt && t4.epsilonOnlyTransitions && t4.transitions[0].target instanceof A && (n2.isPrecedenceDecision = true);
        }
      }
    }
    verifyATN(t3) {
      if (this.deserializationOptions.verifyATN) for (let e2 = 0; e2 < t3.states.length; e2++) {
        const n2 = t3.states[e2];
        if (null !== n2) if (this.checkCondition(n2.epsilonOnlyTransitions || n2.transitions.length <= 1), n2 instanceof ot) this.checkCondition(null !== n2.loopBackState);
        else if (n2 instanceof rt) if (this.checkCondition(null !== n2.loopBackState), this.checkCondition(2 === n2.transitions.length), n2.transitions[0].target instanceof at) this.checkCondition(n2.transitions[1].target instanceof tt), this.checkCondition(!n2.nonGreedy);
        else {
          if (!(n2.transitions[0].target instanceof tt)) throw "IllegalState";
          this.checkCondition(n2.transitions[1].target instanceof at), this.checkCondition(n2.nonGreedy);
        }
        else n2 instanceof it ? (this.checkCondition(1 === n2.transitions.length), this.checkCondition(n2.transitions[0].target instanceof rt)) : n2 instanceof tt ? this.checkCondition(null !== n2.loopBackState) : n2 instanceof et ? this.checkCondition(null !== n2.stopState) : n2 instanceof Z ? this.checkCondition(null !== n2.endState) : n2 instanceof Q ? this.checkCondition(null !== n2.startState) : n2 instanceof J ? this.checkCondition(n2.transitions.length <= 1 || n2.decision >= 0) : this.checkCondition(n2.transitions.length <= 1 || n2 instanceof A);
      }
    }
    checkCondition(t3, e2) {
      if (!t3) throw null == e2 && (e2 = "IllegalState"), e2;
    }
    readInt() {
      return this.data[this.pos++];
    }
    readInt32() {
      return this.readInt() | this.readInt() << 16;
    }
    edgeFactory(t3, e2, n2, s2, r2, o2, a2, l2) {
      const h2 = t3.states[s2];
      switch (e2) {
        case N.EPSILON:
          return new dt(h2);
        case N.RANGE:
          return new ct(h2, 0 !== a2 ? i.EOF : r2, o2);
        case N.RULE:
          return new k(t3.states[r2], o2, a2, h2);
        case N.PREDICATE:
          return new pt(h2, r2, o2, 0 !== a2);
        case N.PRECEDENCE:
          return new xt(h2, r2);
        case N.ATOM:
          return new ht(h2, 0 !== a2 ? i.EOF : r2);
        case N.ACTION:
          return new ut(h2, r2, o2, 0 !== a2);
        case N.SET:
          return new I(h2, l2[r2]);
        case N.NOT_SET:
          return new y(h2, l2[r2]);
        case N.WILDCARD:
          return new L(h2);
        default:
          throw "The specified transition type: " + e2 + " is not valid.";
      }
    }
    stateFactory(t3, e2) {
      if (null === this.stateFactories) {
        const t4 = [];
        t4[C2.INVALID_TYPE] = null, t4[C2.BASIC] = () => new X(), t4[C2.RULE_START] = () => new et(), t4[C2.BLOCK_START] = () => new lt(), t4[C2.PLUS_BLOCK_START] = () => new ot(), t4[C2.STAR_BLOCK_START] = () => new at(), t4[C2.TOKEN_START] = () => new nt(), t4[C2.RULE_STOP] = () => new A(), t4[C2.BLOCK_END] = () => new Q(), t4[C2.STAR_LOOP_BACK] = () => new it(), t4[C2.STAR_LOOP_ENTRY] = () => new rt(), t4[C2.PLUS_LOOP_BACK] = () => new st(), t4[C2.LOOP_END] = () => new tt(), this.stateFactories = t4;
      }
      if (t3 > this.stateFactories.length || null === this.stateFactories[t3]) throw "The specified state type " + t3 + " is not valid.";
      {
        const n2 = this.stateFactories[t3]();
        if (null !== n2) return n2.ruleIndex = e2, n2;
      }
    }
    lexerActionFactory(t3, e2, n2) {
      if (null === this.actionFactories) {
        const t4 = [];
        t4[0] = (t5, e3) => new Et(t5), t4[1] = (t5, e3) => new _t(t5, e3), t4[2] = (t5, e3) => new It(t5), t4[3] = (t5, e3) => Ct.INSTANCE, t4[4] = (t5, e3) => kt.INSTANCE, t4[5] = (t5, e3) => new Nt(t5), t4[6] = (t5, e3) => mt.INSTANCE, t4[7] = (t5, e3) => new At(t5), this.actionFactories = t4;
      }
      if (t3 > this.actionFactories.length || null === this.actionFactories[t3]) throw "The specified lexer action type " + t3 + " is not valid.";
      return this.actionFactories[t3](e2, n2);
    }
  };
  var Ot = class {
    static {
      __name(this, "Ot");
    }
    syntaxError(t3, e2, n2, s2, i2, r2) {
    }
    reportAmbiguity(t3, e2, n2, s2, i2, r2, o2) {
    }
    reportAttemptingFullContext(t3, e2, n2, s2, i2, r2) {
    }
    reportContextSensitivity(t3, e2, n2, s2, i2, r2) {
    }
  };
  var Rt = class extends Ot {
    static {
      __name(this, "Rt");
    }
    constructor() {
      super();
    }
    syntaxError(t3, e2, n2, s2, i2, r2) {
      console.error("line " + n2 + ":" + s2 + " " + i2);
    }
  };
  Rt.INSTANCE = new Rt();
  var wt = class extends Ot {
    static {
      __name(this, "wt");
    }
    constructor(t3) {
      if (super(), null === t3) throw "delegates";
      return this.delegates = t3, this;
    }
    syntaxError(t3, e2, n2, s2, i2, r2) {
      this.delegates.map((o2) => o2.syntaxError(t3, e2, n2, s2, i2, r2));
    }
    reportAmbiguity(t3, e2, n2, s2, i2, r2, o2) {
      this.delegates.map((a2) => a2.reportAmbiguity(t3, e2, n2, s2, i2, r2, o2));
    }
    reportAttemptingFullContext(t3, e2, n2, s2, i2, r2) {
      this.delegates.map((o2) => o2.reportAttemptingFullContext(t3, e2, n2, s2, i2, r2));
    }
    reportContextSensitivity(t3, e2, n2, s2, i2, r2) {
      this.delegates.map((o2) => o2.reportContextSensitivity(t3, e2, n2, s2, i2, r2));
    }
  };
  var vt = class {
    static {
      __name(this, "vt");
    }
    constructor() {
      this._listeners = [Rt.INSTANCE], this._interp = null, this._stateNumber = -1;
    }
    checkVersion(t3) {
      const e2 = "4.13.2";
      e2 !== t3 && console.log("ANTLR runtime and generated code versions disagree: " + e2 + "!=" + t3);
    }
    addErrorListener(t3) {
      this._listeners.push(t3);
    }
    removeErrorListeners() {
      this._listeners = [];
    }
    getLiteralNames() {
      return Object.getPrototypeOf(this).constructor.literalNames || [];
    }
    getSymbolicNames() {
      return Object.getPrototypeOf(this).constructor.symbolicNames || [];
    }
    getTokenNames() {
      if (!this.tokenNames) {
        const t3 = this.getLiteralNames(), e2 = this.getSymbolicNames(), n2 = t3.length > e2.length ? t3.length : e2.length;
        this.tokenNames = [];
        for (let s2 = 0; s2 < n2; s2++) this.tokenNames[s2] = t3[s2] || e2[s2] || "<INVALID";
      }
      return this.tokenNames;
    }
    getTokenTypeMap() {
      const t3 = this.getTokenNames();
      if (null === t3) throw "The current recognizer does not provide a list of token names.";
      let e2 = this.tokenTypeMapCache[t3];
      return void 0 === e2 && (e2 = t3.reduce(function(t4, e3, n2) {
        t4[e3] = n2;
      }), e2.EOF = i.EOF, this.tokenTypeMapCache[t3] = e2), e2;
    }
    getRuleIndexMap() {
      const t3 = this.ruleNames;
      if (null === t3) throw "The current recognizer does not provide a list of rule names.";
      let e2 = this.ruleIndexMapCache[t3];
      return void 0 === e2 && (e2 = t3.reduce(function(t4, e3, n2) {
        t4[e3] = n2;
      }), this.ruleIndexMapCache[t3] = e2), e2;
    }
    getTokenType(t3) {
      const e2 = this.getTokenTypeMap()[t3];
      return void 0 !== e2 ? e2 : i.INVALID_TYPE;
    }
    getErrorHeader(t3) {
      return "line " + t3.getOffendingToken().line + ":" + t3.getOffendingToken().column;
    }
    getTokenErrorDisplay(t3) {
      if (null === t3) return "<no token>";
      let e2 = t3.text;
      return null === e2 && (e2 = t3.type === i.EOF ? "<EOF>" : "<" + t3.type + ">"), e2 = e2.replace("\n", "\\n").replace("\r", "\\r").replace("	", "\\t"), "'" + e2 + "'";
    }
    getErrorListenerDispatch() {
      return console.warn("Calling deprecated method in Recognizer class: getErrorListenerDispatch()"), this.getErrorListener();
    }
    getErrorListener() {
      return new wt(this._listeners);
    }
    sempred(t3, e2, n2) {
      return true;
    }
    precpred(t3, e2) {
      return true;
    }
    get atn() {
      return this._interp.atn;
    }
    get state() {
      return this._stateNumber;
    }
    set state(t3) {
      this._stateNumber = t3;
    }
  };
  vt.tokenTypeMapCache = {}, vt.ruleIndexMapCache = {};
  var Pt = class _Pt extends i {
    static {
      __name(this, "Pt");
    }
    constructor(t3, e2, n2, s2, r2) {
      super(), this.source = void 0 !== t3 ? t3 : _Pt.EMPTY_SOURCE, this.type = void 0 !== e2 ? e2 : null, this.channel = void 0 !== n2 ? n2 : i.DEFAULT_CHANNEL, this.start = void 0 !== s2 ? s2 : -1, this.stop = void 0 !== r2 ? r2 : -1, this.tokenIndex = -1, null !== this.source[0] ? (this.line = t3[0].line, this.column = t3[0].column) : this.column = -1;
    }
    clone() {
      const t3 = new _Pt(this.source, this.type, this.channel, this.start, this.stop);
      return t3.tokenIndex = this.tokenIndex, t3.line = this.line, t3.column = this.column, t3.text = this.text, t3;
    }
    cloneWithType(t3) {
      const e2 = new _Pt(this.source, t3, this.channel, this.start, this.stop);
      return e2.tokenIndex = this.tokenIndex, e2.line = this.line, e2.column = this.column, t3 === i.EOF && (e2.text = ""), e2;
    }
    toString() {
      let t3 = this.text;
      return t3 = null !== t3 ? t3.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t") : "<no text>", "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + t3 + "',<" + this.type + ">" + (this.channel > 0 ? ",channel=" + this.channel : "") + "," + this.line + ":" + this.column + "]";
    }
    get text() {
      if (null !== this._text) return this._text;
      const t3 = this.getInputStream();
      if (null === t3) return null;
      const e2 = t3.size;
      return this.start < e2 && this.stop < e2 ? t3.getText(this.start, this.stop) : "<EOF>";
    }
    set text(t3) {
      this._text = t3;
    }
  };
  Pt.EMPTY_SOURCE = [null, null];
  var bt = class {
    static {
      __name(this, "bt");
    }
  };
  var Dt = class extends bt {
    static {
      __name(this, "Dt");
    }
    constructor(t3) {
      super(), this.copyText = void 0 !== t3 && t3;
    }
    create(t3, e2, n2, s2, i2, r2, o2, a2) {
      const l2 = new Pt(t3, e2, s2, i2, r2);
      return l2.line = o2, l2.column = a2, null !== n2 ? l2.text = n2 : this.copyText && null !== t3[1] && (l2.text = t3[1].getText(i2, r2)), l2;
    }
    createThin(t3, e2) {
      const n2 = new Pt(null, t3);
      return n2.text = e2, n2;
    }
  };
  Dt.DEFAULT = new Dt();
  var Ft = class _Ft extends Error {
    static {
      __name(this, "Ft");
    }
    constructor(t3) {
      super(t3.message), Error.captureStackTrace && Error.captureStackTrace(this, _Ft), this.message = t3.message, this.recognizer = t3.recognizer, this.input = t3.input, this.ctx = t3.ctx, this.offendingToken = null, this.offendingState = -1, null !== this.recognizer && (this.offendingState = this.recognizer.state);
    }
    getExpectedTokens() {
      return null !== this.recognizer ? this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx) : null;
    }
    toString() {
      return this.message;
    }
  };
  var Mt = class extends Ft {
    static {
      __name(this, "Mt");
    }
    constructor(t3, e2, n2, s2) {
      super({ message: "", recognizer: t3, input: e2, ctx: null }), this.startIndex = n2, this.deadEndConfigs = s2;
    }
    toString() {
      let t3 = "";
      return this.startIndex >= 0 && this.startIndex < this.input.size && (t3 = this.input.getText(new E(this.startIndex, this.startIndex))), "LexerNoViableAltException" + t3;
    }
  };
  var Ut = class _Ut extends vt {
    static {
      __name(this, "Ut");
    }
    constructor(t3) {
      super(), this._input = t3, this._factory = Dt.DEFAULT, this._tokenFactorySourcePair = [this, t3], this._interp = null, this._token = null, this._tokenStartCharIndex = -1, this._tokenStartLine = -1, this._tokenStartColumn = -1, this._hitEOF = false, this._channel = i.DEFAULT_CHANNEL, this._type = i.INVALID_TYPE, this._modeStack = [], this._mode = _Ut.DEFAULT_MODE, this._text = null;
    }
    reset() {
      null !== this._input && this._input.seek(0), this._token = null, this._type = i.INVALID_TYPE, this._channel = i.DEFAULT_CHANNEL, this._tokenStartCharIndex = -1, this._tokenStartColumn = -1, this._tokenStartLine = -1, this._text = null, this._hitEOF = false, this._mode = _Ut.DEFAULT_MODE, this._modeStack = [], this._interp.reset();
    }
    nextToken() {
      if (null === this._input) throw "nextToken requires a non-null input stream.";
      const t3 = this._input.mark();
      try {
        for (; ; ) {
          if (this._hitEOF) return this.emitEOF(), this._token;
          this._token = null, this._channel = i.DEFAULT_CHANNEL, this._tokenStartCharIndex = this._input.index, this._tokenStartColumn = this._interp.column, this._tokenStartLine = this._interp.line, this._text = null;
          let t4 = false;
          for (; ; ) {
            this._type = i.INVALID_TYPE;
            let e2 = _Ut.SKIP;
            try {
              e2 = this._interp.match(this._input, this._mode);
            } catch (t5) {
              if (!(t5 instanceof Ft)) throw console.log(t5.stack), t5;
              this.notifyListeners(t5), this.recover(t5);
            }
            if (this._input.LA(1) === i.EOF && (this._hitEOF = true), this._type === i.INVALID_TYPE && (this._type = e2), this._type === _Ut.SKIP) {
              t4 = true;
              break;
            }
            if (this._type !== _Ut.MORE) break;
          }
          if (!t4) return null === this._token && this.emit(), this._token;
        }
      } finally {
        this._input.release(t3);
      }
    }
    skip() {
      this._type = _Ut.SKIP;
    }
    more() {
      this._type = _Ut.MORE;
    }
    mode(t3) {
      console.warn("Calling deprecated method in Lexer class: mode(...)"), this.setMode(t3);
    }
    setMode(t3) {
      this._mode = t3;
    }
    getMode() {
      return this._mode;
    }
    getModeStack() {
      return this._modeStack;
    }
    pushMode(t3) {
      this._interp.debug && console.log("pushMode " + t3), this._modeStack.push(this._mode), this.setMode(t3);
    }
    popMode() {
      if (0 === this._modeStack.length) throw "Empty Stack";
      return this._interp.debug && console.log("popMode back to " + this._modeStack.slice(0, -1)), this.setMode(this._modeStack.pop()), this._mode;
    }
    emitToken(t3) {
      this._token = t3;
    }
    emit() {
      const t3 = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);
      return this.emitToken(t3), t3;
    }
    emitEOF() {
      const t3 = this.column, e2 = this.line, n2 = this._factory.create(this._tokenFactorySourcePair, i.EOF, null, i.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, e2, t3);
      return this.emitToken(n2), n2;
    }
    getCharIndex() {
      return this._input.index;
    }
    getAllTokens() {
      const t3 = [];
      let e2 = this.nextToken();
      for (; e2.type !== i.EOF; ) t3.push(e2), e2 = this.nextToken();
      return t3;
    }
    notifyListeners(t3) {
      const e2 = this._tokenStartCharIndex, n2 = this._input.index, s2 = this._input.getText(e2, n2), i2 = "token recognition error at: '" + this.getErrorDisplay(s2) + "'";
      this.getErrorListener().syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, i2, t3);
    }
    getErrorDisplay(t3) {
      const e2 = [];
      for (let n2 = 0; n2 < t3.length; n2++) e2.push(t3[n2]);
      return e2.join("");
    }
    getErrorDisplayForChar(t3) {
      return t3.charCodeAt(0) === i.EOF ? "<EOF>" : "\n" === t3 ? "\\n" : "	" === t3 ? "\\t" : "\r" === t3 ? "\\r" : t3;
    }
    getCharErrorDisplay(t3) {
      return "'" + this.getErrorDisplayForChar(t3) + "'";
    }
    recover(t3) {
      this._input.LA(1) !== i.EOF && (t3 instanceof Mt ? this._interp.consume(this._input) : this._input.consume());
    }
    get inputStream() {
      return this._input;
    }
    set inputStream(t3) {
      this._input = null, this._tokenFactorySourcePair = [this, this._input], this.reset(), this._input = t3, this._tokenFactorySourcePair = [this, this._input];
    }
    get sourceName() {
      return this._input.sourceName;
    }
    get type() {
      return this._type;
    }
    set type(t3) {
      this._type = t3;
    }
    get line() {
      return this._interp.line;
    }
    set line(t3) {
      this._interp.line = t3;
    }
    get column() {
      return this._interp.column;
    }
    set column(t3) {
      this._interp.column = t3;
    }
    get text() {
      return null !== this._text ? this._text : this._interp.getText(this._input);
    }
    set text(t3) {
      this._text = t3;
    }
  };
  function Bt(t3) {
    return t3.hashCodeForConfigSet();
  }
  __name(Bt, "Bt");
  function zt(t3, e2) {
    return t3 === e2 || null !== t3 && null !== e2 && t3.equalsForConfigSet(e2);
  }
  __name(zt, "zt");
  Ut.DEFAULT_MODE = 0, Ut.MORE = -2, Ut.SKIP = -3, Ut.DEFAULT_TOKEN_CHANNEL = i.DEFAULT_CHANNEL, Ut.HIDDEN = i.HIDDEN_CHANNEL, Ut.MIN_CHAR_VALUE = 0, Ut.MAX_CHAR_VALUE = 1114111;
  var Vt = class _Vt {
    static {
      __name(this, "Vt");
    }
    constructor(t3) {
      this.configLookup = new g(Bt, zt), this.fullCtx = void 0 === t3 || t3, this.readOnly = false, this.configs = [], this.uniqueAlt = 0, this.conflictingAlts = null, this.hasSemanticContext = false, this.dipsIntoOuterContext = false, this.cachedHashCode = -1;
    }
    add(t3, e2) {
      if (void 0 === e2 && (e2 = null), this.readOnly) throw "This set is readonly";
      t3.semanticContext !== p.NONE && (this.hasSemanticContext = true), t3.reachesIntoOuterContext > 0 && (this.dipsIntoOuterContext = true);
      const n2 = this.configLookup.getOrAdd(t3);
      if (n2 === t3) return this.cachedHashCode = -1, this.configs.push(t3), true;
      const s2 = !this.fullCtx, i2 = G(n2.context, t3.context, s2, e2);
      return n2.reachesIntoOuterContext = Math.max(n2.reachesIntoOuterContext, t3.reachesIntoOuterContext), t3.precedenceFilterSuppressed && (n2.precedenceFilterSuppressed = true), n2.context = i2, true;
    }
    getStates() {
      const t3 = new g();
      for (let e2 = 0; e2 < this.configs.length; e2++) t3.add(this.configs[e2].state);
      return t3;
    }
    getPredicates() {
      const t3 = [];
      for (let e2 = 0; e2 < this.configs.length; e2++) {
        const n2 = this.configs[e2].semanticContext;
        n2 !== p.NONE && t3.push(n2.semanticContext);
      }
      return t3;
    }
    optimizeConfigs(t3) {
      if (this.readOnly) throw "This set is readonly";
      if (0 !== this.configLookup.length) for (let e2 = 0; e2 < this.configs.length; e2++) {
        const n2 = this.configs[e2];
        n2.context = t3.getCachedContext(n2.context);
      }
    }
    addAll(t3) {
      for (let e2 = 0; e2 < t3.length; e2++) this.add(t3[e2]);
      return false;
    }
    equals(t3) {
      return this === t3 || t3 instanceof _Vt && r(this.configs, t3.configs) && this.fullCtx === t3.fullCtx && this.uniqueAlt === t3.uniqueAlt && this.conflictingAlts === t3.conflictingAlts && this.hasSemanticContext === t3.hasSemanticContext && this.dipsIntoOuterContext === t3.dipsIntoOuterContext;
    }
    hashCode() {
      const t3 = new l();
      return t3.update(this.configs), t3.finish();
    }
    updateHashCode(t3) {
      this.readOnly ? (-1 === this.cachedHashCode && (this.cachedHashCode = this.hashCode()), t3.update(this.cachedHashCode)) : t3.update(this.hashCode());
    }
    isEmpty() {
      return 0 === this.configs.length;
    }
    contains(t3) {
      if (null === this.configLookup) throw "This method is not implemented for readonly sets.";
      return this.configLookup.contains(t3);
    }
    containsFast(t3) {
      if (null === this.configLookup) throw "This method is not implemented for readonly sets.";
      return this.configLookup.containsFast(t3);
    }
    clear() {
      if (this.readOnly) throw "This set is readonly";
      this.configs = [], this.cachedHashCode = -1, this.configLookup = new g();
    }
    setReadonly(t3) {
      this.readOnly = t3, t3 && (this.configLookup = null);
    }
    toString() {
      return d(this.configs) + (this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") + (this.uniqueAlt !== $.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") + (null !== this.conflictingAlts ? ",conflictingAlts=" + this.conflictingAlts : "") + (this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
    }
    get items() {
      return this.configs;
    }
    get length() {
      return this.configs.length;
    }
  };
  var qt = class _qt {
    static {
      __name(this, "qt");
    }
    constructor(t3, e2) {
      return null === t3 && (t3 = -1), null === e2 && (e2 = new Vt()), this.stateNumber = t3, this.configs = e2, this.edges = null, this.isAcceptState = false, this.prediction = 0, this.lexerActionExecutor = null, this.requiresFullContext = false, this.predicates = null, this;
    }
    getAltSet() {
      const t3 = new g();
      if (null !== this.configs) for (let e2 = 0; e2 < this.configs.length; e2++) {
        const n2 = this.configs[e2];
        t3.add(n2.alt);
      }
      return 0 === t3.length ? null : t3;
    }
    equals(t3) {
      return this === t3 || t3 instanceof _qt && this.configs.equals(t3.configs);
    }
    toString() {
      let t3 = this.stateNumber + ":" + this.configs;
      return this.isAcceptState && (t3 += "=>", null !== this.predicates ? t3 += this.predicates : t3 += this.prediction), t3;
    }
    hashCode() {
      const t3 = new l();
      return t3.update(this.configs), t3.finish();
    }
  };
  var Ht = class {
    static {
      __name(this, "Ht");
    }
    constructor(t3, e2) {
      return this.atn = t3, this.sharedContextCache = e2, this;
    }
    getCachedContext(t3) {
      if (null === this.sharedContextCache) return t3;
      const e2 = new H();
      return Y(t3, this.sharedContextCache, e2);
    }
  };
  Ht.ERROR = new qt(2147483647, new Vt());
  var Kt = class extends Vt {
    static {
      __name(this, "Kt");
    }
    constructor() {
      super(), this.configLookup = new g();
    }
  };
  var Yt = class _Yt extends m {
    static {
      __name(this, "Yt");
    }
    constructor(t3, e2) {
      super(t3, e2);
      const n2 = t3.lexerActionExecutor || null;
      return this.lexerActionExecutor = n2 || (null !== e2 ? e2.lexerActionExecutor : null), this.passedThroughNonGreedyDecision = null !== e2 && this.checkNonGreedyDecision(e2, this.state), this.hashCodeForConfigSet = _Yt.prototype.hashCode, this.equalsForConfigSet = _Yt.prototype.equals, this;
    }
    updateHashCode(t3) {
      t3.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _Yt && this.passedThroughNonGreedyDecision === t3.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(t3.lexerActionExecutor) : !t3.lexerActionExecutor) && super.equals(t3);
    }
    checkNonGreedyDecision(t3, e2) {
      return t3.passedThroughNonGreedyDecision || e2 instanceof J && e2.nonGreedy;
    }
  };
  var Gt = class _Gt extends St {
    static {
      __name(this, "Gt");
    }
    constructor(t3, e2) {
      super(e2.actionType), this.offset = t3, this.action = e2, this.isPositionDependent = true;
    }
    execute(t3) {
      this.action.execute(t3);
    }
    updateHashCode(t3) {
      t3.update(this.actionType, this.offset, this.action);
    }
    equals(t3) {
      return this === t3 || t3 instanceof _Gt && this.offset === t3.offset && this.action === t3.action;
    }
  };
  var Wt = class _Wt {
    static {
      __name(this, "Wt");
    }
    constructor(t3) {
      return this.lexerActions = null === t3 ? [] : t3, this.cachedHashCode = l.hashStuff(t3), this;
    }
    fixOffsetBeforeMatch(t3) {
      let e2 = null;
      for (let n2 = 0; n2 < this.lexerActions.length; n2++) !this.lexerActions[n2].isPositionDependent || this.lexerActions[n2] instanceof Gt || (null === e2 && (e2 = this.lexerActions.concat([])), e2[n2] = new Gt(t3, this.lexerActions[n2]));
      return null === e2 ? this : new _Wt(e2);
    }
    execute(t3, e2, n2) {
      let s2 = false;
      const i2 = e2.index;
      try {
        for (let r2 = 0; r2 < this.lexerActions.length; r2++) {
          let o2 = this.lexerActions[r2];
          if (o2 instanceof Gt) {
            const t4 = o2.offset;
            e2.seek(n2 + t4), o2 = o2.action, s2 = n2 + t4 !== i2;
          } else o2.isPositionDependent && (e2.seek(i2), s2 = false);
          o2.execute(t3);
        }
      } finally {
        s2 && e2.seek(i2);
      }
    }
    hashCode() {
      return this.cachedHashCode;
    }
    updateHashCode(t3) {
      t3.update(this.cachedHashCode);
    }
    equals(t3) {
      if (this === t3) return true;
      if (t3 instanceof _Wt) {
        if (this.cachedHashCode != t3.cachedHashCode) return false;
        if (this.lexerActions.length != t3.lexerActions.length) return false;
        {
          const e2 = this.lexerActions.length;
          for (let n2 = 0; n2 < e2; ++n2) if (!this.lexerActions[n2].equals(t3.lexerActions[n2])) return false;
          return true;
        }
      }
      return false;
    }
    static append(t3, e2) {
      if (null === t3) return new _Wt([e2]);
      const n2 = t3.lexerActions.concat([e2]);
      return new _Wt(n2);
    }
  };
  function jt(t3) {
    t3.index = -1, t3.line = 0, t3.column = -1, t3.dfaState = null;
  }
  __name(jt, "jt");
  var $t = class {
    static {
      __name(this, "$t");
    }
    constructor() {
      jt(this);
    }
    reset() {
      jt(this);
    }
  };
  var Xt = class _Xt extends Ht {
    static {
      __name(this, "Xt");
    }
    constructor(t3, e2, n2, s2) {
      super(e2, s2), this.decisionToDFA = n2, this.recog = t3, this.startIndex = -1, this.line = 1, this.column = 0, this.mode = Ut.DEFAULT_MODE, this.prevAccept = new $t();
    }
    copyState(t3) {
      this.column = t3.column, this.line = t3.line, this.mode = t3.mode, this.startIndex = t3.startIndex;
    }
    match(t3, e2) {
      this.mode = e2;
      const n2 = t3.mark();
      try {
        this.startIndex = t3.index, this.prevAccept.reset();
        const n3 = this.decisionToDFA[e2];
        return null === n3.s0 ? this.matchATN(t3) : this.execATN(t3, n3.s0);
      } finally {
        t3.release(n2);
      }
    }
    reset() {
      this.prevAccept.reset(), this.startIndex = -1, this.line = 1, this.column = 0, this.mode = Ut.DEFAULT_MODE;
    }
    matchATN(t3) {
      const e2 = this.atn.modeToStartState[this.mode];
      _Xt.debug && console.log("matchATN mode " + this.mode + " start: " + e2);
      const n2 = this.mode, s2 = this.computeStartState(t3, e2), i2 = s2.hasSemanticContext;
      s2.hasSemanticContext = false;
      const r2 = this.addDFAState(s2);
      i2 || (this.decisionToDFA[this.mode].s0 = r2);
      const o2 = this.execATN(t3, r2);
      return _Xt.debug && console.log("DFA after matchATN: " + this.decisionToDFA[n2].toLexerString()), o2;
    }
    execATN(t3, e2) {
      _Xt.debug && console.log("start state closure=" + e2.configs), e2.isAcceptState && this.captureSimState(this.prevAccept, t3, e2);
      let n2 = t3.LA(1), s2 = e2;
      for (; ; ) {
        _Xt.debug && console.log("execATN loop starting closure: " + s2.configs);
        let e3 = this.getExistingTargetState(s2, n2);
        if (null === e3 && (e3 = this.computeTargetState(t3, s2, n2)), e3 === Ht.ERROR) break;
        if (n2 !== i.EOF && this.consume(t3), e3.isAcceptState && (this.captureSimState(this.prevAccept, t3, e3), n2 === i.EOF)) break;
        n2 = t3.LA(1), s2 = e3;
      }
      return this.failOrAccept(this.prevAccept, t3, s2.configs, n2);
    }
    getExistingTargetState(t3, e2) {
      if (null === t3.edges || e2 < _Xt.MIN_DFA_EDGE || e2 > _Xt.MAX_DFA_EDGE) return null;
      let n2 = t3.edges[e2 - _Xt.MIN_DFA_EDGE];
      return void 0 === n2 && (n2 = null), _Xt.debug && null !== n2 && console.log("reuse state " + t3.stateNumber + " edge to " + n2.stateNumber), n2;
    }
    computeTargetState(t3, e2, n2) {
      const s2 = new Kt();
      return this.getReachableConfigSet(t3, e2.configs, s2, n2), 0 === s2.items.length ? (s2.hasSemanticContext || this.addDFAEdge(e2, n2, Ht.ERROR), Ht.ERROR) : this.addDFAEdge(e2, n2, null, s2);
    }
    failOrAccept(t3, e2, n2, s2) {
      if (null !== this.prevAccept.dfaState) {
        const n3 = t3.dfaState.lexerActionExecutor;
        return this.accept(e2, n3, this.startIndex, t3.index, t3.line, t3.column), t3.dfaState.prediction;
      }
      if (s2 === i.EOF && e2.index === this.startIndex) return i.EOF;
      throw new Mt(this.recog, e2, this.startIndex, n2);
    }
    getReachableConfigSet(t3, e2, n2, s2) {
      let r2 = $.INVALID_ALT_NUMBER;
      for (let o2 = 0; o2 < e2.items.length; o2++) {
        const a2 = e2.items[o2], l2 = a2.alt === r2;
        if (!l2 || !a2.passedThroughNonGreedyDecision) {
          _Xt.debug && console.log("testing %s at %s\n", this.getTokenName(s2), a2.toString(this.recog, true));
          for (let e3 = 0; e3 < a2.state.transitions.length; e3++) {
            const o3 = a2.state.transitions[e3], h2 = this.getReachableTarget(o3, s2);
            if (null !== h2) {
              let e4 = a2.lexerActionExecutor;
              null !== e4 && (e4 = e4.fixOffsetBeforeMatch(t3.index - this.startIndex));
              const o4 = s2 === i.EOF, c2 = new Yt({ state: h2, lexerActionExecutor: e4 }, a2);
              this.closure(t3, c2, n2, l2, true, o4) && (r2 = a2.alt);
            }
          }
        }
      }
    }
    accept(t3, e2, n2, s2, i2, r2) {
      _Xt.debug && console.log("ACTION %s\n", e2), t3.seek(s2), this.line = i2, this.column = r2, null !== e2 && null !== this.recog && e2.execute(this.recog, t3, n2);
    }
    getReachableTarget(t3, e2) {
      return t3.matches(e2, 0, Ut.MAX_CHAR_VALUE) ? t3.target : null;
    }
    computeStartState(t3, e2) {
      const n2 = B.EMPTY, s2 = new Kt();
      for (let i2 = 0; i2 < e2.transitions.length; i2++) {
        const r2 = e2.transitions[i2].target, o2 = new Yt({ state: r2, alt: i2 + 1, context: n2 }, null);
        this.closure(t3, o2, s2, false, false, false);
      }
      return s2;
    }
    closure(t3, e2, n2, s2, i2, r2) {
      let o2 = null;
      if (_Xt.debug && console.log("closure(" + e2.toString(this.recog, true) + ")"), e2.state instanceof A) {
        if (_Xt.debug && (null !== this.recog ? console.log("closure at %s rule stop %s\n", this.recog.ruleNames[e2.state.ruleIndex], e2) : console.log("closure at rule stop %s\n", e2)), null === e2.context || e2.context.hasEmptyPath()) {
          if (null === e2.context || e2.context.isEmpty()) return n2.add(e2), true;
          n2.add(new Yt({ state: e2.state, context: B.EMPTY }, e2)), s2 = true;
        }
        if (null !== e2.context && !e2.context.isEmpty()) {
          for (let a2 = 0; a2 < e2.context.length; a2++) if (e2.context.getReturnState(a2) !== B.EMPTY_RETURN_STATE) {
            const l2 = e2.context.getParent(a2), h2 = this.atn.states[e2.context.getReturnState(a2)];
            o2 = new Yt({ state: h2, context: l2 }, e2), s2 = this.closure(t3, o2, n2, s2, i2, r2);
          }
        }
        return s2;
      }
      e2.state.epsilonOnlyTransitions || s2 && e2.passedThroughNonGreedyDecision || n2.add(e2);
      for (let a2 = 0; a2 < e2.state.transitions.length; a2++) {
        const l2 = e2.state.transitions[a2];
        o2 = this.getEpsilonTarget(t3, e2, l2, n2, i2, r2), null !== o2 && (s2 = this.closure(t3, o2, n2, s2, i2, r2));
      }
      return s2;
    }
    getEpsilonTarget(t3, e2, n2, s2, r2, o2) {
      let a2 = null;
      if (n2.serializationType === N.RULE) {
        const t4 = V.create(e2.context, n2.followState.stateNumber);
        a2 = new Yt({ state: n2.target, context: t4 }, e2);
      } else {
        if (n2.serializationType === N.PRECEDENCE) throw "Precedence predicates are not supported in lexers.";
        if (n2.serializationType === N.PREDICATE) _Xt.debug && console.log("EVAL rule " + n2.ruleIndex + ":" + n2.predIndex), s2.hasSemanticContext = true, this.evaluatePredicate(t3, n2.ruleIndex, n2.predIndex, r2) && (a2 = new Yt({ state: n2.target }, e2));
        else if (n2.serializationType === N.ACTION) if (null === e2.context || e2.context.hasEmptyPath()) {
          const t4 = Wt.append(e2.lexerActionExecutor, this.atn.lexerActions[n2.actionIndex]);
          a2 = new Yt({ state: n2.target, lexerActionExecutor: t4 }, e2);
        } else a2 = new Yt({ state: n2.target }, e2);
        else n2.serializationType === N.EPSILON ? a2 = new Yt({ state: n2.target }, e2) : n2.serializationType !== N.ATOM && n2.serializationType !== N.RANGE && n2.serializationType !== N.SET || o2 && n2.matches(i.EOF, 0, Ut.MAX_CHAR_VALUE) && (a2 = new Yt({ state: n2.target }, e2));
      }
      return a2;
    }
    evaluatePredicate(t3, e2, n2, s2) {
      if (null === this.recog) return true;
      if (!s2) return this.recog.sempred(null, e2, n2);
      const i2 = this.column, r2 = this.line, o2 = t3.index, a2 = t3.mark();
      try {
        return this.consume(t3), this.recog.sempred(null, e2, n2);
      } finally {
        this.column = i2, this.line = r2, t3.seek(o2), t3.release(a2);
      }
    }
    captureSimState(t3, e2, n2) {
      t3.index = e2.index, t3.line = this.line, t3.column = this.column, t3.dfaState = n2;
    }
    addDFAEdge(t3, e2, n2, s2) {
      if (void 0 === n2 && (n2 = null), void 0 === s2 && (s2 = null), null === n2 && null !== s2) {
        const t4 = s2.hasSemanticContext;
        if (s2.hasSemanticContext = false, n2 = this.addDFAState(s2), t4) return n2;
      }
      return e2 < _Xt.MIN_DFA_EDGE || e2 > _Xt.MAX_DFA_EDGE || (_Xt.debug && console.log("EDGE " + t3 + " -> " + n2 + " upon " + e2), null === t3.edges && (t3.edges = []), t3.edges[e2 - _Xt.MIN_DFA_EDGE] = n2), n2;
    }
    addDFAState(t3) {
      const e2 = new qt(null, t3);
      let n2 = null;
      for (let e3 = 0; e3 < t3.items.length; e3++) {
        const s3 = t3.items[e3];
        if (s3.state instanceof A) {
          n2 = s3;
          break;
        }
      }
      null !== n2 && (e2.isAcceptState = true, e2.lexerActionExecutor = n2.lexerActionExecutor, e2.prediction = this.atn.ruleToTokenType[n2.state.ruleIndex]);
      const s2 = this.decisionToDFA[this.mode], i2 = s2.states.get(e2);
      if (null !== i2) return i2;
      const r2 = e2;
      return r2.stateNumber = s2.states.length, t3.setReadonly(true), r2.configs = t3, s2.states.add(r2), r2;
    }
    getDFA(t3) {
      return this.decisionToDFA[t3];
    }
    getText(t3) {
      return t3.getText(this.startIndex, t3.index - 1);
    }
    consume(t3) {
      t3.LA(1) === "\n".charCodeAt(0) ? (this.line += 1, this.column = 0) : this.column += 1, t3.consume();
    }
    getTokenName(t3) {
      return -1 === t3 ? "EOF" : "'" + String.fromCharCode(t3) + "'";
    }
  };
  Xt.debug = false, Xt.dfa_debug = false, Xt.MIN_DFA_EDGE = 0, Xt.MAX_DFA_EDGE = 127;
  var Jt = class {
    static {
      __name(this, "Jt");
    }
    constructor(t3, e2) {
      this.alt = e2, this.pred = t3;
    }
    toString() {
      return "(" + this.pred + ", " + this.alt + ")";
    }
  };
  var Zt = class {
    static {
      __name(this, "Zt");
    }
    constructor() {
      this.data = {};
    }
    get(t3) {
      return this.data["k-" + t3] || null;
    }
    set(t3, e2) {
      this.data["k-" + t3] = e2;
    }
    values() {
      return Object.keys(this.data).filter((t3) => t3.startsWith("k-")).map((t3) => this.data[t3], this);
    }
  };
  var Qt = { SLL: 0, LL: 1, LL_EXACT_AMBIG_DETECTION: 2, hasSLLConflictTerminatingPrediction: /* @__PURE__ */ __name(function(t3, e2) {
    if (Qt.allConfigsInRuleStopStates(e2)) return true;
    if (t3 === Qt.SLL && e2.hasSemanticContext) {
      const t4 = new Vt();
      for (let n3 = 0; n3 < e2.items.length; n3++) {
        let s2 = e2.items[n3];
        s2 = new m({ semanticContext: p.NONE }, s2), t4.add(s2);
      }
      e2 = t4;
    }
    const n2 = Qt.getConflictingAltSubsets(e2);
    return Qt.hasConflictingAltSet(n2) && !Qt.hasStateAssociatedWithOneAlt(e2);
  }, "hasSLLConflictTerminatingPrediction"), hasConfigInRuleStopState: /* @__PURE__ */ __name(function(t3) {
    for (let e2 = 0; e2 < t3.items.length; e2++) if (t3.items[e2].state instanceof A) return true;
    return false;
  }, "hasConfigInRuleStopState"), allConfigsInRuleStopStates: /* @__PURE__ */ __name(function(t3) {
    for (let e2 = 0; e2 < t3.items.length; e2++) if (!(t3.items[e2].state instanceof A)) return false;
    return true;
  }, "allConfigsInRuleStopStates"), resolvesToJustOneViableAlt: /* @__PURE__ */ __name(function(t3) {
    return Qt.getSingleViableAlt(t3);
  }, "resolvesToJustOneViableAlt"), allSubsetsConflict: /* @__PURE__ */ __name(function(t3) {
    return !Qt.hasNonConflictingAltSet(t3);
  }, "allSubsetsConflict"), hasNonConflictingAltSet: /* @__PURE__ */ __name(function(t3) {
    for (let e2 = 0; e2 < t3.length; e2++) if (1 === t3[e2].length) return true;
    return false;
  }, "hasNonConflictingAltSet"), hasConflictingAltSet: /* @__PURE__ */ __name(function(t3) {
    for (let e2 = 0; e2 < t3.length; e2++) if (t3[e2].length > 1) return true;
    return false;
  }, "hasConflictingAltSet"), allSubsetsEqual: /* @__PURE__ */ __name(function(t3) {
    let e2 = null;
    for (let n2 = 0; n2 < t3.length; n2++) {
      const s2 = t3[n2];
      if (null === e2) e2 = s2;
      else if (s2 !== e2) return false;
    }
    return true;
  }, "allSubsetsEqual"), getUniqueAlt: /* @__PURE__ */ __name(function(t3) {
    const e2 = Qt.getAlts(t3);
    return 1 === e2.length ? e2.minValue() : $.INVALID_ALT_NUMBER;
  }, "getUniqueAlt"), getAlts: /* @__PURE__ */ __name(function(t3) {
    const e2 = new W();
    return t3.map(function(t4) {
      e2.or(t4);
    }), e2;
  }, "getAlts"), getConflictingAltSubsets: /* @__PURE__ */ __name(function(t3) {
    const e2 = new H();
    return e2.hashFunction = function(t4) {
      l.hashStuff(t4.state.stateNumber, t4.context);
    }, e2.equalsFunction = function(t4, e3) {
      return t4.state.stateNumber === e3.state.stateNumber && t4.context.equals(e3.context);
    }, t3.items.map(function(t4) {
      let n2 = e2.get(t4);
      null === n2 && (n2 = new W(), e2.set(t4, n2)), n2.set(t4.alt);
    }), e2.getValues();
  }, "getConflictingAltSubsets"), getStateToAltMap: /* @__PURE__ */ __name(function(t3) {
    const e2 = new Zt();
    return t3.items.map(function(t4) {
      let n2 = e2.get(t4.state);
      null === n2 && (n2 = new W(), e2.set(t4.state, n2)), n2.set(t4.alt);
    }), e2;
  }, "getStateToAltMap"), hasStateAssociatedWithOneAlt: /* @__PURE__ */ __name(function(t3) {
    const e2 = Qt.getStateToAltMap(t3).values();
    for (let t4 = 0; t4 < e2.length; t4++) if (1 === e2[t4].length) return true;
    return false;
  }, "hasStateAssociatedWithOneAlt"), getSingleViableAlt: /* @__PURE__ */ __name(function(t3) {
    let e2 = null;
    for (let n2 = 0; n2 < t3.length; n2++) {
      const s2 = t3[n2].minValue();
      if (null === e2) e2 = s2;
      else if (e2 !== s2) return $.INVALID_ALT_NUMBER;
    }
    return e2;
  }, "getSingleViableAlt") };
  var te = Qt;
  var ee = class extends Ft {
    static {
      __name(this, "ee");
    }
    constructor(t3, e2, n2, s2, i2, r2) {
      r2 = r2 || t3._ctx, s2 = s2 || t3.getCurrentToken(), n2 = n2 || t3.getCurrentToken(), e2 = e2 || t3.getInputStream(), super({ message: "", recognizer: t3, input: e2, ctx: r2 }), this.deadEndConfigs = i2, this.startToken = n2, this.offendingToken = s2;
    }
  };
  var ne = class {
    static {
      __name(this, "ne");
    }
    constructor(t3) {
      this.defaultMapCtor = t3 || H, this.cacheMap = new this.defaultMapCtor();
    }
    get(t3, e2) {
      const n2 = this.cacheMap.get(t3) || null;
      return null === n2 ? null : n2.get(e2) || null;
    }
    set(t3, e2, n2) {
      let s2 = this.cacheMap.get(t3) || null;
      null === s2 && (s2 = new this.defaultMapCtor(), this.cacheMap.set(t3, s2)), s2.set(e2, n2);
    }
  };
  var se = class extends Ht {
    static {
      __name(this, "se");
    }
    constructor(t3, e2, n2, s2) {
      super(e2, s2), this.parser = t3, this.decisionToDFA = n2, this.predictionMode = te.LL, this._input = null, this._startIndex = 0, this._outerContext = null, this._dfa = null, this.mergeCache = null, this.debug = false, this.debug_closure = false, this.debug_add = false, this.trace_atn_sim = false, this.dfa_debug = false, this.retry_debug = false;
    }
    reset() {
    }
    adaptivePredict(t3, e2, n2) {
      (this.debug || this.trace_atn_sim) && console.log("adaptivePredict decision " + e2 + " exec LA(1)==" + this.getLookaheadName(t3) + " line " + t3.LT(1).line + ":" + t3.LT(1).column), this._input = t3, this._startIndex = t3.index, this._outerContext = n2;
      const s2 = this.decisionToDFA[e2];
      this._dfa = s2;
      const i2 = t3.mark(), r2 = t3.index;
      try {
        let e3;
        if (e3 = s2.precedenceDfa ? s2.getPrecedenceStartState(this.parser.getPrecedence()) : s2.s0, null === e3) {
          null === n2 && (n2 = U.EMPTY), this.debug && console.log("predictATN decision " + s2.decision + " exec LA(1)==" + this.getLookaheadName(t3) + ", outerContext=" + n2.toString(this.parser.ruleNames));
          const i4 = false;
          let r3 = this.computeStartState(s2.atnStartState, U.EMPTY, i4);
          s2.precedenceDfa ? (s2.s0.configs = r3, r3 = this.applyPrecedenceFilter(r3), e3 = this.addDFAState(s2, new qt(null, r3)), s2.setPrecedenceStartState(this.parser.getPrecedence(), e3)) : (e3 = this.addDFAState(s2, new qt(null, r3)), s2.s0 = e3);
        }
        const i3 = this.execATN(s2, e3, t3, r2, n2);
        return this.debug && console.log("DFA after predictATN: " + s2.toString(this.parser.literalNames, this.parser.symbolicNames)), i3;
      } finally {
        this._dfa = null, this.mergeCache = null, t3.seek(r2), t3.release(i2);
      }
    }
    execATN(t3, e2, n2, s2, r2) {
      let o2;
      (this.debug || this.trace_atn_sim) && console.log("execATN decision " + t3.decision + ", DFA state " + e2 + ", LA(1)==" + this.getLookaheadName(n2) + " line " + n2.LT(1).line + ":" + n2.LT(1).column);
      let a2 = e2;
      this.debug && console.log("s0 = " + e2);
      let l2 = n2.LA(1);
      for (; ; ) {
        let e3 = this.getExistingTargetState(a2, l2);
        if (null === e3 && (e3 = this.computeTargetState(t3, a2, l2)), e3 === Ht.ERROR) {
          const t4 = this.noViableAlt(n2, r2, a2.configs, s2);
          if (n2.seek(s2), o2 = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(a2.configs, r2), o2 !== $.INVALID_ALT_NUMBER) return o2;
          throw t4;
        }
        if (e3.requiresFullContext && this.predictionMode !== te.SLL) {
          let i2 = null;
          if (null !== e3.predicates) {
            this.debug && console.log("DFA state has preds in DFA sim LL failover");
            const t4 = n2.index;
            if (t4 !== s2 && n2.seek(s2), i2 = this.evalSemanticContext(e3.predicates, r2, true), 1 === i2.length) return this.debug && console.log("Full LL avoided"), i2.minValue();
            t4 !== s2 && n2.seek(t4);
          }
          this.dfa_debug && console.log("ctx sensitive state " + r2 + " in " + e3);
          const a3 = true, l3 = this.computeStartState(t3.atnStartState, r2, a3);
          return this.reportAttemptingFullContext(t3, i2, e3.configs, s2, n2.index), o2 = this.execATNWithFullContext(t3, e3, l3, n2, s2, r2), o2;
        }
        if (e3.isAcceptState) {
          if (null === e3.predicates) return e3.prediction;
          const i2 = n2.index;
          n2.seek(s2);
          const o3 = this.evalSemanticContext(e3.predicates, r2, true);
          if (0 === o3.length) throw this.noViableAlt(n2, r2, e3.configs, s2);
          return 1 === o3.length || this.reportAmbiguity(t3, e3, s2, i2, false, o3, e3.configs), o3.minValue();
        }
        a2 = e3, l2 !== i.EOF && (n2.consume(), l2 = n2.LA(1));
      }
    }
    getExistingTargetState(t3, e2) {
      const n2 = t3.edges;
      return null === n2 ? null : n2[e2 + 1] || null;
    }
    computeTargetState(t3, e2, n2) {
      const s2 = this.computeReachSet(e2.configs, n2, false);
      if (null === s2) return this.addDFAEdge(t3, e2, n2, Ht.ERROR), Ht.ERROR;
      let i2 = new qt(null, s2);
      const r2 = this.getUniqueAlt(s2);
      if (this.debug) {
        const t4 = te.getConflictingAltSubsets(s2);
        console.log("SLL altSubSets=" + d(t4) + ", configs=" + s2 + ", predict=" + r2 + ", allSubsetsConflict=" + te.allSubsetsConflict(t4) + ", conflictingAlts=" + this.getConflictingAlts(s2));
      }
      return r2 !== $.INVALID_ALT_NUMBER ? (i2.isAcceptState = true, i2.configs.uniqueAlt = r2, i2.prediction = r2) : te.hasSLLConflictTerminatingPrediction(this.predictionMode, s2) && (i2.configs.conflictingAlts = this.getConflictingAlts(s2), i2.requiresFullContext = true, i2.isAcceptState = true, i2.prediction = i2.configs.conflictingAlts.minValue()), i2.isAcceptState && i2.configs.hasSemanticContext && (this.predicateDFAState(i2, this.atn.getDecisionState(t3.decision)), null !== i2.predicates && (i2.prediction = $.INVALID_ALT_NUMBER)), i2 = this.addDFAEdge(t3, e2, n2, i2), i2;
    }
    predicateDFAState(t3, e2) {
      const n2 = e2.transitions.length, s2 = this.getConflictingAltsOrUniqueAlt(t3.configs), i2 = this.getPredsForAmbigAlts(s2, t3.configs, n2);
      null !== i2 ? (t3.predicates = this.getPredicatePredictions(s2, i2), t3.prediction = $.INVALID_ALT_NUMBER) : t3.prediction = s2.minValue();
    }
    execATNWithFullContext(t3, e2, n2, s2, r2, o2) {
      (this.debug || this.trace_atn_sim) && console.log("execATNWithFullContext " + n2);
      let a2, l2 = false, h2 = n2;
      s2.seek(r2);
      let c2 = s2.LA(1), u2 = -1;
      for (; ; ) {
        if (a2 = this.computeReachSet(h2, c2, true), null === a2) {
          const t5 = this.noViableAlt(s2, o2, h2, r2);
          s2.seek(r2);
          const e3 = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(h2, o2);
          if (e3 !== $.INVALID_ALT_NUMBER) return e3;
          throw t5;
        }
        const t4 = te.getConflictingAltSubsets(a2);
        if (this.debug && console.log("LL altSubSets=" + t4 + ", predict=" + te.getUniqueAlt(t4) + ", resolvesToJustOneViableAlt=" + te.resolvesToJustOneViableAlt(t4)), a2.uniqueAlt = this.getUniqueAlt(a2), a2.uniqueAlt !== $.INVALID_ALT_NUMBER) {
          u2 = a2.uniqueAlt;
          break;
        }
        if (this.predictionMode !== te.LL_EXACT_AMBIG_DETECTION) {
          if (u2 = te.resolvesToJustOneViableAlt(t4), u2 !== $.INVALID_ALT_NUMBER) break;
        } else if (te.allSubsetsConflict(t4) && te.allSubsetsEqual(t4)) {
          l2 = true, u2 = te.getSingleViableAlt(t4);
          break;
        }
        h2 = a2, c2 !== i.EOF && (s2.consume(), c2 = s2.LA(1));
      }
      return a2.uniqueAlt !== $.INVALID_ALT_NUMBER ? (this.reportContextSensitivity(t3, u2, a2, r2, s2.index), u2) : (this.reportAmbiguity(t3, e2, r2, s2.index, l2, null, a2), u2);
    }
    computeReachSet(t3, e2, n2) {
      this.debug && console.log("in computeReachSet, starting closure: " + t3), null === this.mergeCache && (this.mergeCache = new ne());
      const s2 = new Vt(n2);
      let r2 = null;
      for (let o3 = 0; o3 < t3.items.length; o3++) {
        const a2 = t3.items[o3];
        if (this.debug && console.log("testing " + this.getTokenName(e2) + " at " + a2), a2.state instanceof A) (n2 || e2 === i.EOF) && (null === r2 && (r2 = []), r2.push(a2), this.debug_add && console.log("added " + a2 + " to skippedStopStates"));
        else for (let t4 = 0; t4 < a2.state.transitions.length; t4++) {
          const n3 = a2.state.transitions[t4], i2 = this.getReachableTarget(n3, e2);
          if (null !== i2) {
            const t5 = new m({ state: i2 }, a2);
            s2.add(t5, this.mergeCache), this.debug_add && console.log("added " + t5 + " to intermediate");
          }
        }
      }
      let o2 = null;
      if (null === r2 && e2 !== i.EOF && (1 === s2.items.length || this.getUniqueAlt(s2) !== $.INVALID_ALT_NUMBER) && (o2 = s2), null === o2) {
        o2 = new Vt(n2);
        const t4 = new g(), r3 = e2 === i.EOF;
        for (let e3 = 0; e3 < s2.items.length; e3++) this.closure(s2.items[e3], o2, t4, false, n2, r3);
      }
      if (e2 === i.EOF && (o2 = this.removeAllConfigsNotInRuleStopState(o2, o2 === s2)), !(null === r2 || n2 && te.hasConfigInRuleStopState(o2))) for (let t4 = 0; t4 < r2.length; t4++) o2.add(r2[t4], this.mergeCache);
      return this.trace_atn_sim && console.log("computeReachSet " + t3 + " -> " + o2), 0 === o2.items.length ? null : o2;
    }
    removeAllConfigsNotInRuleStopState(t3, e2) {
      if (te.allConfigsInRuleStopStates(t3)) return t3;
      const n2 = new Vt(t3.fullCtx);
      for (let s2 = 0; s2 < t3.items.length; s2++) {
        const r2 = t3.items[s2];
        if (r2.state instanceof A) n2.add(r2, this.mergeCache);
        else if (e2 && r2.state.epsilonOnlyTransitions && this.atn.nextTokens(r2.state).contains(i.EPSILON)) {
          const t4 = this.atn.ruleToStopState[r2.state.ruleIndex];
          n2.add(new m({ state: t4 }, r2), this.mergeCache);
        }
      }
      return n2;
    }
    computeStartState(t3, e2, n2) {
      const s2 = K(this.atn, e2), i2 = new Vt(n2);
      this.trace_atn_sim && console.log("computeStartState from ATN state " + t3 + " initialContext=" + s2.toString(this.parser));
      for (let e3 = 0; e3 < t3.transitions.length; e3++) {
        const r2 = t3.transitions[e3].target, o2 = new m({ state: r2, alt: e3 + 1, context: s2 }, null), a2 = new g();
        this.closure(o2, i2, a2, true, n2, false);
      }
      return i2;
    }
    applyPrecedenceFilter(t3) {
      let e2;
      const n2 = [], s2 = new Vt(t3.fullCtx);
      for (let i2 = 0; i2 < t3.items.length; i2++) {
        if (e2 = t3.items[i2], 1 !== e2.alt) continue;
        const r2 = e2.semanticContext.evalPrecedence(this.parser, this._outerContext);
        null !== r2 && (n2[e2.state.stateNumber] = e2.context, r2 !== e2.semanticContext ? s2.add(new m({ semanticContext: r2 }, e2), this.mergeCache) : s2.add(e2, this.mergeCache));
      }
      for (let i2 = 0; i2 < t3.items.length; i2++) if (e2 = t3.items[i2], 1 !== e2.alt) {
        if (!e2.precedenceFilterSuppressed) {
          const t4 = n2[e2.state.stateNumber] || null;
          if (null !== t4 && t4.equals(e2.context)) continue;
        }
        s2.add(e2, this.mergeCache);
      }
      return s2;
    }
    getReachableTarget(t3, e2) {
      return t3.matches(e2, 0, this.atn.maxTokenType) ? t3.target : null;
    }
    getPredsForAmbigAlts(t3, e2, n2) {
      let s2 = [];
      for (let n3 = 0; n3 < e2.items.length; n3++) {
        const i3 = e2.items[n3];
        t3.get(i3.alt) && (s2[i3.alt] = p.orContext(s2[i3.alt] || null, i3.semanticContext));
      }
      let i2 = 0;
      for (let t4 = 1; t4 < n2 + 1; t4++) {
        const e3 = s2[t4] || null;
        null === e3 ? s2[t4] = p.NONE : e3 !== p.NONE && (i2 += 1);
      }
      return 0 === i2 && (s2 = null), this.debug && console.log("getPredsForAmbigAlts result " + d(s2)), s2;
    }
    getPredicatePredictions(t3, e2) {
      const n2 = [];
      let s2 = false;
      for (let i2 = 1; i2 < e2.length; i2++) {
        const r2 = e2[i2];
        null !== t3 && t3.get(i2) && n2.push(new Jt(r2, i2)), r2 !== p.NONE && (s2 = true);
      }
      return s2 ? n2 : null;
    }
    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(t3, e2) {
      const n2 = this.splitAccordingToSemanticValidity(t3, e2), s2 = n2[0], i2 = n2[1];
      let r2 = this.getAltThatFinishedDecisionEntryRule(s2);
      return r2 !== $.INVALID_ALT_NUMBER || i2.items.length > 0 && (r2 = this.getAltThatFinishedDecisionEntryRule(i2), r2 !== $.INVALID_ALT_NUMBER) ? r2 : $.INVALID_ALT_NUMBER;
    }
    getAltThatFinishedDecisionEntryRule(t3) {
      const e2 = [];
      for (let n2 = 0; n2 < t3.items.length; n2++) {
        const s2 = t3.items[n2];
        (s2.reachesIntoOuterContext > 0 || s2.state instanceof A && s2.context.hasEmptyPath()) && e2.indexOf(s2.alt) < 0 && e2.push(s2.alt);
      }
      return 0 === e2.length ? $.INVALID_ALT_NUMBER : Math.min.apply(null, e2);
    }
    splitAccordingToSemanticValidity(t3, e2) {
      const n2 = new Vt(t3.fullCtx), s2 = new Vt(t3.fullCtx);
      for (let i2 = 0; i2 < t3.items.length; i2++) {
        const r2 = t3.items[i2];
        r2.semanticContext !== p.NONE ? r2.semanticContext.evaluate(this.parser, e2) ? n2.add(r2) : s2.add(r2) : n2.add(r2);
      }
      return [n2, s2];
    }
    evalSemanticContext(t3, e2, n2) {
      const s2 = new W();
      for (let i2 = 0; i2 < t3.length; i2++) {
        const r2 = t3[i2];
        if (r2.pred === p.NONE) {
          if (s2.set(r2.alt), !n2) break;
          continue;
        }
        const o2 = r2.pred.evaluate(this.parser, e2);
        if ((this.debug || this.dfa_debug) && console.log("eval pred " + r2 + "=" + o2), o2 && ((this.debug || this.dfa_debug) && console.log("PREDICT " + r2.alt), s2.set(r2.alt), !n2)) break;
      }
      return s2;
    }
    closure(t3, e2, n2, s2, i2, r2) {
      this.closureCheckingStopState(t3, e2, n2, s2, i2, 0, r2);
    }
    closureCheckingStopState(t3, e2, n2, s2, i2, r2, o2) {
      if ((this.trace_atn_sim || this.debug_closure) && console.log("closure(" + t3.toString(this.parser, true) + ")"), t3.state instanceof A) {
        if (!t3.context.isEmpty()) {
          for (let a2 = 0; a2 < t3.context.length; a2++) {
            if (t3.context.getReturnState(a2) === B.EMPTY_RETURN_STATE) {
              if (i2) {
                e2.add(new m({ state: t3.state, context: B.EMPTY }, t3), this.mergeCache);
                continue;
              }
              this.debug && console.log("FALLING off rule " + this.getRuleName(t3.state.ruleIndex)), this.closure_(t3, e2, n2, s2, i2, r2, o2);
              continue;
            }
            const l2 = this.atn.states[t3.context.getReturnState(a2)], h2 = t3.context.getParent(a2), c2 = { state: l2, alt: t3.alt, context: h2, semanticContext: t3.semanticContext }, u2 = new m(c2, null);
            u2.reachesIntoOuterContext = t3.reachesIntoOuterContext, this.closureCheckingStopState(u2, e2, n2, s2, i2, r2 - 1, o2);
          }
          return;
        }
        if (i2) return void e2.add(t3, this.mergeCache);
        this.debug && console.log("FALLING off rule " + this.getRuleName(t3.state.ruleIndex));
      }
      this.closure_(t3, e2, n2, s2, i2, r2, o2);
    }
    closure_(t3, e2, n2, s2, i2, r2, o2) {
      const a2 = t3.state;
      a2.epsilonOnlyTransitions || e2.add(t3, this.mergeCache);
      for (let l2 = 0; l2 < a2.transitions.length; l2++) {
        if (0 === l2 && this.canDropLoopEntryEdgeInLeftRecursiveRule(t3)) continue;
        const h2 = a2.transitions[l2], c2 = s2 && !(h2 instanceof ut), u2 = this.getEpsilonTarget(t3, h2, c2, 0 === r2, i2, o2);
        if (null !== u2) {
          let s3 = r2;
          if (t3.state instanceof A) {
            if (null !== this._dfa && this._dfa.precedenceDfa && h2.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex && (u2.precedenceFilterSuppressed = true), u2.reachesIntoOuterContext += 1, n2.getOrAdd(u2) !== u2) continue;
            e2.dipsIntoOuterContext = true, s3 -= 1, this.debug && console.log("dips into outer ctx: " + u2);
          } else {
            if (!h2.isEpsilon && n2.getOrAdd(u2) !== u2) continue;
            h2 instanceof k && s3 >= 0 && (s3 += 1);
          }
          this.closureCheckingStopState(u2, e2, n2, c2, i2, s3, o2);
        }
      }
    }
    canDropLoopEntryEdgeInLeftRecursiveRule(t3) {
      const e2 = t3.state;
      if (e2.stateType !== C2.STAR_LOOP_ENTRY) return false;
      if (e2.stateType !== C2.STAR_LOOP_ENTRY || !e2.isPrecedenceDecision || t3.context.isEmpty() || t3.context.hasEmptyPath()) return false;
      const n2 = t3.context.length;
      for (let s3 = 0; s3 < n2; s3++) if (this.atn.states[t3.context.getReturnState(s3)].ruleIndex !== e2.ruleIndex) return false;
      const s2 = e2.transitions[0].target.endState.stateNumber, i2 = this.atn.states[s2];
      for (let s3 = 0; s3 < n2; s3++) {
        const n3 = t3.context.getReturnState(s3), r2 = this.atn.states[n3];
        if (1 !== r2.transitions.length || !r2.transitions[0].isEpsilon) return false;
        const o2 = r2.transitions[0].target;
        if (!(r2.stateType === C2.BLOCK_END && o2 === e2 || r2 === i2 || o2 === i2 || o2.stateType === C2.BLOCK_END && 1 === o2.transitions.length && o2.transitions[0].isEpsilon && o2.transitions[0].target === e2)) return false;
      }
      return true;
    }
    getRuleName(t3) {
      return null !== this.parser && t3 >= 0 ? this.parser.ruleNames[t3] : "<rule " + t3 + ">";
    }
    getEpsilonTarget(t3, e2, n2, s2, r2, o2) {
      switch (e2.serializationType) {
        case N.RULE:
          return this.ruleTransition(t3, e2);
        case N.PRECEDENCE:
          return this.precedenceTransition(t3, e2, n2, s2, r2);
        case N.PREDICATE:
          return this.predTransition(t3, e2, n2, s2, r2);
        case N.ACTION:
          return this.actionTransition(t3, e2);
        case N.EPSILON:
          return new m({ state: e2.target }, t3);
        case N.ATOM:
        case N.RANGE:
        case N.SET:
          return o2 && e2.matches(i.EOF, 0, 1) ? new m({ state: e2.target }, t3) : null;
        default:
          return null;
      }
    }
    actionTransition(t3, e2) {
      if (this.debug) {
        const t4 = -1 === e2.actionIndex ? 65535 : e2.actionIndex;
        console.log("ACTION edge " + e2.ruleIndex + ":" + t4);
      }
      return new m({ state: e2.target }, t3);
    }
    precedenceTransition(t3, e2, n2, s2, i2) {
      this.debug && (console.log("PRED (collectPredicates=" + n2 + ") " + e2.precedence + ">=_p, ctx dependent=true"), null !== this.parser && console.log("context surrounding pred is " + d(this.parser.getRuleInvocationStack())));
      let r2 = null;
      if (n2 && s2) if (i2) {
        const n3 = this._input.index;
        this._input.seek(this._startIndex);
        const s3 = e2.getPredicate().evaluate(this.parser, this._outerContext);
        this._input.seek(n3), s3 && (r2 = new m({ state: e2.target }, t3));
      } else {
        const n3 = p.andContext(t3.semanticContext, e2.getPredicate());
        r2 = new m({ state: e2.target, semanticContext: n3 }, t3);
      }
      else r2 = new m({ state: e2.target }, t3);
      return this.debug && console.log("config from pred transition=" + r2), r2;
    }
    predTransition(t3, e2, n2, s2, i2) {
      this.debug && (console.log("PRED (collectPredicates=" + n2 + ") " + e2.ruleIndex + ":" + e2.predIndex + ", ctx dependent=" + e2.isCtxDependent), null !== this.parser && console.log("context surrounding pred is " + d(this.parser.getRuleInvocationStack())));
      let r2 = null;
      if (n2 && (e2.isCtxDependent && s2 || !e2.isCtxDependent)) if (i2) {
        const n3 = this._input.index;
        this._input.seek(this._startIndex);
        const s3 = e2.getPredicate().evaluate(this.parser, this._outerContext);
        this._input.seek(n3), s3 && (r2 = new m({ state: e2.target }, t3));
      } else {
        const n3 = p.andContext(t3.semanticContext, e2.getPredicate());
        r2 = new m({ state: e2.target, semanticContext: n3 }, t3);
      }
      else r2 = new m({ state: e2.target }, t3);
      return this.debug && console.log("config from pred transition=" + r2), r2;
    }
    ruleTransition(t3, e2) {
      this.debug && console.log("CALL rule " + this.getRuleName(e2.target.ruleIndex) + ", ctx=" + t3.context);
      const n2 = e2.followState, s2 = V.create(t3.context, n2.stateNumber);
      return new m({ state: e2.target, context: s2 }, t3);
    }
    getConflictingAlts(t3) {
      const e2 = te.getConflictingAltSubsets(t3);
      return te.getAlts(e2);
    }
    getConflictingAltsOrUniqueAlt(t3) {
      let e2 = null;
      return t3.uniqueAlt !== $.INVALID_ALT_NUMBER ? (e2 = new W(), e2.set(t3.uniqueAlt)) : e2 = t3.conflictingAlts, e2;
    }
    getTokenName(t3) {
      if (t3 === i.EOF) return "EOF";
      if (null !== this.parser && null !== this.parser.literalNames) {
        if (!(t3 >= this.parser.literalNames.length && t3 >= this.parser.symbolicNames.length)) return (this.parser.literalNames[t3] || this.parser.symbolicNames[t3]) + "<" + t3 + ">";
        console.log(t3 + " ttype out of range: " + this.parser.literalNames), console.log("" + this.parser.getInputStream().getTokens());
      }
      return "" + t3;
    }
    getLookaheadName(t3) {
      return this.getTokenName(t3.LA(1));
    }
    dumpDeadEndConfigs(t3) {
      console.log("dead end configs: ");
      const e2 = t3.getDeadEndConfigs();
      for (let t4 = 0; t4 < e2.length; t4++) {
        const n2 = e2[t4];
        let s2 = "no edges";
        if (n2.state.transitions.length > 0) {
          const t5 = n2.state.transitions[0];
          t5 instanceof ht ? s2 = "Atom " + this.getTokenName(t5.label) : t5 instanceof I && (s2 = (t5 instanceof y ? "~" : "") + "Set " + t5.set);
        }
        console.error(n2.toString(this.parser, true) + ":" + s2);
      }
    }
    noViableAlt(t3, e2, n2, s2) {
      return new ee(this.parser, t3, t3.get(s2), t3.LT(1), n2, e2);
    }
    getUniqueAlt(t3) {
      let e2 = $.INVALID_ALT_NUMBER;
      for (let n2 = 0; n2 < t3.items.length; n2++) {
        const s2 = t3.items[n2];
        if (e2 === $.INVALID_ALT_NUMBER) e2 = s2.alt;
        else if (s2.alt !== e2) return $.INVALID_ALT_NUMBER;
      }
      return e2;
    }
    addDFAEdge(t3, e2, n2, s2) {
      if (this.debug && console.log("EDGE " + e2 + " -> " + s2 + " upon " + this.getTokenName(n2)), null === s2) return null;
      if (s2 = this.addDFAState(t3, s2), null === e2 || n2 < -1 || n2 > this.atn.maxTokenType) return s2;
      if (null === e2.edges && (e2.edges = []), e2.edges[n2 + 1] = s2, this.debug) {
        const e3 = null === this.parser ? null : this.parser.literalNames, n3 = null === this.parser ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + t3.toString(e3, n3));
      }
      return s2;
    }
    addDFAState(t3, e2) {
      if (e2 === Ht.ERROR) return e2;
      const n2 = t3.states.get(e2);
      return null !== n2 ? (this.trace_atn_sim && console.log("addDFAState " + e2 + " exists"), n2) : (e2.stateNumber = t3.states.length, e2.configs.readOnly || (e2.configs.optimizeConfigs(this), e2.configs.setReadonly(true)), this.trace_atn_sim && console.log("addDFAState new " + e2), t3.states.add(e2), this.debug && console.log("adding new DFA state: " + e2), e2);
    }
    reportAttemptingFullContext(t3, e2, n2, s2, i2) {
      if (this.debug || this.retry_debug) {
        const e3 = new E(s2, i2 + 1);
        console.log("reportAttemptingFullContext decision=" + t3.decision + ":" + n2 + ", input=" + this.parser.getTokenStream().getText(e3));
      }
      null !== this.parser && this.parser.getErrorListener().reportAttemptingFullContext(this.parser, t3, s2, i2, e2, n2);
    }
    reportContextSensitivity(t3, e2, n2, s2, i2) {
      if (this.debug || this.retry_debug) {
        const e3 = new E(s2, i2 + 1);
        console.log("reportContextSensitivity decision=" + t3.decision + ":" + n2 + ", input=" + this.parser.getTokenStream().getText(e3));
      }
      null !== this.parser && this.parser.getErrorListener().reportContextSensitivity(this.parser, t3, s2, i2, e2, n2);
    }
    reportAmbiguity(t3, e2, n2, s2, i2, r2, o2) {
      if (this.debug || this.retry_debug) {
        const t4 = new E(n2, s2 + 1);
        console.log("reportAmbiguity " + r2 + ":" + o2 + ", input=" + this.parser.getTokenStream().getText(t4));
      }
      null !== this.parser && this.parser.getErrorListener().reportAmbiguity(this.parser, t3, n2, s2, i2, r2, o2);
    }
  };
  var ie3 = class {
    static {
      __name(this, "ie");
    }
    constructor() {
      this.cache = new H();
    }
    add(t3) {
      if (t3 === B.EMPTY) return B.EMPTY;
      const e2 = this.cache.get(t3) || null;
      return null !== e2 ? e2 : (this.cache.set(t3, t3), t3);
    }
    get(t3) {
      return this.cache.get(t3) || null;
    }
    get length() {
      return this.cache.length;
    }
  };
  var re = { ATN: $, ATNDeserializer: Lt, LexerATNSimulator: Xt, ParserATNSimulator: se, PredictionMode: te, PredictionContextCache: ie3 };
  var oe = class {
    static {
      __name(this, "oe");
    }
    constructor(t3, e2, n2) {
      this.dfa = t3, this.literalNames = e2 || [], this.symbolicNames = n2 || [];
    }
    toString() {
      if (null === this.dfa.s0) return null;
      let t3 = "";
      const e2 = this.dfa.sortedStates();
      for (let n2 = 0; n2 < e2.length; n2++) {
        const s2 = e2[n2];
        if (null !== s2.edges) {
          const e3 = s2.edges.length;
          for (let n3 = 0; n3 < e3; n3++) {
            const e4 = s2.edges[n3] || null;
            null !== e4 && 2147483647 !== e4.stateNumber && (t3 = t3.concat(this.getStateString(s2)), t3 = t3.concat("-"), t3 = t3.concat(this.getEdgeLabel(n3)), t3 = t3.concat("->"), t3 = t3.concat(this.getStateString(e4)), t3 = t3.concat("\n"));
          }
        }
      }
      return 0 === t3.length ? null : t3;
    }
    getEdgeLabel(t3) {
      return 0 === t3 ? "EOF" : null !== this.literalNames || null !== this.symbolicNames ? this.literalNames[t3 - 1] || this.symbolicNames[t3 - 1] : String.fromCharCode(t3 - 1);
    }
    getStateString(t3) {
      const e2 = (t3.isAcceptState ? ":" : "") + "s" + t3.stateNumber + (t3.requiresFullContext ? "^" : "");
      return t3.isAcceptState ? null !== t3.predicates ? e2 + "=>" + d(t3.predicates) : e2 + "=>" + t3.prediction.toString() : e2;
    }
  };
  var ae = class extends oe {
    static {
      __name(this, "ae");
    }
    constructor(t3) {
      super(t3, null);
    }
    getEdgeLabel(t3) {
      return "'" + String.fromCharCode(t3) + "'";
    }
  };
  var le = class {
    static {
      __name(this, "le");
    }
    constructor(t3, e2) {
      if (void 0 === e2 && (e2 = 0), this.atnStartState = t3, this.decision = e2, this._states = new g(), this.s0 = null, this.precedenceDfa = false, t3 instanceof rt && t3.isPrecedenceDecision) {
        this.precedenceDfa = true;
        const t4 = new qt(null, new Vt());
        t4.edges = [], t4.isAcceptState = false, t4.requiresFullContext = false, this.s0 = t4;
      }
    }
    getPrecedenceStartState(t3) {
      if (!this.precedenceDfa) throw "Only precedence DFAs may contain a precedence start state.";
      return t3 < 0 || t3 >= this.s0.edges.length ? null : this.s0.edges[t3] || null;
    }
    setPrecedenceStartState(t3, e2) {
      if (!this.precedenceDfa) throw "Only precedence DFAs may contain a precedence start state.";
      t3 < 0 || (this.s0.edges[t3] = e2);
    }
    setPrecedenceDfa(t3) {
      if (this.precedenceDfa !== t3) {
        if (this._states = new g(), t3) {
          const t4 = new qt(null, new Vt());
          t4.edges = [], t4.isAcceptState = false, t4.requiresFullContext = false, this.s0 = t4;
        } else this.s0 = null;
        this.precedenceDfa = t3;
      }
    }
    sortedStates() {
      return this._states.values().sort(function(t3, e2) {
        return t3.stateNumber - e2.stateNumber;
      });
    }
    toString(t3, e2) {
      return t3 = t3 || null, e2 = e2 || null, null === this.s0 ? "" : new oe(this, t3, e2).toString();
    }
    toLexerString() {
      return null === this.s0 ? "" : new ae(this).toString();
    }
    get states() {
      return this._states;
    }
  };
  var he = { DFA: le, DFASerializer: oe, LexerDFASerializer: ae, PredPrediction: Jt };
  var ce = { PredictionContext: B };
  var ue = { Interval: E, IntervalSet: _ };
  var de = class {
    static {
      __name(this, "de");
    }
    visitTerminal(t3) {
    }
    visitErrorNode(t3) {
    }
    enterEveryRule(t3) {
    }
    exitEveryRule(t3) {
    }
  };
  var ge = class {
    static {
      __name(this, "ge");
    }
    visit(t3) {
      return Array.isArray(t3) ? t3.map(function(t4) {
        return t4.accept(this);
      }, this) : t3.accept(this);
    }
    visitChildren(t3) {
      return t3.children ? this.visit(t3.children) : null;
    }
    visitTerminal(t3) {
    }
    visitErrorNode(t3) {
    }
  };
  var pe = class {
    static {
      __name(this, "pe");
    }
    walk(t3, e2) {
      if (e2 instanceof D || void 0 !== e2.isErrorNode && e2.isErrorNode()) t3.visitErrorNode(e2);
      else if (e2 instanceof b) t3.visitTerminal(e2);
      else {
        this.enterRule(t3, e2);
        for (let n2 = 0; n2 < e2.getChildCount(); n2++) {
          const s2 = e2.getChild(n2);
          this.walk(t3, s2);
        }
        this.exitRule(t3, e2);
      }
    }
    enterRule(t3, e2) {
      const n2 = e2.ruleContext;
      t3.enterEveryRule(n2), n2.enterRule(t3);
    }
    exitRule(t3, e2) {
      const n2 = e2.ruleContext;
      n2.exitRule(t3), t3.exitEveryRule(n2);
    }
  };
  pe.DEFAULT = new pe();
  var fe = { Trees: M, RuleNode: P, ErrorNode: D, TerminalNode: b, ParseTreeListener: de, ParseTreeVisitor: ge, ParseTreeWalker: pe };
  var xe = class extends Ft {
    static {
      __name(this, "xe");
    }
    constructor(t3) {
      super({ message: "", recognizer: t3, input: t3.getInputStream(), ctx: t3._ctx }), this.offendingToken = t3.getCurrentToken();
    }
  };
  var Te = class extends Ft {
    static {
      __name(this, "Te");
    }
    constructor(t3, e2, n2) {
      super({ message: Se(e2, n2 || null), recognizer: t3, input: t3.getInputStream(), ctx: t3._ctx });
      const s2 = t3._interp.atn.states[t3.state].transitions[0];
      s2 instanceof pt ? (this.ruleIndex = s2.ruleIndex, this.predicateIndex = s2.predIndex) : (this.ruleIndex = 0, this.predicateIndex = 0), this.predicate = e2, this.offendingToken = t3.getCurrentToken();
    }
  };
  function Se(t3, e2) {
    return null !== e2 ? e2 : "failed predicate: {" + t3 + "}?";
  }
  __name(Se, "Se");
  var me = class extends Ot {
    static {
      __name(this, "me");
    }
    constructor(t3) {
      super(), t3 = t3 || true, this.exactOnly = t3;
    }
    reportAmbiguity(t3, e2, n2, s2, i2, r2, o2) {
      if (this.exactOnly && !i2) return;
      const a2 = "reportAmbiguity d=" + this.getDecisionDescription(t3, e2) + ": ambigAlts=" + this.getConflictingAlts(r2, o2) + ", input='" + t3.getTokenStream().getText(new E(n2, s2)) + "'";
      t3.notifyErrorListeners(a2);
    }
    reportAttemptingFullContext(t3, e2, n2, s2, i2, r2) {
      const o2 = "reportAttemptingFullContext d=" + this.getDecisionDescription(t3, e2) + ", input='" + t3.getTokenStream().getText(new E(n2, s2)) + "'";
      t3.notifyErrorListeners(o2);
    }
    reportContextSensitivity(t3, e2, n2, s2, i2, r2) {
      const o2 = "reportContextSensitivity d=" + this.getDecisionDescription(t3, e2) + ", input='" + t3.getTokenStream().getText(new E(n2, s2)) + "'";
      t3.notifyErrorListeners(o2);
    }
    getDecisionDescription(t3, e2) {
      const n2 = e2.decision, s2 = e2.atnStartState.ruleIndex, i2 = t3.ruleNames;
      if (s2 < 0 || s2 >= i2.length) return "" + n2;
      const r2 = i2[s2] || null;
      return null === r2 || 0 === r2.length ? "" + n2 : `${n2} (${r2})`;
    }
    getConflictingAlts(t3, e2) {
      if (null !== t3) return t3;
      const n2 = new W();
      for (let t4 = 0; t4 < e2.items.length; t4++) n2.set(e2.items[t4].alt);
      return `{${n2.values().join(", ")}}`;
    }
  };
  var Ee = class _Ee extends Error {
    static {
      __name(this, "Ee");
    }
    constructor() {
      super(), Error.captureStackTrace(this, _Ee);
    }
  };
  var _e = class {
    static {
      __name(this, "_e");
    }
    reset(t3) {
    }
    recoverInline(t3) {
    }
    recover(t3, e2) {
    }
    sync(t3) {
    }
    inErrorRecoveryMode(t3) {
    }
    reportError(t3) {
    }
  };
  var Ce = class extends _e {
    static {
      __name(this, "Ce");
    }
    constructor() {
      super(), this.errorRecoveryMode = false, this.lastErrorIndex = -1, this.lastErrorStates = null, this.nextTokensContext = null, this.nextTokenState = 0;
    }
    reset(t3) {
      this.endErrorCondition(t3);
    }
    beginErrorCondition(t3) {
      this.errorRecoveryMode = true;
    }
    inErrorRecoveryMode(t3) {
      return this.errorRecoveryMode;
    }
    endErrorCondition(t3) {
      this.errorRecoveryMode = false, this.lastErrorStates = null, this.lastErrorIndex = -1;
    }
    reportMatch(t3) {
      this.endErrorCondition(t3);
    }
    reportError(t3, e2) {
      this.inErrorRecoveryMode(t3) || (this.beginErrorCondition(t3), e2 instanceof ee ? this.reportNoViableAlternative(t3, e2) : e2 instanceof xe ? this.reportInputMismatch(t3, e2) : e2 instanceof Te ? this.reportFailedPredicate(t3, e2) : (console.log("unknown recognition error type: " + e2.constructor.name), console.log(e2.stack), t3.notifyErrorListeners(e2.getOffendingToken(), e2.getMessage(), e2)));
    }
    recover(t3, e2) {
      this.lastErrorIndex === t3.getInputStream().index && null !== this.lastErrorStates && this.lastErrorStates.indexOf(t3.state) >= 0 && t3.consume(), this.lastErrorIndex = t3._input.index, null === this.lastErrorStates && (this.lastErrorStates = []), this.lastErrorStates.push(t3.state);
      const n2 = this.getErrorRecoverySet(t3);
      this.consumeUntil(t3, n2);
    }
    sync(t3) {
      if (this.inErrorRecoveryMode(t3)) return;
      const e2 = t3._interp.atn.states[t3.state], n2 = t3.getTokenStream().LA(1), s2 = t3.atn.nextTokens(e2);
      if (s2.contains(n2)) return this.nextTokensContext = null, void (this.nextTokenState = C2.INVALID_STATE_NUMBER);
      if (s2.contains(i.EPSILON)) null === this.nextTokensContext && (this.nextTokensContext = t3._ctx, this.nextTokensState = t3._stateNumber);
      else switch (e2.stateType) {
        case C2.BLOCK_START:
        case C2.STAR_BLOCK_START:
        case C2.PLUS_BLOCK_START:
        case C2.STAR_LOOP_ENTRY:
          if (null !== this.singleTokenDeletion(t3)) return;
          throw new xe(t3);
        case C2.PLUS_LOOP_BACK:
        case C2.STAR_LOOP_BACK: {
          this.reportUnwantedToken(t3);
          const e3 = new _();
          e3.addSet(t3.getExpectedTokens());
          const n3 = e3.addSet(this.getErrorRecoverySet(t3));
          this.consumeUntil(t3, n3);
        }
      }
    }
    reportNoViableAlternative(t3, e2) {
      const n2 = t3.getTokenStream();
      let s2;
      s2 = null !== n2 ? e2.startToken.type === i.EOF ? "<EOF>" : n2.getText(new E(e2.startToken.tokenIndex, e2.offendingToken.tokenIndex)) : "<unknown input>";
      const r2 = "no viable alternative at input " + this.escapeWSAndQuote(s2);
      t3.notifyErrorListeners(r2, e2.offendingToken, e2);
    }
    reportInputMismatch(t3, e2) {
      const n2 = "mismatched input " + this.getTokenErrorDisplay(e2.offendingToken) + " expecting " + e2.getExpectedTokens().toString(t3.literalNames, t3.symbolicNames);
      t3.notifyErrorListeners(n2, e2.offendingToken, e2);
    }
    reportFailedPredicate(t3, e2) {
      const n2 = "rule " + t3.ruleNames[t3._ctx.ruleIndex] + " " + e2.message;
      t3.notifyErrorListeners(n2, e2.offendingToken, e2);
    }
    reportUnwantedToken(t3) {
      if (this.inErrorRecoveryMode(t3)) return;
      this.beginErrorCondition(t3);
      const e2 = t3.getCurrentToken(), n2 = "extraneous input " + this.getTokenErrorDisplay(e2) + " expecting " + this.getExpectedTokens(t3).toString(t3.literalNames, t3.symbolicNames);
      t3.notifyErrorListeners(n2, e2, null);
    }
    reportMissingToken(t3) {
      if (this.inErrorRecoveryMode(t3)) return;
      this.beginErrorCondition(t3);
      const e2 = t3.getCurrentToken(), n2 = "missing " + this.getExpectedTokens(t3).toString(t3.literalNames, t3.symbolicNames) + " at " + this.getTokenErrorDisplay(e2);
      t3.notifyErrorListeners(n2, e2, null);
    }
    recoverInline(t3) {
      const e2 = this.singleTokenDeletion(t3);
      if (null !== e2) return t3.consume(), e2;
      if (this.singleTokenInsertion(t3)) return this.getMissingSymbol(t3);
      throw new xe(t3);
    }
    singleTokenInsertion(t3) {
      const e2 = t3.getTokenStream().LA(1), n2 = t3._interp.atn, s2 = n2.states[t3.state].transitions[0].target;
      return !!n2.nextTokens(s2, t3._ctx).contains(e2) && (this.reportMissingToken(t3), true);
    }
    singleTokenDeletion(t3) {
      const e2 = t3.getTokenStream().LA(2);
      if (this.getExpectedTokens(t3).contains(e2)) {
        this.reportUnwantedToken(t3), t3.consume();
        const e3 = t3.getCurrentToken();
        return this.reportMatch(t3), e3;
      }
      return null;
    }
    getMissingSymbol(t3) {
      const e2 = t3.getCurrentToken(), n2 = this.getExpectedTokens(t3).first();
      let s2;
      s2 = n2 === i.EOF ? "<missing EOF>" : "<missing " + t3.literalNames[n2] + ">";
      let r2 = e2;
      const o2 = t3.getTokenStream().LT(-1);
      return r2.type === i.EOF && null !== o2 && (r2 = o2), t3.getTokenFactory().create(r2.source, n2, s2, i.DEFAULT_CHANNEL, -1, -1, r2.line, r2.column);
    }
    getExpectedTokens(t3) {
      return t3.getExpectedTokens();
    }
    getTokenErrorDisplay(t3) {
      if (null === t3) return "<no token>";
      let e2 = t3.text;
      return null === e2 && (e2 = t3.type === i.EOF ? "<EOF>" : "<" + t3.type + ">"), this.escapeWSAndQuote(e2);
    }
    escapeWSAndQuote(t3) {
      return "'" + (t3 = (t3 = (t3 = t3.replace(/\n/g, "\\n")).replace(/\r/g, "\\r")).replace(/\t/g, "\\t")) + "'";
    }
    getErrorRecoverySet(t3) {
      const e2 = t3._interp.atn;
      let n2 = t3._ctx;
      const s2 = new _();
      for (; null !== n2 && n2.invokingState >= 0; ) {
        const t4 = e2.states[n2.invokingState].transitions[0], i2 = e2.nextTokens(t4.followState);
        s2.addSet(i2), n2 = n2.parentCtx;
      }
      return s2.removeOne(i.EPSILON), s2;
    }
    consumeUntil(t3, e2) {
      let n2 = t3.getTokenStream().LA(1);
      for (; n2 !== i.EOF && !e2.contains(n2); ) t3.consume(), n2 = t3.getTokenStream().LA(1);
    }
  };
  var Ae = class extends Ce {
    static {
      __name(this, "Ae");
    }
    constructor() {
      super();
    }
    recover(t3, e2) {
      let n2 = t3._ctx;
      for (; null !== n2; ) n2.exception = e2, n2 = n2.parentCtx;
      throw new Ee(e2);
    }
    recoverInline(t3) {
      this.recover(t3, new xe(t3));
    }
    sync(t3) {
    }
  };
  var Ne = { RecognitionException: Ft, NoViableAltException: ee, LexerNoViableAltException: Mt, InputMismatchException: xe, FailedPredicateException: Te, DiagnosticErrorListener: me, BailErrorStrategy: Ae, DefaultErrorStrategy: Ce, ErrorListener: Ot };
  var ke = class {
    static {
      __name(this, "ke");
    }
    constructor(t3, e2) {
      if (this.name = "<empty>", this.strdata = t3, this.decodeToUnicodeCodePoints = e2 || false, this._index = 0, this.data = [], this.decodeToUnicodeCodePoints) for (let t4 = 0; t4 < this.strdata.length; ) {
        const e3 = this.strdata.codePointAt(t4);
        this.data.push(e3), t4 += e3 <= 65535 ? 1 : 2;
      }
      else {
        this.data = new Array(this.strdata.length);
        for (let t4 = 0; t4 < this.strdata.length; t4++) this.data[t4] = this.strdata.charCodeAt(t4);
      }
      this._size = this.data.length;
    }
    reset() {
      this._index = 0;
    }
    consume() {
      if (this._index >= this._size) throw "cannot consume EOF";
      this._index += 1;
    }
    LA(t3) {
      if (0 === t3) return 0;
      t3 < 0 && (t3 += 1);
      const e2 = this._index + t3 - 1;
      return e2 < 0 || e2 >= this._size ? i.EOF : this.data[e2];
    }
    LT(t3) {
      return this.LA(t3);
    }
    mark() {
      return -1;
    }
    release(t3) {
    }
    seek(t3) {
      t3 <= this._index ? this._index = t3 : this._index = Math.min(t3, this._size);
    }
    getText(t3, e2) {
      if (e2 >= this._size && (e2 = this._size - 1), t3 >= this._size) return "";
      if (this.decodeToUnicodeCodePoints) {
        let n2 = "";
        for (let s2 = t3; s2 <= e2; s2++) n2 += String.fromCodePoint(this.data[s2]);
        return n2;
      }
      return this.strdata.slice(t3, e2 + 1);
    }
    toString() {
      return this.strdata;
    }
    get index() {
      return this._index;
    }
    get size() {
      return this._size;
    }
  };
  var Ie = class extends ke {
    static {
      __name(this, "Ie");
    }
    constructor(t3, e2) {
      super(t3, e2);
    }
  };
  var ye = n(763);
  var Le = "undefined" != typeof process && null != process.versions && null != process.versions.node;
  var Oe = class extends Ie {
    static {
      __name(this, "Oe");
    }
    static fromPath(t3, e2, n2) {
      if (!Le) throw new Error("FileStream is only available when running in Node!");
      ye.readFile(t3, e2, function(t4, e3) {
        let s2 = null;
        null !== e3 && (s2 = new ke(e3, true)), n2(t4, s2);
      });
    }
    constructor(t3, e2, n2) {
      if (!Le) throw new Error("FileStream is only available when running in Node!");
      super(ye.readFileSync(t3, e2 || "utf-8"), n2), this.fileName = t3;
    }
  };
  var Re = { fromString: /* @__PURE__ */ __name(function(t3) {
    return new ke(t3, true);
  }, "fromString"), fromBlob: /* @__PURE__ */ __name(function(t3, e2, n2, s2) {
    const i2 = new window.FileReader();
    i2.onload = function(t4) {
      const e3 = new ke(t4.target.result, true);
      n2(e3);
    }, i2.onerror = s2, i2.readAsText(t3, e2);
  }, "fromBlob"), fromBuffer: /* @__PURE__ */ __name(function(t3, e2) {
    return new ke(t3.toString(e2), true);
  }, "fromBuffer"), fromPath: /* @__PURE__ */ __name(function(t3, e2, n2) {
    Oe.fromPath(t3, e2, n2);
  }, "fromPath"), fromPathSync: /* @__PURE__ */ __name(function(t3, e2) {
    return new Oe(t3, e2);
  }, "fromPathSync") };
  var we = { arrayToString: d, stringToCharArray: /* @__PURE__ */ __name(function(t3) {
    let e2 = new Uint16Array(t3.length);
    for (let n2 = 0; n2 < t3.length; n2++) e2[n2] = t3.charCodeAt(n2);
    return e2;
  }, "stringToCharArray") };
  var ve = class {
    static {
      __name(this, "ve");
    }
  };
  var Pe = class extends ve {
    static {
      __name(this, "Pe");
    }
    constructor(t3) {
      super(), this.tokenSource = t3, this.tokens = [], this.index = -1, this.fetchedEOF = false;
    }
    mark() {
      return 0;
    }
    release(t3) {
    }
    reset() {
      this.seek(0);
    }
    seek(t3) {
      this.lazyInit(), this.index = this.adjustSeekIndex(t3);
    }
    get size() {
      return this.tokens.length;
    }
    get(t3) {
      return this.lazyInit(), this.tokens[t3];
    }
    consume() {
      let t3 = false;
      if (t3 = this.index >= 0 && (this.fetchedEOF ? this.index < this.tokens.length - 1 : this.index < this.tokens.length), !t3 && this.LA(1) === i.EOF) throw "cannot consume EOF";
      this.sync(this.index + 1) && (this.index = this.adjustSeekIndex(this.index + 1));
    }
    sync(t3) {
      const e2 = t3 - this.tokens.length + 1;
      return !(e2 > 0) || this.fetch(e2) >= e2;
    }
    fetch(t3) {
      if (this.fetchedEOF) return 0;
      for (let e2 = 0; e2 < t3; e2++) {
        const t4 = this.tokenSource.nextToken();
        if (t4.tokenIndex = this.tokens.length, this.tokens.push(t4), t4.type === i.EOF) return this.fetchedEOF = true, e2 + 1;
      }
      return t3;
    }
    getTokens(t3, e2, n2) {
      if (void 0 === n2 && (n2 = null), t3 < 0 || e2 < 0) return null;
      this.lazyInit();
      const s2 = [];
      e2 >= this.tokens.length && (e2 = this.tokens.length - 1);
      for (let r2 = t3; r2 < e2; r2++) {
        const t4 = this.tokens[r2];
        if (t4.type === i.EOF) break;
        (null === n2 || n2.contains(t4.type)) && s2.push(t4);
      }
      return s2;
    }
    LA(t3) {
      return this.LT(t3).type;
    }
    LB(t3) {
      return this.index - t3 < 0 ? null : this.tokens[this.index - t3];
    }
    LT(t3) {
      if (this.lazyInit(), 0 === t3) return null;
      if (t3 < 0) return this.LB(-t3);
      const e2 = this.index + t3 - 1;
      return this.sync(e2), e2 >= this.tokens.length ? this.tokens[this.tokens.length - 1] : this.tokens[e2];
    }
    adjustSeekIndex(t3) {
      return t3;
    }
    lazyInit() {
      -1 === this.index && this.setup();
    }
    setup() {
      this.sync(0), this.index = this.adjustSeekIndex(0);
    }
    setTokenSource(t3) {
      this.tokenSource = t3, this.tokens = [], this.index = -1, this.fetchedEOF = false;
    }
    nextTokenOnChannel(t3, e2) {
      if (this.sync(t3), t3 >= this.tokens.length) return -1;
      let n2 = this.tokens[t3];
      for (; n2.channel !== e2; ) {
        if (n2.type === i.EOF) return -1;
        t3 += 1, this.sync(t3), n2 = this.tokens[t3];
      }
      return t3;
    }
    previousTokenOnChannel(t3, e2) {
      for (; t3 >= 0 && this.tokens[t3].channel !== e2; ) t3 -= 1;
      return t3;
    }
    getHiddenTokensToRight(t3, e2) {
      if (void 0 === e2 && (e2 = -1), this.lazyInit(), t3 < 0 || t3 >= this.tokens.length) throw t3 + " not in 0.." + this.tokens.length - 1;
      const n2 = this.nextTokenOnChannel(t3 + 1, Ut.DEFAULT_TOKEN_CHANNEL), s2 = t3 + 1, i2 = -1 === n2 ? this.tokens.length - 1 : n2;
      return this.filterForChannel(s2, i2, e2);
    }
    getHiddenTokensToLeft(t3, e2) {
      if (void 0 === e2 && (e2 = -1), this.lazyInit(), t3 < 0 || t3 >= this.tokens.length) throw t3 + " not in 0.." + this.tokens.length - 1;
      const n2 = this.previousTokenOnChannel(t3 - 1, Ut.DEFAULT_TOKEN_CHANNEL);
      if (n2 === t3 - 1) return null;
      const s2 = n2 + 1, i2 = t3 - 1;
      return this.filterForChannel(s2, i2, e2);
    }
    filterForChannel(t3, e2, n2) {
      const s2 = [];
      for (let i2 = t3; i2 < e2 + 1; i2++) {
        const t4 = this.tokens[i2];
        -1 === n2 ? t4.channel !== Ut.DEFAULT_TOKEN_CHANNEL && s2.push(t4) : t4.channel === n2 && s2.push(t4);
      }
      return 0 === s2.length ? null : s2;
    }
    getSourceName() {
      return this.tokenSource.getSourceName();
    }
    getText(t3) {
      this.lazyInit(), this.fill(), t3 || (t3 = new E(0, this.tokens.length - 1));
      let e2 = t3.start;
      e2 instanceof i && (e2 = e2.tokenIndex);
      let n2 = t3.stop;
      if (n2 instanceof i && (n2 = n2.tokenIndex), null === e2 || null === n2 || e2 < 0 || n2 < 0) return "";
      n2 >= this.tokens.length && (n2 = this.tokens.length - 1);
      let s2 = "";
      for (let t4 = e2; t4 < n2 + 1; t4++) {
        const e3 = this.tokens[t4];
        if (e3.type === i.EOF) break;
        s2 += e3.text;
      }
      return s2;
    }
    fill() {
      for (this.lazyInit(); 1e3 === this.fetch(1e3); ) ;
    }
  };
  Object.defineProperty(Pe, "size", { get: /* @__PURE__ */ __name(function() {
    return this.tokens.length;
  }, "get") });
  var be = class extends Pe {
    static {
      __name(this, "be");
    }
    constructor(t3, e2) {
      super(t3), this.channel = void 0 === e2 ? i.DEFAULT_CHANNEL : e2;
    }
    adjustSeekIndex(t3) {
      return this.nextTokenOnChannel(t3, this.channel);
    }
    LB(t3) {
      if (0 === t3 || this.index - t3 < 0) return null;
      let e2 = this.index, n2 = 1;
      for (; n2 <= t3; ) e2 = this.previousTokenOnChannel(e2 - 1, this.channel), n2 += 1;
      return e2 < 0 ? null : this.tokens[e2];
    }
    LT(t3) {
      if (this.lazyInit(), 0 === t3) return null;
      if (t3 < 0) return this.LB(-t3);
      let e2 = this.index, n2 = 1;
      for (; n2 < t3; ) this.sync(e2 + 1) && (e2 = this.nextTokenOnChannel(e2 + 1, this.channel)), n2 += 1;
      return this.tokens[e2];
    }
    getNumberOfOnChannelTokens() {
      let t3 = 0;
      this.fill();
      for (let e2 = 0; e2 < this.tokens.length; e2++) {
        const n2 = this.tokens[e2];
        if (n2.channel === this.channel && (t3 += 1), n2.type === i.EOF) break;
      }
      return t3;
    }
  };
  var De = class extends de {
    static {
      __name(this, "De");
    }
    constructor(t3) {
      super(), this.parser = t3;
    }
    enterEveryRule(t3) {
      console.log("enter   " + this.parser.ruleNames[t3.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
    }
    visitTerminal(t3) {
      console.log("consume " + t3.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
    }
    exitEveryRule(t3) {
      console.log("exit    " + this.parser.ruleNames[t3.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
    }
  };
  var Fe = class extends vt {
    static {
      __name(this, "Fe");
    }
    constructor(t3) {
      super(), this._input = null, this._errHandler = new Ce(), this._precedenceStack = [], this._precedenceStack.push(0), this._ctx = null, this.buildParseTrees = true, this._tracer = null, this._parseListeners = null, this._syntaxErrors = 0, this.setInputStream(t3);
    }
    reset() {
      null !== this._input && this._input.seek(0), this._errHandler.reset(this), this._ctx = null, this._syntaxErrors = 0, this.setTrace(false), this._precedenceStack = [], this._precedenceStack.push(0), null !== this._interp && this._interp.reset();
    }
    match(t3) {
      let e2 = this.getCurrentToken();
      return e2.type === t3 ? (this._errHandler.reportMatch(this), this.consume()) : (e2 = this._errHandler.recoverInline(this), this.buildParseTrees && -1 === e2.tokenIndex && this._ctx.addErrorNode(e2)), e2;
    }
    matchWildcard() {
      let t3 = this.getCurrentToken();
      return t3.type > 0 ? (this._errHandler.reportMatch(this), this.consume()) : (t3 = this._errHandler.recoverInline(this), this.buildParseTrees && -1 === t3.tokenIndex && this._ctx.addErrorNode(t3)), t3;
    }
    getParseListeners() {
      return this._parseListeners || [];
    }
    addParseListener(t3) {
      if (null === t3) throw "listener";
      null === this._parseListeners && (this._parseListeners = []), this._parseListeners.push(t3);
    }
    removeParseListener(t3) {
      if (null !== this._parseListeners) {
        const e2 = this._parseListeners.indexOf(t3);
        e2 >= 0 && this._parseListeners.splice(e2, 1), 0 === this._parseListeners.length && (this._parseListeners = null);
      }
    }
    removeParseListeners() {
      this._parseListeners = null;
    }
    triggerEnterRuleEvent() {
      if (null !== this._parseListeners) {
        const t3 = this._ctx;
        this._parseListeners.forEach(function(e2) {
          e2.enterEveryRule(t3), t3.enterRule(e2);
        });
      }
    }
    triggerExitRuleEvent() {
      if (null !== this._parseListeners) {
        const t3 = this._ctx;
        this._parseListeners.slice(0).reverse().forEach(function(e2) {
          t3.exitRule(e2), e2.exitEveryRule(t3);
        });
      }
    }
    getTokenFactory() {
      return this._input.tokenSource._factory;
    }
    setTokenFactory(t3) {
      this._input.tokenSource._factory = t3;
    }
    getATNWithBypassAlts() {
      const t3 = this.getSerializedATN();
      if (null === t3) throw "The current parser does not support an ATN with bypass alternatives.";
      let e2 = this.bypassAltsAtnCache[t3];
      if (null === e2) {
        const n2 = new Tt();
        n2.generateRuleBypassTransitions = true, e2 = new Lt(n2).deserialize(t3), this.bypassAltsAtnCache[t3] = e2;
      }
      return e2;
    }
    getInputStream() {
      return this.getTokenStream();
    }
    setInputStream(t3) {
      this.setTokenStream(t3);
    }
    getTokenStream() {
      return this._input;
    }
    setTokenStream(t3) {
      this._input = null, this.reset(), this._input = t3;
    }
    get syntaxErrorsCount() {
      return this._syntaxErrors;
    }
    getCurrentToken() {
      return this._input.LT(1);
    }
    notifyErrorListeners(t3, e2, n2) {
      n2 = n2 || null, null === (e2 = e2 || null) && (e2 = this.getCurrentToken()), this._syntaxErrors += 1;
      const s2 = e2.line, i2 = e2.column;
      this.getErrorListener().syntaxError(this, e2, s2, i2, t3, n2);
    }
    consume() {
      const t3 = this.getCurrentToken();
      t3.type !== i.EOF && this.getInputStream().consume();
      const e2 = null !== this._parseListeners && this._parseListeners.length > 0;
      if (this.buildParseTrees || e2) {
        let n2;
        n2 = this._errHandler.inErrorRecoveryMode(this) ? this._ctx.addErrorNode(t3) : this._ctx.addTokenNode(t3), n2.invokingState = this.state, e2 && this._parseListeners.forEach(function(t4) {
          n2 instanceof D || void 0 !== n2.isErrorNode && n2.isErrorNode() ? t4.visitErrorNode(n2) : n2 instanceof b && t4.visitTerminal(n2);
        });
      }
      return t3;
    }
    addContextToParseTree() {
      null !== this._ctx.parentCtx && this._ctx.parentCtx.addChild(this._ctx);
    }
    enterRule(t3, e2, n2) {
      this.state = e2, this._ctx = t3, this._ctx.start = this._input.LT(1), this.buildParseTrees && this.addContextToParseTree(), this.triggerEnterRuleEvent();
    }
    exitRule() {
      this._ctx.stop = this._input.LT(-1), this.triggerExitRuleEvent(), this.state = this._ctx.invokingState, this._ctx = this._ctx.parentCtx;
    }
    enterOuterAlt(t3, e2) {
      t3.setAltNumber(e2), this.buildParseTrees && this._ctx !== t3 && null !== this._ctx.parentCtx && (this._ctx.parentCtx.removeLastChild(), this._ctx.parentCtx.addChild(t3)), this._ctx = t3;
    }
    getPrecedence() {
      return 0 === this._precedenceStack.length ? -1 : this._precedenceStack[this._precedenceStack.length - 1];
    }
    enterRecursionRule(t3, e2, n2, s2) {
      this.state = e2, this._precedenceStack.push(s2), this._ctx = t3, this._ctx.start = this._input.LT(1), this.triggerEnterRuleEvent();
    }
    pushNewRecursionContext(t3, e2, n2) {
      const s2 = this._ctx;
      s2.parentCtx = t3, s2.invokingState = e2, s2.stop = this._input.LT(-1), this._ctx = t3, this._ctx.start = s2.start, this.buildParseTrees && this._ctx.addChild(s2), this.triggerEnterRuleEvent();
    }
    unrollRecursionContexts(t3) {
      this._precedenceStack.pop(), this._ctx.stop = this._input.LT(-1);
      const e2 = this._ctx, n2 = this.getParseListeners();
      if (null !== n2 && n2.length > 0) for (; this._ctx !== t3; ) this.triggerExitRuleEvent(), this._ctx = this._ctx.parentCtx;
      else this._ctx = t3;
      e2.parentCtx = t3, this.buildParseTrees && null !== t3 && t3.addChild(e2);
    }
    getInvokingContext(t3) {
      let e2 = this._ctx;
      for (; null !== e2; ) {
        if (e2.ruleIndex === t3) return e2;
        e2 = e2.parentCtx;
      }
      return null;
    }
    precpred(t3, e2) {
      return e2 >= this._precedenceStack[this._precedenceStack.length - 1];
    }
    inContext(t3) {
      return false;
    }
    isExpectedToken(t3) {
      const e2 = this._interp.atn;
      let n2 = this._ctx;
      const s2 = e2.states[this.state];
      let r2 = e2.nextTokens(s2);
      if (r2.contains(t3)) return true;
      if (!r2.contains(i.EPSILON)) return false;
      for (; null !== n2 && n2.invokingState >= 0 && r2.contains(i.EPSILON); ) {
        const s3 = e2.states[n2.invokingState].transitions[0];
        if (r2 = e2.nextTokens(s3.followState), r2.contains(t3)) return true;
        n2 = n2.parentCtx;
      }
      return !(!r2.contains(i.EPSILON) || t3 !== i.EOF);
    }
    getExpectedTokens() {
      return this._interp.atn.getExpectedTokens(this.state, this._ctx);
    }
    getExpectedTokensWithinCurrentRule() {
      const t3 = this._interp.atn, e2 = t3.states[this.state];
      return t3.nextTokens(e2);
    }
    getRuleIndex(t3) {
      const e2 = this.getRuleIndexMap()[t3];
      return null !== e2 ? e2 : -1;
    }
    getRuleInvocationStack(t3) {
      null === (t3 = t3 || null) && (t3 = this._ctx);
      const e2 = [];
      for (; null !== t3; ) {
        const n2 = t3.ruleIndex;
        n2 < 0 ? e2.push("n/a") : e2.push(this.ruleNames[n2]), t3 = t3.parentCtx;
      }
      return e2;
    }
    getDFAStrings() {
      return this._interp.decisionToDFA.toString();
    }
    dumpDFA() {
      let t3 = false;
      for (let e2 = 0; e2 < this._interp.decisionToDFA.length; e2++) {
        const n2 = this._interp.decisionToDFA[e2];
        n2.states.length > 0 && (t3 && console.log(), this.printer.println("Decision " + n2.decision + ":"), this.printer.print(n2.toString(this.literalNames, this.symbolicNames)), t3 = true);
      }
    }
    getSourceName() {
      return this._input.getSourceName();
    }
    setTrace(t3) {
      t3 ? (null !== this._tracer && this.removeParseListener(this._tracer), this._tracer = new De(this), this.addParseListener(this._tracer)) : (this.removeParseListener(this._tracer), this._tracer = null);
    }
  };
  Fe.bypassAltsAtnCache = {};
  var Me = class extends b {
    static {
      __name(this, "Me");
    }
    constructor(t3) {
      super(), this.parentCtx = null, this.symbol = t3;
    }
    getChild(t3) {
      return null;
    }
    getSymbol() {
      return this.symbol;
    }
    getParent() {
      return this.parentCtx;
    }
    getPayload() {
      return this.symbol;
    }
    getSourceInterval() {
      if (null === this.symbol) return E.INVALID_INTERVAL;
      const t3 = this.symbol.tokenIndex;
      return new E(t3, t3);
    }
    getChildCount() {
      return 0;
    }
    accept(t3) {
      return t3.visitTerminal(this);
    }
    getText() {
      return this.symbol.text;
    }
    toString() {
      return this.symbol.type === i.EOF ? "<EOF>" : this.symbol.text;
    }
  };
  var Ue = class extends Me {
    static {
      __name(this, "Ue");
    }
    constructor(t3) {
      super(t3);
    }
    isErrorNode() {
      return true;
    }
    accept(t3) {
      return t3.visitErrorNode(this);
    }
  };
  var Be = class extends U {
    static {
      __name(this, "Be");
    }
    constructor(t3, e2) {
      super(t3, e2), this.children = null, this.start = null, this.stop = null, this.exception = null;
    }
    copyFrom(t3) {
      this.parentCtx = t3.parentCtx, this.invokingState = t3.invokingState, this.children = null, this.start = t3.start, this.stop = t3.stop, t3.children && (this.children = [], t3.children.map(function(t4) {
        t4 instanceof Ue && (this.children.push(t4), t4.parentCtx = this);
      }, this));
    }
    enterRule(t3) {
    }
    exitRule(t3) {
    }
    addChild(t3) {
      return null === this.children && (this.children = []), this.children.push(t3), t3;
    }
    removeLastChild() {
      null !== this.children && this.children.pop();
    }
    addTokenNode(t3) {
      const e2 = new Me(t3);
      return this.addChild(e2), e2.parentCtx = this, e2;
    }
    addErrorNode(t3) {
      const e2 = new Ue(t3);
      return this.addChild(e2), e2.parentCtx = this, e2;
    }
    getChild(t3, e2) {
      if (e2 = e2 || null, null === this.children || t3 < 0 || t3 >= this.children.length) return null;
      if (null === e2) return this.children[t3];
      for (let n2 = 0; n2 < this.children.length; n2++) {
        const s2 = this.children[n2];
        if (s2 instanceof e2) {
          if (0 === t3) return s2;
          t3 -= 1;
        }
      }
      return null;
    }
    getToken(t3, e2) {
      if (null === this.children || e2 < 0 || e2 >= this.children.length) return null;
      for (let n2 = 0; n2 < this.children.length; n2++) {
        const s2 = this.children[n2];
        if (s2 instanceof b && s2.symbol.type === t3) {
          if (0 === e2) return s2;
          e2 -= 1;
        }
      }
      return null;
    }
    getTokens(t3) {
      if (null === this.children) return [];
      {
        const e2 = [];
        for (let n2 = 0; n2 < this.children.length; n2++) {
          const s2 = this.children[n2];
          s2 instanceof b && s2.symbol.type === t3 && e2.push(s2);
        }
        return e2;
      }
    }
    getTypedRuleContext(t3, e2) {
      return this.getChild(e2, t3);
    }
    getTypedRuleContexts(t3) {
      if (null === this.children) return [];
      {
        const e2 = [];
        for (let n2 = 0; n2 < this.children.length; n2++) {
          const s2 = this.children[n2];
          s2 instanceof t3 && e2.push(s2);
        }
        return e2;
      }
    }
    getChildCount() {
      return null === this.children ? 0 : this.children.length;
    }
    getSourceInterval() {
      return null === this.start || null === this.stop ? E.INVALID_INTERVAL : new E(this.start.tokenIndex, this.stop.tokenIndex);
    }
  };
  U.EMPTY = new Be();
  var ze = class _ze {
    static {
      __name(this, "ze");
    }
    static DEFAULT_PROGRAM_NAME = "default";
    constructor(t3) {
      this.tokens = t3, this.programs = /* @__PURE__ */ new Map();
    }
    getTokenStream() {
      return this.tokens;
    }
    insertAfter(t3, e2) {
      let n2, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;
      n2 = "number" == typeof t3 ? t3 : t3.tokenIndex;
      let i2 = this.getProgram(s2), r2 = new He(this.tokens, n2, i2.length, e2);
      i2.push(r2);
    }
    insertBefore(t3, e2) {
      let n2, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;
      n2 = "number" == typeof t3 ? t3 : t3.tokenIndex;
      const i2 = this.getProgram(s2), r2 = new qe(this.tokens, n2, i2.length, e2);
      i2.push(r2);
    }
    replaceSingle(t3, e2) {
      let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;
      this.replace(t3, t3, e2, n2);
    }
    replace(t3, e2, n2) {
      let s2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : _ze.DEFAULT_PROGRAM_NAME;
      if ("number" != typeof t3 && (t3 = t3.tokenIndex), "number" != typeof e2 && (e2 = e2.tokenIndex), t3 > e2 || t3 < 0 || e2 < 0 || e2 >= this.tokens.size) throw new RangeError(`replace: range invalid: ${t3}..${e2}(size=${this.tokens.size})`);
      let i2 = this.getProgram(s2), r2 = new Ke(this.tokens, t3, e2, i2.length, n2);
      i2.push(r2);
    }
    delete(t3, e2) {
      let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;
      void 0 === e2 && (e2 = t3), this.replace(t3, e2, null, n2);
    }
    getProgram(t3) {
      let e2 = this.programs.get(t3);
      return null == e2 && (e2 = this.initializeProgram(t3)), e2;
    }
    initializeProgram(t3) {
      const e2 = [];
      return this.programs.set(t3, e2), e2;
    }
    getText(t3) {
      let e2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : _ze.DEFAULT_PROGRAM_NAME;
      e2 = t3 instanceof E ? t3 : new E(0, this.tokens.size - 1), "string" == typeof t3 && (n2 = t3);
      const s2 = this.programs.get(n2);
      let r2 = e2.start, o2 = e2.stop;
      if (o2 > this.tokens.size - 1 && (o2 = this.tokens.size - 1), r2 < 0 && (r2 = 0), null == s2 || 0 === s2.length) return this.tokens.getText(new E(r2, o2));
      let a2 = [], l2 = this.reduceToSingleOperationPerIndex(s2), h2 = r2;
      for (; h2 <= o2 && h2 < this.tokens.size; ) {
        let t4 = l2.get(h2);
        l2.delete(h2);
        let e3 = this.tokens.get(h2);
        null == t4 ? (e3.type !== i.EOF && a2.push(String(e3.text)), h2++) : h2 = t4.execute(a2);
      }
      if (o2 === this.tokens.size - 1) for (const t4 of l2.values()) t4.index >= this.tokens.size - 1 && a2.push(t4.text.toString());
      return a2.join("");
    }
    reduceToSingleOperationPerIndex(t3) {
      for (let e3 = 0; e3 < t3.length; e3++) {
        let n2 = t3[e3];
        if (null == n2) continue;
        if (!(n2 instanceof Ke)) continue;
        let s2 = n2, i2 = this.getKindOfOps(t3, qe, e3);
        for (let e4 of i2) e4.index === s2.index ? (t3[e4.instructionIndex] = void 0, s2.text = e4.text.toString() + (null != s2.text ? s2.text.toString() : "")) : e4.index > s2.index && e4.index <= s2.lastIndex && (t3[e4.instructionIndex] = void 0);
        let r2 = this.getKindOfOps(t3, Ke, e3);
        for (let e4 of r2) {
          if (e4.index >= s2.index && e4.lastIndex <= s2.lastIndex) {
            t3[e4.instructionIndex] = void 0;
            continue;
          }
          let n3 = e4.lastIndex < s2.index || e4.index > s2.lastIndex;
          if (null != e4.text || null != s2.text || n3) {
            if (!n3) throw new Error(`replace op boundaries of ${s2} overlap with previous ${e4}`);
          } else t3[e4.instructionIndex] = void 0, s2.index = Math.min(e4.index, s2.index), s2.lastIndex = Math.max(e4.lastIndex, s2.lastIndex);
        }
      }
      for (let e3 = 0; e3 < t3.length; e3++) {
        let n2 = t3[e3];
        if (null == n2) continue;
        if (!(n2 instanceof qe)) continue;
        let s2 = n2, i2 = this.getKindOfOps(t3, qe, e3);
        for (let e4 of i2) e4.index === s2.index && (e4 instanceof He ? (s2.text = this.catOpText(e4.text, s2.text), t3[e4.instructionIndex] = void 0) : e4 instanceof qe && (s2.text = this.catOpText(s2.text, e4.text), t3[e4.instructionIndex] = void 0));
        let r2 = this.getKindOfOps(t3, Ke, e3);
        for (let n3 of r2) if (s2.index !== n3.index) {
          if (s2.index >= n3.index && s2.index <= n3.lastIndex) throw new Error(`insert op ${s2} within boundaries of previous ${n3}`);
        } else n3.text = this.catOpText(s2.text, n3.text), t3[e3] = void 0;
      }
      let e2 = /* @__PURE__ */ new Map();
      for (let n2 of t3) if (null != n2) {
        if (null != e2.get(n2.index)) throw new Error("should only be one op per index");
        e2.set(n2.index, n2);
      }
      return e2;
    }
    catOpText(t3, e2) {
      let n2 = "", s2 = "";
      return null != t3 && (n2 = t3.toString()), null != e2 && (s2 = e2.toString()), n2 + s2;
    }
    getKindOfOps(t3, e2, n2) {
      return t3.slice(0, n2).filter((t4) => t4 && t4 instanceof e2);
    }
  };
  var Ve = class {
    static {
      __name(this, "Ve");
    }
    constructor(t3, e2, n2, s2) {
      this.tokens = t3, this.instructionIndex = n2, this.index = e2, this.text = void 0 === s2 ? "" : s2;
    }
    toString() {
      let t3 = this.constructor.name;
      const e2 = t3.indexOf("$");
      return t3 = t3.substring(e2 + 1, t3.length), "<" + t3 + "@" + this.tokens.get(this.index) + ':"' + this.text + '">';
    }
  };
  var qe = class extends Ve {
    static {
      __name(this, "qe");
    }
    constructor(t3, e2, n2, s2) {
      super(t3, e2, n2, s2);
    }
    execute(t3) {
      return this.text && t3.push(this.text.toString()), this.tokens.get(this.index).type !== i.EOF && t3.push(String(this.tokens.get(this.index).text)), this.index + 1;
    }
  };
  var He = class extends qe {
    static {
      __name(this, "He");
    }
    constructor(t3, e2, n2, s2) {
      super(t3, e2 + 1, n2, s2);
    }
  };
  var Ke = class extends Ve {
    static {
      __name(this, "Ke");
    }
    constructor(t3, e2, n2, s2, i2) {
      super(t3, e2, s2, i2), this.lastIndex = n2;
    }
    execute(t3) {
      return this.text && t3.push(this.text.toString()), this.lastIndex + 1;
    }
    toString() {
      return null == this.text ? "<DeleteOp@" + this.tokens.get(this.index) + ".." + this.tokens.get(this.lastIndex) + ">" : "<ReplaceOp@" + this.tokens.get(this.index) + ".." + this.tokens.get(this.lastIndex) + ':"' + this.text + '">';
    }
  };
  var Ye = { atn: re, dfa: he, context: ce, misc: ue, tree: fe, error: Ne, Token: i, CommonToken: Pt, CharStreams: Re, CharStream: ke, InputStream: Ie, CommonTokenStream: be, Lexer: Ut, Parser: Fe, ParserRuleContext: Be, Interval: E, IntervalSet: _, LL1Analyzer: j, Utils: we, TokenStreamRewriter: ze };
  var Ge = s.MG;
  var We = s.fr;
  var je = s.sR;
  var $e = s.Zo;
  var Xe = s.iH;
  var Je = s.rt;
  var Ze = s.jB;
  var Qe = s.M8;
  var tn = s.$t;
  var en = s.aq;
  var nn = s.pG;
  var sn = s.eP;
  var rn = s.KU;
  var on = s.zW;
  var an = s.IX;
  var ln = s.mY;
  var hn = s.a7;
  var cn = s.JG;
  var un = s.ay;
  var dn = s.X2;
  var gn = s.WU;
  var pn = s.Uw;
  var fn = s.gw;
  var xn = s.iX;
  var Tn = s.re;
  var Sn = s.Pg;
  var mn = s.tD;
  var En = s.R$;
  var _n = s.Dj;
  var Cn = s.m7;
  var An = s.NZ;
  var Nn = s.xo;
  var kn = s.ou;
  var In = s.qC;
  var yn = s.mD;
  var Ln = s.Ay;

  // VtlParser.ts
  var VtlParser = class _VtlParser extends xn {
    static {
      __name(this, "VtlParser");
    }
    static {
      this.LPAREN = 1;
    }
    static {
      this.RPAREN = 2;
    }
    static {
      this.QLPAREN = 3;
    }
    static {
      this.QRPAREN = 4;
    }
    static {
      this.GLPAREN = 5;
    }
    static {
      this.GRPAREN = 6;
    }
    static {
      this.EQ = 7;
    }
    static {
      this.LT = 8;
    }
    static {
      this.MT = 9;
    }
    static {
      this.ME = 10;
    }
    static {
      this.NEQ = 11;
    }
    static {
      this.LE = 12;
    }
    static {
      this.PLUS = 13;
    }
    static {
      this.MINUS = 14;
    }
    static {
      this.MUL = 15;
    }
    static {
      this.DIV = 16;
    }
    static {
      this.COMMA = 17;
    }
    static {
      this.POINTER = 18;
    }
    static {
      this.COLON = 19;
    }
    static {
      this.ASSIGN = 20;
    }
    static {
      this.MEMBERSHIP = 21;
    }
    static {
      this.EVAL = 22;
    }
    static {
      this.IF = 23;
    }
    static {
      this.CASE = 24;
    }
    static {
      this.THEN = 25;
    }
    static {
      this.ELSE = 26;
    }
    static {
      this.USING = 27;
    }
    static {
      this.WITH = 28;
    }
    static {
      this.CURRENT_DATE = 29;
    }
    static {
      this.DATEDIFF = 30;
    }
    static {
      this.DATEADD = 31;
    }
    static {
      this.YEAR_OP = 32;
    }
    static {
      this.MONTH_OP = 33;
    }
    static {
      this.DAYOFMONTH = 34;
    }
    static {
      this.DAYOFYEAR = 35;
    }
    static {
      this.DAYTOYEAR = 36;
    }
    static {
      this.DAYTOMONTH = 37;
    }
    static {
      this.YEARTODAY = 38;
    }
    static {
      this.MONTHTODAY = 39;
    }
    static {
      this.ON = 40;
    }
    static {
      this.DROP = 41;
    }
    static {
      this.KEEP = 42;
    }
    static {
      this.CALC = 43;
    }
    static {
      this.ATTRCALC = 44;
    }
    static {
      this.RENAME = 45;
    }
    static {
      this.AS = 46;
    }
    static {
      this.AND = 47;
    }
    static {
      this.OR = 48;
    }
    static {
      this.XOR = 49;
    }
    static {
      this.NOT = 50;
    }
    static {
      this.BETWEEN = 51;
    }
    static {
      this.IN = 52;
    }
    static {
      this.NOT_IN = 53;
    }
    static {
      this.NULL_CONSTANT = 54;
    }
    static {
      this.ISNULL = 55;
    }
    static {
      this.EX = 56;
    }
    static {
      this.UNION = 57;
    }
    static {
      this.DIFF = 58;
    }
    static {
      this.SYMDIFF = 59;
    }
    static {
      this.INTERSECT = 60;
    }
    static {
      this.RANDOM = 61;
    }
    static {
      this.KEYS = 62;
    }
    static {
      this.INTYEAR = 63;
    }
    static {
      this.INTMONTH = 64;
    }
    static {
      this.INTDAY = 65;
    }
    static {
      this.CHECK = 66;
    }
    static {
      this.EXISTS_IN = 67;
    }
    static {
      this.TO = 68;
    }
    static {
      this.RETURN = 69;
    }
    static {
      this.IMBALANCE = 70;
    }
    static {
      this.ERRORCODE = 71;
    }
    static {
      this.ALL = 72;
    }
    static {
      this.AGGREGATE = 73;
    }
    static {
      this.ERRORLEVEL = 74;
    }
    static {
      this.ORDER = 75;
    }
    static {
      this.BY = 76;
    }
    static {
      this.RANK = 77;
    }
    static {
      this.ASC = 78;
    }
    static {
      this.DESC = 79;
    }
    static {
      this.MIN = 80;
    }
    static {
      this.MAX = 81;
    }
    static {
      this.FIRST = 82;
    }
    static {
      this.LAST = 83;
    }
    static {
      this.INDEXOF = 84;
    }
    static {
      this.ABS = 85;
    }
    static {
      this.KEY = 86;
    }
    static {
      this.LN = 87;
    }
    static {
      this.LOG = 88;
    }
    static {
      this.TRUNC = 89;
    }
    static {
      this.ROUND = 90;
    }
    static {
      this.POWER = 91;
    }
    static {
      this.MOD = 92;
    }
    static {
      this.LEN = 93;
    }
    static {
      this.CONCAT = 94;
    }
    static {
      this.TRIM = 95;
    }
    static {
      this.UCASE = 96;
    }
    static {
      this.LCASE = 97;
    }
    static {
      this.SUBSTR = 98;
    }
    static {
      this.SUM = 99;
    }
    static {
      this.AVG = 100;
    }
    static {
      this.MEDIAN = 101;
    }
    static {
      this.COUNT = 102;
    }
    static {
      this.DIMENSION = 103;
    }
    static {
      this.MEASURE = 104;
    }
    static {
      this.ATTRIBUTE = 105;
    }
    static {
      this.FILTER = 106;
    }
    static {
      this.MERGE = 107;
    }
    static {
      this.EXP = 108;
    }
    static {
      this.ROLE = 109;
    }
    static {
      this.VIRAL = 110;
    }
    static {
      this.CHARSET_MATCH = 111;
    }
    static {
      this.TYPE = 112;
    }
    static {
      this.NVL = 113;
    }
    static {
      this.HIERARCHY = 114;
    }
    static {
      this.OPTIONAL = 115;
    }
    static {
      this.INVALID = 116;
    }
    static {
      this.VALUE_DOMAIN = 117;
    }
    static {
      this.VARIABLE = 118;
    }
    static {
      this.DATA = 119;
    }
    static {
      this.STRUCTURE = 120;
    }
    static {
      this.DATASET = 121;
    }
    static {
      this.OPERATOR = 122;
    }
    static {
      this.DEFINE = 123;
    }
    static {
      this.PUT_SYMBOL = 124;
    }
    static {
      this.DATAPOINT = 125;
    }
    static {
      this.HIERARCHICAL = 126;
    }
    static {
      this.RULESET = 127;
    }
    static {
      this.RULE = 128;
    }
    static {
      this.END = 129;
    }
    static {
      this.ALTER_DATASET = 130;
    }
    static {
      this.LTRIM = 131;
    }
    static {
      this.RTRIM = 132;
    }
    static {
      this.INSTR = 133;
    }
    static {
      this.REPLACE = 134;
    }
    static {
      this.CEIL = 135;
    }
    static {
      this.FLOOR = 136;
    }
    static {
      this.SQRT = 137;
    }
    static {
      this.ANY = 138;
    }
    static {
      this.SETDIFF = 139;
    }
    static {
      this.STDDEV_POP = 140;
    }
    static {
      this.STDDEV_SAMP = 141;
    }
    static {
      this.VAR_POP = 142;
    }
    static {
      this.VAR_SAMP = 143;
    }
    static {
      this.GROUP = 144;
    }
    static {
      this.EXCEPT = 145;
    }
    static {
      this.HAVING = 146;
    }
    static {
      this.FIRST_VALUE = 147;
    }
    static {
      this.LAST_VALUE = 148;
    }
    static {
      this.LAG = 149;
    }
    static {
      this.LEAD = 150;
    }
    static {
      this.RATIO_TO_REPORT = 151;
    }
    static {
      this.OVER = 152;
    }
    static {
      this.PRECEDING = 153;
    }
    static {
      this.FOLLOWING = 154;
    }
    static {
      this.UNBOUNDED = 155;
    }
    static {
      this.PARTITION = 156;
    }
    static {
      this.ROWS = 157;
    }
    static {
      this.RANGE = 158;
    }
    static {
      this.CURRENT = 159;
    }
    static {
      this.VALID = 160;
    }
    static {
      this.FILL_TIME_SERIES = 161;
    }
    static {
      this.FLOW_TO_STOCK = 162;
    }
    static {
      this.STOCK_TO_FLOW = 163;
    }
    static {
      this.TIMESHIFT = 164;
    }
    static {
      this.MEASURES = 165;
    }
    static {
      this.NO_MEASURES = 166;
    }
    static {
      this.CONDITION = 167;
    }
    static {
      this.BOOLEAN = 168;
    }
    static {
      this.DATE = 169;
    }
    static {
      this.TIME_PERIOD = 170;
    }
    static {
      this.NUMBER = 171;
    }
    static {
      this.STRING = 172;
    }
    static {
      this.TIME = 173;
    }
    static {
      this.INTEGER = 174;
    }
    static {
      this.FLOAT = 175;
    }
    static {
      this.LIST = 176;
    }
    static {
      this.RECORD = 177;
    }
    static {
      this.RESTRICT = 178;
    }
    static {
      this.YYYY = 179;
    }
    static {
      this.MM = 180;
    }
    static {
      this.DD = 181;
    }
    static {
      this.MAX_LENGTH = 182;
    }
    static {
      this.REGEXP = 183;
    }
    static {
      this.IS = 184;
    }
    static {
      this.WHEN = 185;
    }
    static {
      this.FROM = 186;
    }
    static {
      this.AGGREGATES = 187;
    }
    static {
      this.POINTS = 188;
    }
    static {
      this.POINT = 189;
    }
    static {
      this.TOTAL = 190;
    }
    static {
      this.PARTIAL = 191;
    }
    static {
      this.ALWAYS = 192;
    }
    static {
      this.INNER_JOIN = 193;
    }
    static {
      this.LEFT_JOIN = 194;
    }
    static {
      this.CROSS_JOIN = 195;
    }
    static {
      this.FULL_JOIN = 196;
    }
    static {
      this.MAPS_FROM = 197;
    }
    static {
      this.MAPS_TO = 198;
    }
    static {
      this.MAP_TO = 199;
    }
    static {
      this.MAP_FROM = 200;
    }
    static {
      this.RETURNS = 201;
    }
    static {
      this.PIVOT = 202;
    }
    static {
      this.CUSTOMPIVOT = 203;
    }
    static {
      this.UNPIVOT = 204;
    }
    static {
      this.SUBSPACE = 205;
    }
    static {
      this.APPLY = 206;
    }
    static {
      this.CONDITIONED = 207;
    }
    static {
      this.PERIOD_INDICATOR = 208;
    }
    static {
      this.SINGLE = 209;
    }
    static {
      this.DURATION = 210;
    }
    static {
      this.TIME_AGG = 211;
    }
    static {
      this.UNIT = 212;
    }
    static {
      this.VALUE = 213;
    }
    static {
      this.VALUEDOMAINS = 214;
    }
    static {
      this.VARIABLES = 215;
    }
    static {
      this.INPUT = 216;
    }
    static {
      this.OUTPUT = 217;
    }
    static {
      this.CAST = 218;
    }
    static {
      this.RULE_PRIORITY = 219;
    }
    static {
      this.DATASET_PRIORITY = 220;
    }
    static {
      this.DEFAULT = 221;
    }
    static {
      this.CHECK_DATAPOINT = 222;
    }
    static {
      this.CHECK_HIERARCHY = 223;
    }
    static {
      this.COMPUTED = 224;
    }
    static {
      this.NON_NULL = 225;
    }
    static {
      this.NON_ZERO = 226;
    }
    static {
      this.PARTIAL_NULL = 227;
    }
    static {
      this.PARTIAL_ZERO = 228;
    }
    static {
      this.ALWAYS_NULL = 229;
    }
    static {
      this.ALWAYS_ZERO = 230;
    }
    static {
      this.COMPONENTS = 231;
    }
    static {
      this.ALL_MEASURES = 232;
    }
    static {
      this.SCALAR = 233;
    }
    static {
      this.COMPONENT = 234;
    }
    static {
      this.DATAPOINT_ON_VD = 235;
    }
    static {
      this.DATAPOINT_ON_VAR = 236;
    }
    static {
      this.HIERARCHICAL_ON_VD = 237;
    }
    static {
      this.HIERARCHICAL_ON_VAR = 238;
    }
    static {
      this.SET = 239;
    }
    static {
      this.LANGUAGE = 240;
    }
    static {
      this.INTEGER_CONSTANT = 241;
    }
    static {
      this.NUMBER_CONSTANT = 242;
    }
    static {
      this.BOOLEAN_CONSTANT = 243;
    }
    static {
      this.STRING_CONSTANT = 244;
    }
    static {
      this.IDENTIFIER = 245;
    }
    static {
      this.WS = 246;
    }
    static {
      this.EOL = 247;
    }
    static {
      this.ML_COMMENT = 248;
    }
    static {
      this.SL_COMMENT = 249;
    }
    static {
      this.EOF = kn.EOF;
    }
    static {
      this.RULE_start = 0;
    }
    static {
      this.RULE_statement = 1;
    }
    static {
      this.RULE_expr = 2;
    }
    static {
      this.RULE_exprComponent = 3;
    }
    static {
      this.RULE_functionsComponents = 4;
    }
    static {
      this.RULE_functions = 5;
    }
    static {
      this.RULE_datasetClause = 6;
    }
    static {
      this.RULE_renameClause = 7;
    }
    static {
      this.RULE_aggrClause = 8;
    }
    static {
      this.RULE_filterClause = 9;
    }
    static {
      this.RULE_calcClause = 10;
    }
    static {
      this.RULE_keepOrDropClause = 11;
    }
    static {
      this.RULE_pivotOrUnpivotClause = 12;
    }
    static {
      this.RULE_customPivotClause = 13;
    }
    static {
      this.RULE_subspaceClause = 14;
    }
    static {
      this.RULE_joinOperators = 15;
    }
    static {
      this.RULE_defOperators = 16;
    }
    static {
      this.RULE_genericOperators = 17;
    }
    static {
      this.RULE_genericOperatorsComponent = 18;
    }
    static {
      this.RULE_parameterComponent = 19;
    }
    static {
      this.RULE_parameter = 20;
    }
    static {
      this.RULE_stringOperators = 21;
    }
    static {
      this.RULE_stringOperatorsComponent = 22;
    }
    static {
      this.RULE_numericOperators = 23;
    }
    static {
      this.RULE_numericOperatorsComponent = 24;
    }
    static {
      this.RULE_comparisonOperators = 25;
    }
    static {
      this.RULE_comparisonOperatorsComponent = 26;
    }
    static {
      this.RULE_timeOperators = 27;
    }
    static {
      this.RULE_timeOperatorsComponent = 28;
    }
    static {
      this.RULE_setOperators = 29;
    }
    static {
      this.RULE_hierarchyOperators = 30;
    }
    static {
      this.RULE_validationOperators = 31;
    }
    static {
      this.RULE_conditionalOperators = 32;
    }
    static {
      this.RULE_conditionalOperatorsComponent = 33;
    }
    static {
      this.RULE_aggrOperators = 34;
    }
    static {
      this.RULE_aggrOperatorsGrouping = 35;
    }
    static {
      this.RULE_anFunction = 36;
    }
    static {
      this.RULE_anFunctionComponent = 37;
    }
    static {
      this.RULE_renameClauseItem = 38;
    }
    static {
      this.RULE_aggregateClause = 39;
    }
    static {
      this.RULE_aggrFunctionClause = 40;
    }
    static {
      this.RULE_calcClauseItem = 41;
    }
    static {
      this.RULE_subspaceClauseItem = 42;
    }
    static {
      this.RULE_scalarItem = 43;
    }
    static {
      this.RULE_joinClauseWithoutUsing = 44;
    }
    static {
      this.RULE_joinClause = 45;
    }
    static {
      this.RULE_joinClauseItem = 46;
    }
    static {
      this.RULE_joinBody = 47;
    }
    static {
      this.RULE_joinApplyClause = 48;
    }
    static {
      this.RULE_partitionByClause = 49;
    }
    static {
      this.RULE_orderByClause = 50;
    }
    static {
      this.RULE_orderByItem = 51;
    }
    static {
      this.RULE_windowingClause = 52;
    }
    static {
      this.RULE_signedInteger = 53;
    }
    static {
      this.RULE_signedNumber = 54;
    }
    static {
      this.RULE_limitClauseItem = 55;
    }
    static {
      this.RULE_groupingClause = 56;
    }
    static {
      this.RULE_havingClause = 57;
    }
    static {
      this.RULE_parameterItem = 58;
    }
    static {
      this.RULE_outputParameterType = 59;
    }
    static {
      this.RULE_outputParameterTypeComponent = 60;
    }
    static {
      this.RULE_inputParameterType = 61;
    }
    static {
      this.RULE_rulesetType = 62;
    }
    static {
      this.RULE_scalarType = 63;
    }
    static {
      this.RULE_componentType = 64;
    }
    static {
      this.RULE_datasetType = 65;
    }
    static {
      this.RULE_evalDatasetType = 66;
    }
    static {
      this.RULE_scalarSetType = 67;
    }
    static {
      this.RULE_dpRuleset = 68;
    }
    static {
      this.RULE_hrRuleset = 69;
    }
    static {
      this.RULE_valueDomainName = 70;
    }
    static {
      this.RULE_rulesetID = 71;
    }
    static {
      this.RULE_rulesetSignature = 72;
    }
    static {
      this.RULE_signature = 73;
    }
    static {
      this.RULE_ruleClauseDatapoint = 74;
    }
    static {
      this.RULE_ruleItemDatapoint = 75;
    }
    static {
      this.RULE_ruleClauseHierarchical = 76;
    }
    static {
      this.RULE_ruleItemHierarchical = 77;
    }
    static {
      this.RULE_hierRuleSignature = 78;
    }
    static {
      this.RULE_valueDomainSignature = 79;
    }
    static {
      this.RULE_codeItemRelation = 80;
    }
    static {
      this.RULE_codeItemRelationClause = 81;
    }
    static {
      this.RULE_valueDomainValue = 82;
    }
    static {
      this.RULE_scalarTypeConstraint = 83;
    }
    static {
      this.RULE_compConstraint = 84;
    }
    static {
      this.RULE_multModifier = 85;
    }
    static {
      this.RULE_validationOutput = 86;
    }
    static {
      this.RULE_validationMode = 87;
    }
    static {
      this.RULE_conditionClause = 88;
    }
    static {
      this.RULE_inputMode = 89;
    }
    static {
      this.RULE_imbalanceExpr = 90;
    }
    static {
      this.RULE_inputModeHierarchy = 91;
    }
    static {
      this.RULE_outputModeHierarchy = 92;
    }
    static {
      this.RULE_alias = 93;
    }
    static {
      this.RULE_varID = 94;
    }
    static {
      this.RULE_simpleComponentId = 95;
    }
    static {
      this.RULE_componentID = 96;
    }
    static {
      this.RULE_lists = 97;
    }
    static {
      this.RULE_erCode = 98;
    }
    static {
      this.RULE_erLevel = 99;
    }
    static {
      this.RULE_comparisonOperand = 100;
    }
    static {
      this.RULE_optionalExpr = 101;
    }
    static {
      this.RULE_optionalExprComponent = 102;
    }
    static {
      this.RULE_componentRole = 103;
    }
    static {
      this.RULE_viralAttribute = 104;
    }
    static {
      this.RULE_valueDomainID = 105;
    }
    static {
      this.RULE_operatorID = 106;
    }
    static {
      this.RULE_routineName = 107;
    }
    static {
      this.RULE_constant = 108;
    }
    static {
      this.RULE_basicScalarType = 109;
    }
    static {
      this.RULE_retainType = 110;
    }
    static {
      this.literalNames = [
        null,
        "'('",
        "')'",
        "'['",
        "']'",
        "'{'",
        "'}'",
        "'='",
        "'<'",
        "'>'",
        "'>='",
        "'<>'",
        "'<='",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "','",
        "'->'",
        "':'",
        "':='",
        "'#'",
        "'eval'",
        "'if'",
        "'case'",
        "'then'",
        "'else'",
        "'using'",
        "'with'",
        "'current_date'",
        "'datediff'",
        "'dateadd'",
        "'getyear'",
        "'getmonth'",
        "'dayofmonth'",
        "'dayofyear'",
        "'daytoyear'",
        "'daytomonth'",
        "'yeartoday'",
        "'monthtoday'",
        "'on'",
        "'drop'",
        "'keep'",
        "'calc'",
        "'attrcalc'",
        "'rename'",
        "'as'",
        "'and'",
        "'or'",
        "'xor'",
        "'not'",
        "'between'",
        "'in'",
        "'not_in'",
        "'null'",
        "'isnull'",
        "'ex'",
        "'union'",
        "'diff'",
        "'symdiff'",
        "'intersect'",
        "'random'",
        "'keys'",
        "'intyear'",
        "'intmonth'",
        "'intday'",
        "'check'",
        "'exists_in'",
        "'to'",
        "'return'",
        "'imbalance'",
        "'errorcode'",
        "'all'",
        "'aggr'",
        "'errorlevel'",
        "'order'",
        "'by'",
        "'rank'",
        "'asc'",
        "'desc'",
        "'min'",
        "'max'",
        "'first'",
        "'last'",
        "'indexof'",
        "'abs'",
        "'key'",
        "'ln'",
        "'log'",
        "'trunc'",
        "'round'",
        "'power'",
        "'mod'",
        "'length'",
        "'||'",
        "'trim'",
        "'upper'",
        "'lower'",
        "'substr'",
        "'sum'",
        "'avg'",
        "'median'",
        "'count'",
        "'identifier'",
        "'measure'",
        "'attribute'",
        "'filter'",
        "'merge'",
        "'exp'",
        "'componentRole'",
        "'viral'",
        "'match_characters'",
        "'type'",
        "'nvl'",
        "'hierarchy'",
        "'_'",
        "'invalid'",
        "'valuedomain'",
        "'variable'",
        "'data'",
        "'structure'",
        "'dataset'",
        "'operator'",
        "'define'",
        "'<-'",
        "'datapoint'",
        "'hierarchical'",
        "'ruleset'",
        "'rule'",
        "'end'",
        "'alterDataset'",
        "'ltrim'",
        "'rtrim'",
        "'instr'",
        "'replace'",
        "'ceil'",
        "'floor'",
        "'sqrt'",
        "'any'",
        "'setdiff'",
        "'stddev_pop'",
        "'stddev_samp'",
        "'var_pop'",
        "'var_samp'",
        "'group'",
        "'except'",
        "'having'",
        "'first_value'",
        "'last_value'",
        "'lag'",
        "'lead'",
        "'ratio_to_report'",
        "'over'",
        "'preceding'",
        "'following'",
        "'unbounded'",
        "'partition'",
        "'rows'",
        "'range'",
        "'current'",
        "'valid'",
        "'fill_time_series'",
        "'flow_to_stock'",
        "'stock_to_flow'",
        "'timeshift'",
        "'measures'",
        "'no_measures'",
        "'condition'",
        "'boolean'",
        "'date'",
        "'time_period'",
        "'number'",
        "'string'",
        "'time'",
        "'integer'",
        "'float'",
        "'list'",
        "'record'",
        "'restrict'",
        "'yyyy'",
        "'mm'",
        "'dd'",
        "'maxLength'",
        "'regexp'",
        "'is'",
        "'when'",
        "'from'",
        "'aggregates'",
        "'points'",
        "'point'",
        "'total'",
        "'partial'",
        "'always'",
        "'inner_join'",
        "'left_join'",
        "'cross_join'",
        "'full_join'",
        "'maps_from'",
        "'maps_to'",
        "'map_to'",
        "'map_from'",
        "'returns'",
        "'pivot'",
        "'customPivot'",
        "'unpivot'",
        "'sub'",
        "'apply'",
        "'conditioned'",
        "'period_indicator'",
        "'single'",
        "'duration'",
        "'time_agg'",
        "'unit'",
        "'Value'",
        "'valuedomains'",
        "'variables'",
        "'input'",
        "'output'",
        "'cast'",
        "'rule_priority'",
        "'dataset_priority'",
        "'default'",
        "'check_datapoint'",
        "'check_hierarchy'",
        "'computed'",
        "'non_null'",
        "'non_zero'",
        "'partial_null'",
        "'partial_zero'",
        "'always_null'",
        "'always_zero'",
        "'components'",
        "'all_measures'",
        "'scalar'",
        "'component'",
        "'datapoint_on_valuedomains'",
        "'datapoint_on_variables'",
        "'hierarchical_on_valuedomains'",
        "'hierarchical_on_variables'",
        "'set'",
        "'language'",
        null,
        null,
        null,
        null,
        null,
        null,
        "';'"
      ];
    }
    static {
      this.symbolicNames = [
        null,
        "LPAREN",
        "RPAREN",
        "QLPAREN",
        "QRPAREN",
        "GLPAREN",
        "GRPAREN",
        "EQ",
        "LT",
        "MT",
        "ME",
        "NEQ",
        "LE",
        "PLUS",
        "MINUS",
        "MUL",
        "DIV",
        "COMMA",
        "POINTER",
        "COLON",
        "ASSIGN",
        "MEMBERSHIP",
        "EVAL",
        "IF",
        "CASE",
        "THEN",
        "ELSE",
        "USING",
        "WITH",
        "CURRENT_DATE",
        "DATEDIFF",
        "DATEADD",
        "YEAR_OP",
        "MONTH_OP",
        "DAYOFMONTH",
        "DAYOFYEAR",
        "DAYTOYEAR",
        "DAYTOMONTH",
        "YEARTODAY",
        "MONTHTODAY",
        "ON",
        "DROP",
        "KEEP",
        "CALC",
        "ATTRCALC",
        "RENAME",
        "AS",
        "AND",
        "OR",
        "XOR",
        "NOT",
        "BETWEEN",
        "IN",
        "NOT_IN",
        "NULL_CONSTANT",
        "ISNULL",
        "EX",
        "UNION",
        "DIFF",
        "SYMDIFF",
        "INTERSECT",
        "RANDOM",
        "KEYS",
        "INTYEAR",
        "INTMONTH",
        "INTDAY",
        "CHECK",
        "EXISTS_IN",
        "TO",
        "RETURN",
        "IMBALANCE",
        "ERRORCODE",
        "ALL",
        "AGGREGATE",
        "ERRORLEVEL",
        "ORDER",
        "BY",
        "RANK",
        "ASC",
        "DESC",
        "MIN",
        "MAX",
        "FIRST",
        "LAST",
        "INDEXOF",
        "ABS",
        "KEY",
        "LN",
        "LOG",
        "TRUNC",
        "ROUND",
        "POWER",
        "MOD",
        "LEN",
        "CONCAT",
        "TRIM",
        "UCASE",
        "LCASE",
        "SUBSTR",
        "SUM",
        "AVG",
        "MEDIAN",
        "COUNT",
        "DIMENSION",
        "MEASURE",
        "ATTRIBUTE",
        "FILTER",
        "MERGE",
        "EXP",
        "ROLE",
        "VIRAL",
        "CHARSET_MATCH",
        "TYPE",
        "NVL",
        "HIERARCHY",
        "OPTIONAL",
        "INVALID",
        "VALUE_DOMAIN",
        "VARIABLE",
        "DATA",
        "STRUCTURE",
        "DATASET",
        "OPERATOR",
        "DEFINE",
        "PUT_SYMBOL",
        "DATAPOINT",
        "HIERARCHICAL",
        "RULESET",
        "RULE",
        "END",
        "ALTER_DATASET",
        "LTRIM",
        "RTRIM",
        "INSTR",
        "REPLACE",
        "CEIL",
        "FLOOR",
        "SQRT",
        "ANY",
        "SETDIFF",
        "STDDEV_POP",
        "STDDEV_SAMP",
        "VAR_POP",
        "VAR_SAMP",
        "GROUP",
        "EXCEPT",
        "HAVING",
        "FIRST_VALUE",
        "LAST_VALUE",
        "LAG",
        "LEAD",
        "RATIO_TO_REPORT",
        "OVER",
        "PRECEDING",
        "FOLLOWING",
        "UNBOUNDED",
        "PARTITION",
        "ROWS",
        "RANGE",
        "CURRENT",
        "VALID",
        "FILL_TIME_SERIES",
        "FLOW_TO_STOCK",
        "STOCK_TO_FLOW",
        "TIMESHIFT",
        "MEASURES",
        "NO_MEASURES",
        "CONDITION",
        "BOOLEAN",
        "DATE",
        "TIME_PERIOD",
        "NUMBER",
        "STRING",
        "TIME",
        "INTEGER",
        "FLOAT",
        "LIST",
        "RECORD",
        "RESTRICT",
        "YYYY",
        "MM",
        "DD",
        "MAX_LENGTH",
        "REGEXP",
        "IS",
        "WHEN",
        "FROM",
        "AGGREGATES",
        "POINTS",
        "POINT",
        "TOTAL",
        "PARTIAL",
        "ALWAYS",
        "INNER_JOIN",
        "LEFT_JOIN",
        "CROSS_JOIN",
        "FULL_JOIN",
        "MAPS_FROM",
        "MAPS_TO",
        "MAP_TO",
        "MAP_FROM",
        "RETURNS",
        "PIVOT",
        "CUSTOMPIVOT",
        "UNPIVOT",
        "SUBSPACE",
        "APPLY",
        "CONDITIONED",
        "PERIOD_INDICATOR",
        "SINGLE",
        "DURATION",
        "TIME_AGG",
        "UNIT",
        "VALUE",
        "VALUEDOMAINS",
        "VARIABLES",
        "INPUT",
        "OUTPUT",
        "CAST",
        "RULE_PRIORITY",
        "DATASET_PRIORITY",
        "DEFAULT",
        "CHECK_DATAPOINT",
        "CHECK_HIERARCHY",
        "COMPUTED",
        "NON_NULL",
        "NON_ZERO",
        "PARTIAL_NULL",
        "PARTIAL_ZERO",
        "ALWAYS_NULL",
        "ALWAYS_ZERO",
        "COMPONENTS",
        "ALL_MEASURES",
        "SCALAR",
        "COMPONENT",
        "DATAPOINT_ON_VD",
        "DATAPOINT_ON_VAR",
        "HIERARCHICAL_ON_VD",
        "HIERARCHICAL_ON_VAR",
        "SET",
        "LANGUAGE",
        "INTEGER_CONSTANT",
        "NUMBER_CONSTANT",
        "BOOLEAN_CONSTANT",
        "STRING_CONSTANT",
        "IDENTIFIER",
        "WS",
        "EOL",
        "ML_COMMENT",
        "SL_COMMENT"
      ];
    }
    static {
      // tslint:disable:no-trailing-whitespace
      this.ruleNames = [
        "start",
        "statement",
        "expr",
        "exprComponent",
        "functionsComponents",
        "functions",
        "datasetClause",
        "renameClause",
        "aggrClause",
        "filterClause",
        "calcClause",
        "keepOrDropClause",
        "pivotOrUnpivotClause",
        "customPivotClause",
        "subspaceClause",
        "joinOperators",
        "defOperators",
        "genericOperators",
        "genericOperatorsComponent",
        "parameterComponent",
        "parameter",
        "stringOperators",
        "stringOperatorsComponent",
        "numericOperators",
        "numericOperatorsComponent",
        "comparisonOperators",
        "comparisonOperatorsComponent",
        "timeOperators",
        "timeOperatorsComponent",
        "setOperators",
        "hierarchyOperators",
        "validationOperators",
        "conditionalOperators",
        "conditionalOperatorsComponent",
        "aggrOperators",
        "aggrOperatorsGrouping",
        "anFunction",
        "anFunctionComponent",
        "renameClauseItem",
        "aggregateClause",
        "aggrFunctionClause",
        "calcClauseItem",
        "subspaceClauseItem",
        "scalarItem",
        "joinClauseWithoutUsing",
        "joinClause",
        "joinClauseItem",
        "joinBody",
        "joinApplyClause",
        "partitionByClause",
        "orderByClause",
        "orderByItem",
        "windowingClause",
        "signedInteger",
        "signedNumber",
        "limitClauseItem",
        "groupingClause",
        "havingClause",
        "parameterItem",
        "outputParameterType",
        "outputParameterTypeComponent",
        "inputParameterType",
        "rulesetType",
        "scalarType",
        "componentType",
        "datasetType",
        "evalDatasetType",
        "scalarSetType",
        "dpRuleset",
        "hrRuleset",
        "valueDomainName",
        "rulesetID",
        "rulesetSignature",
        "signature",
        "ruleClauseDatapoint",
        "ruleItemDatapoint",
        "ruleClauseHierarchical",
        "ruleItemHierarchical",
        "hierRuleSignature",
        "valueDomainSignature",
        "codeItemRelation",
        "codeItemRelationClause",
        "valueDomainValue",
        "scalarTypeConstraint",
        "compConstraint",
        "multModifier",
        "validationOutput",
        "validationMode",
        "conditionClause",
        "inputMode",
        "imbalanceExpr",
        "inputModeHierarchy",
        "outputModeHierarchy",
        "alias",
        "varID",
        "simpleComponentId",
        "componentID",
        "lists",
        "erCode",
        "erLevel",
        "comparisonOperand",
        "optionalExpr",
        "optionalExprComponent",
        "componentRole",
        "viralAttribute",
        "valueDomainID",
        "operatorID",
        "routineName",
        "constant",
        "basicScalarType",
        "retainType"
      ];
    }
    get grammarFileName() {
      return "VtlParser.g4";
    }
    get literalNames() {
      return _VtlParser.literalNames;
    }
    get symbolicNames() {
      return _VtlParser.symbolicNames;
    }
    get ruleNames() {
      return _VtlParser.ruleNames;
    }
    get serializedATN() {
      return _VtlParser._serializedATN;
    }
    createFailedPredicateException(predicate, message) {
      return new sn(this, predicate, message);
    }
    constructor(input) {
      super(input);
      this._interp = new Tn(this, _VtlParser._ATN, _VtlParser.DecisionsToDFA, new mn());
    }
    // @RuleVersion(0)
    start() {
      let localctx = new StartContext(this, this._ctx, this.state);
      this.enterRule(localctx, 0, _VtlParser.RULE_start);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 227;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 123 || _la === 245) {
            {
              {
                this.state = 222;
                this.statement();
                this.state = 223;
                this.match(_VtlParser.EOL);
              }
            }
            this.state = 229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 230;
          this.match(_VtlParser.EOF);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    statement() {
      let localctx = new StatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 2, _VtlParser.RULE_statement);
      try {
        this.state = 241;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 1, this._ctx)) {
          case 1:
            localctx = new TemporaryAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 232;
              this.varID();
              this.state = 233;
              this.match(_VtlParser.ASSIGN);
              this.state = 234;
              this.expr(0);
            }
            break;
          case 2:
            localctx = new PersistAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 236;
              this.varID();
              this.state = 237;
              this.match(_VtlParser.PUT_SYMBOL);
              this.state = 238;
              this.expr(0);
            }
            break;
          case 3:
            localctx = new DefineExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 240;
              this.defOperators();
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    expr(_p) {
      if (_p === void 0) {
        _p = 0;
      }
      let _parentctx = this._ctx;
      let _parentState = this.state;
      let localctx = new ExprContext(this, this._ctx, _parentState);
      let _prevctx = localctx;
      let _startState = 4;
      this.enterRecursionRule(localctx, 4, _VtlParser.RULE_expr, _p);
      let _la;
      try {
        let _alt;
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 273;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 3, this._ctx)) {
            case 1:
              {
                localctx = new ParenthesisExprContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 244;
                this.match(_VtlParser.LPAREN);
                this.state = 245;
                this.expr(0);
                this.state = 246;
                this.match(_VtlParser.RPAREN);
              }
              break;
            case 2:
              {
                localctx = new FunctionsExpressionContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 248;
                this.functions();
              }
              break;
            case 3:
              {
                localctx = new UnaryExprContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 249;
                localctx._op = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === 13 || _la === 14 || _la === 50)) {
                  localctx._op = this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 250;
                localctx._right = this.expr(11);
              }
              break;
            case 4:
              {
                localctx = new IfExprContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 251;
                this.match(_VtlParser.IF);
                this.state = 252;
                localctx._conditionalExpr = this.expr(0);
                this.state = 253;
                this.match(_VtlParser.THEN);
                this.state = 254;
                localctx._thenExpr = this.expr(0);
                this.state = 255;
                this.match(_VtlParser.ELSE);
                this.state = 256;
                localctx._elseExpr = this.expr(4);
              }
              break;
            case 5:
              {
                localctx = new CaseExprContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 258;
                this.match(_VtlParser.CASE);
                this.state = 264;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                  {
                    {
                      this.state = 259;
                      this.match(_VtlParser.WHEN);
                      this.state = 260;
                      localctx._expr = this.expr(0);
                      localctx._condExpr.push(localctx._expr);
                      this.state = 261;
                      this.match(_VtlParser.THEN);
                      this.state = 262;
                      localctx._expr = this.expr(0);
                      localctx._thenExpr.push(localctx._expr);
                    }
                  }
                  this.state = 266;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                } while (_la === 185);
                this.state = 268;
                this.match(_VtlParser.ELSE);
                this.state = 269;
                localctx._elseExpr = this.expr(3);
              }
              break;
            case 6:
              {
                localctx = new ConstantExprContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 271;
                this.constant();
              }
              break;
            case 7:
              {
                localctx = new VarIdExprContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 272;
                this.varID();
              }
              break;
          }
          this._ctx.stop = this._input.LT(-1);
          this.state = 307;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
          while (_alt !== 2 && _alt !== Ge.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              if (this._parseListeners != null) {
                this.triggerExitRuleEvent();
              }
              _prevctx = localctx;
              {
                this.state = 305;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 5, this._ctx)) {
                  case 1:
                    {
                      localctx = new ArithmeticExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 275;
                      if (!this.precpred(this._ctx, 10)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                      }
                      this.state = 276;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 15 || _la === 16)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 277;
                      localctx._right = this.expr(11);
                    }
                    break;
                  case 2:
                    {
                      localctx = new ArithmeticExprOrConcatContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 278;
                      if (!this.precpred(this._ctx, 9)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                      }
                      this.state = 279;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 13 || _la === 14 || _la === 94)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 280;
                      localctx._right = this.expr(10);
                    }
                    break;
                  case 3:
                    {
                      localctx = new ComparisonExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 281;
                      if (!this.precpred(this._ctx, 8)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                      }
                      this.state = 282;
                      localctx._op = this.comparisonOperand();
                      this.state = 283;
                      localctx._right = this.expr(9);
                    }
                    break;
                  case 4:
                    {
                      localctx = new BooleanExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 285;
                      if (!this.precpred(this._ctx, 6)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                      }
                      this.state = 286;
                      localctx._op = this.match(_VtlParser.AND);
                      this.state = 287;
                      localctx._right = this.expr(7);
                    }
                    break;
                  case 5:
                    {
                      localctx = new BooleanExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 288;
                      if (!this.precpred(this._ctx, 5)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                      }
                      this.state = 289;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 48 || _la === 49)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 290;
                      localctx._right = this.expr(6);
                    }
                    break;
                  case 6:
                    {
                      localctx = new ClauseExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._dataset = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 291;
                      if (!this.precpred(this._ctx, 13)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                      }
                      this.state = 292;
                      this.match(_VtlParser.QLPAREN);
                      this.state = 293;
                      localctx._clause = this.datasetClause();
                      this.state = 294;
                      this.match(_VtlParser.QRPAREN);
                    }
                    break;
                  case 7:
                    {
                      localctx = new MembershipExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 296;
                      if (!this.precpred(this._ctx, 12)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                      }
                      this.state = 297;
                      this.match(_VtlParser.MEMBERSHIP);
                      this.state = 298;
                      this.simpleComponentId();
                    }
                    break;
                  case 8:
                    {
                      localctx = new InNotInExprContext(this, new ExprContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_expr);
                      this.state = 299;
                      if (!this.precpred(this._ctx, 7)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                      }
                      this.state = 300;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 52 || _la === 53)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 303;
                      this._errHandler.sync(this);
                      switch (this._input.LA(1)) {
                        case 5:
                          {
                            this.state = 301;
                            this.lists();
                          }
                          break;
                        case 245:
                          {
                            this.state = 302;
                            this.valueDomainID();
                          }
                          break;
                        default:
                          throw new dn(this);
                      }
                    }
                    break;
                }
              }
            }
            this.state = 309;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.unrollRecursionContexts(_parentctx);
      }
      return localctx;
    }
    // @RuleVersion(0)
    exprComponent(_p) {
      if (_p === void 0) {
        _p = 0;
      }
      let _parentctx = this._ctx;
      let _parentState = this.state;
      let localctx = new ExprComponentContext(this, this._ctx, _parentState);
      let _prevctx = localctx;
      let _startState = 6;
      this.enterRecursionRule(localctx, 6, _VtlParser.RULE_exprComponent, _p);
      let _la;
      try {
        let _alt;
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 340;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 8, this._ctx)) {
            case 1:
              {
                localctx = new ParenthesisExprCompContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 311;
                this.match(_VtlParser.LPAREN);
                this.state = 312;
                this.exprComponent(0);
                this.state = 313;
                this.match(_VtlParser.RPAREN);
              }
              break;
            case 2:
              {
                localctx = new FunctionsExpressionCompContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 315;
                this.functionsComponents();
              }
              break;
            case 3:
              {
                localctx = new UnaryExprCompContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 316;
                localctx._op = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === 13 || _la === 14 || _la === 50)) {
                  localctx._op = this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 317;
                localctx._right = this.exprComponent(11);
              }
              break;
            case 4:
              {
                localctx = new IfExprCompContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 318;
                this.match(_VtlParser.IF);
                this.state = 319;
                localctx._conditionalExpr = this.exprComponent(0);
                this.state = 320;
                this.match(_VtlParser.THEN);
                this.state = 321;
                localctx._thenExpr = this.exprComponent(0);
                this.state = 322;
                this.match(_VtlParser.ELSE);
                this.state = 323;
                localctx._elseExpr = this.exprComponent(4);
              }
              break;
            case 5:
              {
                localctx = new CaseExprCompContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 325;
                this.match(_VtlParser.CASE);
                this.state = 331;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                  {
                    {
                      this.state = 326;
                      this.match(_VtlParser.WHEN);
                      this.state = 327;
                      localctx._exprComponent = this.exprComponent(0);
                      localctx._condExpr.push(localctx._exprComponent);
                      this.state = 328;
                      this.match(_VtlParser.THEN);
                      this.state = 329;
                      localctx._exprComponent = this.exprComponent(0);
                      localctx._thenExpr.push(localctx._exprComponent);
                    }
                  }
                  this.state = 333;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                } while (_la === 185);
                this.state = 335;
                this.match(_VtlParser.ELSE);
                this.state = 336;
                localctx._elseExpr = this.exprComponent(3);
              }
              break;
            case 6:
              {
                localctx = new ConstantExprCompContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 338;
                this.constant();
              }
              break;
            case 7:
              {
                localctx = new CompIdContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 339;
                this.componentID();
              }
              break;
          }
          this._ctx.stop = this._input.LT(-1);
          this.state = 366;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
          while (_alt !== 2 && _alt !== Ge.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              if (this._parseListeners != null) {
                this.triggerExitRuleEvent();
              }
              _prevctx = localctx;
              {
                this.state = 364;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 10, this._ctx)) {
                  case 1:
                    {
                      localctx = new ArithmeticExprCompContext(this, new ExprComponentContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_exprComponent);
                      this.state = 342;
                      if (!this.precpred(this._ctx, 10)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                      }
                      this.state = 343;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 15 || _la === 16)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 344;
                      localctx._right = this.exprComponent(11);
                    }
                    break;
                  case 2:
                    {
                      localctx = new ArithmeticExprOrConcatCompContext(this, new ExprComponentContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_exprComponent);
                      this.state = 345;
                      if (!this.precpred(this._ctx, 9)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                      }
                      this.state = 346;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 13 || _la === 14 || _la === 94)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 347;
                      localctx._right = this.exprComponent(10);
                    }
                    break;
                  case 3:
                    {
                      localctx = new ComparisonExprCompContext(this, new ExprComponentContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_exprComponent);
                      this.state = 348;
                      if (!this.precpred(this._ctx, 8)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                      }
                      this.state = 349;
                      this.comparisonOperand();
                      this.state = 350;
                      localctx._right = this.exprComponent(9);
                    }
                    break;
                  case 4:
                    {
                      localctx = new BooleanExprCompContext(this, new ExprComponentContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_exprComponent);
                      this.state = 352;
                      if (!this.precpred(this._ctx, 6)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                      }
                      this.state = 353;
                      localctx._op = this.match(_VtlParser.AND);
                      this.state = 354;
                      localctx._right = this.exprComponent(7);
                    }
                    break;
                  case 5:
                    {
                      localctx = new BooleanExprCompContext(this, new ExprComponentContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_exprComponent);
                      this.state = 355;
                      if (!this.precpred(this._ctx, 5)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                      }
                      this.state = 356;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 48 || _la === 49)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 357;
                      localctx._right = this.exprComponent(6);
                    }
                    break;
                  case 6:
                    {
                      localctx = new InNotInExprCompContext(this, new ExprComponentContext(this, _parentctx, _parentState));
                      localctx._left = _prevctx;
                      this.pushNewRecursionContext(localctx, _startState, _VtlParser.RULE_exprComponent);
                      this.state = 358;
                      if (!this.precpred(this._ctx, 7)) {
                        throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                      }
                      this.state = 359;
                      localctx._op = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 52 || _la === 53)) {
                        localctx._op = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 362;
                      this._errHandler.sync(this);
                      switch (this._input.LA(1)) {
                        case 5:
                          {
                            this.state = 360;
                            this.lists();
                          }
                          break;
                        case 245:
                          {
                            this.state = 361;
                            this.valueDomainID();
                          }
                          break;
                        default:
                          throw new dn(this);
                      }
                    }
                    break;
                }
              }
            }
            this.state = 368;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.unrollRecursionContexts(_parentctx);
      }
      return localctx;
    }
    // @RuleVersion(0)
    functionsComponents() {
      let localctx = new FunctionsComponentsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 8, _VtlParser.RULE_functionsComponents);
      try {
        this.state = 377;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 12, this._ctx)) {
          case 1:
            localctx = new GenericFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 369;
              this.genericOperatorsComponent();
            }
            break;
          case 2:
            localctx = new StringFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 370;
              this.stringOperatorsComponent();
            }
            break;
          case 3:
            localctx = new NumericFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 371;
              this.numericOperatorsComponent();
            }
            break;
          case 4:
            localctx = new ComparisonFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 372;
              this.comparisonOperatorsComponent();
            }
            break;
          case 5:
            localctx = new TimeFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 373;
              this.timeOperatorsComponent();
            }
            break;
          case 6:
            localctx = new ConditionalFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            {
              this.state = 374;
              this.conditionalOperatorsComponent();
            }
            break;
          case 7:
            localctx = new AggregateFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            {
              this.state = 375;
              this.aggrOperators();
            }
            break;
          case 8:
            localctx = new AnalyticFunctionsComponentsContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            {
              this.state = 376;
              this.anFunctionComponent();
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    functions() {
      let localctx = new FunctionsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 10, _VtlParser.RULE_functions);
      try {
        this.state = 391;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 13, this._ctx)) {
          case 1:
            localctx = new JoinFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 379;
              this.joinOperators();
            }
            break;
          case 2:
            localctx = new GenericFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 380;
              this.genericOperators();
            }
            break;
          case 3:
            localctx = new StringFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 381;
              this.stringOperators();
            }
            break;
          case 4:
            localctx = new NumericFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 382;
              this.numericOperators();
            }
            break;
          case 5:
            localctx = new ComparisonFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 383;
              this.comparisonOperators();
            }
            break;
          case 6:
            localctx = new TimeFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            {
              this.state = 384;
              this.timeOperators();
            }
            break;
          case 7:
            localctx = new SetFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            {
              this.state = 385;
              this.setOperators();
            }
            break;
          case 8:
            localctx = new HierarchyFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            {
              this.state = 386;
              this.hierarchyOperators();
            }
            break;
          case 9:
            localctx = new ValidationFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            {
              this.state = 387;
              this.validationOperators();
            }
            break;
          case 10:
            localctx = new ConditionalFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            {
              this.state = 388;
              this.conditionalOperators();
            }
            break;
          case 11:
            localctx = new AggregateFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            {
              this.state = 389;
              this.aggrOperatorsGrouping();
            }
            break;
          case 12:
            localctx = new AnalyticFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            {
              this.state = 390;
              this.anFunction();
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    datasetClause() {
      let localctx = new DatasetClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 12, _VtlParser.RULE_datasetClause);
      try {
        this.state = 400;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 45:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 393;
              this.renameClause();
            }
            break;
          case 73:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 394;
              this.aggrClause();
            }
            break;
          case 106:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 395;
              this.filterClause();
            }
            break;
          case 43:
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 396;
              this.calcClause();
            }
            break;
          case 41:
          case 42:
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 397;
              this.keepOrDropClause();
            }
            break;
          case 202:
          case 204:
            this.enterOuterAlt(localctx, 6);
            {
              this.state = 398;
              this.pivotOrUnpivotClause();
            }
            break;
          case 205:
            this.enterOuterAlt(localctx, 7);
            {
              this.state = 399;
              this.subspaceClause();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    renameClause() {
      let localctx = new RenameClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 14, _VtlParser.RULE_renameClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 402;
          this.match(_VtlParser.RENAME);
          this.state = 403;
          this.renameClauseItem();
          this.state = 408;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 404;
                this.match(_VtlParser.COMMA);
                this.state = 405;
                this.renameClauseItem();
              }
            }
            this.state = 410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    aggrClause() {
      let localctx = new AggrClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 16, _VtlParser.RULE_aggrClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 411;
          this.match(_VtlParser.AGGREGATE);
          this.state = 412;
          this.aggregateClause();
          this.state = 417;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 144) {
            {
              this.state = 413;
              this.groupingClause();
              this.state = 415;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 146) {
                {
                  this.state = 414;
                  this.havingClause();
                }
              }
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    filterClause() {
      let localctx = new FilterClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 18, _VtlParser.RULE_filterClause);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 419;
          this.match(_VtlParser.FILTER);
          this.state = 420;
          this.exprComponent(0);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    calcClause() {
      let localctx = new CalcClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 20, _VtlParser.RULE_calcClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 422;
          this.match(_VtlParser.CALC);
          this.state = 423;
          this.calcClauseItem();
          this.state = 428;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 424;
                this.match(_VtlParser.COMMA);
                this.state = 425;
                this.calcClauseItem();
              }
            }
            this.state = 430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    keepOrDropClause() {
      let localctx = new KeepOrDropClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 22, _VtlParser.RULE_keepOrDropClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 431;
          localctx._op = this._input.LT(1);
          _la = this._input.LA(1);
          if (!(_la === 41 || _la === 42)) {
            localctx._op = this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 432;
          this.componentID();
          this.state = 437;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 433;
                this.match(_VtlParser.COMMA);
                this.state = 434;
                this.componentID();
              }
            }
            this.state = 439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    pivotOrUnpivotClause() {
      let localctx = new PivotOrUnpivotClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 24, _VtlParser.RULE_pivotOrUnpivotClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 440;
          localctx._op = this._input.LT(1);
          _la = this._input.LA(1);
          if (!(_la === 202 || _la === 204)) {
            localctx._op = this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 441;
          localctx._id_ = this.componentID();
          this.state = 442;
          this.match(_VtlParser.COMMA);
          this.state = 443;
          localctx._mea = this.componentID();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    customPivotClause() {
      let localctx = new CustomPivotClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 26, _VtlParser.RULE_customPivotClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 445;
          this.match(_VtlParser.CUSTOMPIVOT);
          this.state = 446;
          localctx._id_ = this.componentID();
          this.state = 447;
          this.match(_VtlParser.COMMA);
          this.state = 448;
          localctx._mea = this.componentID();
          this.state = 449;
          this.match(_VtlParser.IN);
          this.state = 450;
          this.constant();
          this.state = 455;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 451;
                this.match(_VtlParser.COMMA);
                this.state = 452;
                this.constant();
              }
            }
            this.state = 457;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    subspaceClause() {
      let localctx = new SubspaceClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 28, _VtlParser.RULE_subspaceClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 458;
          this.match(_VtlParser.SUBSPACE);
          this.state = 459;
          this.subspaceClauseItem();
          this.state = 464;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 460;
                this.match(_VtlParser.COMMA);
                this.state = 461;
                this.subspaceClauseItem();
              }
            }
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    joinOperators() {
      let localctx = new JoinOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 30, _VtlParser.RULE_joinOperators);
      let _la;
      try {
        this.state = 479;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 193:
          case 194:
            localctx = new JoinExprContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 467;
              localctx._joinKeyword = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 193 || _la === 194)) {
                localctx._joinKeyword = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 468;
              this.match(_VtlParser.LPAREN);
              this.state = 469;
              this.joinClause();
              this.state = 470;
              this.joinBody();
              this.state = 471;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 195:
          case 196:
            localctx = new JoinExprContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 473;
              localctx._joinKeyword = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 195 || _la === 196)) {
                localctx._joinKeyword = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 474;
              this.match(_VtlParser.LPAREN);
              this.state = 475;
              this.joinClauseWithoutUsing();
              this.state = 476;
              this.joinBody();
              this.state = 477;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    defOperators() {
      let localctx = new DefOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 32, _VtlParser.RULE_defOperators);
      let _la;
      try {
        this.state = 531;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 26, this._ctx)) {
          case 1:
            localctx = new DefOperatorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 481;
              this.match(_VtlParser.DEFINE);
              this.state = 482;
              this.match(_VtlParser.OPERATOR);
              this.state = 483;
              this.operatorID();
              this.state = 484;
              this.match(_VtlParser.LPAREN);
              this.state = 493;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 245) {
                {
                  this.state = 485;
                  this.parameterItem();
                  this.state = 490;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 17) {
                    {
                      {
                        this.state = 486;
                        this.match(_VtlParser.COMMA);
                        this.state = 487;
                        this.parameterItem();
                      }
                    }
                    this.state = 492;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
              }
              this.state = 495;
              this.match(_VtlParser.RPAREN);
              this.state = 498;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 201) {
                {
                  this.state = 496;
                  this.match(_VtlParser.RETURNS);
                  this.state = 497;
                  this.outputParameterType();
                }
              }
              this.state = 500;
              this.match(_VtlParser.IS);
              {
                this.state = 501;
                this.expr(0);
              }
              this.state = 502;
              this.match(_VtlParser.END);
              this.state = 503;
              this.match(_VtlParser.OPERATOR);
            }
            break;
          case 2:
            localctx = new DefDatapointRulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 505;
              this.match(_VtlParser.DEFINE);
              this.state = 506;
              this.match(_VtlParser.DATAPOINT);
              this.state = 507;
              this.match(_VtlParser.RULESET);
              this.state = 508;
              this.rulesetID();
              this.state = 509;
              this.match(_VtlParser.LPAREN);
              this.state = 510;
              this.rulesetSignature();
              this.state = 511;
              this.match(_VtlParser.RPAREN);
              this.state = 512;
              this.match(_VtlParser.IS);
              this.state = 513;
              this.ruleClauseDatapoint();
              this.state = 514;
              this.match(_VtlParser.END);
              this.state = 515;
              this.match(_VtlParser.DATAPOINT);
              this.state = 516;
              this.match(_VtlParser.RULESET);
            }
            break;
          case 3:
            localctx = new DefHierarchicalContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 518;
              this.match(_VtlParser.DEFINE);
              this.state = 519;
              this.match(_VtlParser.HIERARCHICAL);
              this.state = 520;
              this.match(_VtlParser.RULESET);
              this.state = 521;
              this.rulesetID();
              this.state = 522;
              this.match(_VtlParser.LPAREN);
              this.state = 523;
              this.hierRuleSignature();
              this.state = 524;
              this.match(_VtlParser.RPAREN);
              this.state = 525;
              this.match(_VtlParser.IS);
              this.state = 526;
              this.ruleClauseHierarchical();
              this.state = 527;
              this.match(_VtlParser.END);
              this.state = 528;
              this.match(_VtlParser.HIERARCHICAL);
              this.state = 529;
              this.match(_VtlParser.RULESET);
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    genericOperators() {
      let localctx = new GenericOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 34, _VtlParser.RULE_genericOperators);
      let _la;
      try {
        this.state = 590;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 245:
            localctx = new CallDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 533;
              this.operatorID();
              this.state = 534;
              this.match(_VtlParser.LPAREN);
              this.state = 543;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) === 0 && (1 << _la & 3787481090) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & 986448127) !== 0 || (_la - 66 & ~31) === 0 && (1 << _la - 66 & 4025008131) !== 0 || (_la - 98 & ~31) === 0 && (1 << _la - 98 & 238623) !== 0 || (_la - 131 & ~31) === 0 && (1 << _la - 131 & 3223265151) !== 0 || (_la - 163 & ~31) === 0 && (1 << _la - 163 & 3221225475) !== 0 || (_la - 195 & ~31) === 0 && (1 << _la - 195 & 411115523) !== 0 || (_la - 241 & ~31) === 0 && (1 << _la - 241 & 31) !== 0) {
                {
                  this.state = 535;
                  this.parameter();
                  this.state = 540;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 17) {
                    {
                      {
                        this.state = 536;
                        this.match(_VtlParser.COMMA);
                        this.state = 537;
                        this.parameter();
                      }
                    }
                    this.state = 542;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
              }
              this.state = 545;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 22:
            localctx = new EvalAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 547;
              this.match(_VtlParser.EVAL);
              this.state = 548;
              this.match(_VtlParser.LPAREN);
              this.state = 549;
              this.routineName();
              this.state = 550;
              this.match(_VtlParser.LPAREN);
              this.state = 553;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case 245:
                  {
                    this.state = 551;
                    this.varID();
                  }
                  break;
                case 13:
                case 14:
                case 54:
                case 218:
                case 241:
                case 242:
                case 243:
                case 244:
                  {
                    this.state = 552;
                    this.scalarItem();
                  }
                  break;
                case 2:
                case 17:
                  break;
                default:
                  break;
              }
              this.state = 562;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 17) {
                {
                  {
                    this.state = 555;
                    this.match(_VtlParser.COMMA);
                    this.state = 558;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                      case 245:
                        {
                          this.state = 556;
                          this.varID();
                        }
                        break;
                      case 13:
                      case 14:
                      case 54:
                      case 218:
                      case 241:
                      case 242:
                      case 243:
                      case 244:
                        {
                          this.state = 557;
                          this.scalarItem();
                        }
                        break;
                      default:
                        throw new dn(this);
                    }
                  }
                }
                this.state = 564;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 565;
              this.match(_VtlParser.RPAREN);
              this.state = 568;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 240) {
                {
                  this.state = 566;
                  this.match(_VtlParser.LANGUAGE);
                  this.state = 567;
                  this.match(_VtlParser.STRING_CONSTANT);
                }
              }
              this.state = 572;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 201) {
                {
                  this.state = 570;
                  this.match(_VtlParser.RETURNS);
                  this.state = 571;
                  this.evalDatasetType();
                }
              }
              this.state = 574;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 218:
            localctx = new CastExprDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 576;
              this.match(_VtlParser.CAST);
              this.state = 577;
              this.match(_VtlParser.LPAREN);
              this.state = 578;
              this.expr(0);
              this.state = 579;
              this.match(_VtlParser.COMMA);
              this.state = 582;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 210:
                case 233:
                  {
                    this.state = 580;
                    this.basicScalarType();
                  }
                  break;
                case 245:
                  {
                    this.state = 581;
                    this.valueDomainName();
                  }
                  break;
                default:
                  throw new dn(this);
              }
              this.state = 586;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 584;
                  this.match(_VtlParser.COMMA);
                  this.state = 585;
                  this.match(_VtlParser.STRING_CONSTANT);
                }
              }
              this.state = 588;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    genericOperatorsComponent() {
      let localctx = new GenericOperatorsComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 36, _VtlParser.RULE_genericOperatorsComponent);
      let _la;
      try {
        this.state = 649;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 245:
            localctx = new CallComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 592;
              this.operatorID();
              this.state = 593;
              this.match(_VtlParser.LPAREN);
              this.state = 602;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) === 0 && (1 << _la & 3787481090) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & 550240511) !== 0 || (_la - 77 & ~31) === 0 && (1 << _la - 77 & 2214460697) !== 0 || (_la - 111 & ~31) === 0 && (1 << _la - 111 & 3891265557) !== 0 || (_la - 143 & ~31) === 0 && (1 << _la - 143 & 3932657) !== 0 || (_la - 208 & ~31) === 0 && (1 << _la - 208 & 1033) !== 0 || (_la - 241 & ~31) === 0 && (1 << _la - 241 & 31) !== 0) {
                {
                  this.state = 594;
                  this.parameterComponent();
                  this.state = 599;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 17) {
                    {
                      {
                        this.state = 595;
                        this.match(_VtlParser.COMMA);
                        this.state = 596;
                        this.parameterComponent();
                      }
                    }
                    this.state = 601;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
              }
              this.state = 604;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 218:
            localctx = new CastExprComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 606;
              this.match(_VtlParser.CAST);
              this.state = 607;
              this.match(_VtlParser.LPAREN);
              this.state = 608;
              this.exprComponent(0);
              this.state = 609;
              this.match(_VtlParser.COMMA);
              this.state = 612;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 210:
                case 233:
                  {
                    this.state = 610;
                    this.basicScalarType();
                  }
                  break;
                case 245:
                  {
                    this.state = 611;
                    this.valueDomainName();
                  }
                  break;
                default:
                  throw new dn(this);
              }
              this.state = 616;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 614;
                  this.match(_VtlParser.COMMA);
                  this.state = 615;
                  this.match(_VtlParser.STRING_CONSTANT);
                }
              }
              this.state = 618;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 22:
            localctx = new EvalAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 620;
              this.match(_VtlParser.EVAL);
              this.state = 621;
              this.match(_VtlParser.LPAREN);
              this.state = 622;
              this.routineName();
              this.state = 623;
              this.match(_VtlParser.LPAREN);
              this.state = 626;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case 245:
                  {
                    this.state = 624;
                    this.componentID();
                  }
                  break;
                case 13:
                case 14:
                case 54:
                case 218:
                case 241:
                case 242:
                case 243:
                case 244:
                  {
                    this.state = 625;
                    this.scalarItem();
                  }
                  break;
                case 2:
                case 17:
                  break;
                default:
                  break;
              }
              this.state = 635;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 17) {
                {
                  {
                    this.state = 628;
                    this.match(_VtlParser.COMMA);
                    this.state = 631;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                      case 245:
                        {
                          this.state = 629;
                          this.componentID();
                        }
                        break;
                      case 13:
                      case 14:
                      case 54:
                      case 218:
                      case 241:
                      case 242:
                      case 243:
                      case 244:
                        {
                          this.state = 630;
                          this.scalarItem();
                        }
                        break;
                      default:
                        throw new dn(this);
                    }
                  }
                }
                this.state = 637;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 638;
              this.match(_VtlParser.RPAREN);
              this.state = 641;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 240) {
                {
                  this.state = 639;
                  this.match(_VtlParser.LANGUAGE);
                  this.state = 640;
                  this.match(_VtlParser.STRING_CONSTANT);
                }
              }
              this.state = 645;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 201) {
                {
                  this.state = 643;
                  this.match(_VtlParser.RETURNS);
                  this.state = 644;
                  this.outputParameterTypeComponent();
                }
              }
              this.state = 647;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    parameterComponent() {
      let localctx = new ParameterComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 38, _VtlParser.RULE_parameterComponent);
      try {
        this.state = 653;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 1:
          case 13:
          case 14:
          case 22:
          case 23:
          case 24:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 50:
          case 51:
          case 54:
          case 55:
          case 61:
          case 77:
          case 80:
          case 81:
          case 85:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 108:
          case 111:
          case 113:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 140:
          case 141:
          case 142:
          case 143:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 161:
          case 162:
          case 163:
          case 164:
          case 208:
          case 211:
          case 218:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 651;
              this.exprComponent(0);
            }
            break;
          case 115:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 652;
              this.match(_VtlParser.OPTIONAL);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    parameter() {
      let localctx = new ParameterContext(this, this._ctx, this.state);
      this.enterRule(localctx, 40, _VtlParser.RULE_parameter);
      try {
        this.state = 657;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 1:
          case 13:
          case 14:
          case 22:
          case 23:
          case 24:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 50:
          case 51:
          case 54:
          case 55:
          case 57:
          case 59:
          case 60:
          case 61:
          case 66:
          case 67:
          case 80:
          case 81:
          case 85:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 108:
          case 111:
          case 113:
          case 114:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 161:
          case 162:
          case 163:
          case 164:
          case 193:
          case 194:
          case 195:
          case 196:
          case 208:
          case 211:
          case 218:
          case 222:
          case 223:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 655;
              this.expr(0);
            }
            break;
          case 115:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 656;
              this.match(_VtlParser.OPTIONAL);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    stringOperators() {
      let localctx = new StringOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 42, _VtlParser.RULE_stringOperators);
      let _la;
      try {
        this.state = 707;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 93:
          case 95:
          case 96:
          case 97:
          case 131:
          case 132:
            localctx = new UnaryStringFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 659;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 93 & ~31) === 0 && (1 << _la - 93 & 29) !== 0 || _la === 131 || _la === 132)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 660;
              this.match(_VtlParser.LPAREN);
              this.state = 661;
              this.expr(0);
              this.state = 662;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 98:
            localctx = new SubstrAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 664;
              this.match(_VtlParser.SUBSTR);
              this.state = 665;
              this.match(_VtlParser.LPAREN);
              this.state = 666;
              this.expr(0);
              this.state = 677;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 50, this._ctx)) {
                case 1:
                  {
                    this.state = 673;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === 17) {
                      {
                        {
                          this.state = 667;
                          this.match(_VtlParser.COMMA);
                          this.state = 668;
                          localctx._startParameter = this.optionalExpr();
                        }
                        {
                          this.state = 670;
                          this.match(_VtlParser.COMMA);
                          this.state = 671;
                          localctx._endParameter = this.optionalExpr();
                        }
                      }
                    }
                  }
                  break;
                case 2:
                  {
                    this.state = 675;
                    this.match(_VtlParser.COMMA);
                    this.state = 676;
                    localctx._startParameter = this.optionalExpr();
                  }
                  break;
              }
              this.state = 679;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 134:
            localctx = new ReplaceAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 681;
              this.match(_VtlParser.REPLACE);
              this.state = 682;
              this.match(_VtlParser.LPAREN);
              this.state = 683;
              this.expr(0);
              this.state = 684;
              this.match(_VtlParser.COMMA);
              this.state = 685;
              localctx._param = this.expr(0);
              this.state = 688;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 686;
                  this.match(_VtlParser.COMMA);
                  this.state = 687;
                  this.optionalExpr();
                }
              }
              this.state = 690;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 133:
            localctx = new InstrAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 692;
              this.match(_VtlParser.INSTR);
              this.state = 693;
              this.match(_VtlParser.LPAREN);
              this.state = 694;
              this.expr(0);
              this.state = 695;
              this.match(_VtlParser.COMMA);
              this.state = 696;
              localctx._pattern = this.expr(0);
              this.state = 699;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 52, this._ctx)) {
                case 1:
                  {
                    this.state = 697;
                    this.match(_VtlParser.COMMA);
                    this.state = 698;
                    localctx._startParameter = this.optionalExpr();
                  }
                  break;
              }
              this.state = 703;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 701;
                  this.match(_VtlParser.COMMA);
                  this.state = 702;
                  localctx._occurrenceParameter = this.optionalExpr();
                }
              }
              this.state = 705;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    stringOperatorsComponent() {
      let localctx = new StringOperatorsComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 44, _VtlParser.RULE_stringOperatorsComponent);
      let _la;
      try {
        this.state = 757;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 93:
          case 95:
          case 96:
          case 97:
          case 131:
          case 132:
            localctx = new UnaryStringFunctionComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 709;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 93 & ~31) === 0 && (1 << _la - 93 & 29) !== 0 || _la === 131 || _la === 132)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 710;
              this.match(_VtlParser.LPAREN);
              this.state = 711;
              this.exprComponent(0);
              this.state = 712;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 98:
            localctx = new SubstrAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 714;
              this.match(_VtlParser.SUBSTR);
              this.state = 715;
              this.match(_VtlParser.LPAREN);
              this.state = 716;
              this.exprComponent(0);
              this.state = 727;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 56, this._ctx)) {
                case 1:
                  {
                    this.state = 723;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === 17) {
                      {
                        {
                          this.state = 717;
                          this.match(_VtlParser.COMMA);
                          this.state = 718;
                          localctx._startParameter = this.optionalExprComponent();
                        }
                        {
                          this.state = 720;
                          this.match(_VtlParser.COMMA);
                          this.state = 721;
                          localctx._endParameter = this.optionalExprComponent();
                        }
                      }
                    }
                  }
                  break;
                case 2:
                  {
                    this.state = 725;
                    this.match(_VtlParser.COMMA);
                    this.state = 726;
                    localctx._startParameter = this.optionalExprComponent();
                  }
                  break;
              }
              this.state = 729;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 134:
            localctx = new ReplaceAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 731;
              this.match(_VtlParser.REPLACE);
              this.state = 732;
              this.match(_VtlParser.LPAREN);
              this.state = 733;
              this.exprComponent(0);
              this.state = 734;
              this.match(_VtlParser.COMMA);
              this.state = 735;
              localctx._param = this.exprComponent(0);
              this.state = 738;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 736;
                  this.match(_VtlParser.COMMA);
                  this.state = 737;
                  this.optionalExprComponent();
                }
              }
              this.state = 740;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 133:
            localctx = new InstrAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 742;
              this.match(_VtlParser.INSTR);
              this.state = 743;
              this.match(_VtlParser.LPAREN);
              this.state = 744;
              this.exprComponent(0);
              this.state = 745;
              this.match(_VtlParser.COMMA);
              this.state = 746;
              localctx._pattern = this.exprComponent(0);
              this.state = 749;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 58, this._ctx)) {
                case 1:
                  {
                    this.state = 747;
                    this.match(_VtlParser.COMMA);
                    this.state = 748;
                    localctx._startParameter = this.optionalExprComponent();
                  }
                  break;
              }
              this.state = 753;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 751;
                  this.match(_VtlParser.COMMA);
                  this.state = 752;
                  localctx._occurrenceParameter = this.optionalExprComponent();
                }
              }
              this.state = 755;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    numericOperators() {
      let localctx = new NumericOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 46, _VtlParser.RULE_numericOperators);
      let _la;
      try {
        this.state = 780;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 85:
          case 87:
          case 108:
          case 135:
          case 136:
          case 137:
            localctx = new UnaryNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 759;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 85 & ~31) === 0 && (1 << _la - 85 & 8388613) !== 0 || (_la - 135 & ~31) === 0 && (1 << _la - 135 & 7) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 760;
              this.match(_VtlParser.LPAREN);
              this.state = 761;
              this.expr(0);
              this.state = 762;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 89:
          case 90:
            localctx = new UnaryWithOptionalNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 764;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 89 || _la === 90)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 765;
              this.match(_VtlParser.LPAREN);
              this.state = 766;
              this.expr(0);
              this.state = 769;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 767;
                  this.match(_VtlParser.COMMA);
                  this.state = 768;
                  this.optionalExpr();
                }
              }
              this.state = 771;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 61:
          case 88:
          case 91:
          case 92:
            localctx = new BinaryNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 773;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 61 & ~31) === 0 && (1 << _la - 61 & 3355443201) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 774;
              this.match(_VtlParser.LPAREN);
              this.state = 775;
              localctx._left = this.expr(0);
              this.state = 776;
              this.match(_VtlParser.COMMA);
              this.state = 777;
              localctx._right = this.expr(0);
              this.state = 778;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    numericOperatorsComponent() {
      let localctx = new NumericOperatorsComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 48, _VtlParser.RULE_numericOperatorsComponent);
      let _la;
      try {
        this.state = 803;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 85:
          case 87:
          case 108:
          case 135:
          case 136:
          case 137:
            localctx = new UnaryNumericComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 782;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 85 & ~31) === 0 && (1 << _la - 85 & 8388613) !== 0 || (_la - 135 & ~31) === 0 && (1 << _la - 135 & 7) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 783;
              this.match(_VtlParser.LPAREN);
              this.state = 784;
              this.exprComponent(0);
              this.state = 785;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 89:
          case 90:
            localctx = new UnaryWithOptionalNumericComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 787;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 89 || _la === 90)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 788;
              this.match(_VtlParser.LPAREN);
              this.state = 789;
              this.exprComponent(0);
              this.state = 792;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 790;
                  this.match(_VtlParser.COMMA);
                  this.state = 791;
                  this.optionalExprComponent();
                }
              }
              this.state = 794;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 61:
          case 88:
          case 91:
          case 92:
            localctx = new BinaryNumericComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 796;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 61 & ~31) === 0 && (1 << _la - 61 & 3355443201) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 797;
              this.match(_VtlParser.LPAREN);
              this.state = 798;
              localctx._left = this.exprComponent(0);
              this.state = 799;
              this.match(_VtlParser.COMMA);
              this.state = 800;
              localctx._right = this.exprComponent(0);
              this.state = 801;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    comparisonOperators() {
      let localctx = new ComparisonOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 50, _VtlParser.RULE_comparisonOperators);
      let _la;
      try {
        this.state = 837;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 51:
            localctx = new BetweenAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 805;
              this.match(_VtlParser.BETWEEN);
              this.state = 806;
              this.match(_VtlParser.LPAREN);
              this.state = 807;
              localctx._op = this.expr(0);
              this.state = 808;
              this.match(_VtlParser.COMMA);
              this.state = 809;
              localctx._from_ = this.expr(0);
              this.state = 810;
              this.match(_VtlParser.COMMA);
              this.state = 811;
              localctx._to_ = this.expr(0);
              this.state = 812;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 111:
            localctx = new CharsetMatchAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 814;
              this.match(_VtlParser.CHARSET_MATCH);
              this.state = 815;
              this.match(_VtlParser.LPAREN);
              this.state = 816;
              localctx._op = this.expr(0);
              this.state = 817;
              this.match(_VtlParser.COMMA);
              this.state = 818;
              localctx._pattern = this.expr(0);
              this.state = 819;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 55:
            localctx = new IsNullAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 821;
              this.match(_VtlParser.ISNULL);
              this.state = 822;
              this.match(_VtlParser.LPAREN);
              this.state = 823;
              this.expr(0);
              this.state = 824;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 67:
            localctx = new ExistInAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 826;
              this.match(_VtlParser.EXISTS_IN);
              this.state = 827;
              this.match(_VtlParser.LPAREN);
              this.state = 828;
              localctx._left = this.expr(0);
              this.state = 829;
              this.match(_VtlParser.COMMA);
              this.state = 830;
              localctx._right = this.expr(0);
              this.state = 833;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 831;
                  this.match(_VtlParser.COMMA);
                  this.state = 832;
                  this.retainType();
                }
              }
              this.state = 835;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    comparisonOperatorsComponent() {
      let localctx = new ComparisonOperatorsComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 52, _VtlParser.RULE_comparisonOperatorsComponent);
      try {
        this.state = 860;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 51:
            localctx = new BetweenAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 839;
              this.match(_VtlParser.BETWEEN);
              this.state = 840;
              this.match(_VtlParser.LPAREN);
              this.state = 841;
              localctx._op = this.exprComponent(0);
              this.state = 842;
              this.match(_VtlParser.COMMA);
              this.state = 843;
              localctx._from_ = this.exprComponent(0);
              this.state = 844;
              this.match(_VtlParser.COMMA);
              this.state = 845;
              localctx._to_ = this.exprComponent(0);
              this.state = 846;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 111:
            localctx = new CharsetMatchAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 848;
              this.match(_VtlParser.CHARSET_MATCH);
              this.state = 849;
              this.match(_VtlParser.LPAREN);
              this.state = 850;
              localctx._op = this.exprComponent(0);
              this.state = 851;
              this.match(_VtlParser.COMMA);
              this.state = 852;
              localctx._pattern = this.exprComponent(0);
              this.state = 853;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 55:
            localctx = new IsNullAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 855;
              this.match(_VtlParser.ISNULL);
              this.state = 856;
              this.match(_VtlParser.LPAREN);
              this.state = 857;
              this.exprComponent(0);
              this.state = 858;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    timeOperators() {
      let localctx = new TimeOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 54, _VtlParser.RULE_timeOperators);
      let _la;
      try {
        this.state = 964;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 208:
            localctx = new PeriodAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 862;
              this.match(_VtlParser.PERIOD_INDICATOR);
              this.state = 863;
              this.match(_VtlParser.LPAREN);
              this.state = 865;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) === 0 && (1 << _la & 3787481090) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & 986448127) !== 0 || (_la - 66 & ~31) === 0 && (1 << _la - 66 & 4025008131) !== 0 || (_la - 98 & ~31) === 0 && (1 << _la - 98 & 107551) !== 0 || (_la - 131 & ~31) === 0 && (1 << _la - 131 & 3223265151) !== 0 || (_la - 163 & ~31) === 0 && (1 << _la - 163 & 3221225475) !== 0 || (_la - 195 & ~31) === 0 && (1 << _la - 195 & 411115523) !== 0 || (_la - 241 & ~31) === 0 && (1 << _la - 241 & 31) !== 0) {
                {
                  this.state = 864;
                  this.expr(0);
                }
              }
              this.state = 867;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 161:
            localctx = new FillTimeAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 868;
              this.match(_VtlParser.FILL_TIME_SERIES);
              this.state = 869;
              this.match(_VtlParser.LPAREN);
              this.state = 870;
              this.expr(0);
              this.state = 873;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 871;
                  this.match(_VtlParser.COMMA);
                  this.state = 872;
                  localctx._op = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === 72 || _la === 209)) {
                    localctx._op = this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
              }
              this.state = 875;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 162:
          case 163:
            localctx = new FlowAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 877;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 162 || _la === 163)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 878;
              this.match(_VtlParser.LPAREN);
              this.state = 879;
              this.expr(0);
              this.state = 880;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 164:
            localctx = new TimeShiftAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 882;
              this.match(_VtlParser.TIMESHIFT);
              this.state = 883;
              this.match(_VtlParser.LPAREN);
              this.state = 884;
              this.expr(0);
              this.state = 885;
              this.match(_VtlParser.COMMA);
              this.state = 886;
              this.signedInteger();
              this.state = 887;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 211:
            localctx = new TimeAggAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 889;
              this.match(_VtlParser.TIME_AGG);
              this.state = 890;
              this.match(_VtlParser.LPAREN);
              this.state = 891;
              localctx._periodIndTo = this.match(_VtlParser.STRING_CONSTANT);
              this.state = 894;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 70, this._ctx)) {
                case 1:
                  {
                    this.state = 892;
                    this.match(_VtlParser.COMMA);
                    this.state = 893;
                    localctx._periodIndFrom = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === 115 || _la === 244)) {
                      localctx._periodIndFrom = this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                  }
                  break;
              }
              this.state = 898;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 71, this._ctx)) {
                case 1:
                  {
                    this.state = 896;
                    this.match(_VtlParser.COMMA);
                    this.state = 897;
                    localctx._op = this.optionalExpr();
                  }
                  break;
              }
              this.state = 902;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 900;
                  this.match(_VtlParser.COMMA);
                  this.state = 901;
                  localctx._delim = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === 82 || _la === 83)) {
                    localctx._delim = this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
              }
              this.state = 904;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 29:
            localctx = new CurrentDateAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            {
              this.state = 905;
              this.match(_VtlParser.CURRENT_DATE);
              this.state = 906;
              this.match(_VtlParser.LPAREN);
              this.state = 907;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 30:
            localctx = new DateDiffAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            {
              this.state = 908;
              this.match(_VtlParser.DATEDIFF);
              this.state = 909;
              this.match(_VtlParser.LPAREN);
              this.state = 910;
              localctx._dateFrom = this.expr(0);
              this.state = 911;
              this.match(_VtlParser.COMMA);
              this.state = 912;
              localctx._dateTo = this.expr(0);
              this.state = 913;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 31:
            localctx = new DateAddAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            {
              this.state = 915;
              this.match(_VtlParser.DATEADD);
              this.state = 916;
              this.match(_VtlParser.LPAREN);
              this.state = 917;
              localctx._op = this.expr(0);
              this.state = 918;
              this.match(_VtlParser.COMMA);
              this.state = 919;
              localctx._shiftNumber = this.expr(0);
              this.state = 920;
              this.match(_VtlParser.COMMA);
              this.state = 921;
              localctx._periodInd = this.expr(0);
              this.state = 922;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 32:
            localctx = new YearAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            {
              this.state = 924;
              this.match(_VtlParser.YEAR_OP);
              this.state = 925;
              this.match(_VtlParser.LPAREN);
              this.state = 926;
              this.expr(0);
              this.state = 927;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 33:
            localctx = new MonthAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            {
              this.state = 929;
              this.match(_VtlParser.MONTH_OP);
              this.state = 930;
              this.match(_VtlParser.LPAREN);
              this.state = 931;
              this.expr(0);
              this.state = 932;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 34:
            localctx = new DayOfMonthAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            {
              this.state = 934;
              this.match(_VtlParser.DAYOFMONTH);
              this.state = 935;
              this.match(_VtlParser.LPAREN);
              this.state = 936;
              this.expr(0);
              this.state = 937;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 35:
            localctx = new DayOfYearAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            {
              this.state = 939;
              this.match(_VtlParser.DAYOFYEAR);
              this.state = 940;
              this.match(_VtlParser.LPAREN);
              this.state = 941;
              this.expr(0);
              this.state = 942;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 36:
            localctx = new DayToYearAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            {
              this.state = 944;
              this.match(_VtlParser.DAYTOYEAR);
              this.state = 945;
              this.match(_VtlParser.LPAREN);
              this.state = 946;
              this.expr(0);
              this.state = 947;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 37:
            localctx = new DayToMonthAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            {
              this.state = 949;
              this.match(_VtlParser.DAYTOMONTH);
              this.state = 950;
              this.match(_VtlParser.LPAREN);
              this.state = 951;
              this.expr(0);
              this.state = 952;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 38:
            localctx = new YearTodayAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            {
              this.state = 954;
              this.match(_VtlParser.YEARTODAY);
              this.state = 955;
              this.match(_VtlParser.LPAREN);
              this.state = 956;
              this.expr(0);
              this.state = 957;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 39:
            localctx = new MonthTodayAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            {
              this.state = 959;
              this.match(_VtlParser.MONTHTODAY);
              this.state = 960;
              this.match(_VtlParser.LPAREN);
              this.state = 961;
              this.expr(0);
              this.state = 962;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    timeOperatorsComponent() {
      let localctx = new TimeOperatorsComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 56, _VtlParser.RULE_timeOperatorsComponent);
      let _la;
      try {
        this.state = 1068;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 208:
            localctx = new PeriodAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 966;
              this.match(_VtlParser.PERIOD_INDICATOR);
              this.state = 967;
              this.match(_VtlParser.LPAREN);
              this.state = 969;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) === 0 && (1 << _la & 3787481090) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & 550240511) !== 0 || (_la - 77 & ~31) === 0 && (1 << _la - 77 & 2214460697) !== 0 || (_la - 111 & ~31) === 0 && (1 << _la - 111 & 3891265541) !== 0 || (_la - 143 & ~31) === 0 && (1 << _la - 143 & 3932657) !== 0 || (_la - 208 & ~31) === 0 && (1 << _la - 208 & 1033) !== 0 || (_la - 241 & ~31) === 0 && (1 << _la - 241 & 31) !== 0) {
                {
                  this.state = 968;
                  this.exprComponent(0);
                }
              }
              this.state = 971;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 161:
            localctx = new FillTimeAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 972;
              this.match(_VtlParser.FILL_TIME_SERIES);
              this.state = 973;
              this.match(_VtlParser.LPAREN);
              this.state = 974;
              this.exprComponent(0);
              this.state = 977;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 975;
                  this.match(_VtlParser.COMMA);
                  this.state = 976;
                  localctx._op = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === 72 || _la === 209)) {
                    localctx._op = this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
              }
              this.state = 979;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 162:
          case 163:
            localctx = new FlowAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 981;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 162 || _la === 163)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 982;
              this.match(_VtlParser.LPAREN);
              this.state = 983;
              this.exprComponent(0);
              this.state = 984;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 164:
            localctx = new TimeShiftAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 986;
              this.match(_VtlParser.TIMESHIFT);
              this.state = 987;
              this.match(_VtlParser.LPAREN);
              this.state = 988;
              this.exprComponent(0);
              this.state = 989;
              this.match(_VtlParser.COMMA);
              this.state = 990;
              this.signedInteger();
              this.state = 991;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 211:
            localctx = new TimeAggAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 993;
              this.match(_VtlParser.TIME_AGG);
              this.state = 994;
              this.match(_VtlParser.LPAREN);
              this.state = 995;
              localctx._periodIndTo = this.match(_VtlParser.STRING_CONSTANT);
              this.state = 998;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 76, this._ctx)) {
                case 1:
                  {
                    this.state = 996;
                    this.match(_VtlParser.COMMA);
                    this.state = 997;
                    localctx._periodIndFrom = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === 115 || _la === 244)) {
                      localctx._periodIndFrom = this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                  }
                  break;
              }
              this.state = 1002;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 77, this._ctx)) {
                case 1:
                  {
                    this.state = 1e3;
                    this.match(_VtlParser.COMMA);
                    this.state = 1001;
                    localctx._op = this.optionalExprComponent();
                  }
                  break;
              }
              this.state = 1006;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 1004;
                  this.match(_VtlParser.COMMA);
                  this.state = 1005;
                  localctx._delim = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === 82 || _la === 83)) {
                    localctx._delim = this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
              }
              this.state = 1008;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 29:
            localctx = new CurrentDateAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            {
              this.state = 1009;
              this.match(_VtlParser.CURRENT_DATE);
              this.state = 1010;
              this.match(_VtlParser.LPAREN);
              this.state = 1011;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 30:
            localctx = new DateDiffAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            {
              this.state = 1012;
              this.match(_VtlParser.DATEDIFF);
              this.state = 1013;
              this.match(_VtlParser.LPAREN);
              this.state = 1014;
              localctx._dateFrom = this.exprComponent(0);
              this.state = 1015;
              this.match(_VtlParser.COMMA);
              this.state = 1016;
              localctx._dateTo = this.expr(0);
              this.state = 1017;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 31:
            localctx = new DateAddAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            {
              this.state = 1019;
              this.match(_VtlParser.DATEADD);
              this.state = 1020;
              this.match(_VtlParser.LPAREN);
              this.state = 1021;
              localctx._op = this.exprComponent(0);
              this.state = 1022;
              this.match(_VtlParser.COMMA);
              this.state = 1023;
              localctx._shiftNumber = this.exprComponent(0);
              this.state = 1024;
              this.match(_VtlParser.COMMA);
              this.state = 1025;
              localctx._periodInd = this.exprComponent(0);
              this.state = 1026;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 32:
            localctx = new YearAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            {
              this.state = 1028;
              this.match(_VtlParser.YEAR_OP);
              this.state = 1029;
              this.match(_VtlParser.LPAREN);
              this.state = 1030;
              this.exprComponent(0);
              this.state = 1031;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 33:
            localctx = new MonthAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            {
              this.state = 1033;
              this.match(_VtlParser.MONTH_OP);
              this.state = 1034;
              this.match(_VtlParser.LPAREN);
              this.state = 1035;
              this.exprComponent(0);
              this.state = 1036;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 34:
            localctx = new DayOfMonthAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            {
              this.state = 1038;
              this.match(_VtlParser.DAYOFMONTH);
              this.state = 1039;
              this.match(_VtlParser.LPAREN);
              this.state = 1040;
              this.exprComponent(0);
              this.state = 1041;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 35:
            localctx = new DatOfYearAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            {
              this.state = 1043;
              this.match(_VtlParser.DAYOFYEAR);
              this.state = 1044;
              this.match(_VtlParser.LPAREN);
              this.state = 1045;
              this.exprComponent(0);
              this.state = 1046;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 36:
            localctx = new DayToYearAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            {
              this.state = 1048;
              this.match(_VtlParser.DAYTOYEAR);
              this.state = 1049;
              this.match(_VtlParser.LPAREN);
              this.state = 1050;
              this.exprComponent(0);
              this.state = 1051;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 37:
            localctx = new DayToMonthAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            {
              this.state = 1053;
              this.match(_VtlParser.DAYTOMONTH);
              this.state = 1054;
              this.match(_VtlParser.LPAREN);
              this.state = 1055;
              this.exprComponent(0);
              this.state = 1056;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 38:
            localctx = new YearTodayAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            {
              this.state = 1058;
              this.match(_VtlParser.YEARTODAY);
              this.state = 1059;
              this.match(_VtlParser.LPAREN);
              this.state = 1060;
              this.exprComponent(0);
              this.state = 1061;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 39:
            localctx = new MonthTodayAtomComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            {
              this.state = 1063;
              this.match(_VtlParser.MONTHTODAY);
              this.state = 1064;
              this.match(_VtlParser.LPAREN);
              this.state = 1065;
              this.exprComponent(0);
              this.state = 1066;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    setOperators() {
      let localctx = new SetOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 58, _VtlParser.RULE_setOperators);
      let _la;
      try {
        this.state = 1099;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 57:
            localctx = new UnionAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1070;
              this.match(_VtlParser.UNION);
              this.state = 1071;
              this.match(_VtlParser.LPAREN);
              this.state = 1072;
              localctx._left = this.expr(0);
              this.state = 1075;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                {
                  {
                    this.state = 1073;
                    this.match(_VtlParser.COMMA);
                    this.state = 1074;
                    this.expr(0);
                  }
                }
                this.state = 1077;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === 17);
              this.state = 1079;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 60:
            localctx = new IntersectAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1081;
              this.match(_VtlParser.INTERSECT);
              this.state = 1082;
              this.match(_VtlParser.LPAREN);
              this.state = 1083;
              localctx._left = this.expr(0);
              this.state = 1086;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                {
                  {
                    this.state = 1084;
                    this.match(_VtlParser.COMMA);
                    this.state = 1085;
                    this.expr(0);
                  }
                }
                this.state = 1088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === 17);
              this.state = 1090;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 59:
          case 139:
            localctx = new SetOrSYmDiffAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1092;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 59 || _la === 139)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1093;
              this.match(_VtlParser.LPAREN);
              this.state = 1094;
              localctx._left = this.expr(0);
              this.state = 1095;
              this.match(_VtlParser.COMMA);
              this.state = 1096;
              localctx._right = this.expr(0);
              this.state = 1097;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    hierarchyOperators() {
      let localctx = new HierarchyOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 60, _VtlParser.RULE_hierarchyOperators);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1101;
          this.match(_VtlParser.HIERARCHY);
          this.state = 1102;
          this.match(_VtlParser.LPAREN);
          this.state = 1103;
          localctx._op = this.expr(0);
          this.state = 1104;
          this.match(_VtlParser.COMMA);
          this.state = 1105;
          localctx._hrName = this.match(_VtlParser.IDENTIFIER);
          this.state = 1107;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 167) {
            {
              this.state = 1106;
              this.conditionClause();
            }
          }
          this.state = 1111;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 84, this._ctx)) {
            case 1:
              {
                this.state = 1109;
                this.match(_VtlParser.RULE);
                this.state = 1110;
                localctx._ruleComponent = this.componentID();
              }
              break;
          }
          this.state = 1114;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 225 & ~31) === 0 && (1 << _la - 225 & 63) !== 0) {
            {
              this.state = 1113;
              this.validationMode();
            }
          }
          this.state = 1117;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 121 || _la === 128 || _la === 219) {
            {
              this.state = 1116;
              this.inputModeHierarchy();
            }
          }
          this.state = 1120;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 72 || _la === 224) {
            {
              this.state = 1119;
              this.outputModeHierarchy();
            }
          }
          this.state = 1122;
          this.match(_VtlParser.RPAREN);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    validationOperators() {
      let localctx = new ValidationOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 62, _VtlParser.RULE_validationOperators);
      let _la;
      try {
        this.state = 1185;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 222:
            localctx = new ValidateDPrulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1124;
              this.match(_VtlParser.CHECK_DATAPOINT);
              this.state = 1125;
              this.match(_VtlParser.LPAREN);
              this.state = 1126;
              localctx._op = this.expr(0);
              this.state = 1127;
              this.match(_VtlParser.COMMA);
              this.state = 1128;
              localctx._dpName = this.match(_VtlParser.IDENTIFIER);
              this.state = 1138;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 231) {
                {
                  this.state = 1129;
                  this.match(_VtlParser.COMPONENTS);
                  this.state = 1130;
                  this.componentID();
                  this.state = 1135;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 17) {
                    {
                      {
                        this.state = 1131;
                        this.match(_VtlParser.COMMA);
                        this.state = 1132;
                        this.componentID();
                      }
                    }
                    this.state = 1137;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
              }
              this.state = 1141;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 72 || _la === 116 || _la === 232) {
                {
                  this.state = 1140;
                  this.validationOutput();
                }
              }
              this.state = 1143;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 223:
            localctx = new ValidateHRrulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1145;
              this.match(_VtlParser.CHECK_HIERARCHY);
              this.state = 1146;
              this.match(_VtlParser.LPAREN);
              this.state = 1147;
              localctx._op = this.expr(0);
              this.state = 1148;
              this.match(_VtlParser.COMMA);
              this.state = 1149;
              localctx._hrName = this.match(_VtlParser.IDENTIFIER);
              this.state = 1151;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 167) {
                {
                  this.state = 1150;
                  this.conditionClause();
                }
              }
              this.state = 1155;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 128) {
                {
                  this.state = 1153;
                  this.match(_VtlParser.RULE);
                  this.state = 1154;
                  this.componentID();
                }
              }
              this.state = 1158;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la - 225 & ~31) === 0 && (1 << _la - 225 & 63) !== 0) {
                {
                  this.state = 1157;
                  this.validationMode();
                }
              }
              this.state = 1161;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 121 || _la === 220) {
                {
                  this.state = 1160;
                  this.inputMode();
                }
              }
              this.state = 1164;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 72 || _la === 116 || _la === 232) {
                {
                  this.state = 1163;
                  this.validationOutput();
                }
              }
              this.state = 1166;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 66:
            localctx = new ValidationSimpleContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1168;
              this.match(_VtlParser.CHECK);
              this.state = 1169;
              this.match(_VtlParser.LPAREN);
              this.state = 1170;
              localctx._op = this.expr(0);
              this.state = 1172;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 71) {
                {
                  this.state = 1171;
                  localctx._codeErr = this.erCode();
                }
              }
              this.state = 1175;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 74) {
                {
                  this.state = 1174;
                  localctx._levelCode = this.erLevel();
                }
              }
              this.state = 1178;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 70) {
                {
                  this.state = 1177;
                  this.imbalanceExpr();
                }
              }
              this.state = 1181;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 72 || _la === 116) {
                {
                  this.state = 1180;
                  localctx._output = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === 72 || _la === 116)) {
                    localctx._output = this._errHandler.recoverInline(this);
                  } else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
              }
              this.state = 1183;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    conditionalOperators() {
      let localctx = new ConditionalOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 64, _VtlParser.RULE_conditionalOperators);
      try {
        localctx = new NvlAtomContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1187;
          this.match(_VtlParser.NVL);
          this.state = 1188;
          this.match(_VtlParser.LPAREN);
          this.state = 1189;
          localctx._left = this.expr(0);
          this.state = 1190;
          this.match(_VtlParser.COMMA);
          this.state = 1191;
          localctx._right = this.expr(0);
          this.state = 1192;
          this.match(_VtlParser.RPAREN);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    conditionalOperatorsComponent() {
      let localctx = new ConditionalOperatorsComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 66, _VtlParser.RULE_conditionalOperatorsComponent);
      try {
        localctx = new NvlAtomComponentContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1194;
          this.match(_VtlParser.NVL);
          this.state = 1195;
          this.match(_VtlParser.LPAREN);
          this.state = 1196;
          localctx._left = this.exprComponent(0);
          this.state = 1197;
          this.match(_VtlParser.COMMA);
          this.state = 1198;
          localctx._right = this.exprComponent(0);
          this.state = 1199;
          this.match(_VtlParser.RPAREN);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    aggrOperators() {
      let localctx = new AggrOperatorsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 68, _VtlParser.RULE_aggrOperators);
      let _la;
      try {
        this.state = 1209;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 101, this._ctx)) {
          case 1:
            localctx = new AggrCompContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1201;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 80 & ~31) === 0 && (1 << _la - 80 & 7864323) !== 0 || (_la - 140 & ~31) === 0 && (1 << _la - 140 & 15) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1202;
              this.match(_VtlParser.LPAREN);
              this.state = 1203;
              this.exprComponent(0);
              this.state = 1204;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 2:
            localctx = new CountAggrCompContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1206;
              this.match(_VtlParser.COUNT);
              this.state = 1207;
              this.match(_VtlParser.LPAREN);
              this.state = 1208;
              this.match(_VtlParser.RPAREN);
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    aggrOperatorsGrouping() {
      let localctx = new AggrOperatorsGroupingContext(this, this._ctx, this.state);
      this.enterRule(localctx, 70, _VtlParser.RULE_aggrOperatorsGrouping);
      let _la;
      try {
        localctx = new AggrDatasetContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1211;
          localctx._op = this._input.LT(1);
          _la = this._input.LA(1);
          if (!((_la - 80 & ~31) === 0 && (1 << _la - 80 & 7864323) !== 0 || (_la - 140 & ~31) === 0 && (1 << _la - 140 & 15) !== 0)) {
            localctx._op = this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1212;
          this.match(_VtlParser.LPAREN);
          this.state = 1213;
          this.expr(0);
          this.state = 1218;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 144) {
            {
              this.state = 1214;
              this.groupingClause();
              this.state = 1216;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 146) {
                {
                  this.state = 1215;
                  this.havingClause();
                }
              }
            }
          }
          this.state = 1220;
          this.match(_VtlParser.RPAREN);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    anFunction() {
      let localctx = new AnFunctionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 72, _VtlParser.RULE_anFunction);
      let _la;
      try {
        this.state = 1269;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 80:
          case 81:
          case 99:
          case 100:
          case 101:
          case 102:
          case 140:
          case 141:
          case 142:
          case 143:
          case 147:
          case 148:
            localctx = new AnSimpleFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1222;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 80 & ~31) === 0 && (1 << _la - 80 & 7864323) !== 0 || (_la - 140 & ~31) === 0 && (1 << _la - 140 & 399) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1223;
              this.match(_VtlParser.LPAREN);
              this.state = 1224;
              this.expr(0);
              this.state = 1225;
              this.match(_VtlParser.OVER);
              this.state = 1226;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1228;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 156) {
                  {
                    this.state = 1227;
                    localctx._partition = this.partitionByClause();
                  }
                }
                this.state = 1231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 75) {
                  {
                    this.state = 1230;
                    localctx._orderBy = this.orderByClause();
                  }
                }
                this.state = 1234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 119 || _la === 158) {
                  {
                    this.state = 1233;
                    localctx._windowing = this.windowingClause();
                  }
                }
              }
              this.state = 1236;
              this.match(_VtlParser.RPAREN);
              this.state = 1237;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 149:
          case 150:
            localctx = new LagOrLeadAnContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1239;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 149 || _la === 150)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1240;
              this.match(_VtlParser.LPAREN);
              this.state = 1241;
              this.expr(0);
              this.state = 1248;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 1242;
                  this.match(_VtlParser.COMMA);
                  this.state = 1243;
                  localctx._offset = this.signedInteger();
                  this.state = 1246;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === 17) {
                    {
                      this.state = 1244;
                      this.match(_VtlParser.COMMA);
                      this.state = 1245;
                      localctx._defaultValue = this.scalarItem();
                    }
                  }
                }
              }
              this.state = 1250;
              this.match(_VtlParser.OVER);
              this.state = 1251;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1253;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 156) {
                  {
                    this.state = 1252;
                    localctx._partition = this.partitionByClause();
                  }
                }
                this.state = 1255;
                localctx._orderBy = this.orderByClause();
              }
              this.state = 1257;
              this.match(_VtlParser.RPAREN);
              this.state = 1258;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 151:
            localctx = new RatioToReportAnContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1260;
              localctx._op = this.match(_VtlParser.RATIO_TO_REPORT);
              this.state = 1261;
              this.match(_VtlParser.LPAREN);
              this.state = 1262;
              this.expr(0);
              this.state = 1263;
              this.match(_VtlParser.OVER);
              this.state = 1264;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1265;
                localctx._partition = this.partitionByClause();
              }
              this.state = 1266;
              this.match(_VtlParser.RPAREN);
              this.state = 1267;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    anFunctionComponent() {
      let localctx = new AnFunctionComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 74, _VtlParser.RULE_anFunctionComponent);
      let _la;
      try {
        this.state = 1329;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 80:
          case 81:
          case 99:
          case 100:
          case 101:
          case 102:
          case 140:
          case 141:
          case 142:
          case 143:
          case 147:
          case 148:
            localctx = new AnSimpleFunctionComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1271;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 80 & ~31) === 0 && (1 << _la - 80 & 7864323) !== 0 || (_la - 140 & ~31) === 0 && (1 << _la - 140 & 399) !== 0)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1272;
              this.match(_VtlParser.LPAREN);
              this.state = 1273;
              this.exprComponent(0);
              this.state = 1274;
              this.match(_VtlParser.OVER);
              this.state = 1275;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 156) {
                  {
                    this.state = 1276;
                    localctx._partition = this.partitionByClause();
                  }
                }
                this.state = 1280;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 75) {
                  {
                    this.state = 1279;
                    localctx._orderBy = this.orderByClause();
                  }
                }
                this.state = 1283;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 119 || _la === 158) {
                  {
                    this.state = 1282;
                    localctx._windowing = this.windowingClause();
                  }
                }
              }
              this.state = 1285;
              this.match(_VtlParser.RPAREN);
              this.state = 1286;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 149:
          case 150:
            localctx = new LagOrLeadAnComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1288;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 149 || _la === 150)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1289;
              this.match(_VtlParser.LPAREN);
              this.state = 1290;
              this.exprComponent(0);
              this.state = 1296;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 1291;
                  this.match(_VtlParser.COMMA);
                  this.state = 1292;
                  localctx._offset = this.signedInteger();
                  this.state = 1294;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === 13 || _la === 14 || _la === 54 || (_la - 218 & ~31) === 0 && (1 << _la - 218 & 125829121) !== 0) {
                    {
                      this.state = 1293;
                      localctx._defaultValue = this.scalarItem();
                    }
                  }
                }
              }
              this.state = 1298;
              this.match(_VtlParser.OVER);
              this.state = 1299;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 156) {
                  {
                    this.state = 1300;
                    localctx._partition = this.partitionByClause();
                  }
                }
                this.state = 1303;
                localctx._orderBy = this.orderByClause();
              }
              this.state = 1305;
              this.match(_VtlParser.RPAREN);
              this.state = 1306;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 77:
            localctx = new RankAnComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1308;
              localctx._op = this.match(_VtlParser.RANK);
              this.state = 1309;
              this.match(_VtlParser.LPAREN);
              this.state = 1310;
              this.match(_VtlParser.OVER);
              this.state = 1311;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1313;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === 156) {
                  {
                    this.state = 1312;
                    localctx._partition = this.partitionByClause();
                  }
                }
                this.state = 1315;
                localctx._orderBy = this.orderByClause();
              }
              this.state = 1317;
              this.match(_VtlParser.RPAREN);
              this.state = 1318;
              this.match(_VtlParser.RPAREN);
            }
            break;
          case 151:
            localctx = new RatioToReportAnComponentContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 1320;
              localctx._op = this.match(_VtlParser.RATIO_TO_REPORT);
              this.state = 1321;
              this.match(_VtlParser.LPAREN);
              this.state = 1322;
              this.exprComponent(0);
              this.state = 1323;
              this.match(_VtlParser.OVER);
              this.state = 1324;
              this.match(_VtlParser.LPAREN);
              {
                this.state = 1325;
                localctx._partition = this.partitionByClause();
              }
              this.state = 1326;
              this.match(_VtlParser.RPAREN);
              this.state = 1327;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    renameClauseItem() {
      let localctx = new RenameClauseItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 76, _VtlParser.RULE_renameClauseItem);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1331;
          localctx._fromName = this.componentID();
          this.state = 1332;
          this.match(_VtlParser.TO);
          this.state = 1333;
          localctx._toName = this.componentID();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    aggregateClause() {
      let localctx = new AggregateClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 78, _VtlParser.RULE_aggregateClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1335;
          this.aggrFunctionClause();
          this.state = 1340;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1336;
                this.match(_VtlParser.COMMA);
                this.state = 1337;
                this.aggrFunctionClause();
              }
            }
            this.state = 1342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    aggrFunctionClause() {
      let localctx = new AggrFunctionClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 80, _VtlParser.RULE_aggrFunctionClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1344;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 103 & ~31) === 0 && (1 << _la - 103 & 135) !== 0 || _la === 234) {
            {
              this.state = 1343;
              this.componentRole();
            }
          }
          this.state = 1346;
          this.componentID();
          this.state = 1347;
          this.match(_VtlParser.ASSIGN);
          this.state = 1348;
          this.aggrOperators();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    calcClauseItem() {
      let localctx = new CalcClauseItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 82, _VtlParser.RULE_calcClauseItem);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1351;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 103 & ~31) === 0 && (1 << _la - 103 & 135) !== 0 || _la === 234) {
            {
              this.state = 1350;
              this.componentRole();
            }
          }
          this.state = 1353;
          this.componentID();
          this.state = 1354;
          this.match(_VtlParser.ASSIGN);
          this.state = 1355;
          this.exprComponent(0);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    subspaceClauseItem() {
      let localctx = new SubspaceClauseItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 84, _VtlParser.RULE_subspaceClauseItem);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1357;
          this.componentID();
          this.state = 1358;
          this.match(_VtlParser.EQ);
          this.state = 1359;
          this.scalarItem();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    scalarItem() {
      let localctx = new ScalarItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 86, _VtlParser.RULE_scalarItem);
      let _la;
      try {
        this.state = 1373;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 13:
          case 14:
          case 54:
          case 241:
          case 242:
          case 243:
          case 244:
            localctx = new SimpleScalarContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1361;
              this.constant();
            }
            break;
          case 218:
            localctx = new ScalarWithCastContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1362;
              this.match(_VtlParser.CAST);
              this.state = 1363;
              this.match(_VtlParser.LPAREN);
              this.state = 1364;
              this.constant();
              this.state = 1365;
              this.match(_VtlParser.COMMA);
              {
                this.state = 1366;
                this.basicScalarType();
              }
              this.state = 1369;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 17) {
                {
                  this.state = 1367;
                  this.match(_VtlParser.COMMA);
                  this.state = 1368;
                  this.match(_VtlParser.STRING_CONSTANT);
                }
              }
              this.state = 1371;
              this.match(_VtlParser.RPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    joinClauseWithoutUsing() {
      let localctx = new JoinClauseWithoutUsingContext(this, this._ctx, this.state);
      this.enterRule(localctx, 88, _VtlParser.RULE_joinClauseWithoutUsing);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1375;
          this.joinClauseItem();
          this.state = 1380;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1376;
                this.match(_VtlParser.COMMA);
                this.state = 1377;
                this.joinClauseItem();
              }
            }
            this.state = 1382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    joinClause() {
      let localctx = new JoinClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 90, _VtlParser.RULE_joinClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1383;
          this.joinClauseItem();
          this.state = 1388;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1384;
                this.match(_VtlParser.COMMA);
                this.state = 1385;
                this.joinClauseItem();
              }
            }
            this.state = 1390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1400;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 27) {
            {
              this.state = 1391;
              this.match(_VtlParser.USING);
              this.state = 1392;
              this.componentID();
              this.state = 1397;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 17) {
                {
                  {
                    this.state = 1393;
                    this.match(_VtlParser.COMMA);
                    this.state = 1394;
                    this.componentID();
                  }
                }
                this.state = 1399;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    joinClauseItem() {
      let localctx = new JoinClauseItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 92, _VtlParser.RULE_joinClauseItem);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1402;
          this.expr(0);
          this.state = 1405;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 46) {
            {
              this.state = 1403;
              this.match(_VtlParser.AS);
              this.state = 1404;
              this.alias();
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    joinBody() {
      let localctx = new JoinBodyContext(this, this._ctx, this.state);
      this.enterRule(localctx, 94, _VtlParser.RULE_joinBody);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1408;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 106) {
            {
              this.state = 1407;
              this.filterClause();
            }
          }
          this.state = 1413;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case 43:
              {
                this.state = 1410;
                this.calcClause();
              }
              break;
            case 206:
              {
                this.state = 1411;
                this.joinApplyClause();
              }
              break;
            case 73:
              {
                this.state = 1412;
                this.aggrClause();
              }
              break;
            case 2:
            case 41:
            case 42:
            case 45:
              break;
            default:
              break;
          }
          this.state = 1416;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 41 || _la === 42) {
            {
              this.state = 1415;
              this.keepOrDropClause();
            }
          }
          this.state = 1419;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 45) {
            {
              this.state = 1418;
              this.renameClause();
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    joinApplyClause() {
      let localctx = new JoinApplyClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 96, _VtlParser.RULE_joinApplyClause);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1421;
          this.match(_VtlParser.APPLY);
          this.state = 1422;
          this.expr(0);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    partitionByClause() {
      let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 98, _VtlParser.RULE_partitionByClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1424;
          this.match(_VtlParser.PARTITION);
          this.state = 1425;
          this.match(_VtlParser.BY);
          this.state = 1426;
          this.componentID();
          this.state = 1431;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1427;
                this.match(_VtlParser.COMMA);
                this.state = 1428;
                this.componentID();
              }
            }
            this.state = 1433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    orderByClause() {
      let localctx = new OrderByClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 100, _VtlParser.RULE_orderByClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1434;
          this.match(_VtlParser.ORDER);
          this.state = 1435;
          this.match(_VtlParser.BY);
          this.state = 1436;
          this.orderByItem();
          this.state = 1441;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1437;
                this.match(_VtlParser.COMMA);
                this.state = 1438;
                this.orderByItem();
              }
            }
            this.state = 1443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    orderByItem() {
      let localctx = new OrderByItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 102, _VtlParser.RULE_orderByItem);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1444;
          this.componentID();
          this.state = 1446;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 78 || _la === 79) {
            {
              this.state = 1445;
              _la = this._input.LA(1);
              if (!(_la === 78 || _la === 79)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    windowingClause() {
      let localctx = new WindowingClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 104, _VtlParser.RULE_windowingClause);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1451;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case 119:
              {
                {
                  this.state = 1448;
                  this.match(_VtlParser.DATA);
                  this.state = 1449;
                  this.match(_VtlParser.POINTS);
                }
              }
              break;
            case 158:
              {
                this.state = 1450;
                this.match(_VtlParser.RANGE);
              }
              break;
            default:
              throw new dn(this);
          }
          this.state = 1453;
          this.match(_VtlParser.BETWEEN);
          this.state = 1454;
          localctx._from_ = this.limitClauseItem();
          this.state = 1455;
          this.match(_VtlParser.AND);
          this.state = 1456;
          localctx._to_ = this.limitClauseItem();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    signedInteger() {
      let localctx = new SignedIntegerContext(this, this._ctx, this.state);
      this.enterRule(localctx, 106, _VtlParser.RULE_signedInteger);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1459;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 13 || _la === 14) {
            {
              this.state = 1458;
              _la = this._input.LA(1);
              if (!(_la === 13 || _la === 14)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }
          this.state = 1461;
          this.match(_VtlParser.INTEGER_CONSTANT);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    signedNumber() {
      let localctx = new SignedNumberContext(this, this._ctx, this.state);
      this.enterRule(localctx, 108, _VtlParser.RULE_signedNumber);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1464;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 13 || _la === 14) {
            {
              this.state = 1463;
              _la = this._input.LA(1);
              if (!(_la === 13 || _la === 14)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }
          this.state = 1466;
          this.match(_VtlParser.NUMBER_CONSTANT);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    limitClauseItem() {
      let localctx = new LimitClauseItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 110, _VtlParser.RULE_limitClauseItem);
      try {
        this.state = 1481;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 139, this._ctx)) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1468;
              this.signedInteger();
              this.state = 1469;
              localctx._dir = this.match(_VtlParser.PRECEDING);
            }
            break;
          case 2:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1471;
              this.signedInteger();
              this.state = 1472;
              localctx._dir = this.match(_VtlParser.FOLLOWING);
            }
            break;
          case 3:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1474;
              this.match(_VtlParser.CURRENT);
              this.state = 1475;
              this.match(_VtlParser.DATA);
              this.state = 1476;
              this.match(_VtlParser.POINT);
            }
            break;
          case 4:
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 1477;
              this.match(_VtlParser.UNBOUNDED);
              this.state = 1478;
              localctx._dir = this.match(_VtlParser.PRECEDING);
            }
            break;
          case 5:
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 1479;
              this.match(_VtlParser.UNBOUNDED);
              this.state = 1480;
              localctx._dir = this.match(_VtlParser.FOLLOWING);
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    groupingClause() {
      let localctx = new GroupingClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 112, _VtlParser.RULE_groupingClause);
      let _la;
      try {
        this.state = 1511;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 144, this._ctx)) {
          case 1:
            localctx = new GroupByOrExceptContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1483;
              this.match(_VtlParser.GROUP);
              this.state = 1484;
              localctx._op = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 76 || _la === 145)) {
                localctx._op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1485;
              this.componentID();
              this.state = 1490;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 17) {
                {
                  {
                    this.state = 1486;
                    this.match(_VtlParser.COMMA);
                    this.state = 1487;
                    this.componentID();
                  }
                }
                this.state = 1492;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 1501;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 211) {
                {
                  this.state = 1493;
                  this.match(_VtlParser.TIME_AGG);
                  this.state = 1494;
                  this.match(_VtlParser.LPAREN);
                  this.state = 1495;
                  this.match(_VtlParser.STRING_CONSTANT);
                  this.state = 1498;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === 17) {
                    {
                      this.state = 1496;
                      this.match(_VtlParser.COMMA);
                      this.state = 1497;
                      localctx._delim = this._input.LT(1);
                      _la = this._input.LA(1);
                      if (!(_la === 82 || _la === 83)) {
                        localctx._delim = this._errHandler.recoverInline(this);
                      } else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                    }
                  }
                  this.state = 1500;
                  this.match(_VtlParser.RPAREN);
                }
              }
            }
            break;
          case 2:
            localctx = new GroupAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1503;
              this.match(_VtlParser.GROUP);
              this.state = 1504;
              this.match(_VtlParser.ALL);
              this.state = 1509;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 211) {
                {
                  this.state = 1505;
                  this.match(_VtlParser.TIME_AGG);
                  this.state = 1506;
                  this.match(_VtlParser.LPAREN);
                  this.state = 1507;
                  this.match(_VtlParser.STRING_CONSTANT);
                  this.state = 1508;
                  this.match(_VtlParser.RPAREN);
                }
              }
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    havingClause() {
      let localctx = new HavingClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 114, _VtlParser.RULE_havingClause);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1513;
          this.match(_VtlParser.HAVING);
          this.state = 1514;
          this.exprComponent(0);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    parameterItem() {
      let localctx = new ParameterItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 116, _VtlParser.RULE_parameterItem);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1516;
          this.varID();
          this.state = 1517;
          this.inputParameterType();
          this.state = 1520;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 221) {
            {
              this.state = 1518;
              this.match(_VtlParser.DEFAULT);
              this.state = 1519;
              this.scalarItem();
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    outputParameterType() {
      let localctx = new OutputParameterTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 118, _VtlParser.RULE_outputParameterType);
      try {
        this.state = 1525;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 210:
          case 233:
          case 245:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1522;
              this.scalarType();
            }
            break;
          case 121:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1523;
              this.datasetType();
            }
            break;
          case 103:
          case 104:
          case 105:
          case 110:
          case 234:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1524;
              this.componentType();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    outputParameterTypeComponent() {
      let localctx = new OutputParameterTypeComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 120, _VtlParser.RULE_outputParameterTypeComponent);
      try {
        this.state = 1529;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 103:
          case 104:
          case 105:
          case 110:
          case 234:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1527;
              this.componentType();
            }
            break;
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 210:
          case 233:
          case 245:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1528;
              this.scalarType();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    inputParameterType() {
      let localctx = new InputParameterTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 122, _VtlParser.RULE_inputParameterType);
      try {
        this.state = 1536;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 210:
          case 233:
          case 245:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1531;
              this.scalarType();
            }
            break;
          case 121:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1532;
              this.datasetType();
            }
            break;
          case 239:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1533;
              this.scalarSetType();
            }
            break;
          case 125:
          case 126:
          case 127:
          case 235:
          case 236:
          case 237:
          case 238:
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 1534;
              this.rulesetType();
            }
            break;
          case 103:
          case 104:
          case 105:
          case 110:
          case 234:
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 1535;
              this.componentType();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    rulesetType() {
      let localctx = new RulesetTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 124, _VtlParser.RULE_rulesetType);
      try {
        this.state = 1541;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 127:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1538;
              this.match(_VtlParser.RULESET);
            }
            break;
          case 125:
          case 235:
          case 236:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1539;
              this.dpRuleset();
            }
            break;
          case 126:
          case 237:
          case 238:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1540;
              this.hrRuleset();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    scalarType() {
      let localctx = new ScalarTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 126, _VtlParser.RULE_scalarType);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1545;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 210:
            case 233:
              {
                this.state = 1543;
                this.basicScalarType();
              }
              break;
            case 245:
              {
                this.state = 1544;
                this.valueDomainName();
              }
              break;
            default:
              throw new dn(this);
          }
          this.state = 1548;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 3 || _la === 5) {
            {
              this.state = 1547;
              this.scalarTypeConstraint();
            }
          }
          this.state = 1554;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 50 || _la === 54) {
            {
              this.state = 1551;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 50) {
                {
                  this.state = 1550;
                  this.match(_VtlParser.NOT);
                }
              }
              this.state = 1553;
              this.match(_VtlParser.NULL_CONSTANT);
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    componentType() {
      let localctx = new ComponentTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 128, _VtlParser.RULE_componentType);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1556;
          this.componentRole();
          this.state = 1561;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 8) {
            {
              this.state = 1557;
              this.match(_VtlParser.LT);
              this.state = 1558;
              this.scalarType();
              this.state = 1559;
              this.match(_VtlParser.MT);
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    datasetType() {
      let localctx = new DatasetTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 130, _VtlParser.RULE_datasetType);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1563;
          this.match(_VtlParser.DATASET);
          this.state = 1575;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 5) {
            {
              this.state = 1564;
              this.match(_VtlParser.GLPAREN);
              this.state = 1565;
              this.compConstraint();
              this.state = 1570;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 17) {
                {
                  {
                    this.state = 1566;
                    this.match(_VtlParser.COMMA);
                    this.state = 1567;
                    this.compConstraint();
                  }
                }
                this.state = 1572;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 1573;
              this.match(_VtlParser.GRPAREN);
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    evalDatasetType() {
      let localctx = new EvalDatasetTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 132, _VtlParser.RULE_evalDatasetType);
      try {
        this.state = 1579;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 121:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1577;
              this.datasetType();
            }
            break;
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 210:
          case 233:
          case 245:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1578;
              this.scalarType();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    scalarSetType() {
      let localctx = new ScalarSetTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 134, _VtlParser.RULE_scalarSetType);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1581;
          this.match(_VtlParser.SET);
          this.state = 1586;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 8) {
            {
              this.state = 1582;
              this.match(_VtlParser.LT);
              this.state = 1583;
              this.scalarType();
              this.state = 1584;
              this.match(_VtlParser.MT);
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    dpRuleset() {
      let localctx = new DpRulesetContext(this, this._ctx, this.state);
      this.enterRule(localctx, 136, _VtlParser.RULE_dpRuleset);
      let _la;
      try {
        this.state = 1617;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 125:
            localctx = new DataPointContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1588;
              this.match(_VtlParser.DATAPOINT);
            }
            break;
          case 235:
            localctx = new DataPointVdContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1589;
              this.match(_VtlParser.DATAPOINT_ON_VD);
              this.state = 1601;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 5) {
                {
                  this.state = 1590;
                  this.match(_VtlParser.GLPAREN);
                  this.state = 1591;
                  this.valueDomainName();
                  this.state = 1596;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 15) {
                    {
                      {
                        this.state = 1592;
                        this.match(_VtlParser.MUL);
                        this.state = 1593;
                        this.valueDomainName();
                      }
                    }
                    this.state = 1598;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                  this.state = 1599;
                  this.match(_VtlParser.GRPAREN);
                }
              }
            }
            break;
          case 236:
            localctx = new DataPointVarContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1603;
              this.match(_VtlParser.DATAPOINT_ON_VAR);
              this.state = 1615;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 5) {
                {
                  this.state = 1604;
                  this.match(_VtlParser.GLPAREN);
                  this.state = 1605;
                  this.varID();
                  this.state = 1610;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 15) {
                    {
                      {
                        this.state = 1606;
                        this.match(_VtlParser.MUL);
                        this.state = 1607;
                        this.varID();
                      }
                    }
                    this.state = 1612;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                  this.state = 1613;
                  this.match(_VtlParser.GRPAREN);
                }
              }
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    hrRuleset() {
      let localctx = new HrRulesetContext(this, this._ctx, this.state);
      this.enterRule(localctx, 138, _VtlParser.RULE_hrRuleset);
      let _la;
      try {
        this.state = 1659;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 126:
            localctx = new HrRulesetTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1619;
              this.match(_VtlParser.HIERARCHICAL);
            }
            break;
          case 237:
            localctx = new HrRulesetVdTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1620;
              this.match(_VtlParser.HIERARCHICAL_ON_VD);
              this.state = 1637;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 5) {
                {
                  this.state = 1621;
                  this.match(_VtlParser.GLPAREN);
                  this.state = 1622;
                  localctx._vdName = this.match(_VtlParser.IDENTIFIER);
                  this.state = 1634;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === 1) {
                    {
                      this.state = 1623;
                      this.match(_VtlParser.LPAREN);
                      this.state = 1624;
                      this.valueDomainName();
                      this.state = 1629;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                      while (_la === 15) {
                        {
                          {
                            this.state = 1625;
                            this.match(_VtlParser.MUL);
                            this.state = 1626;
                            this.valueDomainName();
                          }
                        }
                        this.state = 1631;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                      }
                      this.state = 1632;
                      this.match(_VtlParser.RPAREN);
                    }
                  }
                  this.state = 1636;
                  this.match(_VtlParser.GRPAREN);
                }
              }
            }
            break;
          case 238:
            localctx = new HrRulesetVarTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1639;
              this.match(_VtlParser.HIERARCHICAL_ON_VAR);
              this.state = 1657;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 5) {
                {
                  this.state = 1640;
                  this.match(_VtlParser.GLPAREN);
                  this.state = 1641;
                  localctx._varName = this.varID();
                  this.state = 1653;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === 1) {
                    {
                      this.state = 1642;
                      this.match(_VtlParser.LPAREN);
                      this.state = 1643;
                      this.varID();
                      this.state = 1648;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                      while (_la === 15) {
                        {
                          {
                            this.state = 1644;
                            this.match(_VtlParser.MUL);
                            this.state = 1645;
                            this.varID();
                          }
                        }
                        this.state = 1650;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                      }
                      this.state = 1651;
                      this.match(_VtlParser.RPAREN);
                    }
                  }
                  this.state = 1655;
                  this.match(_VtlParser.GRPAREN);
                }
              }
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    valueDomainName() {
      let localctx = new ValueDomainNameContext(this, this._ctx, this.state);
      this.enterRule(localctx, 140, _VtlParser.RULE_valueDomainName);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1661;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    rulesetID() {
      let localctx = new RulesetIDContext(this, this._ctx, this.state);
      this.enterRule(localctx, 142, _VtlParser.RULE_rulesetID);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1663;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    rulesetSignature() {
      let localctx = new RulesetSignatureContext(this, this._ctx, this.state);
      this.enterRule(localctx, 144, _VtlParser.RULE_rulesetSignature);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1665;
          _la = this._input.LA(1);
          if (!(_la === 117 || _la === 118)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1666;
          this.signature();
          this.state = 1671;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1667;
                this.match(_VtlParser.COMMA);
                this.state = 1668;
                this.signature();
              }
            }
            this.state = 1673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    signature() {
      let localctx = new SignatureContext(this, this._ctx, this.state);
      this.enterRule(localctx, 146, _VtlParser.RULE_signature);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1674;
          this.varID();
          this.state = 1677;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 46) {
            {
              this.state = 1675;
              this.match(_VtlParser.AS);
              this.state = 1676;
              this.alias();
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    ruleClauseDatapoint() {
      let localctx = new RuleClauseDatapointContext(this, this._ctx, this.state);
      this.enterRule(localctx, 148, _VtlParser.RULE_ruleClauseDatapoint);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1679;
          this.ruleItemDatapoint();
          this.state = 1684;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 247) {
            {
              {
                this.state = 1680;
                this.match(_VtlParser.EOL);
                this.state = 1681;
                this.ruleItemDatapoint();
              }
            }
            this.state = 1686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    ruleItemDatapoint() {
      let localctx = new RuleItemDatapointContext(this, this._ctx, this.state);
      this.enterRule(localctx, 150, _VtlParser.RULE_ruleItemDatapoint);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1689;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 174, this._ctx)) {
            case 1:
              {
                this.state = 1687;
                localctx._ruleName = this.match(_VtlParser.IDENTIFIER);
                this.state = 1688;
                this.match(_VtlParser.COLON);
              }
              break;
          }
          this.state = 1695;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 185) {
            {
              this.state = 1691;
              this.match(_VtlParser.WHEN);
              this.state = 1692;
              localctx._antecedentContiditon = this.exprComponent(0);
              this.state = 1693;
              this.match(_VtlParser.THEN);
            }
          }
          this.state = 1697;
          localctx._consequentCondition = this.exprComponent(0);
          this.state = 1699;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 71) {
            {
              this.state = 1698;
              this.erCode();
            }
          }
          this.state = 1702;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 74) {
            {
              this.state = 1701;
              this.erLevel();
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    ruleClauseHierarchical() {
      let localctx = new RuleClauseHierarchicalContext(this, this._ctx, this.state);
      this.enterRule(localctx, 152, _VtlParser.RULE_ruleClauseHierarchical);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1704;
          this.ruleItemHierarchical();
          this.state = 1709;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 247) {
            {
              {
                this.state = 1705;
                this.match(_VtlParser.EOL);
                this.state = 1706;
                this.ruleItemHierarchical();
              }
            }
            this.state = 1711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    ruleItemHierarchical() {
      let localctx = new RuleItemHierarchicalContext(this, this._ctx, this.state);
      this.enterRule(localctx, 154, _VtlParser.RULE_ruleItemHierarchical);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1714;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 179, this._ctx)) {
            case 1:
              {
                this.state = 1712;
                localctx._ruleName = this.match(_VtlParser.IDENTIFIER);
                this.state = 1713;
                this.match(_VtlParser.COLON);
              }
              break;
          }
          this.state = 1716;
          this.codeItemRelation();
          this.state = 1718;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 71) {
            {
              this.state = 1717;
              this.erCode();
            }
          }
          this.state = 1721;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 74) {
            {
              this.state = 1720;
              this.erLevel();
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    hierRuleSignature() {
      let localctx = new HierRuleSignatureContext(this, this._ctx, this.state);
      this.enterRule(localctx, 156, _VtlParser.RULE_hierRuleSignature);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1723;
          _la = this._input.LA(1);
          if (!(_la === 117 || _la === 118)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1726;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 167) {
            {
              this.state = 1724;
              this.match(_VtlParser.CONDITION);
              this.state = 1725;
              this.valueDomainSignature();
            }
          }
          this.state = 1728;
          this.match(_VtlParser.RULE);
          this.state = 1729;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    valueDomainSignature() {
      let localctx = new ValueDomainSignatureContext(this, this._ctx, this.state);
      this.enterRule(localctx, 158, _VtlParser.RULE_valueDomainSignature);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1731;
          this.signature();
          this.state = 1736;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1732;
                this.match(_VtlParser.COMMA);
                this.state = 1733;
                this.signature();
              }
            }
            this.state = 1738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    codeItemRelation() {
      let localctx = new CodeItemRelationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 160, _VtlParser.RULE_codeItemRelation);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1743;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 185) {
            {
              this.state = 1739;
              this.match(_VtlParser.WHEN);
              this.state = 1740;
              this.exprComponent(0);
              this.state = 1741;
              this.match(_VtlParser.THEN);
            }
          }
          this.state = 1745;
          localctx._codetemRef = this.valueDomainValue();
          this.state = 1747;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) === 0 && (1 << _la & 8064) !== 0) {
            {
              this.state = 1746;
              this.comparisonOperand();
            }
          }
          this.state = 1749;
          this.codeItemRelationClause();
          this.state = 1753;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 13 || _la === 14 || (_la - 241 & ~31) === 0 && (1 << _la - 241 & 19) !== 0) {
            {
              {
                this.state = 1750;
                this.codeItemRelationClause();
              }
            }
            this.state = 1755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    codeItemRelationClause() {
      let localctx = new CodeItemRelationClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 162, _VtlParser.RULE_codeItemRelationClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1757;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 187, this._ctx)) {
            case 1:
              {
                this.state = 1756;
                localctx._opAdd = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === 13 || _la === 14)) {
                  localctx._opAdd = this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);
                  this.consume();
                }
              }
              break;
          }
          this.state = 1759;
          localctx._rightCodeItem = this.valueDomainValue();
          this.state = 1764;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 3) {
            {
              this.state = 1760;
              this.match(_VtlParser.QLPAREN);
              this.state = 1761;
              localctx._rightCondition = this.exprComponent(0);
              this.state = 1762;
              this.match(_VtlParser.QRPAREN);
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    valueDomainValue() {
      let localctx = new ValueDomainValueContext(this, this._ctx, this.state);
      this.enterRule(localctx, 164, _VtlParser.RULE_valueDomainValue);
      try {
        this.state = 1769;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 189, this._ctx)) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1766;
              this.match(_VtlParser.IDENTIFIER);
            }
            break;
          case 2:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1767;
              this.signedInteger();
            }
            break;
          case 3:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1768;
              this.signedNumber();
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    scalarTypeConstraint() {
      let localctx = new ScalarTypeConstraintContext(this, this._ctx, this.state);
      this.enterRule(localctx, 166, _VtlParser.RULE_scalarTypeConstraint);
      let _la;
      try {
        this.state = 1786;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 3:
            localctx = new ConditionConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1771;
              this.match(_VtlParser.QLPAREN);
              this.state = 1772;
              this.exprComponent(0);
              this.state = 1773;
              this.match(_VtlParser.QRPAREN);
            }
            break;
          case 5:
            localctx = new RangeConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1775;
              this.match(_VtlParser.GLPAREN);
              this.state = 1776;
              this.scalarItem();
              this.state = 1781;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 17) {
                {
                  {
                    this.state = 1777;
                    this.match(_VtlParser.COMMA);
                    this.state = 1778;
                    this.scalarItem();
                  }
                }
                this.state = 1783;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 1784;
              this.match(_VtlParser.GRPAREN);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    compConstraint() {
      let localctx = new CompConstraintContext(this, this._ctx, this.state);
      this.enterRule(localctx, 168, _VtlParser.RULE_compConstraint);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1788;
          this.componentType();
          this.state = 1791;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case 245:
              {
                this.state = 1789;
                this.componentID();
              }
              break;
            case 115:
              {
                this.state = 1790;
                this.multModifier();
              }
              break;
            default:
              throw new dn(this);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    multModifier() {
      let localctx = new MultModifierContext(this, this._ctx, this.state);
      this.enterRule(localctx, 170, _VtlParser.RULE_multModifier);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1793;
          this.match(_VtlParser.OPTIONAL);
          this.state = 1795;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 13 || _la === 15) {
            {
              this.state = 1794;
              _la = this._input.LA(1);
              if (!(_la === 13 || _la === 15)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    validationOutput() {
      let localctx = new ValidationOutputContext(this, this._ctx, this.state);
      this.enterRule(localctx, 172, _VtlParser.RULE_validationOutput);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1797;
          _la = this._input.LA(1);
          if (!(_la === 72 || _la === 116 || _la === 232)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    validationMode() {
      let localctx = new ValidationModeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 174, _VtlParser.RULE_validationMode);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1799;
          _la = this._input.LA(1);
          if (!((_la - 225 & ~31) === 0 && (1 << _la - 225 & 63) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    conditionClause() {
      let localctx = new ConditionClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 176, _VtlParser.RULE_conditionClause);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1801;
          this.match(_VtlParser.CONDITION);
          this.state = 1802;
          this.componentID();
          this.state = 1807;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1803;
                this.match(_VtlParser.COMMA);
                this.state = 1804;
                this.componentID();
              }
            }
            this.state = 1809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    inputMode() {
      let localctx = new InputModeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 178, _VtlParser.RULE_inputMode);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1810;
          _la = this._input.LA(1);
          if (!(_la === 121 || _la === 220)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    imbalanceExpr() {
      let localctx = new ImbalanceExprContext(this, this._ctx, this.state);
      this.enterRule(localctx, 180, _VtlParser.RULE_imbalanceExpr);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1812;
          this.match(_VtlParser.IMBALANCE);
          this.state = 1813;
          this.expr(0);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    inputModeHierarchy() {
      let localctx = new InputModeHierarchyContext(this, this._ctx, this.state);
      this.enterRule(localctx, 182, _VtlParser.RULE_inputModeHierarchy);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1815;
          _la = this._input.LA(1);
          if (!(_la === 121 || _la === 128 || _la === 219)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    outputModeHierarchy() {
      let localctx = new OutputModeHierarchyContext(this, this._ctx, this.state);
      this.enterRule(localctx, 184, _VtlParser.RULE_outputModeHierarchy);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1817;
          _la = this._input.LA(1);
          if (!(_la === 72 || _la === 224)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    alias() {
      let localctx = new AliasContext(this, this._ctx, this.state);
      this.enterRule(localctx, 186, _VtlParser.RULE_alias);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1819;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    varID() {
      let localctx = new VarIDContext(this, this._ctx, this.state);
      this.enterRule(localctx, 188, _VtlParser.RULE_varID);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1821;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    simpleComponentId() {
      let localctx = new SimpleComponentIdContext(this, this._ctx, this.state);
      this.enterRule(localctx, 190, _VtlParser.RULE_simpleComponentId);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1823;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    componentID() {
      let localctx = new ComponentIDContext(this, this._ctx, this.state);
      this.enterRule(localctx, 192, _VtlParser.RULE_componentID);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1825;
          this.match(_VtlParser.IDENTIFIER);
          this.state = 1828;
          this._errHandler.sync(this);
          switch (this._interp.adaptivePredict(this._input, 195, this._ctx)) {
            case 1:
              {
                this.state = 1826;
                this.match(_VtlParser.MEMBERSHIP);
                this.state = 1827;
                this.match(_VtlParser.IDENTIFIER);
              }
              break;
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    lists() {
      let localctx = new ListsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 194, _VtlParser.RULE_lists);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1830;
          this.match(_VtlParser.GLPAREN);
          this.state = 1831;
          this.scalarItem();
          this.state = 1836;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === 17) {
            {
              {
                this.state = 1832;
                this.match(_VtlParser.COMMA);
                this.state = 1833;
                this.scalarItem();
              }
            }
            this.state = 1838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1839;
          this.match(_VtlParser.GRPAREN);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    erCode() {
      let localctx = new ErCodeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 196, _VtlParser.RULE_erCode);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1841;
          this.match(_VtlParser.ERRORCODE);
          this.state = 1842;
          this.constant();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    erLevel() {
      let localctx = new ErLevelContext(this, this._ctx, this.state);
      this.enterRule(localctx, 198, _VtlParser.RULE_erLevel);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1844;
          this.match(_VtlParser.ERRORLEVEL);
          this.state = 1845;
          this.constant();
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    comparisonOperand() {
      let localctx = new ComparisonOperandContext(this, this._ctx, this.state);
      this.enterRule(localctx, 200, _VtlParser.RULE_comparisonOperand);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1847;
          _la = this._input.LA(1);
          if (!((_la & ~31) === 0 && (1 << _la & 8064) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    optionalExpr() {
      let localctx = new OptionalExprContext(this, this._ctx, this.state);
      this.enterRule(localctx, 202, _VtlParser.RULE_optionalExpr);
      try {
        this.state = 1851;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 1:
          case 13:
          case 14:
          case 22:
          case 23:
          case 24:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 50:
          case 51:
          case 54:
          case 55:
          case 57:
          case 59:
          case 60:
          case 61:
          case 66:
          case 67:
          case 80:
          case 81:
          case 85:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 108:
          case 111:
          case 113:
          case 114:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 161:
          case 162:
          case 163:
          case 164:
          case 193:
          case 194:
          case 195:
          case 196:
          case 208:
          case 211:
          case 218:
          case 222:
          case 223:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1849;
              this.expr(0);
            }
            break;
          case 115:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1850;
              this.match(_VtlParser.OPTIONAL);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    optionalExprComponent() {
      let localctx = new OptionalExprComponentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 204, _VtlParser.RULE_optionalExprComponent);
      try {
        this.state = 1855;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 1:
          case 13:
          case 14:
          case 22:
          case 23:
          case 24:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 50:
          case 51:
          case 54:
          case 55:
          case 61:
          case 77:
          case 80:
          case 81:
          case 85:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 108:
          case 111:
          case 113:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 140:
          case 141:
          case 142:
          case 143:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 161:
          case 162:
          case 163:
          case 164:
          case 208:
          case 211:
          case 218:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1853;
              this.exprComponent(0);
            }
            break;
          case 115:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1854;
              this.match(_VtlParser.OPTIONAL);
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    componentRole() {
      let localctx = new ComponentRoleContext(this, this._ctx, this.state);
      this.enterRule(localctx, 206, _VtlParser.RULE_componentRole);
      try {
        this.state = 1862;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 104:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1857;
              this.match(_VtlParser.MEASURE);
            }
            break;
          case 234:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1858;
              this.match(_VtlParser.COMPONENT);
            }
            break;
          case 103:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1859;
              this.match(_VtlParser.DIMENSION);
            }
            break;
          case 105:
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 1860;
              this.match(_VtlParser.ATTRIBUTE);
            }
            break;
          case 110:
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 1861;
              this.viralAttribute();
            }
            break;
          default:
            throw new dn(this);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    viralAttribute() {
      let localctx = new ViralAttributeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 208, _VtlParser.RULE_viralAttribute);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1864;
          this.match(_VtlParser.VIRAL);
          this.state = 1865;
          this.match(_VtlParser.ATTRIBUTE);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    valueDomainID() {
      let localctx = new ValueDomainIDContext(this, this._ctx, this.state);
      this.enterRule(localctx, 210, _VtlParser.RULE_valueDomainID);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1867;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    operatorID() {
      let localctx = new OperatorIDContext(this, this._ctx, this.state);
      this.enterRule(localctx, 212, _VtlParser.RULE_operatorID);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1869;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    routineName() {
      let localctx = new RoutineNameContext(this, this._ctx, this.state);
      this.enterRule(localctx, 214, _VtlParser.RULE_routineName);
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1871;
          this.match(_VtlParser.IDENTIFIER);
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    constant() {
      let localctx = new ConstantContext(this, this._ctx, this.state);
      this.enterRule(localctx, 216, _VtlParser.RULE_constant);
      try {
        this.state = 1878;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 200, this._ctx)) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            {
              this.state = 1873;
              this.signedInteger();
            }
            break;
          case 2:
            this.enterOuterAlt(localctx, 2);
            {
              this.state = 1874;
              this.signedNumber();
            }
            break;
          case 3:
            this.enterOuterAlt(localctx, 3);
            {
              this.state = 1875;
              this.match(_VtlParser.BOOLEAN_CONSTANT);
            }
            break;
          case 4:
            this.enterOuterAlt(localctx, 4);
            {
              this.state = 1876;
              this.match(_VtlParser.STRING_CONSTANT);
            }
            break;
          case 5:
            this.enterOuterAlt(localctx, 5);
            {
              this.state = 1877;
              this.match(_VtlParser.NULL_CONSTANT);
            }
            break;
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    basicScalarType() {
      let localctx = new BasicScalarTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 218, _VtlParser.RULE_basicScalarType);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1880;
          _la = this._input.LA(1);
          if (!((_la - 168 & ~31) === 0 && (1 << _la - 168 & 127) !== 0 || _la === 210 || _la === 233)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    // @RuleVersion(0)
    retainType() {
      let localctx = new RetainTypeContext(this, this._ctx, this.state);
      this.enterRule(localctx, 220, _VtlParser.RULE_retainType);
      let _la;
      try {
        this.enterOuterAlt(localctx, 1);
        {
          this.state = 1882;
          _la = this._input.LA(1);
          if (!(_la === 72 || _la === 243)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
        }
      } catch (re2) {
        if (re2 instanceof _n) {
          localctx.exception = re2;
          this._errHandler.reportError(this, re2);
          this._errHandler.recover(this, re2);
        } else {
          throw re2;
        }
      } finally {
        this.exitRule();
      }
      return localctx;
    }
    sempred(localctx, ruleIndex, predIndex) {
      switch (ruleIndex) {
        case 2:
          return this.expr_sempred(localctx, predIndex);
        case 3:
          return this.exprComponent_sempred(localctx, predIndex);
      }
      return true;
    }
    expr_sempred(localctx, predIndex) {
      switch (predIndex) {
        case 0:
          return this.precpred(this._ctx, 10);
        case 1:
          return this.precpred(this._ctx, 9);
        case 2:
          return this.precpred(this._ctx, 8);
        case 3:
          return this.precpred(this._ctx, 6);
        case 4:
          return this.precpred(this._ctx, 5);
        case 5:
          return this.precpred(this._ctx, 13);
        case 6:
          return this.precpred(this._ctx, 12);
        case 7:
          return this.precpred(this._ctx, 7);
      }
      return true;
    }
    exprComponent_sempred(localctx, predIndex) {
      switch (predIndex) {
        case 8:
          return this.precpred(this._ctx, 10);
        case 9:
          return this.precpred(this._ctx, 9);
        case 10:
          return this.precpred(this._ctx, 8);
        case 11:
          return this.precpred(this._ctx, 6);
        case 12:
          return this.precpred(this._ctx, 5);
        case 13:
          return this.precpred(this._ctx, 7);
      }
      return true;
    }
    static {
      this._serializedATN = [
        4,
        1,
        249,
        1885,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        1,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        226,
        8,
        0,
        10,
        0,
        12,
        0,
        229,
        9,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        242,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        4,
        2,
        265,
        8,
        2,
        11,
        2,
        12,
        2,
        266,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        274,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        304,
        8,
        2,
        5,
        2,
        306,
        8,
        2,
        10,
        2,
        12,
        2,
        309,
        9,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        4,
        3,
        332,
        8,
        3,
        11,
        3,
        12,
        3,
        333,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        341,
        8,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        363,
        8,
        3,
        5,
        3,
        365,
        8,
        3,
        10,
        3,
        12,
        3,
        368,
        9,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        378,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        392,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        401,
        8,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        5,
        7,
        407,
        8,
        7,
        10,
        7,
        12,
        7,
        410,
        9,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        416,
        8,
        8,
        3,
        8,
        418,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        427,
        8,
        10,
        10,
        10,
        12,
        10,
        430,
        9,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        5,
        11,
        436,
        8,
        11,
        10,
        11,
        12,
        11,
        439,
        9,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        5,
        13,
        454,
        8,
        13,
        10,
        13,
        12,
        13,
        457,
        9,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        5,
        14,
        463,
        8,
        14,
        10,
        14,
        12,
        14,
        466,
        9,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        3,
        15,
        480,
        8,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        489,
        8,
        16,
        10,
        16,
        12,
        16,
        492,
        9,
        16,
        3,
        16,
        494,
        8,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        499,
        8,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        532,
        8,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        5,
        17,
        539,
        8,
        17,
        10,
        17,
        12,
        17,
        542,
        9,
        17,
        3,
        17,
        544,
        8,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        554,
        8,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        559,
        8,
        17,
        5,
        17,
        561,
        8,
        17,
        10,
        17,
        12,
        17,
        564,
        9,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        569,
        8,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        573,
        8,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        583,
        8,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        587,
        8,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        591,
        8,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        5,
        18,
        598,
        8,
        18,
        10,
        18,
        12,
        18,
        601,
        9,
        18,
        3,
        18,
        603,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        613,
        8,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        617,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        627,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        632,
        8,
        18,
        5,
        18,
        634,
        8,
        18,
        10,
        18,
        12,
        18,
        637,
        9,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        642,
        8,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        646,
        8,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        650,
        8,
        18,
        1,
        19,
        1,
        19,
        3,
        19,
        654,
        8,
        19,
        1,
        20,
        1,
        20,
        3,
        20,
        658,
        8,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        674,
        8,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        678,
        8,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        689,
        8,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        700,
        8,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        704,
        8,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        708,
        8,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        724,
        8,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        728,
        8,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        739,
        8,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        750,
        8,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        754,
        8,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        758,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        770,
        8,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        781,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        3,
        24,
        793,
        8,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        3,
        24,
        804,
        8,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        834,
        8,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        838,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        3,
        26,
        861,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        866,
        8,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        874,
        8,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        895,
        8,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        899,
        8,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        903,
        8,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        965,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        970,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        978,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        999,
        8,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        1003,
        8,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        1007,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        1069,
        8,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        4,
        29,
        1076,
        8,
        29,
        11,
        29,
        12,
        29,
        1077,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        4,
        29,
        1087,
        8,
        29,
        11,
        29,
        12,
        29,
        1088,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        1100,
        8,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        1108,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        1112,
        8,
        30,
        1,
        30,
        3,
        30,
        1115,
        8,
        30,
        1,
        30,
        3,
        30,
        1118,
        8,
        30,
        1,
        30,
        3,
        30,
        1121,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        5,
        31,
        1134,
        8,
        31,
        10,
        31,
        12,
        31,
        1137,
        9,
        31,
        3,
        31,
        1139,
        8,
        31,
        1,
        31,
        3,
        31,
        1142,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        1152,
        8,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        1156,
        8,
        31,
        1,
        31,
        3,
        31,
        1159,
        8,
        31,
        1,
        31,
        3,
        31,
        1162,
        8,
        31,
        1,
        31,
        3,
        31,
        1165,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        1173,
        8,
        31,
        1,
        31,
        3,
        31,
        1176,
        8,
        31,
        1,
        31,
        3,
        31,
        1179,
        8,
        31,
        1,
        31,
        3,
        31,
        1182,
        8,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        1186,
        8,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        1210,
        8,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        1217,
        8,
        35,
        3,
        35,
        1219,
        8,
        35,
        1,
        35,
        1,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        1229,
        8,
        36,
        1,
        36,
        3,
        36,
        1232,
        8,
        36,
        1,
        36,
        3,
        36,
        1235,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        1247,
        8,
        36,
        3,
        36,
        1249,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        1254,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        1270,
        8,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        1278,
        8,
        37,
        1,
        37,
        3,
        37,
        1281,
        8,
        37,
        1,
        37,
        3,
        37,
        1284,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        1295,
        8,
        37,
        3,
        37,
        1297,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        1302,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        1314,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        1330,
        8,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        5,
        39,
        1339,
        8,
        39,
        10,
        39,
        12,
        39,
        1342,
        9,
        39,
        1,
        40,
        3,
        40,
        1345,
        8,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        41,
        3,
        41,
        1352,
        8,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        1370,
        8,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        1374,
        8,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        5,
        44,
        1379,
        8,
        44,
        10,
        44,
        12,
        44,
        1382,
        9,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        5,
        45,
        1387,
        8,
        45,
        10,
        45,
        12,
        45,
        1390,
        9,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        5,
        45,
        1396,
        8,
        45,
        10,
        45,
        12,
        45,
        1399,
        9,
        45,
        3,
        45,
        1401,
        8,
        45,
        1,
        46,
        1,
        46,
        1,
        46,
        3,
        46,
        1406,
        8,
        46,
        1,
        47,
        3,
        47,
        1409,
        8,
        47,
        1,
        47,
        1,
        47,
        1,
        47,
        3,
        47,
        1414,
        8,
        47,
        1,
        47,
        3,
        47,
        1417,
        8,
        47,
        1,
        47,
        3,
        47,
        1420,
        8,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        5,
        49,
        1430,
        8,
        49,
        10,
        49,
        12,
        49,
        1433,
        9,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        5,
        50,
        1440,
        8,
        50,
        10,
        50,
        12,
        50,
        1443,
        9,
        50,
        1,
        51,
        1,
        51,
        3,
        51,
        1447,
        8,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1452,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        53,
        3,
        53,
        1460,
        8,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        3,
        54,
        1465,
        8,
        54,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        3,
        55,
        1482,
        8,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        5,
        56,
        1489,
        8,
        56,
        10,
        56,
        12,
        56,
        1492,
        9,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1499,
        8,
        56,
        1,
        56,
        3,
        56,
        1502,
        8,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1510,
        8,
        56,
        3,
        56,
        1512,
        8,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        1521,
        8,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        3,
        59,
        1526,
        8,
        59,
        1,
        60,
        1,
        60,
        3,
        60,
        1530,
        8,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        3,
        61,
        1537,
        8,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        3,
        62,
        1542,
        8,
        62,
        1,
        63,
        1,
        63,
        3,
        63,
        1546,
        8,
        63,
        1,
        63,
        3,
        63,
        1549,
        8,
        63,
        1,
        63,
        3,
        63,
        1552,
        8,
        63,
        1,
        63,
        3,
        63,
        1555,
        8,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        3,
        64,
        1562,
        8,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        5,
        65,
        1569,
        8,
        65,
        10,
        65,
        12,
        65,
        1572,
        9,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        1576,
        8,
        65,
        1,
        66,
        1,
        66,
        3,
        66,
        1580,
        8,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1587,
        8,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        5,
        68,
        1595,
        8,
        68,
        10,
        68,
        12,
        68,
        1598,
        9,
        68,
        1,
        68,
        1,
        68,
        3,
        68,
        1602,
        8,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        5,
        68,
        1609,
        8,
        68,
        10,
        68,
        12,
        68,
        1612,
        9,
        68,
        1,
        68,
        1,
        68,
        3,
        68,
        1616,
        8,
        68,
        3,
        68,
        1618,
        8,
        68,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        5,
        69,
        1628,
        8,
        69,
        10,
        69,
        12,
        69,
        1631,
        9,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1635,
        8,
        69,
        1,
        69,
        3,
        69,
        1638,
        8,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        5,
        69,
        1647,
        8,
        69,
        10,
        69,
        12,
        69,
        1650,
        9,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1654,
        8,
        69,
        1,
        69,
        1,
        69,
        3,
        69,
        1658,
        8,
        69,
        3,
        69,
        1660,
        8,
        69,
        1,
        70,
        1,
        70,
        1,
        71,
        1,
        71,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        5,
        72,
        1670,
        8,
        72,
        10,
        72,
        12,
        72,
        1673,
        9,
        72,
        1,
        73,
        1,
        73,
        1,
        73,
        3,
        73,
        1678,
        8,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        5,
        74,
        1683,
        8,
        74,
        10,
        74,
        12,
        74,
        1686,
        9,
        74,
        1,
        75,
        1,
        75,
        3,
        75,
        1690,
        8,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        3,
        75,
        1696,
        8,
        75,
        1,
        75,
        1,
        75,
        3,
        75,
        1700,
        8,
        75,
        1,
        75,
        3,
        75,
        1703,
        8,
        75,
        1,
        76,
        1,
        76,
        1,
        76,
        5,
        76,
        1708,
        8,
        76,
        10,
        76,
        12,
        76,
        1711,
        9,
        76,
        1,
        77,
        1,
        77,
        3,
        77,
        1715,
        8,
        77,
        1,
        77,
        1,
        77,
        3,
        77,
        1719,
        8,
        77,
        1,
        77,
        3,
        77,
        1722,
        8,
        77,
        1,
        78,
        1,
        78,
        1,
        78,
        3,
        78,
        1727,
        8,
        78,
        1,
        78,
        1,
        78,
        1,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        5,
        79,
        1735,
        8,
        79,
        10,
        79,
        12,
        79,
        1738,
        9,
        79,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1744,
        8,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1748,
        8,
        80,
        1,
        80,
        1,
        80,
        5,
        80,
        1752,
        8,
        80,
        10,
        80,
        12,
        80,
        1755,
        9,
        80,
        1,
        81,
        3,
        81,
        1758,
        8,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        3,
        81,
        1765,
        8,
        81,
        1,
        82,
        1,
        82,
        1,
        82,
        3,
        82,
        1770,
        8,
        82,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        5,
        83,
        1780,
        8,
        83,
        10,
        83,
        12,
        83,
        1783,
        9,
        83,
        1,
        83,
        1,
        83,
        3,
        83,
        1787,
        8,
        83,
        1,
        84,
        1,
        84,
        1,
        84,
        3,
        84,
        1792,
        8,
        84,
        1,
        85,
        1,
        85,
        3,
        85,
        1796,
        8,
        85,
        1,
        86,
        1,
        86,
        1,
        87,
        1,
        87,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        5,
        88,
        1806,
        8,
        88,
        10,
        88,
        12,
        88,
        1809,
        9,
        88,
        1,
        89,
        1,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        93,
        1,
        93,
        1,
        94,
        1,
        94,
        1,
        95,
        1,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        3,
        96,
        1829,
        8,
        96,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        5,
        97,
        1835,
        8,
        97,
        10,
        97,
        12,
        97,
        1838,
        9,
        97,
        1,
        97,
        1,
        97,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        100,
        1,
        100,
        1,
        101,
        1,
        101,
        3,
        101,
        1852,
        8,
        101,
        1,
        102,
        1,
        102,
        3,
        102,
        1856,
        8,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        3,
        103,
        1863,
        8,
        103,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        105,
        1,
        105,
        1,
        106,
        1,
        106,
        1,
        107,
        1,
        107,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        3,
        108,
        1879,
        8,
        108,
        1,
        109,
        1,
        109,
        1,
        110,
        1,
        110,
        1,
        110,
        0,
        2,
        4,
        6,
        111,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        0,
        35,
        2,
        0,
        13,
        14,
        50,
        50,
        1,
        0,
        15,
        16,
        2,
        0,
        13,
        14,
        94,
        94,
        1,
        0,
        48,
        49,
        1,
        0,
        52,
        53,
        1,
        0,
        41,
        42,
        2,
        0,
        202,
        202,
        204,
        204,
        1,
        0,
        193,
        194,
        1,
        0,
        195,
        196,
        3,
        0,
        93,
        93,
        95,
        97,
        131,
        132,
        4,
        0,
        85,
        85,
        87,
        87,
        108,
        108,
        135,
        137,
        1,
        0,
        89,
        90,
        3,
        0,
        61,
        61,
        88,
        88,
        91,
        92,
        2,
        0,
        72,
        72,
        209,
        209,
        1,
        0,
        162,
        163,
        2,
        0,
        115,
        115,
        244,
        244,
        1,
        0,
        82,
        83,
        2,
        0,
        59,
        59,
        139,
        139,
        2,
        0,
        72,
        72,
        116,
        116,
        3,
        0,
        80,
        81,
        99,
        102,
        140,
        143,
        4,
        0,
        80,
        81,
        99,
        102,
        140,
        143,
        147,
        148,
        1,
        0,
        149,
        150,
        1,
        0,
        78,
        79,
        1,
        0,
        13,
        14,
        2,
        0,
        76,
        76,
        145,
        145,
        1,
        0,
        117,
        118,
        2,
        0,
        13,
        13,
        15,
        15,
        3,
        0,
        72,
        72,
        116,
        116,
        232,
        232,
        1,
        0,
        225,
        230,
        2,
        0,
        121,
        121,
        220,
        220,
        3,
        0,
        121,
        121,
        128,
        128,
        219,
        219,
        2,
        0,
        72,
        72,
        224,
        224,
        1,
        0,
        7,
        12,
        3,
        0,
        168,
        174,
        210,
        210,
        233,
        233,
        2,
        0,
        72,
        72,
        243,
        243,
        2082,
        0,
        227,
        1,
        0,
        0,
        0,
        2,
        241,
        1,
        0,
        0,
        0,
        4,
        273,
        1,
        0,
        0,
        0,
        6,
        340,
        1,
        0,
        0,
        0,
        8,
        377,
        1,
        0,
        0,
        0,
        10,
        391,
        1,
        0,
        0,
        0,
        12,
        400,
        1,
        0,
        0,
        0,
        14,
        402,
        1,
        0,
        0,
        0,
        16,
        411,
        1,
        0,
        0,
        0,
        18,
        419,
        1,
        0,
        0,
        0,
        20,
        422,
        1,
        0,
        0,
        0,
        22,
        431,
        1,
        0,
        0,
        0,
        24,
        440,
        1,
        0,
        0,
        0,
        26,
        445,
        1,
        0,
        0,
        0,
        28,
        458,
        1,
        0,
        0,
        0,
        30,
        479,
        1,
        0,
        0,
        0,
        32,
        531,
        1,
        0,
        0,
        0,
        34,
        590,
        1,
        0,
        0,
        0,
        36,
        649,
        1,
        0,
        0,
        0,
        38,
        653,
        1,
        0,
        0,
        0,
        40,
        657,
        1,
        0,
        0,
        0,
        42,
        707,
        1,
        0,
        0,
        0,
        44,
        757,
        1,
        0,
        0,
        0,
        46,
        780,
        1,
        0,
        0,
        0,
        48,
        803,
        1,
        0,
        0,
        0,
        50,
        837,
        1,
        0,
        0,
        0,
        52,
        860,
        1,
        0,
        0,
        0,
        54,
        964,
        1,
        0,
        0,
        0,
        56,
        1068,
        1,
        0,
        0,
        0,
        58,
        1099,
        1,
        0,
        0,
        0,
        60,
        1101,
        1,
        0,
        0,
        0,
        62,
        1185,
        1,
        0,
        0,
        0,
        64,
        1187,
        1,
        0,
        0,
        0,
        66,
        1194,
        1,
        0,
        0,
        0,
        68,
        1209,
        1,
        0,
        0,
        0,
        70,
        1211,
        1,
        0,
        0,
        0,
        72,
        1269,
        1,
        0,
        0,
        0,
        74,
        1329,
        1,
        0,
        0,
        0,
        76,
        1331,
        1,
        0,
        0,
        0,
        78,
        1335,
        1,
        0,
        0,
        0,
        80,
        1344,
        1,
        0,
        0,
        0,
        82,
        1351,
        1,
        0,
        0,
        0,
        84,
        1357,
        1,
        0,
        0,
        0,
        86,
        1373,
        1,
        0,
        0,
        0,
        88,
        1375,
        1,
        0,
        0,
        0,
        90,
        1383,
        1,
        0,
        0,
        0,
        92,
        1402,
        1,
        0,
        0,
        0,
        94,
        1408,
        1,
        0,
        0,
        0,
        96,
        1421,
        1,
        0,
        0,
        0,
        98,
        1424,
        1,
        0,
        0,
        0,
        100,
        1434,
        1,
        0,
        0,
        0,
        102,
        1444,
        1,
        0,
        0,
        0,
        104,
        1451,
        1,
        0,
        0,
        0,
        106,
        1459,
        1,
        0,
        0,
        0,
        108,
        1464,
        1,
        0,
        0,
        0,
        110,
        1481,
        1,
        0,
        0,
        0,
        112,
        1511,
        1,
        0,
        0,
        0,
        114,
        1513,
        1,
        0,
        0,
        0,
        116,
        1516,
        1,
        0,
        0,
        0,
        118,
        1525,
        1,
        0,
        0,
        0,
        120,
        1529,
        1,
        0,
        0,
        0,
        122,
        1536,
        1,
        0,
        0,
        0,
        124,
        1541,
        1,
        0,
        0,
        0,
        126,
        1545,
        1,
        0,
        0,
        0,
        128,
        1556,
        1,
        0,
        0,
        0,
        130,
        1563,
        1,
        0,
        0,
        0,
        132,
        1579,
        1,
        0,
        0,
        0,
        134,
        1581,
        1,
        0,
        0,
        0,
        136,
        1617,
        1,
        0,
        0,
        0,
        138,
        1659,
        1,
        0,
        0,
        0,
        140,
        1661,
        1,
        0,
        0,
        0,
        142,
        1663,
        1,
        0,
        0,
        0,
        144,
        1665,
        1,
        0,
        0,
        0,
        146,
        1674,
        1,
        0,
        0,
        0,
        148,
        1679,
        1,
        0,
        0,
        0,
        150,
        1689,
        1,
        0,
        0,
        0,
        152,
        1704,
        1,
        0,
        0,
        0,
        154,
        1714,
        1,
        0,
        0,
        0,
        156,
        1723,
        1,
        0,
        0,
        0,
        158,
        1731,
        1,
        0,
        0,
        0,
        160,
        1743,
        1,
        0,
        0,
        0,
        162,
        1757,
        1,
        0,
        0,
        0,
        164,
        1769,
        1,
        0,
        0,
        0,
        166,
        1786,
        1,
        0,
        0,
        0,
        168,
        1788,
        1,
        0,
        0,
        0,
        170,
        1793,
        1,
        0,
        0,
        0,
        172,
        1797,
        1,
        0,
        0,
        0,
        174,
        1799,
        1,
        0,
        0,
        0,
        176,
        1801,
        1,
        0,
        0,
        0,
        178,
        1810,
        1,
        0,
        0,
        0,
        180,
        1812,
        1,
        0,
        0,
        0,
        182,
        1815,
        1,
        0,
        0,
        0,
        184,
        1817,
        1,
        0,
        0,
        0,
        186,
        1819,
        1,
        0,
        0,
        0,
        188,
        1821,
        1,
        0,
        0,
        0,
        190,
        1823,
        1,
        0,
        0,
        0,
        192,
        1825,
        1,
        0,
        0,
        0,
        194,
        1830,
        1,
        0,
        0,
        0,
        196,
        1841,
        1,
        0,
        0,
        0,
        198,
        1844,
        1,
        0,
        0,
        0,
        200,
        1847,
        1,
        0,
        0,
        0,
        202,
        1851,
        1,
        0,
        0,
        0,
        204,
        1855,
        1,
        0,
        0,
        0,
        206,
        1862,
        1,
        0,
        0,
        0,
        208,
        1864,
        1,
        0,
        0,
        0,
        210,
        1867,
        1,
        0,
        0,
        0,
        212,
        1869,
        1,
        0,
        0,
        0,
        214,
        1871,
        1,
        0,
        0,
        0,
        216,
        1878,
        1,
        0,
        0,
        0,
        218,
        1880,
        1,
        0,
        0,
        0,
        220,
        1882,
        1,
        0,
        0,
        0,
        222,
        223,
        3,
        2,
        1,
        0,
        223,
        224,
        5,
        247,
        0,
        0,
        224,
        226,
        1,
        0,
        0,
        0,
        225,
        222,
        1,
        0,
        0,
        0,
        226,
        229,
        1,
        0,
        0,
        0,
        227,
        225,
        1,
        0,
        0,
        0,
        227,
        228,
        1,
        0,
        0,
        0,
        228,
        230,
        1,
        0,
        0,
        0,
        229,
        227,
        1,
        0,
        0,
        0,
        230,
        231,
        5,
        0,
        0,
        1,
        231,
        1,
        1,
        0,
        0,
        0,
        232,
        233,
        3,
        188,
        94,
        0,
        233,
        234,
        5,
        20,
        0,
        0,
        234,
        235,
        3,
        4,
        2,
        0,
        235,
        242,
        1,
        0,
        0,
        0,
        236,
        237,
        3,
        188,
        94,
        0,
        237,
        238,
        5,
        124,
        0,
        0,
        238,
        239,
        3,
        4,
        2,
        0,
        239,
        242,
        1,
        0,
        0,
        0,
        240,
        242,
        3,
        32,
        16,
        0,
        241,
        232,
        1,
        0,
        0,
        0,
        241,
        236,
        1,
        0,
        0,
        0,
        241,
        240,
        1,
        0,
        0,
        0,
        242,
        3,
        1,
        0,
        0,
        0,
        243,
        244,
        6,
        2,
        -1,
        0,
        244,
        245,
        5,
        1,
        0,
        0,
        245,
        246,
        3,
        4,
        2,
        0,
        246,
        247,
        5,
        2,
        0,
        0,
        247,
        274,
        1,
        0,
        0,
        0,
        248,
        274,
        3,
        10,
        5,
        0,
        249,
        250,
        7,
        0,
        0,
        0,
        250,
        274,
        3,
        4,
        2,
        11,
        251,
        252,
        5,
        23,
        0,
        0,
        252,
        253,
        3,
        4,
        2,
        0,
        253,
        254,
        5,
        25,
        0,
        0,
        254,
        255,
        3,
        4,
        2,
        0,
        255,
        256,
        5,
        26,
        0,
        0,
        256,
        257,
        3,
        4,
        2,
        4,
        257,
        274,
        1,
        0,
        0,
        0,
        258,
        264,
        5,
        24,
        0,
        0,
        259,
        260,
        5,
        185,
        0,
        0,
        260,
        261,
        3,
        4,
        2,
        0,
        261,
        262,
        5,
        25,
        0,
        0,
        262,
        263,
        3,
        4,
        2,
        0,
        263,
        265,
        1,
        0,
        0,
        0,
        264,
        259,
        1,
        0,
        0,
        0,
        265,
        266,
        1,
        0,
        0,
        0,
        266,
        264,
        1,
        0,
        0,
        0,
        266,
        267,
        1,
        0,
        0,
        0,
        267,
        268,
        1,
        0,
        0,
        0,
        268,
        269,
        5,
        26,
        0,
        0,
        269,
        270,
        3,
        4,
        2,
        3,
        270,
        274,
        1,
        0,
        0,
        0,
        271,
        274,
        3,
        216,
        108,
        0,
        272,
        274,
        3,
        188,
        94,
        0,
        273,
        243,
        1,
        0,
        0,
        0,
        273,
        248,
        1,
        0,
        0,
        0,
        273,
        249,
        1,
        0,
        0,
        0,
        273,
        251,
        1,
        0,
        0,
        0,
        273,
        258,
        1,
        0,
        0,
        0,
        273,
        271,
        1,
        0,
        0,
        0,
        273,
        272,
        1,
        0,
        0,
        0,
        274,
        307,
        1,
        0,
        0,
        0,
        275,
        276,
        10,
        10,
        0,
        0,
        276,
        277,
        7,
        1,
        0,
        0,
        277,
        306,
        3,
        4,
        2,
        11,
        278,
        279,
        10,
        9,
        0,
        0,
        279,
        280,
        7,
        2,
        0,
        0,
        280,
        306,
        3,
        4,
        2,
        10,
        281,
        282,
        10,
        8,
        0,
        0,
        282,
        283,
        3,
        200,
        100,
        0,
        283,
        284,
        3,
        4,
        2,
        9,
        284,
        306,
        1,
        0,
        0,
        0,
        285,
        286,
        10,
        6,
        0,
        0,
        286,
        287,
        5,
        47,
        0,
        0,
        287,
        306,
        3,
        4,
        2,
        7,
        288,
        289,
        10,
        5,
        0,
        0,
        289,
        290,
        7,
        3,
        0,
        0,
        290,
        306,
        3,
        4,
        2,
        6,
        291,
        292,
        10,
        13,
        0,
        0,
        292,
        293,
        5,
        3,
        0,
        0,
        293,
        294,
        3,
        12,
        6,
        0,
        294,
        295,
        5,
        4,
        0,
        0,
        295,
        306,
        1,
        0,
        0,
        0,
        296,
        297,
        10,
        12,
        0,
        0,
        297,
        298,
        5,
        21,
        0,
        0,
        298,
        306,
        3,
        190,
        95,
        0,
        299,
        300,
        10,
        7,
        0,
        0,
        300,
        303,
        7,
        4,
        0,
        0,
        301,
        304,
        3,
        194,
        97,
        0,
        302,
        304,
        3,
        210,
        105,
        0,
        303,
        301,
        1,
        0,
        0,
        0,
        303,
        302,
        1,
        0,
        0,
        0,
        304,
        306,
        1,
        0,
        0,
        0,
        305,
        275,
        1,
        0,
        0,
        0,
        305,
        278,
        1,
        0,
        0,
        0,
        305,
        281,
        1,
        0,
        0,
        0,
        305,
        285,
        1,
        0,
        0,
        0,
        305,
        288,
        1,
        0,
        0,
        0,
        305,
        291,
        1,
        0,
        0,
        0,
        305,
        296,
        1,
        0,
        0,
        0,
        305,
        299,
        1,
        0,
        0,
        0,
        306,
        309,
        1,
        0,
        0,
        0,
        307,
        305,
        1,
        0,
        0,
        0,
        307,
        308,
        1,
        0,
        0,
        0,
        308,
        5,
        1,
        0,
        0,
        0,
        309,
        307,
        1,
        0,
        0,
        0,
        310,
        311,
        6,
        3,
        -1,
        0,
        311,
        312,
        5,
        1,
        0,
        0,
        312,
        313,
        3,
        6,
        3,
        0,
        313,
        314,
        5,
        2,
        0,
        0,
        314,
        341,
        1,
        0,
        0,
        0,
        315,
        341,
        3,
        8,
        4,
        0,
        316,
        317,
        7,
        0,
        0,
        0,
        317,
        341,
        3,
        6,
        3,
        11,
        318,
        319,
        5,
        23,
        0,
        0,
        319,
        320,
        3,
        6,
        3,
        0,
        320,
        321,
        5,
        25,
        0,
        0,
        321,
        322,
        3,
        6,
        3,
        0,
        322,
        323,
        5,
        26,
        0,
        0,
        323,
        324,
        3,
        6,
        3,
        4,
        324,
        341,
        1,
        0,
        0,
        0,
        325,
        331,
        5,
        24,
        0,
        0,
        326,
        327,
        5,
        185,
        0,
        0,
        327,
        328,
        3,
        6,
        3,
        0,
        328,
        329,
        5,
        25,
        0,
        0,
        329,
        330,
        3,
        6,
        3,
        0,
        330,
        332,
        1,
        0,
        0,
        0,
        331,
        326,
        1,
        0,
        0,
        0,
        332,
        333,
        1,
        0,
        0,
        0,
        333,
        331,
        1,
        0,
        0,
        0,
        333,
        334,
        1,
        0,
        0,
        0,
        334,
        335,
        1,
        0,
        0,
        0,
        335,
        336,
        5,
        26,
        0,
        0,
        336,
        337,
        3,
        6,
        3,
        3,
        337,
        341,
        1,
        0,
        0,
        0,
        338,
        341,
        3,
        216,
        108,
        0,
        339,
        341,
        3,
        192,
        96,
        0,
        340,
        310,
        1,
        0,
        0,
        0,
        340,
        315,
        1,
        0,
        0,
        0,
        340,
        316,
        1,
        0,
        0,
        0,
        340,
        318,
        1,
        0,
        0,
        0,
        340,
        325,
        1,
        0,
        0,
        0,
        340,
        338,
        1,
        0,
        0,
        0,
        340,
        339,
        1,
        0,
        0,
        0,
        341,
        366,
        1,
        0,
        0,
        0,
        342,
        343,
        10,
        10,
        0,
        0,
        343,
        344,
        7,
        1,
        0,
        0,
        344,
        365,
        3,
        6,
        3,
        11,
        345,
        346,
        10,
        9,
        0,
        0,
        346,
        347,
        7,
        2,
        0,
        0,
        347,
        365,
        3,
        6,
        3,
        10,
        348,
        349,
        10,
        8,
        0,
        0,
        349,
        350,
        3,
        200,
        100,
        0,
        350,
        351,
        3,
        6,
        3,
        9,
        351,
        365,
        1,
        0,
        0,
        0,
        352,
        353,
        10,
        6,
        0,
        0,
        353,
        354,
        5,
        47,
        0,
        0,
        354,
        365,
        3,
        6,
        3,
        7,
        355,
        356,
        10,
        5,
        0,
        0,
        356,
        357,
        7,
        3,
        0,
        0,
        357,
        365,
        3,
        6,
        3,
        6,
        358,
        359,
        10,
        7,
        0,
        0,
        359,
        362,
        7,
        4,
        0,
        0,
        360,
        363,
        3,
        194,
        97,
        0,
        361,
        363,
        3,
        210,
        105,
        0,
        362,
        360,
        1,
        0,
        0,
        0,
        362,
        361,
        1,
        0,
        0,
        0,
        363,
        365,
        1,
        0,
        0,
        0,
        364,
        342,
        1,
        0,
        0,
        0,
        364,
        345,
        1,
        0,
        0,
        0,
        364,
        348,
        1,
        0,
        0,
        0,
        364,
        352,
        1,
        0,
        0,
        0,
        364,
        355,
        1,
        0,
        0,
        0,
        364,
        358,
        1,
        0,
        0,
        0,
        365,
        368,
        1,
        0,
        0,
        0,
        366,
        364,
        1,
        0,
        0,
        0,
        366,
        367,
        1,
        0,
        0,
        0,
        367,
        7,
        1,
        0,
        0,
        0,
        368,
        366,
        1,
        0,
        0,
        0,
        369,
        378,
        3,
        36,
        18,
        0,
        370,
        378,
        3,
        44,
        22,
        0,
        371,
        378,
        3,
        48,
        24,
        0,
        372,
        378,
        3,
        52,
        26,
        0,
        373,
        378,
        3,
        56,
        28,
        0,
        374,
        378,
        3,
        66,
        33,
        0,
        375,
        378,
        3,
        68,
        34,
        0,
        376,
        378,
        3,
        74,
        37,
        0,
        377,
        369,
        1,
        0,
        0,
        0,
        377,
        370,
        1,
        0,
        0,
        0,
        377,
        371,
        1,
        0,
        0,
        0,
        377,
        372,
        1,
        0,
        0,
        0,
        377,
        373,
        1,
        0,
        0,
        0,
        377,
        374,
        1,
        0,
        0,
        0,
        377,
        375,
        1,
        0,
        0,
        0,
        377,
        376,
        1,
        0,
        0,
        0,
        378,
        9,
        1,
        0,
        0,
        0,
        379,
        392,
        3,
        30,
        15,
        0,
        380,
        392,
        3,
        34,
        17,
        0,
        381,
        392,
        3,
        42,
        21,
        0,
        382,
        392,
        3,
        46,
        23,
        0,
        383,
        392,
        3,
        50,
        25,
        0,
        384,
        392,
        3,
        54,
        27,
        0,
        385,
        392,
        3,
        58,
        29,
        0,
        386,
        392,
        3,
        60,
        30,
        0,
        387,
        392,
        3,
        62,
        31,
        0,
        388,
        392,
        3,
        64,
        32,
        0,
        389,
        392,
        3,
        70,
        35,
        0,
        390,
        392,
        3,
        72,
        36,
        0,
        391,
        379,
        1,
        0,
        0,
        0,
        391,
        380,
        1,
        0,
        0,
        0,
        391,
        381,
        1,
        0,
        0,
        0,
        391,
        382,
        1,
        0,
        0,
        0,
        391,
        383,
        1,
        0,
        0,
        0,
        391,
        384,
        1,
        0,
        0,
        0,
        391,
        385,
        1,
        0,
        0,
        0,
        391,
        386,
        1,
        0,
        0,
        0,
        391,
        387,
        1,
        0,
        0,
        0,
        391,
        388,
        1,
        0,
        0,
        0,
        391,
        389,
        1,
        0,
        0,
        0,
        391,
        390,
        1,
        0,
        0,
        0,
        392,
        11,
        1,
        0,
        0,
        0,
        393,
        401,
        3,
        14,
        7,
        0,
        394,
        401,
        3,
        16,
        8,
        0,
        395,
        401,
        3,
        18,
        9,
        0,
        396,
        401,
        3,
        20,
        10,
        0,
        397,
        401,
        3,
        22,
        11,
        0,
        398,
        401,
        3,
        24,
        12,
        0,
        399,
        401,
        3,
        28,
        14,
        0,
        400,
        393,
        1,
        0,
        0,
        0,
        400,
        394,
        1,
        0,
        0,
        0,
        400,
        395,
        1,
        0,
        0,
        0,
        400,
        396,
        1,
        0,
        0,
        0,
        400,
        397,
        1,
        0,
        0,
        0,
        400,
        398,
        1,
        0,
        0,
        0,
        400,
        399,
        1,
        0,
        0,
        0,
        401,
        13,
        1,
        0,
        0,
        0,
        402,
        403,
        5,
        45,
        0,
        0,
        403,
        408,
        3,
        76,
        38,
        0,
        404,
        405,
        5,
        17,
        0,
        0,
        405,
        407,
        3,
        76,
        38,
        0,
        406,
        404,
        1,
        0,
        0,
        0,
        407,
        410,
        1,
        0,
        0,
        0,
        408,
        406,
        1,
        0,
        0,
        0,
        408,
        409,
        1,
        0,
        0,
        0,
        409,
        15,
        1,
        0,
        0,
        0,
        410,
        408,
        1,
        0,
        0,
        0,
        411,
        412,
        5,
        73,
        0,
        0,
        412,
        417,
        3,
        78,
        39,
        0,
        413,
        415,
        3,
        112,
        56,
        0,
        414,
        416,
        3,
        114,
        57,
        0,
        415,
        414,
        1,
        0,
        0,
        0,
        415,
        416,
        1,
        0,
        0,
        0,
        416,
        418,
        1,
        0,
        0,
        0,
        417,
        413,
        1,
        0,
        0,
        0,
        417,
        418,
        1,
        0,
        0,
        0,
        418,
        17,
        1,
        0,
        0,
        0,
        419,
        420,
        5,
        106,
        0,
        0,
        420,
        421,
        3,
        6,
        3,
        0,
        421,
        19,
        1,
        0,
        0,
        0,
        422,
        423,
        5,
        43,
        0,
        0,
        423,
        428,
        3,
        82,
        41,
        0,
        424,
        425,
        5,
        17,
        0,
        0,
        425,
        427,
        3,
        82,
        41,
        0,
        426,
        424,
        1,
        0,
        0,
        0,
        427,
        430,
        1,
        0,
        0,
        0,
        428,
        426,
        1,
        0,
        0,
        0,
        428,
        429,
        1,
        0,
        0,
        0,
        429,
        21,
        1,
        0,
        0,
        0,
        430,
        428,
        1,
        0,
        0,
        0,
        431,
        432,
        7,
        5,
        0,
        0,
        432,
        437,
        3,
        192,
        96,
        0,
        433,
        434,
        5,
        17,
        0,
        0,
        434,
        436,
        3,
        192,
        96,
        0,
        435,
        433,
        1,
        0,
        0,
        0,
        436,
        439,
        1,
        0,
        0,
        0,
        437,
        435,
        1,
        0,
        0,
        0,
        437,
        438,
        1,
        0,
        0,
        0,
        438,
        23,
        1,
        0,
        0,
        0,
        439,
        437,
        1,
        0,
        0,
        0,
        440,
        441,
        7,
        6,
        0,
        0,
        441,
        442,
        3,
        192,
        96,
        0,
        442,
        443,
        5,
        17,
        0,
        0,
        443,
        444,
        3,
        192,
        96,
        0,
        444,
        25,
        1,
        0,
        0,
        0,
        445,
        446,
        5,
        203,
        0,
        0,
        446,
        447,
        3,
        192,
        96,
        0,
        447,
        448,
        5,
        17,
        0,
        0,
        448,
        449,
        3,
        192,
        96,
        0,
        449,
        450,
        5,
        52,
        0,
        0,
        450,
        455,
        3,
        216,
        108,
        0,
        451,
        452,
        5,
        17,
        0,
        0,
        452,
        454,
        3,
        216,
        108,
        0,
        453,
        451,
        1,
        0,
        0,
        0,
        454,
        457,
        1,
        0,
        0,
        0,
        455,
        453,
        1,
        0,
        0,
        0,
        455,
        456,
        1,
        0,
        0,
        0,
        456,
        27,
        1,
        0,
        0,
        0,
        457,
        455,
        1,
        0,
        0,
        0,
        458,
        459,
        5,
        205,
        0,
        0,
        459,
        464,
        3,
        84,
        42,
        0,
        460,
        461,
        5,
        17,
        0,
        0,
        461,
        463,
        3,
        84,
        42,
        0,
        462,
        460,
        1,
        0,
        0,
        0,
        463,
        466,
        1,
        0,
        0,
        0,
        464,
        462,
        1,
        0,
        0,
        0,
        464,
        465,
        1,
        0,
        0,
        0,
        465,
        29,
        1,
        0,
        0,
        0,
        466,
        464,
        1,
        0,
        0,
        0,
        467,
        468,
        7,
        7,
        0,
        0,
        468,
        469,
        5,
        1,
        0,
        0,
        469,
        470,
        3,
        90,
        45,
        0,
        470,
        471,
        3,
        94,
        47,
        0,
        471,
        472,
        5,
        2,
        0,
        0,
        472,
        480,
        1,
        0,
        0,
        0,
        473,
        474,
        7,
        8,
        0,
        0,
        474,
        475,
        5,
        1,
        0,
        0,
        475,
        476,
        3,
        88,
        44,
        0,
        476,
        477,
        3,
        94,
        47,
        0,
        477,
        478,
        5,
        2,
        0,
        0,
        478,
        480,
        1,
        0,
        0,
        0,
        479,
        467,
        1,
        0,
        0,
        0,
        479,
        473,
        1,
        0,
        0,
        0,
        480,
        31,
        1,
        0,
        0,
        0,
        481,
        482,
        5,
        123,
        0,
        0,
        482,
        483,
        5,
        122,
        0,
        0,
        483,
        484,
        3,
        212,
        106,
        0,
        484,
        493,
        5,
        1,
        0,
        0,
        485,
        490,
        3,
        116,
        58,
        0,
        486,
        487,
        5,
        17,
        0,
        0,
        487,
        489,
        3,
        116,
        58,
        0,
        488,
        486,
        1,
        0,
        0,
        0,
        489,
        492,
        1,
        0,
        0,
        0,
        490,
        488,
        1,
        0,
        0,
        0,
        490,
        491,
        1,
        0,
        0,
        0,
        491,
        494,
        1,
        0,
        0,
        0,
        492,
        490,
        1,
        0,
        0,
        0,
        493,
        485,
        1,
        0,
        0,
        0,
        493,
        494,
        1,
        0,
        0,
        0,
        494,
        495,
        1,
        0,
        0,
        0,
        495,
        498,
        5,
        2,
        0,
        0,
        496,
        497,
        5,
        201,
        0,
        0,
        497,
        499,
        3,
        118,
        59,
        0,
        498,
        496,
        1,
        0,
        0,
        0,
        498,
        499,
        1,
        0,
        0,
        0,
        499,
        500,
        1,
        0,
        0,
        0,
        500,
        501,
        5,
        184,
        0,
        0,
        501,
        502,
        3,
        4,
        2,
        0,
        502,
        503,
        5,
        129,
        0,
        0,
        503,
        504,
        5,
        122,
        0,
        0,
        504,
        532,
        1,
        0,
        0,
        0,
        505,
        506,
        5,
        123,
        0,
        0,
        506,
        507,
        5,
        125,
        0,
        0,
        507,
        508,
        5,
        127,
        0,
        0,
        508,
        509,
        3,
        142,
        71,
        0,
        509,
        510,
        5,
        1,
        0,
        0,
        510,
        511,
        3,
        144,
        72,
        0,
        511,
        512,
        5,
        2,
        0,
        0,
        512,
        513,
        5,
        184,
        0,
        0,
        513,
        514,
        3,
        148,
        74,
        0,
        514,
        515,
        5,
        129,
        0,
        0,
        515,
        516,
        5,
        125,
        0,
        0,
        516,
        517,
        5,
        127,
        0,
        0,
        517,
        532,
        1,
        0,
        0,
        0,
        518,
        519,
        5,
        123,
        0,
        0,
        519,
        520,
        5,
        126,
        0,
        0,
        520,
        521,
        5,
        127,
        0,
        0,
        521,
        522,
        3,
        142,
        71,
        0,
        522,
        523,
        5,
        1,
        0,
        0,
        523,
        524,
        3,
        156,
        78,
        0,
        524,
        525,
        5,
        2,
        0,
        0,
        525,
        526,
        5,
        184,
        0,
        0,
        526,
        527,
        3,
        152,
        76,
        0,
        527,
        528,
        5,
        129,
        0,
        0,
        528,
        529,
        5,
        126,
        0,
        0,
        529,
        530,
        5,
        127,
        0,
        0,
        530,
        532,
        1,
        0,
        0,
        0,
        531,
        481,
        1,
        0,
        0,
        0,
        531,
        505,
        1,
        0,
        0,
        0,
        531,
        518,
        1,
        0,
        0,
        0,
        532,
        33,
        1,
        0,
        0,
        0,
        533,
        534,
        3,
        212,
        106,
        0,
        534,
        543,
        5,
        1,
        0,
        0,
        535,
        540,
        3,
        40,
        20,
        0,
        536,
        537,
        5,
        17,
        0,
        0,
        537,
        539,
        3,
        40,
        20,
        0,
        538,
        536,
        1,
        0,
        0,
        0,
        539,
        542,
        1,
        0,
        0,
        0,
        540,
        538,
        1,
        0,
        0,
        0,
        540,
        541,
        1,
        0,
        0,
        0,
        541,
        544,
        1,
        0,
        0,
        0,
        542,
        540,
        1,
        0,
        0,
        0,
        543,
        535,
        1,
        0,
        0,
        0,
        543,
        544,
        1,
        0,
        0,
        0,
        544,
        545,
        1,
        0,
        0,
        0,
        545,
        546,
        5,
        2,
        0,
        0,
        546,
        591,
        1,
        0,
        0,
        0,
        547,
        548,
        5,
        22,
        0,
        0,
        548,
        549,
        5,
        1,
        0,
        0,
        549,
        550,
        3,
        214,
        107,
        0,
        550,
        553,
        5,
        1,
        0,
        0,
        551,
        554,
        3,
        188,
        94,
        0,
        552,
        554,
        3,
        86,
        43,
        0,
        553,
        551,
        1,
        0,
        0,
        0,
        553,
        552,
        1,
        0,
        0,
        0,
        553,
        554,
        1,
        0,
        0,
        0,
        554,
        562,
        1,
        0,
        0,
        0,
        555,
        558,
        5,
        17,
        0,
        0,
        556,
        559,
        3,
        188,
        94,
        0,
        557,
        559,
        3,
        86,
        43,
        0,
        558,
        556,
        1,
        0,
        0,
        0,
        558,
        557,
        1,
        0,
        0,
        0,
        559,
        561,
        1,
        0,
        0,
        0,
        560,
        555,
        1,
        0,
        0,
        0,
        561,
        564,
        1,
        0,
        0,
        0,
        562,
        560,
        1,
        0,
        0,
        0,
        562,
        563,
        1,
        0,
        0,
        0,
        563,
        565,
        1,
        0,
        0,
        0,
        564,
        562,
        1,
        0,
        0,
        0,
        565,
        568,
        5,
        2,
        0,
        0,
        566,
        567,
        5,
        240,
        0,
        0,
        567,
        569,
        5,
        244,
        0,
        0,
        568,
        566,
        1,
        0,
        0,
        0,
        568,
        569,
        1,
        0,
        0,
        0,
        569,
        572,
        1,
        0,
        0,
        0,
        570,
        571,
        5,
        201,
        0,
        0,
        571,
        573,
        3,
        132,
        66,
        0,
        572,
        570,
        1,
        0,
        0,
        0,
        572,
        573,
        1,
        0,
        0,
        0,
        573,
        574,
        1,
        0,
        0,
        0,
        574,
        575,
        5,
        2,
        0,
        0,
        575,
        591,
        1,
        0,
        0,
        0,
        576,
        577,
        5,
        218,
        0,
        0,
        577,
        578,
        5,
        1,
        0,
        0,
        578,
        579,
        3,
        4,
        2,
        0,
        579,
        582,
        5,
        17,
        0,
        0,
        580,
        583,
        3,
        218,
        109,
        0,
        581,
        583,
        3,
        140,
        70,
        0,
        582,
        580,
        1,
        0,
        0,
        0,
        582,
        581,
        1,
        0,
        0,
        0,
        583,
        586,
        1,
        0,
        0,
        0,
        584,
        585,
        5,
        17,
        0,
        0,
        585,
        587,
        5,
        244,
        0,
        0,
        586,
        584,
        1,
        0,
        0,
        0,
        586,
        587,
        1,
        0,
        0,
        0,
        587,
        588,
        1,
        0,
        0,
        0,
        588,
        589,
        5,
        2,
        0,
        0,
        589,
        591,
        1,
        0,
        0,
        0,
        590,
        533,
        1,
        0,
        0,
        0,
        590,
        547,
        1,
        0,
        0,
        0,
        590,
        576,
        1,
        0,
        0,
        0,
        591,
        35,
        1,
        0,
        0,
        0,
        592,
        593,
        3,
        212,
        106,
        0,
        593,
        602,
        5,
        1,
        0,
        0,
        594,
        599,
        3,
        38,
        19,
        0,
        595,
        596,
        5,
        17,
        0,
        0,
        596,
        598,
        3,
        38,
        19,
        0,
        597,
        595,
        1,
        0,
        0,
        0,
        598,
        601,
        1,
        0,
        0,
        0,
        599,
        597,
        1,
        0,
        0,
        0,
        599,
        600,
        1,
        0,
        0,
        0,
        600,
        603,
        1,
        0,
        0,
        0,
        601,
        599,
        1,
        0,
        0,
        0,
        602,
        594,
        1,
        0,
        0,
        0,
        602,
        603,
        1,
        0,
        0,
        0,
        603,
        604,
        1,
        0,
        0,
        0,
        604,
        605,
        5,
        2,
        0,
        0,
        605,
        650,
        1,
        0,
        0,
        0,
        606,
        607,
        5,
        218,
        0,
        0,
        607,
        608,
        5,
        1,
        0,
        0,
        608,
        609,
        3,
        6,
        3,
        0,
        609,
        612,
        5,
        17,
        0,
        0,
        610,
        613,
        3,
        218,
        109,
        0,
        611,
        613,
        3,
        140,
        70,
        0,
        612,
        610,
        1,
        0,
        0,
        0,
        612,
        611,
        1,
        0,
        0,
        0,
        613,
        616,
        1,
        0,
        0,
        0,
        614,
        615,
        5,
        17,
        0,
        0,
        615,
        617,
        5,
        244,
        0,
        0,
        616,
        614,
        1,
        0,
        0,
        0,
        616,
        617,
        1,
        0,
        0,
        0,
        617,
        618,
        1,
        0,
        0,
        0,
        618,
        619,
        5,
        2,
        0,
        0,
        619,
        650,
        1,
        0,
        0,
        0,
        620,
        621,
        5,
        22,
        0,
        0,
        621,
        622,
        5,
        1,
        0,
        0,
        622,
        623,
        3,
        214,
        107,
        0,
        623,
        626,
        5,
        1,
        0,
        0,
        624,
        627,
        3,
        192,
        96,
        0,
        625,
        627,
        3,
        86,
        43,
        0,
        626,
        624,
        1,
        0,
        0,
        0,
        626,
        625,
        1,
        0,
        0,
        0,
        626,
        627,
        1,
        0,
        0,
        0,
        627,
        635,
        1,
        0,
        0,
        0,
        628,
        631,
        5,
        17,
        0,
        0,
        629,
        632,
        3,
        192,
        96,
        0,
        630,
        632,
        3,
        86,
        43,
        0,
        631,
        629,
        1,
        0,
        0,
        0,
        631,
        630,
        1,
        0,
        0,
        0,
        632,
        634,
        1,
        0,
        0,
        0,
        633,
        628,
        1,
        0,
        0,
        0,
        634,
        637,
        1,
        0,
        0,
        0,
        635,
        633,
        1,
        0,
        0,
        0,
        635,
        636,
        1,
        0,
        0,
        0,
        636,
        638,
        1,
        0,
        0,
        0,
        637,
        635,
        1,
        0,
        0,
        0,
        638,
        641,
        5,
        2,
        0,
        0,
        639,
        640,
        5,
        240,
        0,
        0,
        640,
        642,
        5,
        244,
        0,
        0,
        641,
        639,
        1,
        0,
        0,
        0,
        641,
        642,
        1,
        0,
        0,
        0,
        642,
        645,
        1,
        0,
        0,
        0,
        643,
        644,
        5,
        201,
        0,
        0,
        644,
        646,
        3,
        120,
        60,
        0,
        645,
        643,
        1,
        0,
        0,
        0,
        645,
        646,
        1,
        0,
        0,
        0,
        646,
        647,
        1,
        0,
        0,
        0,
        647,
        648,
        5,
        2,
        0,
        0,
        648,
        650,
        1,
        0,
        0,
        0,
        649,
        592,
        1,
        0,
        0,
        0,
        649,
        606,
        1,
        0,
        0,
        0,
        649,
        620,
        1,
        0,
        0,
        0,
        650,
        37,
        1,
        0,
        0,
        0,
        651,
        654,
        3,
        6,
        3,
        0,
        652,
        654,
        5,
        115,
        0,
        0,
        653,
        651,
        1,
        0,
        0,
        0,
        653,
        652,
        1,
        0,
        0,
        0,
        654,
        39,
        1,
        0,
        0,
        0,
        655,
        658,
        3,
        4,
        2,
        0,
        656,
        658,
        5,
        115,
        0,
        0,
        657,
        655,
        1,
        0,
        0,
        0,
        657,
        656,
        1,
        0,
        0,
        0,
        658,
        41,
        1,
        0,
        0,
        0,
        659,
        660,
        7,
        9,
        0,
        0,
        660,
        661,
        5,
        1,
        0,
        0,
        661,
        662,
        3,
        4,
        2,
        0,
        662,
        663,
        5,
        2,
        0,
        0,
        663,
        708,
        1,
        0,
        0,
        0,
        664,
        665,
        5,
        98,
        0,
        0,
        665,
        666,
        5,
        1,
        0,
        0,
        666,
        677,
        3,
        4,
        2,
        0,
        667,
        668,
        5,
        17,
        0,
        0,
        668,
        669,
        3,
        202,
        101,
        0,
        669,
        670,
        1,
        0,
        0,
        0,
        670,
        671,
        5,
        17,
        0,
        0,
        671,
        672,
        3,
        202,
        101,
        0,
        672,
        674,
        1,
        0,
        0,
        0,
        673,
        667,
        1,
        0,
        0,
        0,
        673,
        674,
        1,
        0,
        0,
        0,
        674,
        678,
        1,
        0,
        0,
        0,
        675,
        676,
        5,
        17,
        0,
        0,
        676,
        678,
        3,
        202,
        101,
        0,
        677,
        673,
        1,
        0,
        0,
        0,
        677,
        675,
        1,
        0,
        0,
        0,
        678,
        679,
        1,
        0,
        0,
        0,
        679,
        680,
        5,
        2,
        0,
        0,
        680,
        708,
        1,
        0,
        0,
        0,
        681,
        682,
        5,
        134,
        0,
        0,
        682,
        683,
        5,
        1,
        0,
        0,
        683,
        684,
        3,
        4,
        2,
        0,
        684,
        685,
        5,
        17,
        0,
        0,
        685,
        688,
        3,
        4,
        2,
        0,
        686,
        687,
        5,
        17,
        0,
        0,
        687,
        689,
        3,
        202,
        101,
        0,
        688,
        686,
        1,
        0,
        0,
        0,
        688,
        689,
        1,
        0,
        0,
        0,
        689,
        690,
        1,
        0,
        0,
        0,
        690,
        691,
        5,
        2,
        0,
        0,
        691,
        708,
        1,
        0,
        0,
        0,
        692,
        693,
        5,
        133,
        0,
        0,
        693,
        694,
        5,
        1,
        0,
        0,
        694,
        695,
        3,
        4,
        2,
        0,
        695,
        696,
        5,
        17,
        0,
        0,
        696,
        699,
        3,
        4,
        2,
        0,
        697,
        698,
        5,
        17,
        0,
        0,
        698,
        700,
        3,
        202,
        101,
        0,
        699,
        697,
        1,
        0,
        0,
        0,
        699,
        700,
        1,
        0,
        0,
        0,
        700,
        703,
        1,
        0,
        0,
        0,
        701,
        702,
        5,
        17,
        0,
        0,
        702,
        704,
        3,
        202,
        101,
        0,
        703,
        701,
        1,
        0,
        0,
        0,
        703,
        704,
        1,
        0,
        0,
        0,
        704,
        705,
        1,
        0,
        0,
        0,
        705,
        706,
        5,
        2,
        0,
        0,
        706,
        708,
        1,
        0,
        0,
        0,
        707,
        659,
        1,
        0,
        0,
        0,
        707,
        664,
        1,
        0,
        0,
        0,
        707,
        681,
        1,
        0,
        0,
        0,
        707,
        692,
        1,
        0,
        0,
        0,
        708,
        43,
        1,
        0,
        0,
        0,
        709,
        710,
        7,
        9,
        0,
        0,
        710,
        711,
        5,
        1,
        0,
        0,
        711,
        712,
        3,
        6,
        3,
        0,
        712,
        713,
        5,
        2,
        0,
        0,
        713,
        758,
        1,
        0,
        0,
        0,
        714,
        715,
        5,
        98,
        0,
        0,
        715,
        716,
        5,
        1,
        0,
        0,
        716,
        727,
        3,
        6,
        3,
        0,
        717,
        718,
        5,
        17,
        0,
        0,
        718,
        719,
        3,
        204,
        102,
        0,
        719,
        720,
        1,
        0,
        0,
        0,
        720,
        721,
        5,
        17,
        0,
        0,
        721,
        722,
        3,
        204,
        102,
        0,
        722,
        724,
        1,
        0,
        0,
        0,
        723,
        717,
        1,
        0,
        0,
        0,
        723,
        724,
        1,
        0,
        0,
        0,
        724,
        728,
        1,
        0,
        0,
        0,
        725,
        726,
        5,
        17,
        0,
        0,
        726,
        728,
        3,
        204,
        102,
        0,
        727,
        723,
        1,
        0,
        0,
        0,
        727,
        725,
        1,
        0,
        0,
        0,
        728,
        729,
        1,
        0,
        0,
        0,
        729,
        730,
        5,
        2,
        0,
        0,
        730,
        758,
        1,
        0,
        0,
        0,
        731,
        732,
        5,
        134,
        0,
        0,
        732,
        733,
        5,
        1,
        0,
        0,
        733,
        734,
        3,
        6,
        3,
        0,
        734,
        735,
        5,
        17,
        0,
        0,
        735,
        738,
        3,
        6,
        3,
        0,
        736,
        737,
        5,
        17,
        0,
        0,
        737,
        739,
        3,
        204,
        102,
        0,
        738,
        736,
        1,
        0,
        0,
        0,
        738,
        739,
        1,
        0,
        0,
        0,
        739,
        740,
        1,
        0,
        0,
        0,
        740,
        741,
        5,
        2,
        0,
        0,
        741,
        758,
        1,
        0,
        0,
        0,
        742,
        743,
        5,
        133,
        0,
        0,
        743,
        744,
        5,
        1,
        0,
        0,
        744,
        745,
        3,
        6,
        3,
        0,
        745,
        746,
        5,
        17,
        0,
        0,
        746,
        749,
        3,
        6,
        3,
        0,
        747,
        748,
        5,
        17,
        0,
        0,
        748,
        750,
        3,
        204,
        102,
        0,
        749,
        747,
        1,
        0,
        0,
        0,
        749,
        750,
        1,
        0,
        0,
        0,
        750,
        753,
        1,
        0,
        0,
        0,
        751,
        752,
        5,
        17,
        0,
        0,
        752,
        754,
        3,
        204,
        102,
        0,
        753,
        751,
        1,
        0,
        0,
        0,
        753,
        754,
        1,
        0,
        0,
        0,
        754,
        755,
        1,
        0,
        0,
        0,
        755,
        756,
        5,
        2,
        0,
        0,
        756,
        758,
        1,
        0,
        0,
        0,
        757,
        709,
        1,
        0,
        0,
        0,
        757,
        714,
        1,
        0,
        0,
        0,
        757,
        731,
        1,
        0,
        0,
        0,
        757,
        742,
        1,
        0,
        0,
        0,
        758,
        45,
        1,
        0,
        0,
        0,
        759,
        760,
        7,
        10,
        0,
        0,
        760,
        761,
        5,
        1,
        0,
        0,
        761,
        762,
        3,
        4,
        2,
        0,
        762,
        763,
        5,
        2,
        0,
        0,
        763,
        781,
        1,
        0,
        0,
        0,
        764,
        765,
        7,
        11,
        0,
        0,
        765,
        766,
        5,
        1,
        0,
        0,
        766,
        769,
        3,
        4,
        2,
        0,
        767,
        768,
        5,
        17,
        0,
        0,
        768,
        770,
        3,
        202,
        101,
        0,
        769,
        767,
        1,
        0,
        0,
        0,
        769,
        770,
        1,
        0,
        0,
        0,
        770,
        771,
        1,
        0,
        0,
        0,
        771,
        772,
        5,
        2,
        0,
        0,
        772,
        781,
        1,
        0,
        0,
        0,
        773,
        774,
        7,
        12,
        0,
        0,
        774,
        775,
        5,
        1,
        0,
        0,
        775,
        776,
        3,
        4,
        2,
        0,
        776,
        777,
        5,
        17,
        0,
        0,
        777,
        778,
        3,
        4,
        2,
        0,
        778,
        779,
        5,
        2,
        0,
        0,
        779,
        781,
        1,
        0,
        0,
        0,
        780,
        759,
        1,
        0,
        0,
        0,
        780,
        764,
        1,
        0,
        0,
        0,
        780,
        773,
        1,
        0,
        0,
        0,
        781,
        47,
        1,
        0,
        0,
        0,
        782,
        783,
        7,
        10,
        0,
        0,
        783,
        784,
        5,
        1,
        0,
        0,
        784,
        785,
        3,
        6,
        3,
        0,
        785,
        786,
        5,
        2,
        0,
        0,
        786,
        804,
        1,
        0,
        0,
        0,
        787,
        788,
        7,
        11,
        0,
        0,
        788,
        789,
        5,
        1,
        0,
        0,
        789,
        792,
        3,
        6,
        3,
        0,
        790,
        791,
        5,
        17,
        0,
        0,
        791,
        793,
        3,
        204,
        102,
        0,
        792,
        790,
        1,
        0,
        0,
        0,
        792,
        793,
        1,
        0,
        0,
        0,
        793,
        794,
        1,
        0,
        0,
        0,
        794,
        795,
        5,
        2,
        0,
        0,
        795,
        804,
        1,
        0,
        0,
        0,
        796,
        797,
        7,
        12,
        0,
        0,
        797,
        798,
        5,
        1,
        0,
        0,
        798,
        799,
        3,
        6,
        3,
        0,
        799,
        800,
        5,
        17,
        0,
        0,
        800,
        801,
        3,
        6,
        3,
        0,
        801,
        802,
        5,
        2,
        0,
        0,
        802,
        804,
        1,
        0,
        0,
        0,
        803,
        782,
        1,
        0,
        0,
        0,
        803,
        787,
        1,
        0,
        0,
        0,
        803,
        796,
        1,
        0,
        0,
        0,
        804,
        49,
        1,
        0,
        0,
        0,
        805,
        806,
        5,
        51,
        0,
        0,
        806,
        807,
        5,
        1,
        0,
        0,
        807,
        808,
        3,
        4,
        2,
        0,
        808,
        809,
        5,
        17,
        0,
        0,
        809,
        810,
        3,
        4,
        2,
        0,
        810,
        811,
        5,
        17,
        0,
        0,
        811,
        812,
        3,
        4,
        2,
        0,
        812,
        813,
        5,
        2,
        0,
        0,
        813,
        838,
        1,
        0,
        0,
        0,
        814,
        815,
        5,
        111,
        0,
        0,
        815,
        816,
        5,
        1,
        0,
        0,
        816,
        817,
        3,
        4,
        2,
        0,
        817,
        818,
        5,
        17,
        0,
        0,
        818,
        819,
        3,
        4,
        2,
        0,
        819,
        820,
        5,
        2,
        0,
        0,
        820,
        838,
        1,
        0,
        0,
        0,
        821,
        822,
        5,
        55,
        0,
        0,
        822,
        823,
        5,
        1,
        0,
        0,
        823,
        824,
        3,
        4,
        2,
        0,
        824,
        825,
        5,
        2,
        0,
        0,
        825,
        838,
        1,
        0,
        0,
        0,
        826,
        827,
        5,
        67,
        0,
        0,
        827,
        828,
        5,
        1,
        0,
        0,
        828,
        829,
        3,
        4,
        2,
        0,
        829,
        830,
        5,
        17,
        0,
        0,
        830,
        833,
        3,
        4,
        2,
        0,
        831,
        832,
        5,
        17,
        0,
        0,
        832,
        834,
        3,
        220,
        110,
        0,
        833,
        831,
        1,
        0,
        0,
        0,
        833,
        834,
        1,
        0,
        0,
        0,
        834,
        835,
        1,
        0,
        0,
        0,
        835,
        836,
        5,
        2,
        0,
        0,
        836,
        838,
        1,
        0,
        0,
        0,
        837,
        805,
        1,
        0,
        0,
        0,
        837,
        814,
        1,
        0,
        0,
        0,
        837,
        821,
        1,
        0,
        0,
        0,
        837,
        826,
        1,
        0,
        0,
        0,
        838,
        51,
        1,
        0,
        0,
        0,
        839,
        840,
        5,
        51,
        0,
        0,
        840,
        841,
        5,
        1,
        0,
        0,
        841,
        842,
        3,
        6,
        3,
        0,
        842,
        843,
        5,
        17,
        0,
        0,
        843,
        844,
        3,
        6,
        3,
        0,
        844,
        845,
        5,
        17,
        0,
        0,
        845,
        846,
        3,
        6,
        3,
        0,
        846,
        847,
        5,
        2,
        0,
        0,
        847,
        861,
        1,
        0,
        0,
        0,
        848,
        849,
        5,
        111,
        0,
        0,
        849,
        850,
        5,
        1,
        0,
        0,
        850,
        851,
        3,
        6,
        3,
        0,
        851,
        852,
        5,
        17,
        0,
        0,
        852,
        853,
        3,
        6,
        3,
        0,
        853,
        854,
        5,
        2,
        0,
        0,
        854,
        861,
        1,
        0,
        0,
        0,
        855,
        856,
        5,
        55,
        0,
        0,
        856,
        857,
        5,
        1,
        0,
        0,
        857,
        858,
        3,
        6,
        3,
        0,
        858,
        859,
        5,
        2,
        0,
        0,
        859,
        861,
        1,
        0,
        0,
        0,
        860,
        839,
        1,
        0,
        0,
        0,
        860,
        848,
        1,
        0,
        0,
        0,
        860,
        855,
        1,
        0,
        0,
        0,
        861,
        53,
        1,
        0,
        0,
        0,
        862,
        863,
        5,
        208,
        0,
        0,
        863,
        865,
        5,
        1,
        0,
        0,
        864,
        866,
        3,
        4,
        2,
        0,
        865,
        864,
        1,
        0,
        0,
        0,
        865,
        866,
        1,
        0,
        0,
        0,
        866,
        867,
        1,
        0,
        0,
        0,
        867,
        965,
        5,
        2,
        0,
        0,
        868,
        869,
        5,
        161,
        0,
        0,
        869,
        870,
        5,
        1,
        0,
        0,
        870,
        873,
        3,
        4,
        2,
        0,
        871,
        872,
        5,
        17,
        0,
        0,
        872,
        874,
        7,
        13,
        0,
        0,
        873,
        871,
        1,
        0,
        0,
        0,
        873,
        874,
        1,
        0,
        0,
        0,
        874,
        875,
        1,
        0,
        0,
        0,
        875,
        876,
        5,
        2,
        0,
        0,
        876,
        965,
        1,
        0,
        0,
        0,
        877,
        878,
        7,
        14,
        0,
        0,
        878,
        879,
        5,
        1,
        0,
        0,
        879,
        880,
        3,
        4,
        2,
        0,
        880,
        881,
        5,
        2,
        0,
        0,
        881,
        965,
        1,
        0,
        0,
        0,
        882,
        883,
        5,
        164,
        0,
        0,
        883,
        884,
        5,
        1,
        0,
        0,
        884,
        885,
        3,
        4,
        2,
        0,
        885,
        886,
        5,
        17,
        0,
        0,
        886,
        887,
        3,
        106,
        53,
        0,
        887,
        888,
        5,
        2,
        0,
        0,
        888,
        965,
        1,
        0,
        0,
        0,
        889,
        890,
        5,
        211,
        0,
        0,
        890,
        891,
        5,
        1,
        0,
        0,
        891,
        894,
        5,
        244,
        0,
        0,
        892,
        893,
        5,
        17,
        0,
        0,
        893,
        895,
        7,
        15,
        0,
        0,
        894,
        892,
        1,
        0,
        0,
        0,
        894,
        895,
        1,
        0,
        0,
        0,
        895,
        898,
        1,
        0,
        0,
        0,
        896,
        897,
        5,
        17,
        0,
        0,
        897,
        899,
        3,
        202,
        101,
        0,
        898,
        896,
        1,
        0,
        0,
        0,
        898,
        899,
        1,
        0,
        0,
        0,
        899,
        902,
        1,
        0,
        0,
        0,
        900,
        901,
        5,
        17,
        0,
        0,
        901,
        903,
        7,
        16,
        0,
        0,
        902,
        900,
        1,
        0,
        0,
        0,
        902,
        903,
        1,
        0,
        0,
        0,
        903,
        904,
        1,
        0,
        0,
        0,
        904,
        965,
        5,
        2,
        0,
        0,
        905,
        906,
        5,
        29,
        0,
        0,
        906,
        907,
        5,
        1,
        0,
        0,
        907,
        965,
        5,
        2,
        0,
        0,
        908,
        909,
        5,
        30,
        0,
        0,
        909,
        910,
        5,
        1,
        0,
        0,
        910,
        911,
        3,
        4,
        2,
        0,
        911,
        912,
        5,
        17,
        0,
        0,
        912,
        913,
        3,
        4,
        2,
        0,
        913,
        914,
        5,
        2,
        0,
        0,
        914,
        965,
        1,
        0,
        0,
        0,
        915,
        916,
        5,
        31,
        0,
        0,
        916,
        917,
        5,
        1,
        0,
        0,
        917,
        918,
        3,
        4,
        2,
        0,
        918,
        919,
        5,
        17,
        0,
        0,
        919,
        920,
        3,
        4,
        2,
        0,
        920,
        921,
        5,
        17,
        0,
        0,
        921,
        922,
        3,
        4,
        2,
        0,
        922,
        923,
        5,
        2,
        0,
        0,
        923,
        965,
        1,
        0,
        0,
        0,
        924,
        925,
        5,
        32,
        0,
        0,
        925,
        926,
        5,
        1,
        0,
        0,
        926,
        927,
        3,
        4,
        2,
        0,
        927,
        928,
        5,
        2,
        0,
        0,
        928,
        965,
        1,
        0,
        0,
        0,
        929,
        930,
        5,
        33,
        0,
        0,
        930,
        931,
        5,
        1,
        0,
        0,
        931,
        932,
        3,
        4,
        2,
        0,
        932,
        933,
        5,
        2,
        0,
        0,
        933,
        965,
        1,
        0,
        0,
        0,
        934,
        935,
        5,
        34,
        0,
        0,
        935,
        936,
        5,
        1,
        0,
        0,
        936,
        937,
        3,
        4,
        2,
        0,
        937,
        938,
        5,
        2,
        0,
        0,
        938,
        965,
        1,
        0,
        0,
        0,
        939,
        940,
        5,
        35,
        0,
        0,
        940,
        941,
        5,
        1,
        0,
        0,
        941,
        942,
        3,
        4,
        2,
        0,
        942,
        943,
        5,
        2,
        0,
        0,
        943,
        965,
        1,
        0,
        0,
        0,
        944,
        945,
        5,
        36,
        0,
        0,
        945,
        946,
        5,
        1,
        0,
        0,
        946,
        947,
        3,
        4,
        2,
        0,
        947,
        948,
        5,
        2,
        0,
        0,
        948,
        965,
        1,
        0,
        0,
        0,
        949,
        950,
        5,
        37,
        0,
        0,
        950,
        951,
        5,
        1,
        0,
        0,
        951,
        952,
        3,
        4,
        2,
        0,
        952,
        953,
        5,
        2,
        0,
        0,
        953,
        965,
        1,
        0,
        0,
        0,
        954,
        955,
        5,
        38,
        0,
        0,
        955,
        956,
        5,
        1,
        0,
        0,
        956,
        957,
        3,
        4,
        2,
        0,
        957,
        958,
        5,
        2,
        0,
        0,
        958,
        965,
        1,
        0,
        0,
        0,
        959,
        960,
        5,
        39,
        0,
        0,
        960,
        961,
        5,
        1,
        0,
        0,
        961,
        962,
        3,
        4,
        2,
        0,
        962,
        963,
        5,
        2,
        0,
        0,
        963,
        965,
        1,
        0,
        0,
        0,
        964,
        862,
        1,
        0,
        0,
        0,
        964,
        868,
        1,
        0,
        0,
        0,
        964,
        877,
        1,
        0,
        0,
        0,
        964,
        882,
        1,
        0,
        0,
        0,
        964,
        889,
        1,
        0,
        0,
        0,
        964,
        905,
        1,
        0,
        0,
        0,
        964,
        908,
        1,
        0,
        0,
        0,
        964,
        915,
        1,
        0,
        0,
        0,
        964,
        924,
        1,
        0,
        0,
        0,
        964,
        929,
        1,
        0,
        0,
        0,
        964,
        934,
        1,
        0,
        0,
        0,
        964,
        939,
        1,
        0,
        0,
        0,
        964,
        944,
        1,
        0,
        0,
        0,
        964,
        949,
        1,
        0,
        0,
        0,
        964,
        954,
        1,
        0,
        0,
        0,
        964,
        959,
        1,
        0,
        0,
        0,
        965,
        55,
        1,
        0,
        0,
        0,
        966,
        967,
        5,
        208,
        0,
        0,
        967,
        969,
        5,
        1,
        0,
        0,
        968,
        970,
        3,
        6,
        3,
        0,
        969,
        968,
        1,
        0,
        0,
        0,
        969,
        970,
        1,
        0,
        0,
        0,
        970,
        971,
        1,
        0,
        0,
        0,
        971,
        1069,
        5,
        2,
        0,
        0,
        972,
        973,
        5,
        161,
        0,
        0,
        973,
        974,
        5,
        1,
        0,
        0,
        974,
        977,
        3,
        6,
        3,
        0,
        975,
        976,
        5,
        17,
        0,
        0,
        976,
        978,
        7,
        13,
        0,
        0,
        977,
        975,
        1,
        0,
        0,
        0,
        977,
        978,
        1,
        0,
        0,
        0,
        978,
        979,
        1,
        0,
        0,
        0,
        979,
        980,
        5,
        2,
        0,
        0,
        980,
        1069,
        1,
        0,
        0,
        0,
        981,
        982,
        7,
        14,
        0,
        0,
        982,
        983,
        5,
        1,
        0,
        0,
        983,
        984,
        3,
        6,
        3,
        0,
        984,
        985,
        5,
        2,
        0,
        0,
        985,
        1069,
        1,
        0,
        0,
        0,
        986,
        987,
        5,
        164,
        0,
        0,
        987,
        988,
        5,
        1,
        0,
        0,
        988,
        989,
        3,
        6,
        3,
        0,
        989,
        990,
        5,
        17,
        0,
        0,
        990,
        991,
        3,
        106,
        53,
        0,
        991,
        992,
        5,
        2,
        0,
        0,
        992,
        1069,
        1,
        0,
        0,
        0,
        993,
        994,
        5,
        211,
        0,
        0,
        994,
        995,
        5,
        1,
        0,
        0,
        995,
        998,
        5,
        244,
        0,
        0,
        996,
        997,
        5,
        17,
        0,
        0,
        997,
        999,
        7,
        15,
        0,
        0,
        998,
        996,
        1,
        0,
        0,
        0,
        998,
        999,
        1,
        0,
        0,
        0,
        999,
        1002,
        1,
        0,
        0,
        0,
        1e3,
        1001,
        5,
        17,
        0,
        0,
        1001,
        1003,
        3,
        204,
        102,
        0,
        1002,
        1e3,
        1,
        0,
        0,
        0,
        1002,
        1003,
        1,
        0,
        0,
        0,
        1003,
        1006,
        1,
        0,
        0,
        0,
        1004,
        1005,
        5,
        17,
        0,
        0,
        1005,
        1007,
        7,
        16,
        0,
        0,
        1006,
        1004,
        1,
        0,
        0,
        0,
        1006,
        1007,
        1,
        0,
        0,
        0,
        1007,
        1008,
        1,
        0,
        0,
        0,
        1008,
        1069,
        5,
        2,
        0,
        0,
        1009,
        1010,
        5,
        29,
        0,
        0,
        1010,
        1011,
        5,
        1,
        0,
        0,
        1011,
        1069,
        5,
        2,
        0,
        0,
        1012,
        1013,
        5,
        30,
        0,
        0,
        1013,
        1014,
        5,
        1,
        0,
        0,
        1014,
        1015,
        3,
        6,
        3,
        0,
        1015,
        1016,
        5,
        17,
        0,
        0,
        1016,
        1017,
        3,
        4,
        2,
        0,
        1017,
        1018,
        5,
        2,
        0,
        0,
        1018,
        1069,
        1,
        0,
        0,
        0,
        1019,
        1020,
        5,
        31,
        0,
        0,
        1020,
        1021,
        5,
        1,
        0,
        0,
        1021,
        1022,
        3,
        6,
        3,
        0,
        1022,
        1023,
        5,
        17,
        0,
        0,
        1023,
        1024,
        3,
        6,
        3,
        0,
        1024,
        1025,
        5,
        17,
        0,
        0,
        1025,
        1026,
        3,
        6,
        3,
        0,
        1026,
        1027,
        5,
        2,
        0,
        0,
        1027,
        1069,
        1,
        0,
        0,
        0,
        1028,
        1029,
        5,
        32,
        0,
        0,
        1029,
        1030,
        5,
        1,
        0,
        0,
        1030,
        1031,
        3,
        6,
        3,
        0,
        1031,
        1032,
        5,
        2,
        0,
        0,
        1032,
        1069,
        1,
        0,
        0,
        0,
        1033,
        1034,
        5,
        33,
        0,
        0,
        1034,
        1035,
        5,
        1,
        0,
        0,
        1035,
        1036,
        3,
        6,
        3,
        0,
        1036,
        1037,
        5,
        2,
        0,
        0,
        1037,
        1069,
        1,
        0,
        0,
        0,
        1038,
        1039,
        5,
        34,
        0,
        0,
        1039,
        1040,
        5,
        1,
        0,
        0,
        1040,
        1041,
        3,
        6,
        3,
        0,
        1041,
        1042,
        5,
        2,
        0,
        0,
        1042,
        1069,
        1,
        0,
        0,
        0,
        1043,
        1044,
        5,
        35,
        0,
        0,
        1044,
        1045,
        5,
        1,
        0,
        0,
        1045,
        1046,
        3,
        6,
        3,
        0,
        1046,
        1047,
        5,
        2,
        0,
        0,
        1047,
        1069,
        1,
        0,
        0,
        0,
        1048,
        1049,
        5,
        36,
        0,
        0,
        1049,
        1050,
        5,
        1,
        0,
        0,
        1050,
        1051,
        3,
        6,
        3,
        0,
        1051,
        1052,
        5,
        2,
        0,
        0,
        1052,
        1069,
        1,
        0,
        0,
        0,
        1053,
        1054,
        5,
        37,
        0,
        0,
        1054,
        1055,
        5,
        1,
        0,
        0,
        1055,
        1056,
        3,
        6,
        3,
        0,
        1056,
        1057,
        5,
        2,
        0,
        0,
        1057,
        1069,
        1,
        0,
        0,
        0,
        1058,
        1059,
        5,
        38,
        0,
        0,
        1059,
        1060,
        5,
        1,
        0,
        0,
        1060,
        1061,
        3,
        6,
        3,
        0,
        1061,
        1062,
        5,
        2,
        0,
        0,
        1062,
        1069,
        1,
        0,
        0,
        0,
        1063,
        1064,
        5,
        39,
        0,
        0,
        1064,
        1065,
        5,
        1,
        0,
        0,
        1065,
        1066,
        3,
        6,
        3,
        0,
        1066,
        1067,
        5,
        2,
        0,
        0,
        1067,
        1069,
        1,
        0,
        0,
        0,
        1068,
        966,
        1,
        0,
        0,
        0,
        1068,
        972,
        1,
        0,
        0,
        0,
        1068,
        981,
        1,
        0,
        0,
        0,
        1068,
        986,
        1,
        0,
        0,
        0,
        1068,
        993,
        1,
        0,
        0,
        0,
        1068,
        1009,
        1,
        0,
        0,
        0,
        1068,
        1012,
        1,
        0,
        0,
        0,
        1068,
        1019,
        1,
        0,
        0,
        0,
        1068,
        1028,
        1,
        0,
        0,
        0,
        1068,
        1033,
        1,
        0,
        0,
        0,
        1068,
        1038,
        1,
        0,
        0,
        0,
        1068,
        1043,
        1,
        0,
        0,
        0,
        1068,
        1048,
        1,
        0,
        0,
        0,
        1068,
        1053,
        1,
        0,
        0,
        0,
        1068,
        1058,
        1,
        0,
        0,
        0,
        1068,
        1063,
        1,
        0,
        0,
        0,
        1069,
        57,
        1,
        0,
        0,
        0,
        1070,
        1071,
        5,
        57,
        0,
        0,
        1071,
        1072,
        5,
        1,
        0,
        0,
        1072,
        1075,
        3,
        4,
        2,
        0,
        1073,
        1074,
        5,
        17,
        0,
        0,
        1074,
        1076,
        3,
        4,
        2,
        0,
        1075,
        1073,
        1,
        0,
        0,
        0,
        1076,
        1077,
        1,
        0,
        0,
        0,
        1077,
        1075,
        1,
        0,
        0,
        0,
        1077,
        1078,
        1,
        0,
        0,
        0,
        1078,
        1079,
        1,
        0,
        0,
        0,
        1079,
        1080,
        5,
        2,
        0,
        0,
        1080,
        1100,
        1,
        0,
        0,
        0,
        1081,
        1082,
        5,
        60,
        0,
        0,
        1082,
        1083,
        5,
        1,
        0,
        0,
        1083,
        1086,
        3,
        4,
        2,
        0,
        1084,
        1085,
        5,
        17,
        0,
        0,
        1085,
        1087,
        3,
        4,
        2,
        0,
        1086,
        1084,
        1,
        0,
        0,
        0,
        1087,
        1088,
        1,
        0,
        0,
        0,
        1088,
        1086,
        1,
        0,
        0,
        0,
        1088,
        1089,
        1,
        0,
        0,
        0,
        1089,
        1090,
        1,
        0,
        0,
        0,
        1090,
        1091,
        5,
        2,
        0,
        0,
        1091,
        1100,
        1,
        0,
        0,
        0,
        1092,
        1093,
        7,
        17,
        0,
        0,
        1093,
        1094,
        5,
        1,
        0,
        0,
        1094,
        1095,
        3,
        4,
        2,
        0,
        1095,
        1096,
        5,
        17,
        0,
        0,
        1096,
        1097,
        3,
        4,
        2,
        0,
        1097,
        1098,
        5,
        2,
        0,
        0,
        1098,
        1100,
        1,
        0,
        0,
        0,
        1099,
        1070,
        1,
        0,
        0,
        0,
        1099,
        1081,
        1,
        0,
        0,
        0,
        1099,
        1092,
        1,
        0,
        0,
        0,
        1100,
        59,
        1,
        0,
        0,
        0,
        1101,
        1102,
        5,
        114,
        0,
        0,
        1102,
        1103,
        5,
        1,
        0,
        0,
        1103,
        1104,
        3,
        4,
        2,
        0,
        1104,
        1105,
        5,
        17,
        0,
        0,
        1105,
        1107,
        5,
        245,
        0,
        0,
        1106,
        1108,
        3,
        176,
        88,
        0,
        1107,
        1106,
        1,
        0,
        0,
        0,
        1107,
        1108,
        1,
        0,
        0,
        0,
        1108,
        1111,
        1,
        0,
        0,
        0,
        1109,
        1110,
        5,
        128,
        0,
        0,
        1110,
        1112,
        3,
        192,
        96,
        0,
        1111,
        1109,
        1,
        0,
        0,
        0,
        1111,
        1112,
        1,
        0,
        0,
        0,
        1112,
        1114,
        1,
        0,
        0,
        0,
        1113,
        1115,
        3,
        174,
        87,
        0,
        1114,
        1113,
        1,
        0,
        0,
        0,
        1114,
        1115,
        1,
        0,
        0,
        0,
        1115,
        1117,
        1,
        0,
        0,
        0,
        1116,
        1118,
        3,
        182,
        91,
        0,
        1117,
        1116,
        1,
        0,
        0,
        0,
        1117,
        1118,
        1,
        0,
        0,
        0,
        1118,
        1120,
        1,
        0,
        0,
        0,
        1119,
        1121,
        3,
        184,
        92,
        0,
        1120,
        1119,
        1,
        0,
        0,
        0,
        1120,
        1121,
        1,
        0,
        0,
        0,
        1121,
        1122,
        1,
        0,
        0,
        0,
        1122,
        1123,
        5,
        2,
        0,
        0,
        1123,
        61,
        1,
        0,
        0,
        0,
        1124,
        1125,
        5,
        222,
        0,
        0,
        1125,
        1126,
        5,
        1,
        0,
        0,
        1126,
        1127,
        3,
        4,
        2,
        0,
        1127,
        1128,
        5,
        17,
        0,
        0,
        1128,
        1138,
        5,
        245,
        0,
        0,
        1129,
        1130,
        5,
        231,
        0,
        0,
        1130,
        1135,
        3,
        192,
        96,
        0,
        1131,
        1132,
        5,
        17,
        0,
        0,
        1132,
        1134,
        3,
        192,
        96,
        0,
        1133,
        1131,
        1,
        0,
        0,
        0,
        1134,
        1137,
        1,
        0,
        0,
        0,
        1135,
        1133,
        1,
        0,
        0,
        0,
        1135,
        1136,
        1,
        0,
        0,
        0,
        1136,
        1139,
        1,
        0,
        0,
        0,
        1137,
        1135,
        1,
        0,
        0,
        0,
        1138,
        1129,
        1,
        0,
        0,
        0,
        1138,
        1139,
        1,
        0,
        0,
        0,
        1139,
        1141,
        1,
        0,
        0,
        0,
        1140,
        1142,
        3,
        172,
        86,
        0,
        1141,
        1140,
        1,
        0,
        0,
        0,
        1141,
        1142,
        1,
        0,
        0,
        0,
        1142,
        1143,
        1,
        0,
        0,
        0,
        1143,
        1144,
        5,
        2,
        0,
        0,
        1144,
        1186,
        1,
        0,
        0,
        0,
        1145,
        1146,
        5,
        223,
        0,
        0,
        1146,
        1147,
        5,
        1,
        0,
        0,
        1147,
        1148,
        3,
        4,
        2,
        0,
        1148,
        1149,
        5,
        17,
        0,
        0,
        1149,
        1151,
        5,
        245,
        0,
        0,
        1150,
        1152,
        3,
        176,
        88,
        0,
        1151,
        1150,
        1,
        0,
        0,
        0,
        1151,
        1152,
        1,
        0,
        0,
        0,
        1152,
        1155,
        1,
        0,
        0,
        0,
        1153,
        1154,
        5,
        128,
        0,
        0,
        1154,
        1156,
        3,
        192,
        96,
        0,
        1155,
        1153,
        1,
        0,
        0,
        0,
        1155,
        1156,
        1,
        0,
        0,
        0,
        1156,
        1158,
        1,
        0,
        0,
        0,
        1157,
        1159,
        3,
        174,
        87,
        0,
        1158,
        1157,
        1,
        0,
        0,
        0,
        1158,
        1159,
        1,
        0,
        0,
        0,
        1159,
        1161,
        1,
        0,
        0,
        0,
        1160,
        1162,
        3,
        178,
        89,
        0,
        1161,
        1160,
        1,
        0,
        0,
        0,
        1161,
        1162,
        1,
        0,
        0,
        0,
        1162,
        1164,
        1,
        0,
        0,
        0,
        1163,
        1165,
        3,
        172,
        86,
        0,
        1164,
        1163,
        1,
        0,
        0,
        0,
        1164,
        1165,
        1,
        0,
        0,
        0,
        1165,
        1166,
        1,
        0,
        0,
        0,
        1166,
        1167,
        5,
        2,
        0,
        0,
        1167,
        1186,
        1,
        0,
        0,
        0,
        1168,
        1169,
        5,
        66,
        0,
        0,
        1169,
        1170,
        5,
        1,
        0,
        0,
        1170,
        1172,
        3,
        4,
        2,
        0,
        1171,
        1173,
        3,
        196,
        98,
        0,
        1172,
        1171,
        1,
        0,
        0,
        0,
        1172,
        1173,
        1,
        0,
        0,
        0,
        1173,
        1175,
        1,
        0,
        0,
        0,
        1174,
        1176,
        3,
        198,
        99,
        0,
        1175,
        1174,
        1,
        0,
        0,
        0,
        1175,
        1176,
        1,
        0,
        0,
        0,
        1176,
        1178,
        1,
        0,
        0,
        0,
        1177,
        1179,
        3,
        180,
        90,
        0,
        1178,
        1177,
        1,
        0,
        0,
        0,
        1178,
        1179,
        1,
        0,
        0,
        0,
        1179,
        1181,
        1,
        0,
        0,
        0,
        1180,
        1182,
        7,
        18,
        0,
        0,
        1181,
        1180,
        1,
        0,
        0,
        0,
        1181,
        1182,
        1,
        0,
        0,
        0,
        1182,
        1183,
        1,
        0,
        0,
        0,
        1183,
        1184,
        5,
        2,
        0,
        0,
        1184,
        1186,
        1,
        0,
        0,
        0,
        1185,
        1124,
        1,
        0,
        0,
        0,
        1185,
        1145,
        1,
        0,
        0,
        0,
        1185,
        1168,
        1,
        0,
        0,
        0,
        1186,
        63,
        1,
        0,
        0,
        0,
        1187,
        1188,
        5,
        113,
        0,
        0,
        1188,
        1189,
        5,
        1,
        0,
        0,
        1189,
        1190,
        3,
        4,
        2,
        0,
        1190,
        1191,
        5,
        17,
        0,
        0,
        1191,
        1192,
        3,
        4,
        2,
        0,
        1192,
        1193,
        5,
        2,
        0,
        0,
        1193,
        65,
        1,
        0,
        0,
        0,
        1194,
        1195,
        5,
        113,
        0,
        0,
        1195,
        1196,
        5,
        1,
        0,
        0,
        1196,
        1197,
        3,
        6,
        3,
        0,
        1197,
        1198,
        5,
        17,
        0,
        0,
        1198,
        1199,
        3,
        6,
        3,
        0,
        1199,
        1200,
        5,
        2,
        0,
        0,
        1200,
        67,
        1,
        0,
        0,
        0,
        1201,
        1202,
        7,
        19,
        0,
        0,
        1202,
        1203,
        5,
        1,
        0,
        0,
        1203,
        1204,
        3,
        6,
        3,
        0,
        1204,
        1205,
        5,
        2,
        0,
        0,
        1205,
        1210,
        1,
        0,
        0,
        0,
        1206,
        1207,
        5,
        102,
        0,
        0,
        1207,
        1208,
        5,
        1,
        0,
        0,
        1208,
        1210,
        5,
        2,
        0,
        0,
        1209,
        1201,
        1,
        0,
        0,
        0,
        1209,
        1206,
        1,
        0,
        0,
        0,
        1210,
        69,
        1,
        0,
        0,
        0,
        1211,
        1212,
        7,
        19,
        0,
        0,
        1212,
        1213,
        5,
        1,
        0,
        0,
        1213,
        1218,
        3,
        4,
        2,
        0,
        1214,
        1216,
        3,
        112,
        56,
        0,
        1215,
        1217,
        3,
        114,
        57,
        0,
        1216,
        1215,
        1,
        0,
        0,
        0,
        1216,
        1217,
        1,
        0,
        0,
        0,
        1217,
        1219,
        1,
        0,
        0,
        0,
        1218,
        1214,
        1,
        0,
        0,
        0,
        1218,
        1219,
        1,
        0,
        0,
        0,
        1219,
        1220,
        1,
        0,
        0,
        0,
        1220,
        1221,
        5,
        2,
        0,
        0,
        1221,
        71,
        1,
        0,
        0,
        0,
        1222,
        1223,
        7,
        20,
        0,
        0,
        1223,
        1224,
        5,
        1,
        0,
        0,
        1224,
        1225,
        3,
        4,
        2,
        0,
        1225,
        1226,
        5,
        152,
        0,
        0,
        1226,
        1228,
        5,
        1,
        0,
        0,
        1227,
        1229,
        3,
        98,
        49,
        0,
        1228,
        1227,
        1,
        0,
        0,
        0,
        1228,
        1229,
        1,
        0,
        0,
        0,
        1229,
        1231,
        1,
        0,
        0,
        0,
        1230,
        1232,
        3,
        100,
        50,
        0,
        1231,
        1230,
        1,
        0,
        0,
        0,
        1231,
        1232,
        1,
        0,
        0,
        0,
        1232,
        1234,
        1,
        0,
        0,
        0,
        1233,
        1235,
        3,
        104,
        52,
        0,
        1234,
        1233,
        1,
        0,
        0,
        0,
        1234,
        1235,
        1,
        0,
        0,
        0,
        1235,
        1236,
        1,
        0,
        0,
        0,
        1236,
        1237,
        5,
        2,
        0,
        0,
        1237,
        1238,
        5,
        2,
        0,
        0,
        1238,
        1270,
        1,
        0,
        0,
        0,
        1239,
        1240,
        7,
        21,
        0,
        0,
        1240,
        1241,
        5,
        1,
        0,
        0,
        1241,
        1248,
        3,
        4,
        2,
        0,
        1242,
        1243,
        5,
        17,
        0,
        0,
        1243,
        1246,
        3,
        106,
        53,
        0,
        1244,
        1245,
        5,
        17,
        0,
        0,
        1245,
        1247,
        3,
        86,
        43,
        0,
        1246,
        1244,
        1,
        0,
        0,
        0,
        1246,
        1247,
        1,
        0,
        0,
        0,
        1247,
        1249,
        1,
        0,
        0,
        0,
        1248,
        1242,
        1,
        0,
        0,
        0,
        1248,
        1249,
        1,
        0,
        0,
        0,
        1249,
        1250,
        1,
        0,
        0,
        0,
        1250,
        1251,
        5,
        152,
        0,
        0,
        1251,
        1253,
        5,
        1,
        0,
        0,
        1252,
        1254,
        3,
        98,
        49,
        0,
        1253,
        1252,
        1,
        0,
        0,
        0,
        1253,
        1254,
        1,
        0,
        0,
        0,
        1254,
        1255,
        1,
        0,
        0,
        0,
        1255,
        1256,
        3,
        100,
        50,
        0,
        1256,
        1257,
        1,
        0,
        0,
        0,
        1257,
        1258,
        5,
        2,
        0,
        0,
        1258,
        1259,
        5,
        2,
        0,
        0,
        1259,
        1270,
        1,
        0,
        0,
        0,
        1260,
        1261,
        5,
        151,
        0,
        0,
        1261,
        1262,
        5,
        1,
        0,
        0,
        1262,
        1263,
        3,
        4,
        2,
        0,
        1263,
        1264,
        5,
        152,
        0,
        0,
        1264,
        1265,
        5,
        1,
        0,
        0,
        1265,
        1266,
        3,
        98,
        49,
        0,
        1266,
        1267,
        5,
        2,
        0,
        0,
        1267,
        1268,
        5,
        2,
        0,
        0,
        1268,
        1270,
        1,
        0,
        0,
        0,
        1269,
        1222,
        1,
        0,
        0,
        0,
        1269,
        1239,
        1,
        0,
        0,
        0,
        1269,
        1260,
        1,
        0,
        0,
        0,
        1270,
        73,
        1,
        0,
        0,
        0,
        1271,
        1272,
        7,
        20,
        0,
        0,
        1272,
        1273,
        5,
        1,
        0,
        0,
        1273,
        1274,
        3,
        6,
        3,
        0,
        1274,
        1275,
        5,
        152,
        0,
        0,
        1275,
        1277,
        5,
        1,
        0,
        0,
        1276,
        1278,
        3,
        98,
        49,
        0,
        1277,
        1276,
        1,
        0,
        0,
        0,
        1277,
        1278,
        1,
        0,
        0,
        0,
        1278,
        1280,
        1,
        0,
        0,
        0,
        1279,
        1281,
        3,
        100,
        50,
        0,
        1280,
        1279,
        1,
        0,
        0,
        0,
        1280,
        1281,
        1,
        0,
        0,
        0,
        1281,
        1283,
        1,
        0,
        0,
        0,
        1282,
        1284,
        3,
        104,
        52,
        0,
        1283,
        1282,
        1,
        0,
        0,
        0,
        1283,
        1284,
        1,
        0,
        0,
        0,
        1284,
        1285,
        1,
        0,
        0,
        0,
        1285,
        1286,
        5,
        2,
        0,
        0,
        1286,
        1287,
        5,
        2,
        0,
        0,
        1287,
        1330,
        1,
        0,
        0,
        0,
        1288,
        1289,
        7,
        21,
        0,
        0,
        1289,
        1290,
        5,
        1,
        0,
        0,
        1290,
        1296,
        3,
        6,
        3,
        0,
        1291,
        1292,
        5,
        17,
        0,
        0,
        1292,
        1294,
        3,
        106,
        53,
        0,
        1293,
        1295,
        3,
        86,
        43,
        0,
        1294,
        1293,
        1,
        0,
        0,
        0,
        1294,
        1295,
        1,
        0,
        0,
        0,
        1295,
        1297,
        1,
        0,
        0,
        0,
        1296,
        1291,
        1,
        0,
        0,
        0,
        1296,
        1297,
        1,
        0,
        0,
        0,
        1297,
        1298,
        1,
        0,
        0,
        0,
        1298,
        1299,
        5,
        152,
        0,
        0,
        1299,
        1301,
        5,
        1,
        0,
        0,
        1300,
        1302,
        3,
        98,
        49,
        0,
        1301,
        1300,
        1,
        0,
        0,
        0,
        1301,
        1302,
        1,
        0,
        0,
        0,
        1302,
        1303,
        1,
        0,
        0,
        0,
        1303,
        1304,
        3,
        100,
        50,
        0,
        1304,
        1305,
        1,
        0,
        0,
        0,
        1305,
        1306,
        5,
        2,
        0,
        0,
        1306,
        1307,
        5,
        2,
        0,
        0,
        1307,
        1330,
        1,
        0,
        0,
        0,
        1308,
        1309,
        5,
        77,
        0,
        0,
        1309,
        1310,
        5,
        1,
        0,
        0,
        1310,
        1311,
        5,
        152,
        0,
        0,
        1311,
        1313,
        5,
        1,
        0,
        0,
        1312,
        1314,
        3,
        98,
        49,
        0,
        1313,
        1312,
        1,
        0,
        0,
        0,
        1313,
        1314,
        1,
        0,
        0,
        0,
        1314,
        1315,
        1,
        0,
        0,
        0,
        1315,
        1316,
        3,
        100,
        50,
        0,
        1316,
        1317,
        1,
        0,
        0,
        0,
        1317,
        1318,
        5,
        2,
        0,
        0,
        1318,
        1319,
        5,
        2,
        0,
        0,
        1319,
        1330,
        1,
        0,
        0,
        0,
        1320,
        1321,
        5,
        151,
        0,
        0,
        1321,
        1322,
        5,
        1,
        0,
        0,
        1322,
        1323,
        3,
        6,
        3,
        0,
        1323,
        1324,
        5,
        152,
        0,
        0,
        1324,
        1325,
        5,
        1,
        0,
        0,
        1325,
        1326,
        3,
        98,
        49,
        0,
        1326,
        1327,
        5,
        2,
        0,
        0,
        1327,
        1328,
        5,
        2,
        0,
        0,
        1328,
        1330,
        1,
        0,
        0,
        0,
        1329,
        1271,
        1,
        0,
        0,
        0,
        1329,
        1288,
        1,
        0,
        0,
        0,
        1329,
        1308,
        1,
        0,
        0,
        0,
        1329,
        1320,
        1,
        0,
        0,
        0,
        1330,
        75,
        1,
        0,
        0,
        0,
        1331,
        1332,
        3,
        192,
        96,
        0,
        1332,
        1333,
        5,
        68,
        0,
        0,
        1333,
        1334,
        3,
        192,
        96,
        0,
        1334,
        77,
        1,
        0,
        0,
        0,
        1335,
        1340,
        3,
        80,
        40,
        0,
        1336,
        1337,
        5,
        17,
        0,
        0,
        1337,
        1339,
        3,
        80,
        40,
        0,
        1338,
        1336,
        1,
        0,
        0,
        0,
        1339,
        1342,
        1,
        0,
        0,
        0,
        1340,
        1338,
        1,
        0,
        0,
        0,
        1340,
        1341,
        1,
        0,
        0,
        0,
        1341,
        79,
        1,
        0,
        0,
        0,
        1342,
        1340,
        1,
        0,
        0,
        0,
        1343,
        1345,
        3,
        206,
        103,
        0,
        1344,
        1343,
        1,
        0,
        0,
        0,
        1344,
        1345,
        1,
        0,
        0,
        0,
        1345,
        1346,
        1,
        0,
        0,
        0,
        1346,
        1347,
        3,
        192,
        96,
        0,
        1347,
        1348,
        5,
        20,
        0,
        0,
        1348,
        1349,
        3,
        68,
        34,
        0,
        1349,
        81,
        1,
        0,
        0,
        0,
        1350,
        1352,
        3,
        206,
        103,
        0,
        1351,
        1350,
        1,
        0,
        0,
        0,
        1351,
        1352,
        1,
        0,
        0,
        0,
        1352,
        1353,
        1,
        0,
        0,
        0,
        1353,
        1354,
        3,
        192,
        96,
        0,
        1354,
        1355,
        5,
        20,
        0,
        0,
        1355,
        1356,
        3,
        6,
        3,
        0,
        1356,
        83,
        1,
        0,
        0,
        0,
        1357,
        1358,
        3,
        192,
        96,
        0,
        1358,
        1359,
        5,
        7,
        0,
        0,
        1359,
        1360,
        3,
        86,
        43,
        0,
        1360,
        85,
        1,
        0,
        0,
        0,
        1361,
        1374,
        3,
        216,
        108,
        0,
        1362,
        1363,
        5,
        218,
        0,
        0,
        1363,
        1364,
        5,
        1,
        0,
        0,
        1364,
        1365,
        3,
        216,
        108,
        0,
        1365,
        1366,
        5,
        17,
        0,
        0,
        1366,
        1369,
        3,
        218,
        109,
        0,
        1367,
        1368,
        5,
        17,
        0,
        0,
        1368,
        1370,
        5,
        244,
        0,
        0,
        1369,
        1367,
        1,
        0,
        0,
        0,
        1369,
        1370,
        1,
        0,
        0,
        0,
        1370,
        1371,
        1,
        0,
        0,
        0,
        1371,
        1372,
        5,
        2,
        0,
        0,
        1372,
        1374,
        1,
        0,
        0,
        0,
        1373,
        1361,
        1,
        0,
        0,
        0,
        1373,
        1362,
        1,
        0,
        0,
        0,
        1374,
        87,
        1,
        0,
        0,
        0,
        1375,
        1380,
        3,
        92,
        46,
        0,
        1376,
        1377,
        5,
        17,
        0,
        0,
        1377,
        1379,
        3,
        92,
        46,
        0,
        1378,
        1376,
        1,
        0,
        0,
        0,
        1379,
        1382,
        1,
        0,
        0,
        0,
        1380,
        1378,
        1,
        0,
        0,
        0,
        1380,
        1381,
        1,
        0,
        0,
        0,
        1381,
        89,
        1,
        0,
        0,
        0,
        1382,
        1380,
        1,
        0,
        0,
        0,
        1383,
        1388,
        3,
        92,
        46,
        0,
        1384,
        1385,
        5,
        17,
        0,
        0,
        1385,
        1387,
        3,
        92,
        46,
        0,
        1386,
        1384,
        1,
        0,
        0,
        0,
        1387,
        1390,
        1,
        0,
        0,
        0,
        1388,
        1386,
        1,
        0,
        0,
        0,
        1388,
        1389,
        1,
        0,
        0,
        0,
        1389,
        1400,
        1,
        0,
        0,
        0,
        1390,
        1388,
        1,
        0,
        0,
        0,
        1391,
        1392,
        5,
        27,
        0,
        0,
        1392,
        1397,
        3,
        192,
        96,
        0,
        1393,
        1394,
        5,
        17,
        0,
        0,
        1394,
        1396,
        3,
        192,
        96,
        0,
        1395,
        1393,
        1,
        0,
        0,
        0,
        1396,
        1399,
        1,
        0,
        0,
        0,
        1397,
        1395,
        1,
        0,
        0,
        0,
        1397,
        1398,
        1,
        0,
        0,
        0,
        1398,
        1401,
        1,
        0,
        0,
        0,
        1399,
        1397,
        1,
        0,
        0,
        0,
        1400,
        1391,
        1,
        0,
        0,
        0,
        1400,
        1401,
        1,
        0,
        0,
        0,
        1401,
        91,
        1,
        0,
        0,
        0,
        1402,
        1405,
        3,
        4,
        2,
        0,
        1403,
        1404,
        5,
        46,
        0,
        0,
        1404,
        1406,
        3,
        186,
        93,
        0,
        1405,
        1403,
        1,
        0,
        0,
        0,
        1405,
        1406,
        1,
        0,
        0,
        0,
        1406,
        93,
        1,
        0,
        0,
        0,
        1407,
        1409,
        3,
        18,
        9,
        0,
        1408,
        1407,
        1,
        0,
        0,
        0,
        1408,
        1409,
        1,
        0,
        0,
        0,
        1409,
        1413,
        1,
        0,
        0,
        0,
        1410,
        1414,
        3,
        20,
        10,
        0,
        1411,
        1414,
        3,
        96,
        48,
        0,
        1412,
        1414,
        3,
        16,
        8,
        0,
        1413,
        1410,
        1,
        0,
        0,
        0,
        1413,
        1411,
        1,
        0,
        0,
        0,
        1413,
        1412,
        1,
        0,
        0,
        0,
        1413,
        1414,
        1,
        0,
        0,
        0,
        1414,
        1416,
        1,
        0,
        0,
        0,
        1415,
        1417,
        3,
        22,
        11,
        0,
        1416,
        1415,
        1,
        0,
        0,
        0,
        1416,
        1417,
        1,
        0,
        0,
        0,
        1417,
        1419,
        1,
        0,
        0,
        0,
        1418,
        1420,
        3,
        14,
        7,
        0,
        1419,
        1418,
        1,
        0,
        0,
        0,
        1419,
        1420,
        1,
        0,
        0,
        0,
        1420,
        95,
        1,
        0,
        0,
        0,
        1421,
        1422,
        5,
        206,
        0,
        0,
        1422,
        1423,
        3,
        4,
        2,
        0,
        1423,
        97,
        1,
        0,
        0,
        0,
        1424,
        1425,
        5,
        156,
        0,
        0,
        1425,
        1426,
        5,
        76,
        0,
        0,
        1426,
        1431,
        3,
        192,
        96,
        0,
        1427,
        1428,
        5,
        17,
        0,
        0,
        1428,
        1430,
        3,
        192,
        96,
        0,
        1429,
        1427,
        1,
        0,
        0,
        0,
        1430,
        1433,
        1,
        0,
        0,
        0,
        1431,
        1429,
        1,
        0,
        0,
        0,
        1431,
        1432,
        1,
        0,
        0,
        0,
        1432,
        99,
        1,
        0,
        0,
        0,
        1433,
        1431,
        1,
        0,
        0,
        0,
        1434,
        1435,
        5,
        75,
        0,
        0,
        1435,
        1436,
        5,
        76,
        0,
        0,
        1436,
        1441,
        3,
        102,
        51,
        0,
        1437,
        1438,
        5,
        17,
        0,
        0,
        1438,
        1440,
        3,
        102,
        51,
        0,
        1439,
        1437,
        1,
        0,
        0,
        0,
        1440,
        1443,
        1,
        0,
        0,
        0,
        1441,
        1439,
        1,
        0,
        0,
        0,
        1441,
        1442,
        1,
        0,
        0,
        0,
        1442,
        101,
        1,
        0,
        0,
        0,
        1443,
        1441,
        1,
        0,
        0,
        0,
        1444,
        1446,
        3,
        192,
        96,
        0,
        1445,
        1447,
        7,
        22,
        0,
        0,
        1446,
        1445,
        1,
        0,
        0,
        0,
        1446,
        1447,
        1,
        0,
        0,
        0,
        1447,
        103,
        1,
        0,
        0,
        0,
        1448,
        1449,
        5,
        119,
        0,
        0,
        1449,
        1452,
        5,
        188,
        0,
        0,
        1450,
        1452,
        5,
        158,
        0,
        0,
        1451,
        1448,
        1,
        0,
        0,
        0,
        1451,
        1450,
        1,
        0,
        0,
        0,
        1452,
        1453,
        1,
        0,
        0,
        0,
        1453,
        1454,
        5,
        51,
        0,
        0,
        1454,
        1455,
        3,
        110,
        55,
        0,
        1455,
        1456,
        5,
        47,
        0,
        0,
        1456,
        1457,
        3,
        110,
        55,
        0,
        1457,
        105,
        1,
        0,
        0,
        0,
        1458,
        1460,
        7,
        23,
        0,
        0,
        1459,
        1458,
        1,
        0,
        0,
        0,
        1459,
        1460,
        1,
        0,
        0,
        0,
        1460,
        1461,
        1,
        0,
        0,
        0,
        1461,
        1462,
        5,
        241,
        0,
        0,
        1462,
        107,
        1,
        0,
        0,
        0,
        1463,
        1465,
        7,
        23,
        0,
        0,
        1464,
        1463,
        1,
        0,
        0,
        0,
        1464,
        1465,
        1,
        0,
        0,
        0,
        1465,
        1466,
        1,
        0,
        0,
        0,
        1466,
        1467,
        5,
        242,
        0,
        0,
        1467,
        109,
        1,
        0,
        0,
        0,
        1468,
        1469,
        3,
        106,
        53,
        0,
        1469,
        1470,
        5,
        153,
        0,
        0,
        1470,
        1482,
        1,
        0,
        0,
        0,
        1471,
        1472,
        3,
        106,
        53,
        0,
        1472,
        1473,
        5,
        154,
        0,
        0,
        1473,
        1482,
        1,
        0,
        0,
        0,
        1474,
        1475,
        5,
        159,
        0,
        0,
        1475,
        1476,
        5,
        119,
        0,
        0,
        1476,
        1482,
        5,
        189,
        0,
        0,
        1477,
        1478,
        5,
        155,
        0,
        0,
        1478,
        1482,
        5,
        153,
        0,
        0,
        1479,
        1480,
        5,
        155,
        0,
        0,
        1480,
        1482,
        5,
        154,
        0,
        0,
        1481,
        1468,
        1,
        0,
        0,
        0,
        1481,
        1471,
        1,
        0,
        0,
        0,
        1481,
        1474,
        1,
        0,
        0,
        0,
        1481,
        1477,
        1,
        0,
        0,
        0,
        1481,
        1479,
        1,
        0,
        0,
        0,
        1482,
        111,
        1,
        0,
        0,
        0,
        1483,
        1484,
        5,
        144,
        0,
        0,
        1484,
        1485,
        7,
        24,
        0,
        0,
        1485,
        1490,
        3,
        192,
        96,
        0,
        1486,
        1487,
        5,
        17,
        0,
        0,
        1487,
        1489,
        3,
        192,
        96,
        0,
        1488,
        1486,
        1,
        0,
        0,
        0,
        1489,
        1492,
        1,
        0,
        0,
        0,
        1490,
        1488,
        1,
        0,
        0,
        0,
        1490,
        1491,
        1,
        0,
        0,
        0,
        1491,
        1501,
        1,
        0,
        0,
        0,
        1492,
        1490,
        1,
        0,
        0,
        0,
        1493,
        1494,
        5,
        211,
        0,
        0,
        1494,
        1495,
        5,
        1,
        0,
        0,
        1495,
        1498,
        5,
        244,
        0,
        0,
        1496,
        1497,
        5,
        17,
        0,
        0,
        1497,
        1499,
        7,
        16,
        0,
        0,
        1498,
        1496,
        1,
        0,
        0,
        0,
        1498,
        1499,
        1,
        0,
        0,
        0,
        1499,
        1500,
        1,
        0,
        0,
        0,
        1500,
        1502,
        5,
        2,
        0,
        0,
        1501,
        1493,
        1,
        0,
        0,
        0,
        1501,
        1502,
        1,
        0,
        0,
        0,
        1502,
        1512,
        1,
        0,
        0,
        0,
        1503,
        1504,
        5,
        144,
        0,
        0,
        1504,
        1509,
        5,
        72,
        0,
        0,
        1505,
        1506,
        5,
        211,
        0,
        0,
        1506,
        1507,
        5,
        1,
        0,
        0,
        1507,
        1508,
        5,
        244,
        0,
        0,
        1508,
        1510,
        5,
        2,
        0,
        0,
        1509,
        1505,
        1,
        0,
        0,
        0,
        1509,
        1510,
        1,
        0,
        0,
        0,
        1510,
        1512,
        1,
        0,
        0,
        0,
        1511,
        1483,
        1,
        0,
        0,
        0,
        1511,
        1503,
        1,
        0,
        0,
        0,
        1512,
        113,
        1,
        0,
        0,
        0,
        1513,
        1514,
        5,
        146,
        0,
        0,
        1514,
        1515,
        3,
        6,
        3,
        0,
        1515,
        115,
        1,
        0,
        0,
        0,
        1516,
        1517,
        3,
        188,
        94,
        0,
        1517,
        1520,
        3,
        122,
        61,
        0,
        1518,
        1519,
        5,
        221,
        0,
        0,
        1519,
        1521,
        3,
        86,
        43,
        0,
        1520,
        1518,
        1,
        0,
        0,
        0,
        1520,
        1521,
        1,
        0,
        0,
        0,
        1521,
        117,
        1,
        0,
        0,
        0,
        1522,
        1526,
        3,
        126,
        63,
        0,
        1523,
        1526,
        3,
        130,
        65,
        0,
        1524,
        1526,
        3,
        128,
        64,
        0,
        1525,
        1522,
        1,
        0,
        0,
        0,
        1525,
        1523,
        1,
        0,
        0,
        0,
        1525,
        1524,
        1,
        0,
        0,
        0,
        1526,
        119,
        1,
        0,
        0,
        0,
        1527,
        1530,
        3,
        128,
        64,
        0,
        1528,
        1530,
        3,
        126,
        63,
        0,
        1529,
        1527,
        1,
        0,
        0,
        0,
        1529,
        1528,
        1,
        0,
        0,
        0,
        1530,
        121,
        1,
        0,
        0,
        0,
        1531,
        1537,
        3,
        126,
        63,
        0,
        1532,
        1537,
        3,
        130,
        65,
        0,
        1533,
        1537,
        3,
        134,
        67,
        0,
        1534,
        1537,
        3,
        124,
        62,
        0,
        1535,
        1537,
        3,
        128,
        64,
        0,
        1536,
        1531,
        1,
        0,
        0,
        0,
        1536,
        1532,
        1,
        0,
        0,
        0,
        1536,
        1533,
        1,
        0,
        0,
        0,
        1536,
        1534,
        1,
        0,
        0,
        0,
        1536,
        1535,
        1,
        0,
        0,
        0,
        1537,
        123,
        1,
        0,
        0,
        0,
        1538,
        1542,
        5,
        127,
        0,
        0,
        1539,
        1542,
        3,
        136,
        68,
        0,
        1540,
        1542,
        3,
        138,
        69,
        0,
        1541,
        1538,
        1,
        0,
        0,
        0,
        1541,
        1539,
        1,
        0,
        0,
        0,
        1541,
        1540,
        1,
        0,
        0,
        0,
        1542,
        125,
        1,
        0,
        0,
        0,
        1543,
        1546,
        3,
        218,
        109,
        0,
        1544,
        1546,
        3,
        140,
        70,
        0,
        1545,
        1543,
        1,
        0,
        0,
        0,
        1545,
        1544,
        1,
        0,
        0,
        0,
        1546,
        1548,
        1,
        0,
        0,
        0,
        1547,
        1549,
        3,
        166,
        83,
        0,
        1548,
        1547,
        1,
        0,
        0,
        0,
        1548,
        1549,
        1,
        0,
        0,
        0,
        1549,
        1554,
        1,
        0,
        0,
        0,
        1550,
        1552,
        5,
        50,
        0,
        0,
        1551,
        1550,
        1,
        0,
        0,
        0,
        1551,
        1552,
        1,
        0,
        0,
        0,
        1552,
        1553,
        1,
        0,
        0,
        0,
        1553,
        1555,
        5,
        54,
        0,
        0,
        1554,
        1551,
        1,
        0,
        0,
        0,
        1554,
        1555,
        1,
        0,
        0,
        0,
        1555,
        127,
        1,
        0,
        0,
        0,
        1556,
        1561,
        3,
        206,
        103,
        0,
        1557,
        1558,
        5,
        8,
        0,
        0,
        1558,
        1559,
        3,
        126,
        63,
        0,
        1559,
        1560,
        5,
        9,
        0,
        0,
        1560,
        1562,
        1,
        0,
        0,
        0,
        1561,
        1557,
        1,
        0,
        0,
        0,
        1561,
        1562,
        1,
        0,
        0,
        0,
        1562,
        129,
        1,
        0,
        0,
        0,
        1563,
        1575,
        5,
        121,
        0,
        0,
        1564,
        1565,
        5,
        5,
        0,
        0,
        1565,
        1570,
        3,
        168,
        84,
        0,
        1566,
        1567,
        5,
        17,
        0,
        0,
        1567,
        1569,
        3,
        168,
        84,
        0,
        1568,
        1566,
        1,
        0,
        0,
        0,
        1569,
        1572,
        1,
        0,
        0,
        0,
        1570,
        1568,
        1,
        0,
        0,
        0,
        1570,
        1571,
        1,
        0,
        0,
        0,
        1571,
        1573,
        1,
        0,
        0,
        0,
        1572,
        1570,
        1,
        0,
        0,
        0,
        1573,
        1574,
        5,
        6,
        0,
        0,
        1574,
        1576,
        1,
        0,
        0,
        0,
        1575,
        1564,
        1,
        0,
        0,
        0,
        1575,
        1576,
        1,
        0,
        0,
        0,
        1576,
        131,
        1,
        0,
        0,
        0,
        1577,
        1580,
        3,
        130,
        65,
        0,
        1578,
        1580,
        3,
        126,
        63,
        0,
        1579,
        1577,
        1,
        0,
        0,
        0,
        1579,
        1578,
        1,
        0,
        0,
        0,
        1580,
        133,
        1,
        0,
        0,
        0,
        1581,
        1586,
        5,
        239,
        0,
        0,
        1582,
        1583,
        5,
        8,
        0,
        0,
        1583,
        1584,
        3,
        126,
        63,
        0,
        1584,
        1585,
        5,
        9,
        0,
        0,
        1585,
        1587,
        1,
        0,
        0,
        0,
        1586,
        1582,
        1,
        0,
        0,
        0,
        1586,
        1587,
        1,
        0,
        0,
        0,
        1587,
        135,
        1,
        0,
        0,
        0,
        1588,
        1618,
        5,
        125,
        0,
        0,
        1589,
        1601,
        5,
        235,
        0,
        0,
        1590,
        1591,
        5,
        5,
        0,
        0,
        1591,
        1596,
        3,
        140,
        70,
        0,
        1592,
        1593,
        5,
        15,
        0,
        0,
        1593,
        1595,
        3,
        140,
        70,
        0,
        1594,
        1592,
        1,
        0,
        0,
        0,
        1595,
        1598,
        1,
        0,
        0,
        0,
        1596,
        1594,
        1,
        0,
        0,
        0,
        1596,
        1597,
        1,
        0,
        0,
        0,
        1597,
        1599,
        1,
        0,
        0,
        0,
        1598,
        1596,
        1,
        0,
        0,
        0,
        1599,
        1600,
        5,
        6,
        0,
        0,
        1600,
        1602,
        1,
        0,
        0,
        0,
        1601,
        1590,
        1,
        0,
        0,
        0,
        1601,
        1602,
        1,
        0,
        0,
        0,
        1602,
        1618,
        1,
        0,
        0,
        0,
        1603,
        1615,
        5,
        236,
        0,
        0,
        1604,
        1605,
        5,
        5,
        0,
        0,
        1605,
        1610,
        3,
        188,
        94,
        0,
        1606,
        1607,
        5,
        15,
        0,
        0,
        1607,
        1609,
        3,
        188,
        94,
        0,
        1608,
        1606,
        1,
        0,
        0,
        0,
        1609,
        1612,
        1,
        0,
        0,
        0,
        1610,
        1608,
        1,
        0,
        0,
        0,
        1610,
        1611,
        1,
        0,
        0,
        0,
        1611,
        1613,
        1,
        0,
        0,
        0,
        1612,
        1610,
        1,
        0,
        0,
        0,
        1613,
        1614,
        5,
        6,
        0,
        0,
        1614,
        1616,
        1,
        0,
        0,
        0,
        1615,
        1604,
        1,
        0,
        0,
        0,
        1615,
        1616,
        1,
        0,
        0,
        0,
        1616,
        1618,
        1,
        0,
        0,
        0,
        1617,
        1588,
        1,
        0,
        0,
        0,
        1617,
        1589,
        1,
        0,
        0,
        0,
        1617,
        1603,
        1,
        0,
        0,
        0,
        1618,
        137,
        1,
        0,
        0,
        0,
        1619,
        1660,
        5,
        126,
        0,
        0,
        1620,
        1637,
        5,
        237,
        0,
        0,
        1621,
        1622,
        5,
        5,
        0,
        0,
        1622,
        1634,
        5,
        245,
        0,
        0,
        1623,
        1624,
        5,
        1,
        0,
        0,
        1624,
        1629,
        3,
        140,
        70,
        0,
        1625,
        1626,
        5,
        15,
        0,
        0,
        1626,
        1628,
        3,
        140,
        70,
        0,
        1627,
        1625,
        1,
        0,
        0,
        0,
        1628,
        1631,
        1,
        0,
        0,
        0,
        1629,
        1627,
        1,
        0,
        0,
        0,
        1629,
        1630,
        1,
        0,
        0,
        0,
        1630,
        1632,
        1,
        0,
        0,
        0,
        1631,
        1629,
        1,
        0,
        0,
        0,
        1632,
        1633,
        5,
        2,
        0,
        0,
        1633,
        1635,
        1,
        0,
        0,
        0,
        1634,
        1623,
        1,
        0,
        0,
        0,
        1634,
        1635,
        1,
        0,
        0,
        0,
        1635,
        1636,
        1,
        0,
        0,
        0,
        1636,
        1638,
        5,
        6,
        0,
        0,
        1637,
        1621,
        1,
        0,
        0,
        0,
        1637,
        1638,
        1,
        0,
        0,
        0,
        1638,
        1660,
        1,
        0,
        0,
        0,
        1639,
        1657,
        5,
        238,
        0,
        0,
        1640,
        1641,
        5,
        5,
        0,
        0,
        1641,
        1653,
        3,
        188,
        94,
        0,
        1642,
        1643,
        5,
        1,
        0,
        0,
        1643,
        1648,
        3,
        188,
        94,
        0,
        1644,
        1645,
        5,
        15,
        0,
        0,
        1645,
        1647,
        3,
        188,
        94,
        0,
        1646,
        1644,
        1,
        0,
        0,
        0,
        1647,
        1650,
        1,
        0,
        0,
        0,
        1648,
        1646,
        1,
        0,
        0,
        0,
        1648,
        1649,
        1,
        0,
        0,
        0,
        1649,
        1651,
        1,
        0,
        0,
        0,
        1650,
        1648,
        1,
        0,
        0,
        0,
        1651,
        1652,
        5,
        2,
        0,
        0,
        1652,
        1654,
        1,
        0,
        0,
        0,
        1653,
        1642,
        1,
        0,
        0,
        0,
        1653,
        1654,
        1,
        0,
        0,
        0,
        1654,
        1655,
        1,
        0,
        0,
        0,
        1655,
        1656,
        5,
        6,
        0,
        0,
        1656,
        1658,
        1,
        0,
        0,
        0,
        1657,
        1640,
        1,
        0,
        0,
        0,
        1657,
        1658,
        1,
        0,
        0,
        0,
        1658,
        1660,
        1,
        0,
        0,
        0,
        1659,
        1619,
        1,
        0,
        0,
        0,
        1659,
        1620,
        1,
        0,
        0,
        0,
        1659,
        1639,
        1,
        0,
        0,
        0,
        1660,
        139,
        1,
        0,
        0,
        0,
        1661,
        1662,
        5,
        245,
        0,
        0,
        1662,
        141,
        1,
        0,
        0,
        0,
        1663,
        1664,
        5,
        245,
        0,
        0,
        1664,
        143,
        1,
        0,
        0,
        0,
        1665,
        1666,
        7,
        25,
        0,
        0,
        1666,
        1671,
        3,
        146,
        73,
        0,
        1667,
        1668,
        5,
        17,
        0,
        0,
        1668,
        1670,
        3,
        146,
        73,
        0,
        1669,
        1667,
        1,
        0,
        0,
        0,
        1670,
        1673,
        1,
        0,
        0,
        0,
        1671,
        1669,
        1,
        0,
        0,
        0,
        1671,
        1672,
        1,
        0,
        0,
        0,
        1672,
        145,
        1,
        0,
        0,
        0,
        1673,
        1671,
        1,
        0,
        0,
        0,
        1674,
        1677,
        3,
        188,
        94,
        0,
        1675,
        1676,
        5,
        46,
        0,
        0,
        1676,
        1678,
        3,
        186,
        93,
        0,
        1677,
        1675,
        1,
        0,
        0,
        0,
        1677,
        1678,
        1,
        0,
        0,
        0,
        1678,
        147,
        1,
        0,
        0,
        0,
        1679,
        1684,
        3,
        150,
        75,
        0,
        1680,
        1681,
        5,
        247,
        0,
        0,
        1681,
        1683,
        3,
        150,
        75,
        0,
        1682,
        1680,
        1,
        0,
        0,
        0,
        1683,
        1686,
        1,
        0,
        0,
        0,
        1684,
        1682,
        1,
        0,
        0,
        0,
        1684,
        1685,
        1,
        0,
        0,
        0,
        1685,
        149,
        1,
        0,
        0,
        0,
        1686,
        1684,
        1,
        0,
        0,
        0,
        1687,
        1688,
        5,
        245,
        0,
        0,
        1688,
        1690,
        5,
        19,
        0,
        0,
        1689,
        1687,
        1,
        0,
        0,
        0,
        1689,
        1690,
        1,
        0,
        0,
        0,
        1690,
        1695,
        1,
        0,
        0,
        0,
        1691,
        1692,
        5,
        185,
        0,
        0,
        1692,
        1693,
        3,
        6,
        3,
        0,
        1693,
        1694,
        5,
        25,
        0,
        0,
        1694,
        1696,
        1,
        0,
        0,
        0,
        1695,
        1691,
        1,
        0,
        0,
        0,
        1695,
        1696,
        1,
        0,
        0,
        0,
        1696,
        1697,
        1,
        0,
        0,
        0,
        1697,
        1699,
        3,
        6,
        3,
        0,
        1698,
        1700,
        3,
        196,
        98,
        0,
        1699,
        1698,
        1,
        0,
        0,
        0,
        1699,
        1700,
        1,
        0,
        0,
        0,
        1700,
        1702,
        1,
        0,
        0,
        0,
        1701,
        1703,
        3,
        198,
        99,
        0,
        1702,
        1701,
        1,
        0,
        0,
        0,
        1702,
        1703,
        1,
        0,
        0,
        0,
        1703,
        151,
        1,
        0,
        0,
        0,
        1704,
        1709,
        3,
        154,
        77,
        0,
        1705,
        1706,
        5,
        247,
        0,
        0,
        1706,
        1708,
        3,
        154,
        77,
        0,
        1707,
        1705,
        1,
        0,
        0,
        0,
        1708,
        1711,
        1,
        0,
        0,
        0,
        1709,
        1707,
        1,
        0,
        0,
        0,
        1709,
        1710,
        1,
        0,
        0,
        0,
        1710,
        153,
        1,
        0,
        0,
        0,
        1711,
        1709,
        1,
        0,
        0,
        0,
        1712,
        1713,
        5,
        245,
        0,
        0,
        1713,
        1715,
        5,
        19,
        0,
        0,
        1714,
        1712,
        1,
        0,
        0,
        0,
        1714,
        1715,
        1,
        0,
        0,
        0,
        1715,
        1716,
        1,
        0,
        0,
        0,
        1716,
        1718,
        3,
        160,
        80,
        0,
        1717,
        1719,
        3,
        196,
        98,
        0,
        1718,
        1717,
        1,
        0,
        0,
        0,
        1718,
        1719,
        1,
        0,
        0,
        0,
        1719,
        1721,
        1,
        0,
        0,
        0,
        1720,
        1722,
        3,
        198,
        99,
        0,
        1721,
        1720,
        1,
        0,
        0,
        0,
        1721,
        1722,
        1,
        0,
        0,
        0,
        1722,
        155,
        1,
        0,
        0,
        0,
        1723,
        1726,
        7,
        25,
        0,
        0,
        1724,
        1725,
        5,
        167,
        0,
        0,
        1725,
        1727,
        3,
        158,
        79,
        0,
        1726,
        1724,
        1,
        0,
        0,
        0,
        1726,
        1727,
        1,
        0,
        0,
        0,
        1727,
        1728,
        1,
        0,
        0,
        0,
        1728,
        1729,
        5,
        128,
        0,
        0,
        1729,
        1730,
        5,
        245,
        0,
        0,
        1730,
        157,
        1,
        0,
        0,
        0,
        1731,
        1736,
        3,
        146,
        73,
        0,
        1732,
        1733,
        5,
        17,
        0,
        0,
        1733,
        1735,
        3,
        146,
        73,
        0,
        1734,
        1732,
        1,
        0,
        0,
        0,
        1735,
        1738,
        1,
        0,
        0,
        0,
        1736,
        1734,
        1,
        0,
        0,
        0,
        1736,
        1737,
        1,
        0,
        0,
        0,
        1737,
        159,
        1,
        0,
        0,
        0,
        1738,
        1736,
        1,
        0,
        0,
        0,
        1739,
        1740,
        5,
        185,
        0,
        0,
        1740,
        1741,
        3,
        6,
        3,
        0,
        1741,
        1742,
        5,
        25,
        0,
        0,
        1742,
        1744,
        1,
        0,
        0,
        0,
        1743,
        1739,
        1,
        0,
        0,
        0,
        1743,
        1744,
        1,
        0,
        0,
        0,
        1744,
        1745,
        1,
        0,
        0,
        0,
        1745,
        1747,
        3,
        164,
        82,
        0,
        1746,
        1748,
        3,
        200,
        100,
        0,
        1747,
        1746,
        1,
        0,
        0,
        0,
        1747,
        1748,
        1,
        0,
        0,
        0,
        1748,
        1749,
        1,
        0,
        0,
        0,
        1749,
        1753,
        3,
        162,
        81,
        0,
        1750,
        1752,
        3,
        162,
        81,
        0,
        1751,
        1750,
        1,
        0,
        0,
        0,
        1752,
        1755,
        1,
        0,
        0,
        0,
        1753,
        1751,
        1,
        0,
        0,
        0,
        1753,
        1754,
        1,
        0,
        0,
        0,
        1754,
        161,
        1,
        0,
        0,
        0,
        1755,
        1753,
        1,
        0,
        0,
        0,
        1756,
        1758,
        7,
        23,
        0,
        0,
        1757,
        1756,
        1,
        0,
        0,
        0,
        1757,
        1758,
        1,
        0,
        0,
        0,
        1758,
        1759,
        1,
        0,
        0,
        0,
        1759,
        1764,
        3,
        164,
        82,
        0,
        1760,
        1761,
        5,
        3,
        0,
        0,
        1761,
        1762,
        3,
        6,
        3,
        0,
        1762,
        1763,
        5,
        4,
        0,
        0,
        1763,
        1765,
        1,
        0,
        0,
        0,
        1764,
        1760,
        1,
        0,
        0,
        0,
        1764,
        1765,
        1,
        0,
        0,
        0,
        1765,
        163,
        1,
        0,
        0,
        0,
        1766,
        1770,
        5,
        245,
        0,
        0,
        1767,
        1770,
        3,
        106,
        53,
        0,
        1768,
        1770,
        3,
        108,
        54,
        0,
        1769,
        1766,
        1,
        0,
        0,
        0,
        1769,
        1767,
        1,
        0,
        0,
        0,
        1769,
        1768,
        1,
        0,
        0,
        0,
        1770,
        165,
        1,
        0,
        0,
        0,
        1771,
        1772,
        5,
        3,
        0,
        0,
        1772,
        1773,
        3,
        6,
        3,
        0,
        1773,
        1774,
        5,
        4,
        0,
        0,
        1774,
        1787,
        1,
        0,
        0,
        0,
        1775,
        1776,
        5,
        5,
        0,
        0,
        1776,
        1781,
        3,
        86,
        43,
        0,
        1777,
        1778,
        5,
        17,
        0,
        0,
        1778,
        1780,
        3,
        86,
        43,
        0,
        1779,
        1777,
        1,
        0,
        0,
        0,
        1780,
        1783,
        1,
        0,
        0,
        0,
        1781,
        1779,
        1,
        0,
        0,
        0,
        1781,
        1782,
        1,
        0,
        0,
        0,
        1782,
        1784,
        1,
        0,
        0,
        0,
        1783,
        1781,
        1,
        0,
        0,
        0,
        1784,
        1785,
        5,
        6,
        0,
        0,
        1785,
        1787,
        1,
        0,
        0,
        0,
        1786,
        1771,
        1,
        0,
        0,
        0,
        1786,
        1775,
        1,
        0,
        0,
        0,
        1787,
        167,
        1,
        0,
        0,
        0,
        1788,
        1791,
        3,
        128,
        64,
        0,
        1789,
        1792,
        3,
        192,
        96,
        0,
        1790,
        1792,
        3,
        170,
        85,
        0,
        1791,
        1789,
        1,
        0,
        0,
        0,
        1791,
        1790,
        1,
        0,
        0,
        0,
        1792,
        169,
        1,
        0,
        0,
        0,
        1793,
        1795,
        5,
        115,
        0,
        0,
        1794,
        1796,
        7,
        26,
        0,
        0,
        1795,
        1794,
        1,
        0,
        0,
        0,
        1795,
        1796,
        1,
        0,
        0,
        0,
        1796,
        171,
        1,
        0,
        0,
        0,
        1797,
        1798,
        7,
        27,
        0,
        0,
        1798,
        173,
        1,
        0,
        0,
        0,
        1799,
        1800,
        7,
        28,
        0,
        0,
        1800,
        175,
        1,
        0,
        0,
        0,
        1801,
        1802,
        5,
        167,
        0,
        0,
        1802,
        1807,
        3,
        192,
        96,
        0,
        1803,
        1804,
        5,
        17,
        0,
        0,
        1804,
        1806,
        3,
        192,
        96,
        0,
        1805,
        1803,
        1,
        0,
        0,
        0,
        1806,
        1809,
        1,
        0,
        0,
        0,
        1807,
        1805,
        1,
        0,
        0,
        0,
        1807,
        1808,
        1,
        0,
        0,
        0,
        1808,
        177,
        1,
        0,
        0,
        0,
        1809,
        1807,
        1,
        0,
        0,
        0,
        1810,
        1811,
        7,
        29,
        0,
        0,
        1811,
        179,
        1,
        0,
        0,
        0,
        1812,
        1813,
        5,
        70,
        0,
        0,
        1813,
        1814,
        3,
        4,
        2,
        0,
        1814,
        181,
        1,
        0,
        0,
        0,
        1815,
        1816,
        7,
        30,
        0,
        0,
        1816,
        183,
        1,
        0,
        0,
        0,
        1817,
        1818,
        7,
        31,
        0,
        0,
        1818,
        185,
        1,
        0,
        0,
        0,
        1819,
        1820,
        5,
        245,
        0,
        0,
        1820,
        187,
        1,
        0,
        0,
        0,
        1821,
        1822,
        5,
        245,
        0,
        0,
        1822,
        189,
        1,
        0,
        0,
        0,
        1823,
        1824,
        5,
        245,
        0,
        0,
        1824,
        191,
        1,
        0,
        0,
        0,
        1825,
        1828,
        5,
        245,
        0,
        0,
        1826,
        1827,
        5,
        21,
        0,
        0,
        1827,
        1829,
        5,
        245,
        0,
        0,
        1828,
        1826,
        1,
        0,
        0,
        0,
        1828,
        1829,
        1,
        0,
        0,
        0,
        1829,
        193,
        1,
        0,
        0,
        0,
        1830,
        1831,
        5,
        5,
        0,
        0,
        1831,
        1836,
        3,
        86,
        43,
        0,
        1832,
        1833,
        5,
        17,
        0,
        0,
        1833,
        1835,
        3,
        86,
        43,
        0,
        1834,
        1832,
        1,
        0,
        0,
        0,
        1835,
        1838,
        1,
        0,
        0,
        0,
        1836,
        1834,
        1,
        0,
        0,
        0,
        1836,
        1837,
        1,
        0,
        0,
        0,
        1837,
        1839,
        1,
        0,
        0,
        0,
        1838,
        1836,
        1,
        0,
        0,
        0,
        1839,
        1840,
        5,
        6,
        0,
        0,
        1840,
        195,
        1,
        0,
        0,
        0,
        1841,
        1842,
        5,
        71,
        0,
        0,
        1842,
        1843,
        3,
        216,
        108,
        0,
        1843,
        197,
        1,
        0,
        0,
        0,
        1844,
        1845,
        5,
        74,
        0,
        0,
        1845,
        1846,
        3,
        216,
        108,
        0,
        1846,
        199,
        1,
        0,
        0,
        0,
        1847,
        1848,
        7,
        32,
        0,
        0,
        1848,
        201,
        1,
        0,
        0,
        0,
        1849,
        1852,
        3,
        4,
        2,
        0,
        1850,
        1852,
        5,
        115,
        0,
        0,
        1851,
        1849,
        1,
        0,
        0,
        0,
        1851,
        1850,
        1,
        0,
        0,
        0,
        1852,
        203,
        1,
        0,
        0,
        0,
        1853,
        1856,
        3,
        6,
        3,
        0,
        1854,
        1856,
        5,
        115,
        0,
        0,
        1855,
        1853,
        1,
        0,
        0,
        0,
        1855,
        1854,
        1,
        0,
        0,
        0,
        1856,
        205,
        1,
        0,
        0,
        0,
        1857,
        1863,
        5,
        104,
        0,
        0,
        1858,
        1863,
        5,
        234,
        0,
        0,
        1859,
        1863,
        5,
        103,
        0,
        0,
        1860,
        1863,
        5,
        105,
        0,
        0,
        1861,
        1863,
        3,
        208,
        104,
        0,
        1862,
        1857,
        1,
        0,
        0,
        0,
        1862,
        1858,
        1,
        0,
        0,
        0,
        1862,
        1859,
        1,
        0,
        0,
        0,
        1862,
        1860,
        1,
        0,
        0,
        0,
        1862,
        1861,
        1,
        0,
        0,
        0,
        1863,
        207,
        1,
        0,
        0,
        0,
        1864,
        1865,
        5,
        110,
        0,
        0,
        1865,
        1866,
        5,
        105,
        0,
        0,
        1866,
        209,
        1,
        0,
        0,
        0,
        1867,
        1868,
        5,
        245,
        0,
        0,
        1868,
        211,
        1,
        0,
        0,
        0,
        1869,
        1870,
        5,
        245,
        0,
        0,
        1870,
        213,
        1,
        0,
        0,
        0,
        1871,
        1872,
        5,
        245,
        0,
        0,
        1872,
        215,
        1,
        0,
        0,
        0,
        1873,
        1879,
        3,
        106,
        53,
        0,
        1874,
        1879,
        3,
        108,
        54,
        0,
        1875,
        1879,
        5,
        243,
        0,
        0,
        1876,
        1879,
        5,
        244,
        0,
        0,
        1877,
        1879,
        5,
        54,
        0,
        0,
        1878,
        1873,
        1,
        0,
        0,
        0,
        1878,
        1874,
        1,
        0,
        0,
        0,
        1878,
        1875,
        1,
        0,
        0,
        0,
        1878,
        1876,
        1,
        0,
        0,
        0,
        1878,
        1877,
        1,
        0,
        0,
        0,
        1879,
        217,
        1,
        0,
        0,
        0,
        1880,
        1881,
        7,
        33,
        0,
        0,
        1881,
        219,
        1,
        0,
        0,
        0,
        1882,
        1883,
        7,
        34,
        0,
        0,
        1883,
        221,
        1,
        0,
        0,
        0,
        201,
        227,
        241,
        266,
        273,
        303,
        305,
        307,
        333,
        340,
        362,
        364,
        366,
        377,
        391,
        400,
        408,
        415,
        417,
        428,
        437,
        455,
        464,
        479,
        490,
        493,
        498,
        531,
        540,
        543,
        553,
        558,
        562,
        568,
        572,
        582,
        586,
        590,
        599,
        602,
        612,
        616,
        626,
        631,
        635,
        641,
        645,
        649,
        653,
        657,
        673,
        677,
        688,
        699,
        703,
        707,
        723,
        727,
        738,
        749,
        753,
        757,
        769,
        780,
        792,
        803,
        833,
        837,
        860,
        865,
        873,
        894,
        898,
        902,
        964,
        969,
        977,
        998,
        1002,
        1006,
        1068,
        1077,
        1088,
        1099,
        1107,
        1111,
        1114,
        1117,
        1120,
        1135,
        1138,
        1141,
        1151,
        1155,
        1158,
        1161,
        1164,
        1172,
        1175,
        1178,
        1181,
        1185,
        1209,
        1216,
        1218,
        1228,
        1231,
        1234,
        1246,
        1248,
        1253,
        1269,
        1277,
        1280,
        1283,
        1294,
        1296,
        1301,
        1313,
        1329,
        1340,
        1344,
        1351,
        1369,
        1373,
        1380,
        1388,
        1397,
        1400,
        1405,
        1408,
        1413,
        1416,
        1419,
        1431,
        1441,
        1446,
        1451,
        1459,
        1464,
        1481,
        1490,
        1498,
        1501,
        1509,
        1511,
        1520,
        1525,
        1529,
        1536,
        1541,
        1545,
        1548,
        1551,
        1554,
        1561,
        1570,
        1575,
        1579,
        1586,
        1596,
        1601,
        1610,
        1615,
        1617,
        1629,
        1634,
        1637,
        1648,
        1653,
        1657,
        1659,
        1671,
        1677,
        1684,
        1689,
        1695,
        1699,
        1702,
        1709,
        1714,
        1718,
        1721,
        1726,
        1736,
        1743,
        1747,
        1753,
        1757,
        1764,
        1769,
        1781,
        1786,
        1791,
        1795,
        1807,
        1828,
        1836,
        1851,
        1855,
        1862,
        1878
      ];
    }
    static get _ATN() {
      if (!_VtlParser.__ATN) {
        _VtlParser.__ATN = new We().deserialize(_VtlParser._serializedATN);
      }
      return _VtlParser.__ATN;
    }
    static {
      this.DecisionsToDFA = _VtlParser._ATN.decisionToState.map((ds, index) => new Qe(ds, index));
    }
  };
  var StartContext = class extends Sn {
    static {
      __name(this, "StartContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    EOF() {
      return this.getToken(VtlParser.EOF, 0);
    }
    statement_list() {
      return this.getTypedRuleContexts(StatementContext);
    }
    statement(i2) {
      return this.getTypedRuleContext(StatementContext, i2);
    }
    EOL_list() {
      return this.getTokens(VtlParser.EOL);
    }
    EOL(i2) {
      return this.getToken(VtlParser.EOL, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_start;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitStart) {
        return visitor.visitStart(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var StatementContext = class extends Sn {
    static {
      __name(this, "StatementContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_statement;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var DefineExpressionContext = class extends StatementContext {
    static {
      __name(this, "DefineExpressionContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    defOperators() {
      return this.getTypedRuleContext(DefOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDefineExpression) {
        return visitor.visitDefineExpression(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TemporaryAssignmentContext = class extends StatementContext {
    static {
      __name(this, "TemporaryAssignmentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    varID() {
      return this.getTypedRuleContext(VarIDContext, 0);
    }
    ASSIGN() {
      return this.getToken(VtlParser.ASSIGN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTemporaryAssignment) {
        return visitor.visitTemporaryAssignment(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var PersistAssignmentContext = class extends StatementContext {
    static {
      __name(this, "PersistAssignmentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    varID() {
      return this.getTypedRuleContext(VarIDContext, 0);
    }
    PUT_SYMBOL() {
      return this.getToken(VtlParser.PUT_SYMBOL, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitPersistAssignment) {
        return visitor.visitPersistAssignment(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ExprContext = class extends Sn {
    static {
      __name(this, "ExprContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_expr;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var VarIdExprContext = class extends ExprContext {
    static {
      __name(this, "VarIdExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    varID() {
      return this.getTypedRuleContext(VarIDContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitVarIdExpr) {
        return visitor.visitVarIdExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var MembershipExprContext = class extends ExprContext {
    static {
      __name(this, "MembershipExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    MEMBERSHIP() {
      return this.getToken(VtlParser.MEMBERSHIP, 0);
    }
    simpleComponentId() {
      return this.getTypedRuleContext(SimpleComponentIdContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitMembershipExpr) {
        return visitor.visitMembershipExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var InNotInExprContext = class extends ExprContext {
    static {
      __name(this, "InNotInExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    IN() {
      return this.getToken(VtlParser.IN, 0);
    }
    NOT_IN() {
      return this.getToken(VtlParser.NOT_IN, 0);
    }
    lists() {
      return this.getTypedRuleContext(ListsContext, 0);
    }
    valueDomainID() {
      return this.getTypedRuleContext(ValueDomainIDContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInNotInExpr) {
        return visitor.visitInNotInExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var BooleanExprContext = class extends ExprContext {
    static {
      __name(this, "BooleanExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    AND() {
      return this.getToken(VtlParser.AND, 0);
    }
    OR() {
      return this.getToken(VtlParser.OR, 0);
    }
    XOR() {
      return this.getToken(VtlParser.XOR, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBooleanExpr) {
        return visitor.visitBooleanExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonExprContext = class extends ExprContext {
    static {
      __name(this, "ComparisonExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    comparisonOperand() {
      return this.getTypedRuleContext(ComparisonOperandContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComparisonExpr) {
        return visitor.visitComparisonExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnaryExprContext = class extends ExprContext {
    static {
      __name(this, "UnaryExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    NOT() {
      return this.getToken(VtlParser.NOT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryExpr) {
        return visitor.visitUnaryExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FunctionsExpressionContext = class extends ExprContext {
    static {
      __name(this, "FunctionsExpressionContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    functions() {
      return this.getTypedRuleContext(FunctionsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFunctionsExpression) {
        return visitor.visitFunctionsExpression(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var IfExprContext = class extends ExprContext {
    static {
      __name(this, "IfExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    IF() {
      return this.getToken(VtlParser.IF, 0);
    }
    THEN() {
      return this.getToken(VtlParser.THEN, 0);
    }
    ELSE() {
      return this.getToken(VtlParser.ELSE, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitIfExpr) {
        return visitor.visitIfExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ClauseExprContext = class extends ExprContext {
    static {
      __name(this, "ClauseExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    QLPAREN() {
      return this.getToken(VtlParser.QLPAREN, 0);
    }
    QRPAREN() {
      return this.getToken(VtlParser.QRPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    datasetClause() {
      return this.getTypedRuleContext(DatasetClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitClauseExpr) {
        return visitor.visitClauseExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CaseExprContext = class extends ExprContext {
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      this._condExpr = [];
      this._thenExpr = [];
      super.copyFrom(ctx);
    }
    static {
      __name(this, "CaseExprContext");
    }
    CASE() {
      return this.getToken(VtlParser.CASE, 0);
    }
    ELSE() {
      return this.getToken(VtlParser.ELSE, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    WHEN_list() {
      return this.getTokens(VtlParser.WHEN);
    }
    WHEN(i2) {
      return this.getToken(VtlParser.WHEN, i2);
    }
    THEN_list() {
      return this.getTokens(VtlParser.THEN);
    }
    THEN(i2) {
      return this.getToken(VtlParser.THEN, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCaseExpr) {
        return visitor.visitCaseExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ArithmeticExprContext = class extends ExprContext {
    static {
      __name(this, "ArithmeticExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    MUL() {
      return this.getToken(VtlParser.MUL, 0);
    }
    DIV() {
      return this.getToken(VtlParser.DIV, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitArithmeticExpr) {
        return visitor.visitArithmeticExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ParenthesisExprContext = class extends ExprContext {
    static {
      __name(this, "ParenthesisExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitParenthesisExpr) {
        return visitor.visitParenthesisExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConstantExprContext = class extends ExprContext {
    static {
      __name(this, "ConstantExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    constant() {
      return this.getTypedRuleContext(ConstantContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConstantExpr) {
        return visitor.visitConstantExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ArithmeticExprOrConcatContext = class extends ExprContext {
    static {
      __name(this, "ArithmeticExprOrConcatContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    CONCAT() {
      return this.getToken(VtlParser.CONCAT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitArithmeticExprOrConcat) {
        return visitor.visitArithmeticExprOrConcat(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ExprComponentContext = class extends Sn {
    static {
      __name(this, "ExprComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_exprComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var ArithmeticExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "ArithmeticExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    MUL() {
      return this.getToken(VtlParser.MUL, 0);
    }
    DIV() {
      return this.getToken(VtlParser.DIV, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitArithmeticExprComp) {
        return visitor.visitArithmeticExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var IfExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "IfExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    IF() {
      return this.getToken(VtlParser.IF, 0);
    }
    THEN() {
      return this.getToken(VtlParser.THEN, 0);
    }
    ELSE() {
      return this.getToken(VtlParser.ELSE, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitIfExprComp) {
        return visitor.visitIfExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "ComparisonExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    comparisonOperand() {
      return this.getTypedRuleContext(ComparisonOperandContext, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComparisonExprComp) {
        return visitor.visitComparisonExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FunctionsExpressionCompContext = class extends ExprComponentContext {
    static {
      __name(this, "FunctionsExpressionCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    functionsComponents() {
      return this.getTypedRuleContext(FunctionsComponentsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFunctionsExpressionComp) {
        return visitor.visitFunctionsExpressionComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CompIdContext = class extends ExprComponentContext {
    static {
      __name(this, "CompIdContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCompId) {
        return visitor.visitCompId(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConstantExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "ConstantExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    constant() {
      return this.getTypedRuleContext(ConstantContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConstantExprComp) {
        return visitor.visitConstantExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ArithmeticExprOrConcatCompContext = class extends ExprComponentContext {
    static {
      __name(this, "ArithmeticExprOrConcatCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    CONCAT() {
      return this.getToken(VtlParser.CONCAT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitArithmeticExprOrConcatComp) {
        return visitor.visitArithmeticExprOrConcatComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ParenthesisExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "ParenthesisExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitParenthesisExprComp) {
        return visitor.visitParenthesisExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var InNotInExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "InNotInExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    IN() {
      return this.getToken(VtlParser.IN, 0);
    }
    NOT_IN() {
      return this.getToken(VtlParser.NOT_IN, 0);
    }
    lists() {
      return this.getTypedRuleContext(ListsContext, 0);
    }
    valueDomainID() {
      return this.getTypedRuleContext(ValueDomainIDContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInNotInExprComp) {
        return visitor.visitInNotInExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnaryExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "UnaryExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    NOT() {
      return this.getToken(VtlParser.NOT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryExprComp) {
        return visitor.visitUnaryExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CaseExprCompContext = class extends ExprComponentContext {
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      this._condExpr = [];
      this._thenExpr = [];
      super.copyFrom(ctx);
    }
    static {
      __name(this, "CaseExprCompContext");
    }
    CASE() {
      return this.getToken(VtlParser.CASE, 0);
    }
    ELSE() {
      return this.getToken(VtlParser.ELSE, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    WHEN_list() {
      return this.getTokens(VtlParser.WHEN);
    }
    WHEN(i2) {
      return this.getToken(VtlParser.WHEN, i2);
    }
    THEN_list() {
      return this.getTokens(VtlParser.THEN);
    }
    THEN(i2) {
      return this.getToken(VtlParser.THEN, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCaseExprComp) {
        return visitor.visitCaseExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var BooleanExprCompContext = class extends ExprComponentContext {
    static {
      __name(this, "BooleanExprCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    AND() {
      return this.getToken(VtlParser.AND, 0);
    }
    OR() {
      return this.getToken(VtlParser.OR, 0);
    }
    XOR() {
      return this.getToken(VtlParser.XOR, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBooleanExprComp) {
        return visitor.visitBooleanExprComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FunctionsComponentsContext = class extends Sn {
    static {
      __name(this, "FunctionsComponentsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_functionsComponents;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var NumericFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "NumericFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    numericOperatorsComponent() {
      return this.getTypedRuleContext(NumericOperatorsComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitNumericFunctionsComponents) {
        return visitor.visitNumericFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var StringFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "StringFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    stringOperatorsComponent() {
      return this.getTypedRuleContext(StringOperatorsComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitStringFunctionsComponents) {
        return visitor.visitStringFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "ComparisonFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    comparisonOperatorsComponent() {
      return this.getTypedRuleContext(ComparisonOperatorsComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComparisonFunctionsComponents) {
        return visitor.visitComparisonFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "TimeFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    timeOperatorsComponent() {
      return this.getTypedRuleContext(TimeOperatorsComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTimeFunctionsComponents) {
        return visitor.visitTimeFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var GenericFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "GenericFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    genericOperatorsComponent() {
      return this.getTypedRuleContext(GenericOperatorsComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitGenericFunctionsComponents) {
        return visitor.visitGenericFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AnalyticFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "AnalyticFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    anFunctionComponent() {
      return this.getTypedRuleContext(AnFunctionComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAnalyticFunctionsComponents) {
        return visitor.visitAnalyticFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConditionalFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "ConditionalFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    conditionalOperatorsComponent() {
      return this.getTypedRuleContext(ConditionalOperatorsComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConditionalFunctionsComponents) {
        return visitor.visitConditionalFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggregateFunctionsComponentsContext = class extends FunctionsComponentsContext {
    static {
      __name(this, "AggregateFunctionsComponentsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    aggrOperators() {
      return this.getTypedRuleContext(AggrOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggregateFunctionsComponents) {
        return visitor.visitAggregateFunctionsComponents(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FunctionsContext = class extends Sn {
    static {
      __name(this, "FunctionsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_functions;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var HierarchyFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "HierarchyFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    hierarchyOperators() {
      return this.getTypedRuleContext(HierarchyOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHierarchyFunctions) {
        return visitor.visitHierarchyFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var StringFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "StringFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    stringOperators() {
      return this.getTypedRuleContext(StringOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitStringFunctions) {
        return visitor.visitStringFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValidationFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "ValidationFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    validationOperators() {
      return this.getTypedRuleContext(ValidationOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValidationFunctions) {
        return visitor.visitValidationFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var GenericFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "GenericFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    genericOperators() {
      return this.getTypedRuleContext(GenericOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitGenericFunctions) {
        return visitor.visitGenericFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConditionalFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "ConditionalFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    conditionalOperators() {
      return this.getTypedRuleContext(ConditionalOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConditionalFunctions) {
        return visitor.visitConditionalFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggregateFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "AggregateFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    aggrOperatorsGrouping() {
      return this.getTypedRuleContext(AggrOperatorsGroupingContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggregateFunctions) {
        return visitor.visitAggregateFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "JoinFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    joinOperators() {
      return this.getTypedRuleContext(JoinOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinFunctions) {
        return visitor.visitJoinFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "ComparisonFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    comparisonOperators() {
      return this.getTypedRuleContext(ComparisonOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComparisonFunctions) {
        return visitor.visitComparisonFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var NumericFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "NumericFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    numericOperators() {
      return this.getTypedRuleContext(NumericOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitNumericFunctions) {
        return visitor.visitNumericFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "TimeFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    timeOperators() {
      return this.getTypedRuleContext(TimeOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTimeFunctions) {
        return visitor.visitTimeFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SetFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "SetFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    setOperators() {
      return this.getTypedRuleContext(SetOperatorsContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSetFunctions) {
        return visitor.visitSetFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AnalyticFunctionsContext = class extends FunctionsContext {
    static {
      __name(this, "AnalyticFunctionsContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    anFunction() {
      return this.getTypedRuleContext(AnFunctionContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAnalyticFunctions) {
        return visitor.visitAnalyticFunctions(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DatasetClauseContext = class extends Sn {
    static {
      __name(this, "DatasetClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    renameClause() {
      return this.getTypedRuleContext(RenameClauseContext, 0);
    }
    aggrClause() {
      return this.getTypedRuleContext(AggrClauseContext, 0);
    }
    filterClause() {
      return this.getTypedRuleContext(FilterClauseContext, 0);
    }
    calcClause() {
      return this.getTypedRuleContext(CalcClauseContext, 0);
    }
    keepOrDropClause() {
      return this.getTypedRuleContext(KeepOrDropClauseContext, 0);
    }
    pivotOrUnpivotClause() {
      return this.getTypedRuleContext(PivotOrUnpivotClauseContext, 0);
    }
    subspaceClause() {
      return this.getTypedRuleContext(SubspaceClauseContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_datasetClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDatasetClause) {
        return visitor.visitDatasetClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RenameClauseContext = class extends Sn {
    static {
      __name(this, "RenameClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    RENAME() {
      return this.getToken(VtlParser.RENAME, 0);
    }
    renameClauseItem_list() {
      return this.getTypedRuleContexts(RenameClauseItemContext);
    }
    renameClauseItem(i2) {
      return this.getTypedRuleContext(RenameClauseItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_renameClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRenameClause) {
        return visitor.visitRenameClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggrClauseContext = class extends Sn {
    static {
      __name(this, "AggrClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    AGGREGATE() {
      return this.getToken(VtlParser.AGGREGATE, 0);
    }
    aggregateClause() {
      return this.getTypedRuleContext(AggregateClauseContext, 0);
    }
    groupingClause() {
      return this.getTypedRuleContext(GroupingClauseContext, 0);
    }
    havingClause() {
      return this.getTypedRuleContext(HavingClauseContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_aggrClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggrClause) {
        return visitor.visitAggrClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FilterClauseContext = class extends Sn {
    static {
      __name(this, "FilterClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    FILTER() {
      return this.getToken(VtlParser.FILTER, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_filterClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFilterClause) {
        return visitor.visitFilterClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CalcClauseContext = class extends Sn {
    static {
      __name(this, "CalcClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    CALC() {
      return this.getToken(VtlParser.CALC, 0);
    }
    calcClauseItem_list() {
      return this.getTypedRuleContexts(CalcClauseItemContext);
    }
    calcClauseItem(i2) {
      return this.getTypedRuleContext(CalcClauseItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_calcClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCalcClause) {
        return visitor.visitCalcClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var KeepOrDropClauseContext = class extends Sn {
    static {
      __name(this, "KeepOrDropClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    KEEP() {
      return this.getToken(VtlParser.KEEP, 0);
    }
    DROP() {
      return this.getToken(VtlParser.DROP, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_keepOrDropClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitKeepOrDropClause) {
        return visitor.visitKeepOrDropClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var PivotOrUnpivotClauseContext = class extends Sn {
    static {
      __name(this, "PivotOrUnpivotClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    PIVOT() {
      return this.getToken(VtlParser.PIVOT, 0);
    }
    UNPIVOT() {
      return this.getToken(VtlParser.UNPIVOT, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_pivotOrUnpivotClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitPivotOrUnpivotClause) {
        return visitor.visitPivotOrUnpivotClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CustomPivotClauseContext = class extends Sn {
    static {
      __name(this, "CustomPivotClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    CUSTOMPIVOT() {
      return this.getToken(VtlParser.CUSTOMPIVOT, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    IN() {
      return this.getToken(VtlParser.IN, 0);
    }
    constant_list() {
      return this.getTypedRuleContexts(ConstantContext);
    }
    constant(i2) {
      return this.getTypedRuleContext(ConstantContext, i2);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_customPivotClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCustomPivotClause) {
        return visitor.visitCustomPivotClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SubspaceClauseContext = class extends Sn {
    static {
      __name(this, "SubspaceClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    SUBSPACE() {
      return this.getToken(VtlParser.SUBSPACE, 0);
    }
    subspaceClauseItem_list() {
      return this.getTypedRuleContexts(SubspaceClauseItemContext);
    }
    subspaceClauseItem(i2) {
      return this.getTypedRuleContext(SubspaceClauseItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_subspaceClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSubspaceClause) {
        return visitor.visitSubspaceClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinOperatorsContext = class extends Sn {
    static {
      __name(this, "JoinOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_joinOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var JoinExprContext = class extends JoinOperatorsContext {
    static {
      __name(this, "JoinExprContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    joinClause() {
      return this.getTypedRuleContext(JoinClauseContext, 0);
    }
    joinBody() {
      return this.getTypedRuleContext(JoinBodyContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    INNER_JOIN() {
      return this.getToken(VtlParser.INNER_JOIN, 0);
    }
    LEFT_JOIN() {
      return this.getToken(VtlParser.LEFT_JOIN, 0);
    }
    joinClauseWithoutUsing() {
      return this.getTypedRuleContext(JoinClauseWithoutUsingContext, 0);
    }
    FULL_JOIN() {
      return this.getToken(VtlParser.FULL_JOIN, 0);
    }
    CROSS_JOIN() {
      return this.getToken(VtlParser.CROSS_JOIN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinExpr) {
        return visitor.visitJoinExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DefOperatorsContext = class extends Sn {
    static {
      __name(this, "DefOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_defOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var DefOperatorContext = class extends DefOperatorsContext {
    static {
      __name(this, "DefOperatorContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DEFINE() {
      return this.getToken(VtlParser.DEFINE, 0);
    }
    OPERATOR_list() {
      return this.getTokens(VtlParser.OPERATOR);
    }
    OPERATOR(i2) {
      return this.getToken(VtlParser.OPERATOR, i2);
    }
    operatorID() {
      return this.getTypedRuleContext(OperatorIDContext, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    IS() {
      return this.getToken(VtlParser.IS, 0);
    }
    END() {
      return this.getToken(VtlParser.END, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    parameterItem_list() {
      return this.getTypedRuleContexts(ParameterItemContext);
    }
    parameterItem(i2) {
      return this.getTypedRuleContext(ParameterItemContext, i2);
    }
    RETURNS() {
      return this.getToken(VtlParser.RETURNS, 0);
    }
    outputParameterType() {
      return this.getTypedRuleContext(OutputParameterTypeContext, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDefOperator) {
        return visitor.visitDefOperator(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DefHierarchicalContext = class extends DefOperatorsContext {
    static {
      __name(this, "DefHierarchicalContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DEFINE() {
      return this.getToken(VtlParser.DEFINE, 0);
    }
    HIERARCHICAL_list() {
      return this.getTokens(VtlParser.HIERARCHICAL);
    }
    HIERARCHICAL(i2) {
      return this.getToken(VtlParser.HIERARCHICAL, i2);
    }
    RULESET_list() {
      return this.getTokens(VtlParser.RULESET);
    }
    RULESET(i2) {
      return this.getToken(VtlParser.RULESET, i2);
    }
    rulesetID() {
      return this.getTypedRuleContext(RulesetIDContext, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    hierRuleSignature() {
      return this.getTypedRuleContext(HierRuleSignatureContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    IS() {
      return this.getToken(VtlParser.IS, 0);
    }
    ruleClauseHierarchical() {
      return this.getTypedRuleContext(RuleClauseHierarchicalContext, 0);
    }
    END() {
      return this.getToken(VtlParser.END, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDefHierarchical) {
        return visitor.visitDefHierarchical(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DefDatapointRulesetContext = class extends DefOperatorsContext {
    static {
      __name(this, "DefDatapointRulesetContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DEFINE() {
      return this.getToken(VtlParser.DEFINE, 0);
    }
    DATAPOINT_list() {
      return this.getTokens(VtlParser.DATAPOINT);
    }
    DATAPOINT(i2) {
      return this.getToken(VtlParser.DATAPOINT, i2);
    }
    RULESET_list() {
      return this.getTokens(VtlParser.RULESET);
    }
    RULESET(i2) {
      return this.getToken(VtlParser.RULESET, i2);
    }
    rulesetID() {
      return this.getTypedRuleContext(RulesetIDContext, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    rulesetSignature() {
      return this.getTypedRuleContext(RulesetSignatureContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    IS() {
      return this.getToken(VtlParser.IS, 0);
    }
    ruleClauseDatapoint() {
      return this.getTypedRuleContext(RuleClauseDatapointContext, 0);
    }
    END() {
      return this.getToken(VtlParser.END, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDefDatapointRuleset) {
        return visitor.visitDefDatapointRuleset(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var GenericOperatorsContext = class extends Sn {
    static {
      __name(this, "GenericOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_genericOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var EvalAtomContext = class extends GenericOperatorsContext {
    static {
      __name(this, "EvalAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    EVAL() {
      return this.getToken(VtlParser.EVAL, 0);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    routineName() {
      return this.getTypedRuleContext(RoutineNameContext, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    varID_list() {
      return this.getTypedRuleContexts(VarIDContext);
    }
    varID(i2) {
      return this.getTypedRuleContext(VarIDContext, i2);
    }
    scalarItem_list() {
      return this.getTypedRuleContexts(ScalarItemContext);
    }
    scalarItem(i2) {
      return this.getTypedRuleContext(ScalarItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    LANGUAGE() {
      return this.getToken(VtlParser.LANGUAGE, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    RETURNS() {
      return this.getToken(VtlParser.RETURNS, 0);
    }
    evalDatasetType() {
      return this.getTypedRuleContext(EvalDatasetTypeContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitEvalAtom) {
        return visitor.visitEvalAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CastExprDatasetContext = class extends GenericOperatorsContext {
    static {
      __name(this, "CastExprDatasetContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CAST() {
      return this.getToken(VtlParser.CAST, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    basicScalarType() {
      return this.getTypedRuleContext(BasicScalarTypeContext, 0);
    }
    valueDomainName() {
      return this.getTypedRuleContext(ValueDomainNameContext, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCastExprDataset) {
        return visitor.visitCastExprDataset(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CallDatasetContext = class extends GenericOperatorsContext {
    static {
      __name(this, "CallDatasetContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    operatorID() {
      return this.getTypedRuleContext(OperatorIDContext, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    parameter_list() {
      return this.getTypedRuleContexts(ParameterContext);
    }
    parameter(i2) {
      return this.getTypedRuleContext(ParameterContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCallDataset) {
        return visitor.visitCallDataset(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var GenericOperatorsComponentContext = class extends Sn {
    static {
      __name(this, "GenericOperatorsComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_genericOperatorsComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var EvalAtomComponentContext = class extends GenericOperatorsComponentContext {
    static {
      __name(this, "EvalAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    EVAL() {
      return this.getToken(VtlParser.EVAL, 0);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    routineName() {
      return this.getTypedRuleContext(RoutineNameContext, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    scalarItem_list() {
      return this.getTypedRuleContexts(ScalarItemContext);
    }
    scalarItem(i2) {
      return this.getTypedRuleContext(ScalarItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    LANGUAGE() {
      return this.getToken(VtlParser.LANGUAGE, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    RETURNS() {
      return this.getToken(VtlParser.RETURNS, 0);
    }
    outputParameterTypeComponent() {
      return this.getTypedRuleContext(OutputParameterTypeComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitEvalAtomComponent) {
        return visitor.visitEvalAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CastExprComponentContext = class extends GenericOperatorsComponentContext {
    static {
      __name(this, "CastExprComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CAST() {
      return this.getToken(VtlParser.CAST, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    basicScalarType() {
      return this.getTypedRuleContext(BasicScalarTypeContext, 0);
    }
    valueDomainName() {
      return this.getTypedRuleContext(ValueDomainNameContext, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCastExprComponent) {
        return visitor.visitCastExprComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CallComponentContext = class extends GenericOperatorsComponentContext {
    static {
      __name(this, "CallComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    operatorID() {
      return this.getTypedRuleContext(OperatorIDContext, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    parameterComponent_list() {
      return this.getTypedRuleContexts(ParameterComponentContext);
    }
    parameterComponent(i2) {
      return this.getTypedRuleContext(ParameterComponentContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCallComponent) {
        return visitor.visitCallComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ParameterComponentContext = class extends Sn {
    static {
      __name(this, "ParameterComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_parameterComponent;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitParameterComponent) {
        return visitor.visitParameterComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ParameterContext = class extends Sn {
    static {
      __name(this, "ParameterContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_parameter;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitParameter) {
        return visitor.visitParameter(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var StringOperatorsContext = class extends Sn {
    static {
      __name(this, "StringOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_stringOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var InstrAtomContext = class extends StringOperatorsContext {
    static {
      __name(this, "InstrAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    INSTR() {
      return this.getToken(VtlParser.INSTR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    optionalExpr_list() {
      return this.getTypedRuleContexts(OptionalExprContext);
    }
    optionalExpr(i2) {
      return this.getTypedRuleContext(OptionalExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInstrAtom) {
        return visitor.visitInstrAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnaryStringFunctionContext = class extends StringOperatorsContext {
    static {
      __name(this, "UnaryStringFunctionContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    TRIM() {
      return this.getToken(VtlParser.TRIM, 0);
    }
    LTRIM() {
      return this.getToken(VtlParser.LTRIM, 0);
    }
    RTRIM() {
      return this.getToken(VtlParser.RTRIM, 0);
    }
    UCASE() {
      return this.getToken(VtlParser.UCASE, 0);
    }
    LCASE() {
      return this.getToken(VtlParser.LCASE, 0);
    }
    LEN() {
      return this.getToken(VtlParser.LEN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryStringFunction) {
        return visitor.visitUnaryStringFunction(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SubstrAtomContext = class extends StringOperatorsContext {
    static {
      __name(this, "SubstrAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    SUBSTR() {
      return this.getToken(VtlParser.SUBSTR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    optionalExpr_list() {
      return this.getTypedRuleContexts(OptionalExprContext);
    }
    optionalExpr(i2) {
      return this.getTypedRuleContext(OptionalExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSubstrAtom) {
        return visitor.visitSubstrAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ReplaceAtomContext = class extends StringOperatorsContext {
    static {
      __name(this, "ReplaceAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    REPLACE() {
      return this.getToken(VtlParser.REPLACE, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    optionalExpr() {
      return this.getTypedRuleContext(OptionalExprContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitReplaceAtom) {
        return visitor.visitReplaceAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var StringOperatorsComponentContext = class extends Sn {
    static {
      __name(this, "StringOperatorsComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_stringOperatorsComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var ReplaceAtomComponentContext = class extends StringOperatorsComponentContext {
    static {
      __name(this, "ReplaceAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    REPLACE() {
      return this.getToken(VtlParser.REPLACE, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    optionalExprComponent() {
      return this.getTypedRuleContext(OptionalExprComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitReplaceAtomComponent) {
        return visitor.visitReplaceAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnaryStringFunctionComponentContext = class extends StringOperatorsComponentContext {
    static {
      __name(this, "UnaryStringFunctionComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    TRIM() {
      return this.getToken(VtlParser.TRIM, 0);
    }
    LTRIM() {
      return this.getToken(VtlParser.LTRIM, 0);
    }
    RTRIM() {
      return this.getToken(VtlParser.RTRIM, 0);
    }
    UCASE() {
      return this.getToken(VtlParser.UCASE, 0);
    }
    LCASE() {
      return this.getToken(VtlParser.LCASE, 0);
    }
    LEN() {
      return this.getToken(VtlParser.LEN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryStringFunctionComponent) {
        return visitor.visitUnaryStringFunctionComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SubstrAtomComponentContext = class extends StringOperatorsComponentContext {
    static {
      __name(this, "SubstrAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    SUBSTR() {
      return this.getToken(VtlParser.SUBSTR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    optionalExprComponent_list() {
      return this.getTypedRuleContexts(OptionalExprComponentContext);
    }
    optionalExprComponent(i2) {
      return this.getTypedRuleContext(OptionalExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSubstrAtomComponent) {
        return visitor.visitSubstrAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var InstrAtomComponentContext = class extends StringOperatorsComponentContext {
    static {
      __name(this, "InstrAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    INSTR() {
      return this.getToken(VtlParser.INSTR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    optionalExprComponent_list() {
      return this.getTypedRuleContexts(OptionalExprComponentContext);
    }
    optionalExprComponent(i2) {
      return this.getTypedRuleContext(OptionalExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInstrAtomComponent) {
        return visitor.visitInstrAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var NumericOperatorsContext = class extends Sn {
    static {
      __name(this, "NumericOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_numericOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var UnaryNumericContext = class extends NumericOperatorsContext {
    static {
      __name(this, "UnaryNumericContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    CEIL() {
      return this.getToken(VtlParser.CEIL, 0);
    }
    FLOOR() {
      return this.getToken(VtlParser.FLOOR, 0);
    }
    ABS() {
      return this.getToken(VtlParser.ABS, 0);
    }
    EXP() {
      return this.getToken(VtlParser.EXP, 0);
    }
    LN() {
      return this.getToken(VtlParser.LN, 0);
    }
    SQRT() {
      return this.getToken(VtlParser.SQRT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryNumeric) {
        return visitor.visitUnaryNumeric(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnaryWithOptionalNumericContext = class extends NumericOperatorsContext {
    static {
      __name(this, "UnaryWithOptionalNumericContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    ROUND() {
      return this.getToken(VtlParser.ROUND, 0);
    }
    TRUNC() {
      return this.getToken(VtlParser.TRUNC, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    optionalExpr() {
      return this.getTypedRuleContext(OptionalExprContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryWithOptionalNumeric) {
        return visitor.visitUnaryWithOptionalNumeric(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var BinaryNumericContext = class extends NumericOperatorsContext {
    static {
      __name(this, "BinaryNumericContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    MOD() {
      return this.getToken(VtlParser.MOD, 0);
    }
    POWER() {
      return this.getToken(VtlParser.POWER, 0);
    }
    LOG() {
      return this.getToken(VtlParser.LOG, 0);
    }
    RANDOM() {
      return this.getToken(VtlParser.RANDOM, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBinaryNumeric) {
        return visitor.visitBinaryNumeric(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var NumericOperatorsComponentContext = class extends Sn {
    static {
      __name(this, "NumericOperatorsComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_numericOperatorsComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var UnaryNumericComponentContext = class extends NumericOperatorsComponentContext {
    static {
      __name(this, "UnaryNumericComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    CEIL() {
      return this.getToken(VtlParser.CEIL, 0);
    }
    FLOOR() {
      return this.getToken(VtlParser.FLOOR, 0);
    }
    ABS() {
      return this.getToken(VtlParser.ABS, 0);
    }
    EXP() {
      return this.getToken(VtlParser.EXP, 0);
    }
    LN() {
      return this.getToken(VtlParser.LN, 0);
    }
    SQRT() {
      return this.getToken(VtlParser.SQRT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryNumericComponent) {
        return visitor.visitUnaryNumericComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var BinaryNumericComponentContext = class extends NumericOperatorsComponentContext {
    static {
      __name(this, "BinaryNumericComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    MOD() {
      return this.getToken(VtlParser.MOD, 0);
    }
    POWER() {
      return this.getToken(VtlParser.POWER, 0);
    }
    LOG() {
      return this.getToken(VtlParser.LOG, 0);
    }
    RANDOM() {
      return this.getToken(VtlParser.RANDOM, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBinaryNumericComponent) {
        return visitor.visitBinaryNumericComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnaryWithOptionalNumericComponentContext = class extends NumericOperatorsComponentContext {
    static {
      __name(this, "UnaryWithOptionalNumericComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    ROUND() {
      return this.getToken(VtlParser.ROUND, 0);
    }
    TRUNC() {
      return this.getToken(VtlParser.TRUNC, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    optionalExprComponent() {
      return this.getTypedRuleContext(OptionalExprComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnaryWithOptionalNumericComponent) {
        return visitor.visitUnaryWithOptionalNumericComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonOperatorsContext = class extends Sn {
    static {
      __name(this, "ComparisonOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_comparisonOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var BetweenAtomContext = class extends ComparisonOperatorsContext {
    static {
      __name(this, "BetweenAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    BETWEEN() {
      return this.getToken(VtlParser.BETWEEN, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBetweenAtom) {
        return visitor.visitBetweenAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CharsetMatchAtomContext = class extends ComparisonOperatorsContext {
    static {
      __name(this, "CharsetMatchAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CHARSET_MATCH() {
      return this.getToken(VtlParser.CHARSET_MATCH, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCharsetMatchAtom) {
        return visitor.visitCharsetMatchAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var IsNullAtomContext = class extends ComparisonOperatorsContext {
    static {
      __name(this, "IsNullAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    ISNULL() {
      return this.getToken(VtlParser.ISNULL, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitIsNullAtom) {
        return visitor.visitIsNullAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ExistInAtomContext = class extends ComparisonOperatorsContext {
    static {
      __name(this, "ExistInAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    EXISTS_IN() {
      return this.getToken(VtlParser.EXISTS_IN, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    retainType() {
      return this.getTypedRuleContext(RetainTypeContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitExistInAtom) {
        return visitor.visitExistInAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonOperatorsComponentContext = class extends Sn {
    static {
      __name(this, "ComparisonOperatorsComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_comparisonOperatorsComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var IsNullAtomComponentContext = class extends ComparisonOperatorsComponentContext {
    static {
      __name(this, "IsNullAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    ISNULL() {
      return this.getToken(VtlParser.ISNULL, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitIsNullAtomComponent) {
        return visitor.visitIsNullAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CharsetMatchAtomComponentContext = class extends ComparisonOperatorsComponentContext {
    static {
      __name(this, "CharsetMatchAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CHARSET_MATCH() {
      return this.getToken(VtlParser.CHARSET_MATCH, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCharsetMatchAtomComponent) {
        return visitor.visitCharsetMatchAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var BetweenAtomComponentContext = class extends ComparisonOperatorsComponentContext {
    static {
      __name(this, "BetweenAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    BETWEEN() {
      return this.getToken(VtlParser.BETWEEN, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBetweenAtomComponent) {
        return visitor.visitBetweenAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeOperatorsContext = class extends Sn {
    static {
      __name(this, "TimeOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_timeOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var DayToYearAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "DayToYearAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYTOYEAR() {
      return this.getToken(VtlParser.DAYTOYEAR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayToYearAtom) {
        return visitor.visitDayToYearAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var YearAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "YearAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    YEAR_OP() {
      return this.getToken(VtlParser.YEAR_OP, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitYearAtom) {
        return visitor.visitYearAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var YearTodayAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "YearTodayAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    YEARTODAY() {
      return this.getToken(VtlParser.YEARTODAY, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitYearTodayAtom) {
        return visitor.visitYearTodayAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DayToMonthAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "DayToMonthAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYTOMONTH() {
      return this.getToken(VtlParser.DAYTOMONTH, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayToMonthAtom) {
        return visitor.visitDayToMonthAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var PeriodAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "PeriodAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    PERIOD_INDICATOR() {
      return this.getToken(VtlParser.PERIOD_INDICATOR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitPeriodAtom) {
        return visitor.visitPeriodAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var MonthTodayAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "MonthTodayAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    MONTHTODAY() {
      return this.getToken(VtlParser.MONTHTODAY, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitMonthTodayAtom) {
        return visitor.visitMonthTodayAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FillTimeAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "FillTimeAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    FILL_TIME_SERIES() {
      return this.getToken(VtlParser.FILL_TIME_SERIES, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    SINGLE() {
      return this.getToken(VtlParser.SINGLE, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFillTimeAtom) {
        return visitor.visitFillTimeAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var MonthAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "MonthAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    MONTH_OP() {
      return this.getToken(VtlParser.MONTH_OP, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitMonthAtom) {
        return visitor.visitMonthAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DayOfYearAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "DayOfYearAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYOFYEAR() {
      return this.getToken(VtlParser.DAYOFYEAR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayOfYearAtom) {
        return visitor.visitDayOfYearAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FlowAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "FlowAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    FLOW_TO_STOCK() {
      return this.getToken(VtlParser.FLOW_TO_STOCK, 0);
    }
    STOCK_TO_FLOW() {
      return this.getToken(VtlParser.STOCK_TO_FLOW, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFlowAtom) {
        return visitor.visitFlowAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeShiftAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "TimeShiftAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    TIMESHIFT() {
      return this.getToken(VtlParser.TIMESHIFT, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTimeShiftAtom) {
        return visitor.visitTimeShiftAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeAggAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "TimeAggAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    TIME_AGG() {
      return this.getToken(VtlParser.TIME_AGG, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    STRING_CONSTANT_list() {
      return this.getTokens(VtlParser.STRING_CONSTANT);
    }
    STRING_CONSTANT(i2) {
      return this.getToken(VtlParser.STRING_CONSTANT, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    optionalExpr() {
      return this.getTypedRuleContext(OptionalExprContext, 0);
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    FIRST() {
      return this.getToken(VtlParser.FIRST, 0);
    }
    LAST() {
      return this.getToken(VtlParser.LAST, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTimeAggAtom) {
        return visitor.visitTimeAggAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DateDiffAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "DateDiffAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATEDIFF() {
      return this.getToken(VtlParser.DATEDIFF, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDateDiffAtom) {
        return visitor.visitDateDiffAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DateAddAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "DateAddAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATEADD() {
      return this.getToken(VtlParser.DATEADD, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDateAddAtom) {
        return visitor.visitDateAddAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DayOfMonthAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "DayOfMonthAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYOFMONTH() {
      return this.getToken(VtlParser.DAYOFMONTH, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayOfMonthAtom) {
        return visitor.visitDayOfMonthAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CurrentDateAtomContext = class extends TimeOperatorsContext {
    static {
      __name(this, "CurrentDateAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CURRENT_DATE() {
      return this.getToken(VtlParser.CURRENT_DATE, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCurrentDateAtom) {
        return visitor.visitCurrentDateAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeOperatorsComponentContext = class extends Sn {
    static {
      __name(this, "TimeOperatorsComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_timeOperatorsComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var PeriodAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "PeriodAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    PERIOD_INDICATOR() {
      return this.getToken(VtlParser.PERIOD_INDICATOR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitPeriodAtomComponent) {
        return visitor.visitPeriodAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeShiftAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "TimeShiftAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    TIMESHIFT() {
      return this.getToken(VtlParser.TIMESHIFT, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTimeShiftAtomComponent) {
        return visitor.visitTimeShiftAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var MonthTodayAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "MonthTodayAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    MONTHTODAY() {
      return this.getToken(VtlParser.MONTHTODAY, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitMonthTodayAtomComponent) {
        return visitor.visitMonthTodayAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var TimeAggAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "TimeAggAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    TIME_AGG() {
      return this.getToken(VtlParser.TIME_AGG, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    STRING_CONSTANT_list() {
      return this.getTokens(VtlParser.STRING_CONSTANT);
    }
    STRING_CONSTANT(i2) {
      return this.getToken(VtlParser.STRING_CONSTANT, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    optionalExprComponent() {
      return this.getTypedRuleContext(OptionalExprComponentContext, 0);
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    FIRST() {
      return this.getToken(VtlParser.FIRST, 0);
    }
    LAST() {
      return this.getToken(VtlParser.LAST, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitTimeAggAtomComponent) {
        return visitor.visitTimeAggAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DayToMonthAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "DayToMonthAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYTOMONTH() {
      return this.getToken(VtlParser.DAYTOMONTH, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayToMonthAtomComponent) {
        return visitor.visitDayToMonthAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DateAddAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "DateAddAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATEADD() {
      return this.getToken(VtlParser.DATEADD, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDateAddAtomComponent) {
        return visitor.visitDateAddAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var YearTodayAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "YearTodayAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    YEARTODAY() {
      return this.getToken(VtlParser.YEARTODAY, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitYearTodayAtomComponent) {
        return visitor.visitYearTodayAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DayOfMonthAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "DayOfMonthAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYOFMONTH() {
      return this.getToken(VtlParser.DAYOFMONTH, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayOfMonthAtomComponent) {
        return visitor.visitDayOfMonthAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var MonthAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "MonthAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    MONTH_OP() {
      return this.getToken(VtlParser.MONTH_OP, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitMonthAtomComponent) {
        return visitor.visitMonthAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FillTimeAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "FillTimeAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    FILL_TIME_SERIES() {
      return this.getToken(VtlParser.FILL_TIME_SERIES, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    SINGLE() {
      return this.getToken(VtlParser.SINGLE, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFillTimeAtomComponent) {
        return visitor.visitFillTimeAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DatOfYearAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "DatOfYearAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYOFYEAR() {
      return this.getToken(VtlParser.DAYOFYEAR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDatOfYearAtomComponent) {
        return visitor.visitDatOfYearAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DayToYearAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "DayToYearAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DAYTOYEAR() {
      return this.getToken(VtlParser.DAYTOYEAR, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDayToYearAtomComponent) {
        return visitor.visitDayToYearAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CurrentDateAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "CurrentDateAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CURRENT_DATE() {
      return this.getToken(VtlParser.CURRENT_DATE, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCurrentDateAtomComponent) {
        return visitor.visitCurrentDateAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var FlowAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "FlowAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    FLOW_TO_STOCK() {
      return this.getToken(VtlParser.FLOW_TO_STOCK, 0);
    }
    STOCK_TO_FLOW() {
      return this.getToken(VtlParser.STOCK_TO_FLOW, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitFlowAtomComponent) {
        return visitor.visitFlowAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DateDiffAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "DateDiffAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATEDIFF() {
      return this.getToken(VtlParser.DATEDIFF, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDateDiffAtomComponent) {
        return visitor.visitDateDiffAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var YearAtomComponentContext = class extends TimeOperatorsComponentContext {
    static {
      __name(this, "YearAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    YEAR_OP() {
      return this.getToken(VtlParser.YEAR_OP, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitYearAtomComponent) {
        return visitor.visitYearAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SetOperatorsContext = class extends Sn {
    static {
      __name(this, "SetOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_setOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var SetOrSYmDiffAtomContext = class extends SetOperatorsContext {
    static {
      __name(this, "SetOrSYmDiffAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    SETDIFF() {
      return this.getToken(VtlParser.SETDIFF, 0);
    }
    SYMDIFF() {
      return this.getToken(VtlParser.SYMDIFF, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSetOrSYmDiffAtom) {
        return visitor.visitSetOrSYmDiffAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var IntersectAtomContext = class extends SetOperatorsContext {
    static {
      __name(this, "IntersectAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    INTERSECT() {
      return this.getToken(VtlParser.INTERSECT, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitIntersectAtom) {
        return visitor.visitIntersectAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var UnionAtomContext = class extends SetOperatorsContext {
    static {
      __name(this, "UnionAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    UNION() {
      return this.getToken(VtlParser.UNION, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitUnionAtom) {
        return visitor.visitUnionAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var HierarchyOperatorsContext = class extends Sn {
    static {
      __name(this, "HierarchyOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    HIERARCHY() {
      return this.getToken(VtlParser.HIERARCHY, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    conditionClause() {
      return this.getTypedRuleContext(ConditionClauseContext, 0);
    }
    RULE() {
      return this.getToken(VtlParser.RULE, 0);
    }
    validationMode() {
      return this.getTypedRuleContext(ValidationModeContext, 0);
    }
    inputModeHierarchy() {
      return this.getTypedRuleContext(InputModeHierarchyContext, 0);
    }
    outputModeHierarchy() {
      return this.getTypedRuleContext(OutputModeHierarchyContext, 0);
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_hierarchyOperators;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHierarchyOperators) {
        return visitor.visitHierarchyOperators(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValidationOperatorsContext = class extends Sn {
    static {
      __name(this, "ValidationOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_validationOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var ValidateHRrulesetContext = class extends ValidationOperatorsContext {
    static {
      __name(this, "ValidateHRrulesetContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CHECK_HIERARCHY() {
      return this.getToken(VtlParser.CHECK_HIERARCHY, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    conditionClause() {
      return this.getTypedRuleContext(ConditionClauseContext, 0);
    }
    RULE() {
      return this.getToken(VtlParser.RULE, 0);
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    validationMode() {
      return this.getTypedRuleContext(ValidationModeContext, 0);
    }
    inputMode() {
      return this.getTypedRuleContext(InputModeContext, 0);
    }
    validationOutput() {
      return this.getTypedRuleContext(ValidationOutputContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValidateHRruleset) {
        return visitor.visitValidateHRruleset(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValidateDPrulesetContext = class extends ValidationOperatorsContext {
    static {
      __name(this, "ValidateDPrulesetContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CHECK_DATAPOINT() {
      return this.getToken(VtlParser.CHECK_DATAPOINT, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    COMPONENTS() {
      return this.getToken(VtlParser.COMPONENTS, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    validationOutput() {
      return this.getTypedRuleContext(ValidationOutputContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValidateDPruleset) {
        return visitor.visitValidateDPruleset(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValidationSimpleContext = class extends ValidationOperatorsContext {
    static {
      __name(this, "ValidationSimpleContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CHECK() {
      return this.getToken(VtlParser.CHECK, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    imbalanceExpr() {
      return this.getTypedRuleContext(ImbalanceExprContext, 0);
    }
    erCode() {
      return this.getTypedRuleContext(ErCodeContext, 0);
    }
    erLevel() {
      return this.getTypedRuleContext(ErLevelContext, 0);
    }
    INVALID() {
      return this.getToken(VtlParser.INVALID, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValidationSimple) {
        return visitor.visitValidationSimple(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConditionalOperatorsContext = class extends Sn {
    static {
      __name(this, "ConditionalOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_conditionalOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var NvlAtomContext = class extends ConditionalOperatorsContext {
    static {
      __name(this, "NvlAtomContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    NVL() {
      return this.getToken(VtlParser.NVL, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    expr_list() {
      return this.getTypedRuleContexts(ExprContext);
    }
    expr(i2) {
      return this.getTypedRuleContext(ExprContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitNvlAtom) {
        return visitor.visitNvlAtom(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConditionalOperatorsComponentContext = class extends Sn {
    static {
      __name(this, "ConditionalOperatorsComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_conditionalOperatorsComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var NvlAtomComponentContext = class extends ConditionalOperatorsComponentContext {
    static {
      __name(this, "NvlAtomComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    NVL() {
      return this.getToken(VtlParser.NVL, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitNvlAtomComponent) {
        return visitor.visitNvlAtomComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggrOperatorsContext = class extends Sn {
    static {
      __name(this, "AggrOperatorsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_aggrOperators;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var AggrCompContext = class extends AggrOperatorsContext {
    static {
      __name(this, "AggrCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    SUM() {
      return this.getToken(VtlParser.SUM, 0);
    }
    AVG() {
      return this.getToken(VtlParser.AVG, 0);
    }
    COUNT() {
      return this.getToken(VtlParser.COUNT, 0);
    }
    MEDIAN() {
      return this.getToken(VtlParser.MEDIAN, 0);
    }
    MIN() {
      return this.getToken(VtlParser.MIN, 0);
    }
    MAX() {
      return this.getToken(VtlParser.MAX, 0);
    }
    STDDEV_POP() {
      return this.getToken(VtlParser.STDDEV_POP, 0);
    }
    STDDEV_SAMP() {
      return this.getToken(VtlParser.STDDEV_SAMP, 0);
    }
    VAR_POP() {
      return this.getToken(VtlParser.VAR_POP, 0);
    }
    VAR_SAMP() {
      return this.getToken(VtlParser.VAR_SAMP, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggrComp) {
        return visitor.visitAggrComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CountAggrCompContext = class extends AggrOperatorsContext {
    static {
      __name(this, "CountAggrCompContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    COUNT() {
      return this.getToken(VtlParser.COUNT, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCountAggrComp) {
        return visitor.visitCountAggrComp(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggrOperatorsGroupingContext = class extends Sn {
    static {
      __name(this, "AggrOperatorsGroupingContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_aggrOperatorsGrouping;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var AggrDatasetContext = class extends AggrOperatorsGroupingContext {
    static {
      __name(this, "AggrDatasetContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    SUM() {
      return this.getToken(VtlParser.SUM, 0);
    }
    AVG() {
      return this.getToken(VtlParser.AVG, 0);
    }
    COUNT() {
      return this.getToken(VtlParser.COUNT, 0);
    }
    MEDIAN() {
      return this.getToken(VtlParser.MEDIAN, 0);
    }
    MIN() {
      return this.getToken(VtlParser.MIN, 0);
    }
    MAX() {
      return this.getToken(VtlParser.MAX, 0);
    }
    STDDEV_POP() {
      return this.getToken(VtlParser.STDDEV_POP, 0);
    }
    STDDEV_SAMP() {
      return this.getToken(VtlParser.STDDEV_SAMP, 0);
    }
    VAR_POP() {
      return this.getToken(VtlParser.VAR_POP, 0);
    }
    VAR_SAMP() {
      return this.getToken(VtlParser.VAR_SAMP, 0);
    }
    groupingClause() {
      return this.getTypedRuleContext(GroupingClauseContext, 0);
    }
    havingClause() {
      return this.getTypedRuleContext(HavingClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggrDataset) {
        return visitor.visitAggrDataset(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AnFunctionContext = class extends Sn {
    static {
      __name(this, "AnFunctionContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_anFunction;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var LagOrLeadAnContext = class extends AnFunctionContext {
    static {
      __name(this, "LagOrLeadAnContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    LAG() {
      return this.getToken(VtlParser.LAG, 0);
    }
    LEAD() {
      return this.getToken(VtlParser.LEAD, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    orderByClause() {
      return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    scalarItem() {
      return this.getTypedRuleContext(ScalarItemContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitLagOrLeadAn) {
        return visitor.visitLagOrLeadAn(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RatioToReportAnContext = class extends AnFunctionContext {
    static {
      __name(this, "RatioToReportAnContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    RATIO_TO_REPORT() {
      return this.getToken(VtlParser.RATIO_TO_REPORT, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRatioToReportAn) {
        return visitor.visitRatioToReportAn(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AnSimpleFunctionContext = class extends AnFunctionContext {
    static {
      __name(this, "AnSimpleFunctionContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    SUM() {
      return this.getToken(VtlParser.SUM, 0);
    }
    AVG() {
      return this.getToken(VtlParser.AVG, 0);
    }
    COUNT() {
      return this.getToken(VtlParser.COUNT, 0);
    }
    MEDIAN() {
      return this.getToken(VtlParser.MEDIAN, 0);
    }
    MIN() {
      return this.getToken(VtlParser.MIN, 0);
    }
    MAX() {
      return this.getToken(VtlParser.MAX, 0);
    }
    STDDEV_POP() {
      return this.getToken(VtlParser.STDDEV_POP, 0);
    }
    STDDEV_SAMP() {
      return this.getToken(VtlParser.STDDEV_SAMP, 0);
    }
    VAR_POP() {
      return this.getToken(VtlParser.VAR_POP, 0);
    }
    VAR_SAMP() {
      return this.getToken(VtlParser.VAR_SAMP, 0);
    }
    FIRST_VALUE() {
      return this.getToken(VtlParser.FIRST_VALUE, 0);
    }
    LAST_VALUE() {
      return this.getToken(VtlParser.LAST_VALUE, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    orderByClause() {
      return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    windowingClause() {
      return this.getTypedRuleContext(WindowingClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAnSimpleFunction) {
        return visitor.visitAnSimpleFunction(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AnFunctionComponentContext = class extends Sn {
    static {
      __name(this, "AnFunctionComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_anFunctionComponent;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var AnSimpleFunctionComponentContext = class extends AnFunctionComponentContext {
    static {
      __name(this, "AnSimpleFunctionComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    SUM() {
      return this.getToken(VtlParser.SUM, 0);
    }
    AVG() {
      return this.getToken(VtlParser.AVG, 0);
    }
    COUNT() {
      return this.getToken(VtlParser.COUNT, 0);
    }
    MEDIAN() {
      return this.getToken(VtlParser.MEDIAN, 0);
    }
    MIN() {
      return this.getToken(VtlParser.MIN, 0);
    }
    MAX() {
      return this.getToken(VtlParser.MAX, 0);
    }
    STDDEV_POP() {
      return this.getToken(VtlParser.STDDEV_POP, 0);
    }
    STDDEV_SAMP() {
      return this.getToken(VtlParser.STDDEV_SAMP, 0);
    }
    VAR_POP() {
      return this.getToken(VtlParser.VAR_POP, 0);
    }
    VAR_SAMP() {
      return this.getToken(VtlParser.VAR_SAMP, 0);
    }
    FIRST_VALUE() {
      return this.getToken(VtlParser.FIRST_VALUE, 0);
    }
    LAST_VALUE() {
      return this.getToken(VtlParser.LAST_VALUE, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    orderByClause() {
      return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    windowingClause() {
      return this.getTypedRuleContext(WindowingClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAnSimpleFunctionComponent) {
        return visitor.visitAnSimpleFunctionComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var LagOrLeadAnComponentContext = class extends AnFunctionComponentContext {
    static {
      __name(this, "LagOrLeadAnComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    LAG() {
      return this.getToken(VtlParser.LAG, 0);
    }
    LEAD() {
      return this.getToken(VtlParser.LEAD, 0);
    }
    COMMA() {
      return this.getToken(VtlParser.COMMA, 0);
    }
    orderByClause() {
      return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    scalarItem() {
      return this.getTypedRuleContext(ScalarItemContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitLagOrLeadAnComponent) {
        return visitor.visitLagOrLeadAnComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RankAnComponentContext = class extends AnFunctionComponentContext {
    static {
      __name(this, "RankAnComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    RANK() {
      return this.getToken(VtlParser.RANK, 0);
    }
    orderByClause() {
      return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRankAnComponent) {
        return visitor.visitRankAnComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RatioToReportAnComponentContext = class extends AnFunctionComponentContext {
    static {
      __name(this, "RatioToReportAnComponentContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    LPAREN_list() {
      return this.getTokens(VtlParser.LPAREN);
    }
    LPAREN(i2) {
      return this.getToken(VtlParser.LPAREN, i2);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    OVER() {
      return this.getToken(VtlParser.OVER, 0);
    }
    RPAREN_list() {
      return this.getTokens(VtlParser.RPAREN);
    }
    RPAREN(i2) {
      return this.getToken(VtlParser.RPAREN, i2);
    }
    RATIO_TO_REPORT() {
      return this.getToken(VtlParser.RATIO_TO_REPORT, 0);
    }
    partitionByClause() {
      return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRatioToReportAnComponent) {
        return visitor.visitRatioToReportAnComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RenameClauseItemContext = class extends Sn {
    static {
      __name(this, "RenameClauseItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    TO() {
      return this.getToken(VtlParser.TO, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_renameClauseItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRenameClauseItem) {
        return visitor.visitRenameClauseItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggregateClauseContext = class extends Sn {
    static {
      __name(this, "AggregateClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    aggrFunctionClause_list() {
      return this.getTypedRuleContexts(AggrFunctionClauseContext);
    }
    aggrFunctionClause(i2) {
      return this.getTypedRuleContext(AggrFunctionClauseContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_aggregateClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggregateClause) {
        return visitor.visitAggregateClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AggrFunctionClauseContext = class extends Sn {
    static {
      __name(this, "AggrFunctionClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    ASSIGN() {
      return this.getToken(VtlParser.ASSIGN, 0);
    }
    aggrOperators() {
      return this.getTypedRuleContext(AggrOperatorsContext, 0);
    }
    componentRole() {
      return this.getTypedRuleContext(ComponentRoleContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_aggrFunctionClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAggrFunctionClause) {
        return visitor.visitAggrFunctionClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CalcClauseItemContext = class extends Sn {
    static {
      __name(this, "CalcClauseItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    ASSIGN() {
      return this.getToken(VtlParser.ASSIGN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    componentRole() {
      return this.getTypedRuleContext(ComponentRoleContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_calcClauseItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCalcClauseItem) {
        return visitor.visitCalcClauseItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SubspaceClauseItemContext = class extends Sn {
    static {
      __name(this, "SubspaceClauseItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    EQ() {
      return this.getToken(VtlParser.EQ, 0);
    }
    scalarItem() {
      return this.getTypedRuleContext(ScalarItemContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_subspaceClauseItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSubspaceClauseItem) {
        return visitor.visitSubspaceClauseItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ScalarItemContext = class extends Sn {
    static {
      __name(this, "ScalarItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_scalarItem;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var ScalarWithCastContext = class extends ScalarItemContext {
    static {
      __name(this, "ScalarWithCastContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    CAST() {
      return this.getToken(VtlParser.CAST, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    constant() {
      return this.getTypedRuleContext(ConstantContext, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    basicScalarType() {
      return this.getTypedRuleContext(BasicScalarTypeContext, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitScalarWithCast) {
        return visitor.visitScalarWithCast(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SimpleScalarContext = class extends ScalarItemContext {
    static {
      __name(this, "SimpleScalarContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    constant() {
      return this.getTypedRuleContext(ConstantContext, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSimpleScalar) {
        return visitor.visitSimpleScalar(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinClauseWithoutUsingContext = class extends Sn {
    static {
      __name(this, "JoinClauseWithoutUsingContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    joinClauseItem_list() {
      return this.getTypedRuleContexts(JoinClauseItemContext);
    }
    joinClauseItem(i2) {
      return this.getTypedRuleContext(JoinClauseItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_joinClauseWithoutUsing;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinClauseWithoutUsing) {
        return visitor.visitJoinClauseWithoutUsing(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinClauseContext = class extends Sn {
    static {
      __name(this, "JoinClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    joinClauseItem_list() {
      return this.getTypedRuleContexts(JoinClauseItemContext);
    }
    joinClauseItem(i2) {
      return this.getTypedRuleContext(JoinClauseItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    USING() {
      return this.getToken(VtlParser.USING, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_joinClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinClause) {
        return visitor.visitJoinClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinClauseItemContext = class extends Sn {
    static {
      __name(this, "JoinClauseItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    AS() {
      return this.getToken(VtlParser.AS, 0);
    }
    alias() {
      return this.getTypedRuleContext(AliasContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_joinClauseItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinClauseItem) {
        return visitor.visitJoinClauseItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinBodyContext = class extends Sn {
    static {
      __name(this, "JoinBodyContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    filterClause() {
      return this.getTypedRuleContext(FilterClauseContext, 0);
    }
    calcClause() {
      return this.getTypedRuleContext(CalcClauseContext, 0);
    }
    joinApplyClause() {
      return this.getTypedRuleContext(JoinApplyClauseContext, 0);
    }
    aggrClause() {
      return this.getTypedRuleContext(AggrClauseContext, 0);
    }
    keepOrDropClause() {
      return this.getTypedRuleContext(KeepOrDropClauseContext, 0);
    }
    renameClause() {
      return this.getTypedRuleContext(RenameClauseContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_joinBody;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinBody) {
        return visitor.visitJoinBody(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var JoinApplyClauseContext = class extends Sn {
    static {
      __name(this, "JoinApplyClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    APPLY() {
      return this.getToken(VtlParser.APPLY, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_joinApplyClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitJoinApplyClause) {
        return visitor.visitJoinApplyClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var PartitionByClauseContext = class extends Sn {
    static {
      __name(this, "PartitionByClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    PARTITION() {
      return this.getToken(VtlParser.PARTITION, 0);
    }
    BY() {
      return this.getToken(VtlParser.BY, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_partitionByClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitPartitionByClause) {
        return visitor.visitPartitionByClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OrderByClauseContext = class extends Sn {
    static {
      __name(this, "OrderByClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    ORDER() {
      return this.getToken(VtlParser.ORDER, 0);
    }
    BY() {
      return this.getToken(VtlParser.BY, 0);
    }
    orderByItem_list() {
      return this.getTypedRuleContexts(OrderByItemContext);
    }
    orderByItem(i2) {
      return this.getTypedRuleContext(OrderByItemContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_orderByClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOrderByClause) {
        return visitor.visitOrderByClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OrderByItemContext = class extends Sn {
    static {
      __name(this, "OrderByItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    ASC() {
      return this.getToken(VtlParser.ASC, 0);
    }
    DESC() {
      return this.getToken(VtlParser.DESC, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_orderByItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOrderByItem) {
        return visitor.visitOrderByItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var WindowingClauseContext = class extends Sn {
    static {
      __name(this, "WindowingClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    BETWEEN() {
      return this.getToken(VtlParser.BETWEEN, 0);
    }
    AND() {
      return this.getToken(VtlParser.AND, 0);
    }
    limitClauseItem_list() {
      return this.getTypedRuleContexts(LimitClauseItemContext);
    }
    limitClauseItem(i2) {
      return this.getTypedRuleContext(LimitClauseItemContext, i2);
    }
    RANGE() {
      return this.getToken(VtlParser.RANGE, 0);
    }
    DATA() {
      return this.getToken(VtlParser.DATA, 0);
    }
    POINTS() {
      return this.getToken(VtlParser.POINTS, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_windowingClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitWindowingClause) {
        return visitor.visitWindowingClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SignedIntegerContext = class extends Sn {
    static {
      __name(this, "SignedIntegerContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    INTEGER_CONSTANT() {
      return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_signedInteger;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSignedInteger) {
        return visitor.visitSignedInteger(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SignedNumberContext = class extends Sn {
    static {
      __name(this, "SignedNumberContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    NUMBER_CONSTANT() {
      return this.getToken(VtlParser.NUMBER_CONSTANT, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_signedNumber;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSignedNumber) {
        return visitor.visitSignedNumber(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var LimitClauseItemContext = class extends Sn {
    static {
      __name(this, "LimitClauseItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    PRECEDING() {
      return this.getToken(VtlParser.PRECEDING, 0);
    }
    FOLLOWING() {
      return this.getToken(VtlParser.FOLLOWING, 0);
    }
    CURRENT() {
      return this.getToken(VtlParser.CURRENT, 0);
    }
    DATA() {
      return this.getToken(VtlParser.DATA, 0);
    }
    POINT() {
      return this.getToken(VtlParser.POINT, 0);
    }
    UNBOUNDED() {
      return this.getToken(VtlParser.UNBOUNDED, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_limitClauseItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitLimitClauseItem) {
        return visitor.visitLimitClauseItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var GroupingClauseContext = class extends Sn {
    static {
      __name(this, "GroupingClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_groupingClause;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var GroupAllContext = class extends GroupingClauseContext {
    static {
      __name(this, "GroupAllContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    GROUP() {
      return this.getToken(VtlParser.GROUP, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    TIME_AGG() {
      return this.getToken(VtlParser.TIME_AGG, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitGroupAll) {
        return visitor.visitGroupAll(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var GroupByOrExceptContext = class extends GroupingClauseContext {
    static {
      __name(this, "GroupByOrExceptContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    GROUP() {
      return this.getToken(VtlParser.GROUP, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    BY() {
      return this.getToken(VtlParser.BY, 0);
    }
    EXCEPT() {
      return this.getToken(VtlParser.EXCEPT, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    TIME_AGG() {
      return this.getToken(VtlParser.TIME_AGG, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    FIRST() {
      return this.getToken(VtlParser.FIRST, 0);
    }
    LAST() {
      return this.getToken(VtlParser.LAST, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitGroupByOrExcept) {
        return visitor.visitGroupByOrExcept(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var HavingClauseContext = class extends Sn {
    static {
      __name(this, "HavingClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    HAVING() {
      return this.getToken(VtlParser.HAVING, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_havingClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHavingClause) {
        return visitor.visitHavingClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ParameterItemContext = class extends Sn {
    static {
      __name(this, "ParameterItemContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    varID() {
      return this.getTypedRuleContext(VarIDContext, 0);
    }
    inputParameterType() {
      return this.getTypedRuleContext(InputParameterTypeContext, 0);
    }
    DEFAULT() {
      return this.getToken(VtlParser.DEFAULT, 0);
    }
    scalarItem() {
      return this.getTypedRuleContext(ScalarItemContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_parameterItem;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitParameterItem) {
        return visitor.visitParameterItem(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OutputParameterTypeContext = class extends Sn {
    static {
      __name(this, "OutputParameterTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    scalarType() {
      return this.getTypedRuleContext(ScalarTypeContext, 0);
    }
    datasetType() {
      return this.getTypedRuleContext(DatasetTypeContext, 0);
    }
    componentType() {
      return this.getTypedRuleContext(ComponentTypeContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_outputParameterType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOutputParameterType) {
        return visitor.visitOutputParameterType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OutputParameterTypeComponentContext = class extends Sn {
    static {
      __name(this, "OutputParameterTypeComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentType() {
      return this.getTypedRuleContext(ComponentTypeContext, 0);
    }
    scalarType() {
      return this.getTypedRuleContext(ScalarTypeContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_outputParameterTypeComponent;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOutputParameterTypeComponent) {
        return visitor.visitOutputParameterTypeComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var InputParameterTypeContext = class extends Sn {
    static {
      __name(this, "InputParameterTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    scalarType() {
      return this.getTypedRuleContext(ScalarTypeContext, 0);
    }
    datasetType() {
      return this.getTypedRuleContext(DatasetTypeContext, 0);
    }
    scalarSetType() {
      return this.getTypedRuleContext(ScalarSetTypeContext, 0);
    }
    rulesetType() {
      return this.getTypedRuleContext(RulesetTypeContext, 0);
    }
    componentType() {
      return this.getTypedRuleContext(ComponentTypeContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_inputParameterType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInputParameterType) {
        return visitor.visitInputParameterType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RulesetTypeContext = class extends Sn {
    static {
      __name(this, "RulesetTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    RULESET() {
      return this.getToken(VtlParser.RULESET, 0);
    }
    dpRuleset() {
      return this.getTypedRuleContext(DpRulesetContext, 0);
    }
    hrRuleset() {
      return this.getTypedRuleContext(HrRulesetContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_rulesetType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRulesetType) {
        return visitor.visitRulesetType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ScalarTypeContext = class extends Sn {
    static {
      __name(this, "ScalarTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    basicScalarType() {
      return this.getTypedRuleContext(BasicScalarTypeContext, 0);
    }
    valueDomainName() {
      return this.getTypedRuleContext(ValueDomainNameContext, 0);
    }
    scalarTypeConstraint() {
      return this.getTypedRuleContext(ScalarTypeConstraintContext, 0);
    }
    NULL_CONSTANT() {
      return this.getToken(VtlParser.NULL_CONSTANT, 0);
    }
    NOT() {
      return this.getToken(VtlParser.NOT, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_scalarType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitScalarType) {
        return visitor.visitScalarType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComponentTypeContext = class extends Sn {
    static {
      __name(this, "ComponentTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentRole() {
      return this.getTypedRuleContext(ComponentRoleContext, 0);
    }
    LT() {
      return this.getToken(VtlParser.LT, 0);
    }
    scalarType() {
      return this.getTypedRuleContext(ScalarTypeContext, 0);
    }
    MT() {
      return this.getToken(VtlParser.MT, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_componentType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComponentType) {
        return visitor.visitComponentType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DatasetTypeContext = class extends Sn {
    static {
      __name(this, "DatasetTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    DATASET() {
      return this.getToken(VtlParser.DATASET, 0);
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    compConstraint_list() {
      return this.getTypedRuleContexts(CompConstraintContext);
    }
    compConstraint(i2) {
      return this.getTypedRuleContext(CompConstraintContext, i2);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_datasetType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDatasetType) {
        return visitor.visitDatasetType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var EvalDatasetTypeContext = class extends Sn {
    static {
      __name(this, "EvalDatasetTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    datasetType() {
      return this.getTypedRuleContext(DatasetTypeContext, 0);
    }
    scalarType() {
      return this.getTypedRuleContext(ScalarTypeContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_evalDatasetType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitEvalDatasetType) {
        return visitor.visitEvalDatasetType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ScalarSetTypeContext = class extends Sn {
    static {
      __name(this, "ScalarSetTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    SET() {
      return this.getToken(VtlParser.SET, 0);
    }
    LT() {
      return this.getToken(VtlParser.LT, 0);
    }
    scalarType() {
      return this.getTypedRuleContext(ScalarTypeContext, 0);
    }
    MT() {
      return this.getToken(VtlParser.MT, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_scalarSetType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitScalarSetType) {
        return visitor.visitScalarSetType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DpRulesetContext = class extends Sn {
    static {
      __name(this, "DpRulesetContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_dpRuleset;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var DataPointVdContext = class extends DpRulesetContext {
    static {
      __name(this, "DataPointVdContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATAPOINT_ON_VD() {
      return this.getToken(VtlParser.DATAPOINT_ON_VD, 0);
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    valueDomainName_list() {
      return this.getTypedRuleContexts(ValueDomainNameContext);
    }
    valueDomainName(i2) {
      return this.getTypedRuleContext(ValueDomainNameContext, i2);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    MUL_list() {
      return this.getTokens(VtlParser.MUL);
    }
    MUL(i2) {
      return this.getToken(VtlParser.MUL, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDataPointVd) {
        return visitor.visitDataPointVd(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DataPointVarContext = class extends DpRulesetContext {
    static {
      __name(this, "DataPointVarContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATAPOINT_ON_VAR() {
      return this.getToken(VtlParser.DATAPOINT_ON_VAR, 0);
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    varID_list() {
      return this.getTypedRuleContexts(VarIDContext);
    }
    varID(i2) {
      return this.getTypedRuleContext(VarIDContext, i2);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    MUL_list() {
      return this.getTokens(VtlParser.MUL);
    }
    MUL(i2) {
      return this.getToken(VtlParser.MUL, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDataPointVar) {
        return visitor.visitDataPointVar(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var DataPointContext = class extends DpRulesetContext {
    static {
      __name(this, "DataPointContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    DATAPOINT() {
      return this.getToken(VtlParser.DATAPOINT, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitDataPoint) {
        return visitor.visitDataPoint(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var HrRulesetContext = class extends Sn {
    static {
      __name(this, "HrRulesetContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_hrRuleset;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var HrRulesetVdTypeContext = class extends HrRulesetContext {
    static {
      __name(this, "HrRulesetVdTypeContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    HIERARCHICAL_ON_VD() {
      return this.getToken(VtlParser.HIERARCHICAL_ON_VD, 0);
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    valueDomainName_list() {
      return this.getTypedRuleContexts(ValueDomainNameContext);
    }
    valueDomainName(i2) {
      return this.getTypedRuleContext(ValueDomainNameContext, i2);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    MUL_list() {
      return this.getTokens(VtlParser.MUL);
    }
    MUL(i2) {
      return this.getToken(VtlParser.MUL, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHrRulesetVdType) {
        return visitor.visitHrRulesetVdType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var HrRulesetVarTypeContext = class extends HrRulesetContext {
    static {
      __name(this, "HrRulesetVarTypeContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    HIERARCHICAL_ON_VAR() {
      return this.getToken(VtlParser.HIERARCHICAL_ON_VAR, 0);
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    varID_list() {
      return this.getTypedRuleContexts(VarIDContext);
    }
    varID(i2) {
      return this.getTypedRuleContext(VarIDContext, i2);
    }
    LPAREN() {
      return this.getToken(VtlParser.LPAREN, 0);
    }
    RPAREN() {
      return this.getToken(VtlParser.RPAREN, 0);
    }
    MUL_list() {
      return this.getTokens(VtlParser.MUL);
    }
    MUL(i2) {
      return this.getToken(VtlParser.MUL, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHrRulesetVarType) {
        return visitor.visitHrRulesetVarType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var HrRulesetTypeContext = class extends HrRulesetContext {
    static {
      __name(this, "HrRulesetTypeContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    HIERARCHICAL() {
      return this.getToken(VtlParser.HIERARCHICAL, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHrRulesetType) {
        return visitor.visitHrRulesetType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValueDomainNameContext = class extends Sn {
    static {
      __name(this, "ValueDomainNameContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_valueDomainName;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValueDomainName) {
        return visitor.visitValueDomainName(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RulesetIDContext = class extends Sn {
    static {
      __name(this, "RulesetIDContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_rulesetID;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRulesetID) {
        return visitor.visitRulesetID(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RulesetSignatureContext = class extends Sn {
    static {
      __name(this, "RulesetSignatureContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    signature_list() {
      return this.getTypedRuleContexts(SignatureContext);
    }
    signature(i2) {
      return this.getTypedRuleContext(SignatureContext, i2);
    }
    VALUE_DOMAIN() {
      return this.getToken(VtlParser.VALUE_DOMAIN, 0);
    }
    VARIABLE() {
      return this.getToken(VtlParser.VARIABLE, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_rulesetSignature;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRulesetSignature) {
        return visitor.visitRulesetSignature(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SignatureContext = class extends Sn {
    static {
      __name(this, "SignatureContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    varID() {
      return this.getTypedRuleContext(VarIDContext, 0);
    }
    AS() {
      return this.getToken(VtlParser.AS, 0);
    }
    alias() {
      return this.getTypedRuleContext(AliasContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_signature;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSignature) {
        return visitor.visitSignature(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RuleClauseDatapointContext = class extends Sn {
    static {
      __name(this, "RuleClauseDatapointContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    ruleItemDatapoint_list() {
      return this.getTypedRuleContexts(RuleItemDatapointContext);
    }
    ruleItemDatapoint(i2) {
      return this.getTypedRuleContext(RuleItemDatapointContext, i2);
    }
    EOL_list() {
      return this.getTokens(VtlParser.EOL);
    }
    EOL(i2) {
      return this.getToken(VtlParser.EOL, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_ruleClauseDatapoint;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRuleClauseDatapoint) {
        return visitor.visitRuleClauseDatapoint(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RuleItemDatapointContext = class extends Sn {
    static {
      __name(this, "RuleItemDatapointContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    exprComponent_list() {
      return this.getTypedRuleContexts(ExprComponentContext);
    }
    exprComponent(i2) {
      return this.getTypedRuleContext(ExprComponentContext, i2);
    }
    COLON() {
      return this.getToken(VtlParser.COLON, 0);
    }
    WHEN() {
      return this.getToken(VtlParser.WHEN, 0);
    }
    THEN() {
      return this.getToken(VtlParser.THEN, 0);
    }
    erCode() {
      return this.getTypedRuleContext(ErCodeContext, 0);
    }
    erLevel() {
      return this.getTypedRuleContext(ErLevelContext, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_ruleItemDatapoint;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRuleItemDatapoint) {
        return visitor.visitRuleItemDatapoint(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RuleClauseHierarchicalContext = class extends Sn {
    static {
      __name(this, "RuleClauseHierarchicalContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    ruleItemHierarchical_list() {
      return this.getTypedRuleContexts(RuleItemHierarchicalContext);
    }
    ruleItemHierarchical(i2) {
      return this.getTypedRuleContext(RuleItemHierarchicalContext, i2);
    }
    EOL_list() {
      return this.getTokens(VtlParser.EOL);
    }
    EOL(i2) {
      return this.getToken(VtlParser.EOL, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_ruleClauseHierarchical;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRuleClauseHierarchical) {
        return visitor.visitRuleClauseHierarchical(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RuleItemHierarchicalContext = class extends Sn {
    static {
      __name(this, "RuleItemHierarchicalContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    codeItemRelation() {
      return this.getTypedRuleContext(CodeItemRelationContext, 0);
    }
    COLON() {
      return this.getToken(VtlParser.COLON, 0);
    }
    erCode() {
      return this.getTypedRuleContext(ErCodeContext, 0);
    }
    erLevel() {
      return this.getTypedRuleContext(ErLevelContext, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_ruleItemHierarchical;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRuleItemHierarchical) {
        return visitor.visitRuleItemHierarchical(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var HierRuleSignatureContext = class extends Sn {
    static {
      __name(this, "HierRuleSignatureContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    RULE() {
      return this.getToken(VtlParser.RULE, 0);
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    VALUE_DOMAIN() {
      return this.getToken(VtlParser.VALUE_DOMAIN, 0);
    }
    VARIABLE() {
      return this.getToken(VtlParser.VARIABLE, 0);
    }
    CONDITION() {
      return this.getToken(VtlParser.CONDITION, 0);
    }
    valueDomainSignature() {
      return this.getTypedRuleContext(ValueDomainSignatureContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_hierRuleSignature;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitHierRuleSignature) {
        return visitor.visitHierRuleSignature(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValueDomainSignatureContext = class extends Sn {
    static {
      __name(this, "ValueDomainSignatureContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    signature_list() {
      return this.getTypedRuleContexts(SignatureContext);
    }
    signature(i2) {
      return this.getTypedRuleContext(SignatureContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_valueDomainSignature;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValueDomainSignature) {
        return visitor.visitValueDomainSignature(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CodeItemRelationContext = class extends Sn {
    static {
      __name(this, "CodeItemRelationContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    codeItemRelationClause_list() {
      return this.getTypedRuleContexts(CodeItemRelationClauseContext);
    }
    codeItemRelationClause(i2) {
      return this.getTypedRuleContext(CodeItemRelationClauseContext, i2);
    }
    valueDomainValue() {
      return this.getTypedRuleContext(ValueDomainValueContext, 0);
    }
    WHEN() {
      return this.getToken(VtlParser.WHEN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    THEN() {
      return this.getToken(VtlParser.THEN, 0);
    }
    comparisonOperand() {
      return this.getTypedRuleContext(ComparisonOperandContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_codeItemRelation;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCodeItemRelation) {
        return visitor.visitCodeItemRelation(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CodeItemRelationClauseContext = class extends Sn {
    static {
      __name(this, "CodeItemRelationClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    valueDomainValue() {
      return this.getTypedRuleContext(ValueDomainValueContext, 0);
    }
    QLPAREN() {
      return this.getToken(VtlParser.QLPAREN, 0);
    }
    QRPAREN() {
      return this.getToken(VtlParser.QRPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    MINUS() {
      return this.getToken(VtlParser.MINUS, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_codeItemRelationClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCodeItemRelationClause) {
        return visitor.visitCodeItemRelationClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValueDomainValueContext = class extends Sn {
    static {
      __name(this, "ValueDomainValueContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    signedNumber() {
      return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_valueDomainValue;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValueDomainValue) {
        return visitor.visitValueDomainValue(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ScalarTypeConstraintContext = class extends Sn {
    static {
      __name(this, "ScalarTypeConstraintContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    get ruleIndex() {
      return VtlParser.RULE_scalarTypeConstraint;
    }
    copyFrom(ctx) {
      super.copyFrom(ctx);
    }
  };
  var RangeConstraintContext = class extends ScalarTypeConstraintContext {
    static {
      __name(this, "RangeConstraintContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    scalarItem_list() {
      return this.getTypedRuleContexts(ScalarItemContext);
    }
    scalarItem(i2) {
      return this.getTypedRuleContext(ScalarItemContext, i2);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRangeConstraint) {
        return visitor.visitRangeConstraint(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConditionConstraintContext = class extends ScalarTypeConstraintContext {
    static {
      __name(this, "ConditionConstraintContext");
    }
    constructor(parser, ctx) {
      super(parser, ctx.parentCtx, ctx.invokingState);
      super.copyFrom(ctx);
    }
    QLPAREN() {
      return this.getToken(VtlParser.QLPAREN, 0);
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    QRPAREN() {
      return this.getToken(VtlParser.QRPAREN, 0);
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConditionConstraint) {
        return visitor.visitConditionConstraint(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var CompConstraintContext = class extends Sn {
    static {
      __name(this, "CompConstraintContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    componentType() {
      return this.getTypedRuleContext(ComponentTypeContext, 0);
    }
    componentID() {
      return this.getTypedRuleContext(ComponentIDContext, 0);
    }
    multModifier() {
      return this.getTypedRuleContext(MultModifierContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_compConstraint;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitCompConstraint) {
        return visitor.visitCompConstraint(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var MultModifierContext = class extends Sn {
    static {
      __name(this, "MultModifierContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    PLUS() {
      return this.getToken(VtlParser.PLUS, 0);
    }
    MUL() {
      return this.getToken(VtlParser.MUL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_multModifier;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitMultModifier) {
        return visitor.visitMultModifier(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValidationOutputContext = class extends Sn {
    static {
      __name(this, "ValidationOutputContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    INVALID() {
      return this.getToken(VtlParser.INVALID, 0);
    }
    ALL_MEASURES() {
      return this.getToken(VtlParser.ALL_MEASURES, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_validationOutput;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValidationOutput) {
        return visitor.visitValidationOutput(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValidationModeContext = class extends Sn {
    static {
      __name(this, "ValidationModeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    NON_NULL() {
      return this.getToken(VtlParser.NON_NULL, 0);
    }
    NON_ZERO() {
      return this.getToken(VtlParser.NON_ZERO, 0);
    }
    PARTIAL_NULL() {
      return this.getToken(VtlParser.PARTIAL_NULL, 0);
    }
    PARTIAL_ZERO() {
      return this.getToken(VtlParser.PARTIAL_ZERO, 0);
    }
    ALWAYS_NULL() {
      return this.getToken(VtlParser.ALWAYS_NULL, 0);
    }
    ALWAYS_ZERO() {
      return this.getToken(VtlParser.ALWAYS_ZERO, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_validationMode;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValidationMode) {
        return visitor.visitValidationMode(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConditionClauseContext = class extends Sn {
    static {
      __name(this, "ConditionClauseContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    CONDITION() {
      return this.getToken(VtlParser.CONDITION, 0);
    }
    componentID_list() {
      return this.getTypedRuleContexts(ComponentIDContext);
    }
    componentID(i2) {
      return this.getTypedRuleContext(ComponentIDContext, i2);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_conditionClause;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConditionClause) {
        return visitor.visitConditionClause(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var InputModeContext = class extends Sn {
    static {
      __name(this, "InputModeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    DATASET() {
      return this.getToken(VtlParser.DATASET, 0);
    }
    DATASET_PRIORITY() {
      return this.getToken(VtlParser.DATASET_PRIORITY, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_inputMode;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInputMode) {
        return visitor.visitInputMode(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ImbalanceExprContext = class extends Sn {
    static {
      __name(this, "ImbalanceExprContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IMBALANCE() {
      return this.getToken(VtlParser.IMBALANCE, 0);
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_imbalanceExpr;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitImbalanceExpr) {
        return visitor.visitImbalanceExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var InputModeHierarchyContext = class extends Sn {
    static {
      __name(this, "InputModeHierarchyContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    RULE() {
      return this.getToken(VtlParser.RULE, 0);
    }
    DATASET() {
      return this.getToken(VtlParser.DATASET, 0);
    }
    RULE_PRIORITY() {
      return this.getToken(VtlParser.RULE_PRIORITY, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_inputModeHierarchy;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitInputModeHierarchy) {
        return visitor.visitInputModeHierarchy(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OutputModeHierarchyContext = class extends Sn {
    static {
      __name(this, "OutputModeHierarchyContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    COMPUTED() {
      return this.getToken(VtlParser.COMPUTED, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_outputModeHierarchy;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOutputModeHierarchy) {
        return visitor.visitOutputModeHierarchy(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var AliasContext = class extends Sn {
    static {
      __name(this, "AliasContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_alias;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitAlias) {
        return visitor.visitAlias(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var VarIDContext = class extends Sn {
    static {
      __name(this, "VarIDContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_varID;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitVarID) {
        return visitor.visitVarID(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var SimpleComponentIdContext = class extends Sn {
    static {
      __name(this, "SimpleComponentIdContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_simpleComponentId;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitSimpleComponentId) {
        return visitor.visitSimpleComponentId(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComponentIDContext = class extends Sn {
    static {
      __name(this, "ComponentIDContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER_list() {
      return this.getTokens(VtlParser.IDENTIFIER);
    }
    IDENTIFIER(i2) {
      return this.getToken(VtlParser.IDENTIFIER, i2);
    }
    MEMBERSHIP() {
      return this.getToken(VtlParser.MEMBERSHIP, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_componentID;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComponentID) {
        return visitor.visitComponentID(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ListsContext = class extends Sn {
    static {
      __name(this, "ListsContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    GLPAREN() {
      return this.getToken(VtlParser.GLPAREN, 0);
    }
    scalarItem_list() {
      return this.getTypedRuleContexts(ScalarItemContext);
    }
    scalarItem(i2) {
      return this.getTypedRuleContext(ScalarItemContext, i2);
    }
    GRPAREN() {
      return this.getToken(VtlParser.GRPAREN, 0);
    }
    COMMA_list() {
      return this.getTokens(VtlParser.COMMA);
    }
    COMMA(i2) {
      return this.getToken(VtlParser.COMMA, i2);
    }
    get ruleIndex() {
      return VtlParser.RULE_lists;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitLists) {
        return visitor.visitLists(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ErCodeContext = class extends Sn {
    static {
      __name(this, "ErCodeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    ERRORCODE() {
      return this.getToken(VtlParser.ERRORCODE, 0);
    }
    constant() {
      return this.getTypedRuleContext(ConstantContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_erCode;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitErCode) {
        return visitor.visitErCode(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ErLevelContext = class extends Sn {
    static {
      __name(this, "ErLevelContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    ERRORLEVEL() {
      return this.getToken(VtlParser.ERRORLEVEL, 0);
    }
    constant() {
      return this.getTypedRuleContext(ConstantContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_erLevel;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitErLevel) {
        return visitor.visitErLevel(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComparisonOperandContext = class extends Sn {
    static {
      __name(this, "ComparisonOperandContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    MT() {
      return this.getToken(VtlParser.MT, 0);
    }
    ME() {
      return this.getToken(VtlParser.ME, 0);
    }
    LE() {
      return this.getToken(VtlParser.LE, 0);
    }
    LT() {
      return this.getToken(VtlParser.LT, 0);
    }
    EQ() {
      return this.getToken(VtlParser.EQ, 0);
    }
    NEQ() {
      return this.getToken(VtlParser.NEQ, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_comparisonOperand;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComparisonOperand) {
        return visitor.visitComparisonOperand(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OptionalExprContext = class extends Sn {
    static {
      __name(this, "OptionalExprContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_optionalExpr;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOptionalExpr) {
        return visitor.visitOptionalExpr(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OptionalExprComponentContext = class extends Sn {
    static {
      __name(this, "OptionalExprComponentContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    exprComponent() {
      return this.getTypedRuleContext(ExprComponentContext, 0);
    }
    OPTIONAL() {
      return this.getToken(VtlParser.OPTIONAL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_optionalExprComponent;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOptionalExprComponent) {
        return visitor.visitOptionalExprComponent(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ComponentRoleContext = class extends Sn {
    static {
      __name(this, "ComponentRoleContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    MEASURE() {
      return this.getToken(VtlParser.MEASURE, 0);
    }
    COMPONENT() {
      return this.getToken(VtlParser.COMPONENT, 0);
    }
    DIMENSION() {
      return this.getToken(VtlParser.DIMENSION, 0);
    }
    ATTRIBUTE() {
      return this.getToken(VtlParser.ATTRIBUTE, 0);
    }
    viralAttribute() {
      return this.getTypedRuleContext(ViralAttributeContext, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_componentRole;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitComponentRole) {
        return visitor.visitComponentRole(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ViralAttributeContext = class extends Sn {
    static {
      __name(this, "ViralAttributeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    VIRAL() {
      return this.getToken(VtlParser.VIRAL, 0);
    }
    ATTRIBUTE() {
      return this.getToken(VtlParser.ATTRIBUTE, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_viralAttribute;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitViralAttribute) {
        return visitor.visitViralAttribute(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ValueDomainIDContext = class extends Sn {
    static {
      __name(this, "ValueDomainIDContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_valueDomainID;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitValueDomainID) {
        return visitor.visitValueDomainID(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var OperatorIDContext = class extends Sn {
    static {
      __name(this, "OperatorIDContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_operatorID;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitOperatorID) {
        return visitor.visitOperatorID(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RoutineNameContext = class extends Sn {
    static {
      __name(this, "RoutineNameContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    IDENTIFIER() {
      return this.getToken(VtlParser.IDENTIFIER, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_routineName;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRoutineName) {
        return visitor.visitRoutineName(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var ConstantContext = class extends Sn {
    static {
      __name(this, "ConstantContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    signedInteger() {
      return this.getTypedRuleContext(SignedIntegerContext, 0);
    }
    signedNumber() {
      return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    BOOLEAN_CONSTANT() {
      return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
    }
    STRING_CONSTANT() {
      return this.getToken(VtlParser.STRING_CONSTANT, 0);
    }
    NULL_CONSTANT() {
      return this.getToken(VtlParser.NULL_CONSTANT, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_constant;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitConstant) {
        return visitor.visitConstant(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var BasicScalarTypeContext = class extends Sn {
    static {
      __name(this, "BasicScalarTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    STRING() {
      return this.getToken(VtlParser.STRING, 0);
    }
    INTEGER() {
      return this.getToken(VtlParser.INTEGER, 0);
    }
    NUMBER() {
      return this.getToken(VtlParser.NUMBER, 0);
    }
    BOOLEAN() {
      return this.getToken(VtlParser.BOOLEAN, 0);
    }
    DATE() {
      return this.getToken(VtlParser.DATE, 0);
    }
    TIME() {
      return this.getToken(VtlParser.TIME, 0);
    }
    TIME_PERIOD() {
      return this.getToken(VtlParser.TIME_PERIOD, 0);
    }
    DURATION() {
      return this.getToken(VtlParser.DURATION, 0);
    }
    SCALAR() {
      return this.getToken(VtlParser.SCALAR, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_basicScalarType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitBasicScalarType) {
        return visitor.visitBasicScalarType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };
  var RetainTypeContext = class extends Sn {
    static {
      __name(this, "RetainTypeContext");
    }
    constructor(parser, parent, invokingState) {
      super(parent, invokingState);
      this.parser = parser;
    }
    BOOLEAN_CONSTANT() {
      return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
    }
    ALL() {
      return this.getToken(VtlParser.ALL, 0);
    }
    get ruleIndex() {
      return VtlParser.RULE_retainType;
    }
    // @Override
    accept(visitor) {
      if (visitor.visitRetainType) {
        return visitor.visitRetainType(this);
      } else {
        return visitor.visitChildren(this);
      }
    }
  };

  // VtlLexer.ts
  var VtlLexer = class _VtlLexer extends cn {
    static {
      __name(this, "VtlLexer");
    }
    static {
      this.LPAREN = 1;
    }
    static {
      this.RPAREN = 2;
    }
    static {
      this.QLPAREN = 3;
    }
    static {
      this.QRPAREN = 4;
    }
    static {
      this.GLPAREN = 5;
    }
    static {
      this.GRPAREN = 6;
    }
    static {
      this.EQ = 7;
    }
    static {
      this.LT = 8;
    }
    static {
      this.MT = 9;
    }
    static {
      this.ME = 10;
    }
    static {
      this.NEQ = 11;
    }
    static {
      this.LE = 12;
    }
    static {
      this.PLUS = 13;
    }
    static {
      this.MINUS = 14;
    }
    static {
      this.MUL = 15;
    }
    static {
      this.DIV = 16;
    }
    static {
      this.COMMA = 17;
    }
    static {
      this.POINTER = 18;
    }
    static {
      this.COLON = 19;
    }
    static {
      this.ASSIGN = 20;
    }
    static {
      this.MEMBERSHIP = 21;
    }
    static {
      this.EVAL = 22;
    }
    static {
      this.IF = 23;
    }
    static {
      this.CASE = 24;
    }
    static {
      this.THEN = 25;
    }
    static {
      this.ELSE = 26;
    }
    static {
      this.USING = 27;
    }
    static {
      this.WITH = 28;
    }
    static {
      this.CURRENT_DATE = 29;
    }
    static {
      this.DATEDIFF = 30;
    }
    static {
      this.DATEADD = 31;
    }
    static {
      this.YEAR_OP = 32;
    }
    static {
      this.MONTH_OP = 33;
    }
    static {
      this.DAYOFMONTH = 34;
    }
    static {
      this.DAYOFYEAR = 35;
    }
    static {
      this.DAYTOYEAR = 36;
    }
    static {
      this.DAYTOMONTH = 37;
    }
    static {
      this.YEARTODAY = 38;
    }
    static {
      this.MONTHTODAY = 39;
    }
    static {
      this.ON = 40;
    }
    static {
      this.DROP = 41;
    }
    static {
      this.KEEP = 42;
    }
    static {
      this.CALC = 43;
    }
    static {
      this.ATTRCALC = 44;
    }
    static {
      this.RENAME = 45;
    }
    static {
      this.AS = 46;
    }
    static {
      this.AND = 47;
    }
    static {
      this.OR = 48;
    }
    static {
      this.XOR = 49;
    }
    static {
      this.NOT = 50;
    }
    static {
      this.BETWEEN = 51;
    }
    static {
      this.IN = 52;
    }
    static {
      this.NOT_IN = 53;
    }
    static {
      this.NULL_CONSTANT = 54;
    }
    static {
      this.ISNULL = 55;
    }
    static {
      this.EX = 56;
    }
    static {
      this.UNION = 57;
    }
    static {
      this.DIFF = 58;
    }
    static {
      this.SYMDIFF = 59;
    }
    static {
      this.INTERSECT = 60;
    }
    static {
      this.RANDOM = 61;
    }
    static {
      this.KEYS = 62;
    }
    static {
      this.INTYEAR = 63;
    }
    static {
      this.INTMONTH = 64;
    }
    static {
      this.INTDAY = 65;
    }
    static {
      this.CHECK = 66;
    }
    static {
      this.EXISTS_IN = 67;
    }
    static {
      this.TO = 68;
    }
    static {
      this.RETURN = 69;
    }
    static {
      this.IMBALANCE = 70;
    }
    static {
      this.ERRORCODE = 71;
    }
    static {
      this.ALL = 72;
    }
    static {
      this.AGGREGATE = 73;
    }
    static {
      this.ERRORLEVEL = 74;
    }
    static {
      this.ORDER = 75;
    }
    static {
      this.BY = 76;
    }
    static {
      this.RANK = 77;
    }
    static {
      this.ASC = 78;
    }
    static {
      this.DESC = 79;
    }
    static {
      this.MIN = 80;
    }
    static {
      this.MAX = 81;
    }
    static {
      this.FIRST = 82;
    }
    static {
      this.LAST = 83;
    }
    static {
      this.INDEXOF = 84;
    }
    static {
      this.ABS = 85;
    }
    static {
      this.KEY = 86;
    }
    static {
      this.LN = 87;
    }
    static {
      this.LOG = 88;
    }
    static {
      this.TRUNC = 89;
    }
    static {
      this.ROUND = 90;
    }
    static {
      this.POWER = 91;
    }
    static {
      this.MOD = 92;
    }
    static {
      this.LEN = 93;
    }
    static {
      this.CONCAT = 94;
    }
    static {
      this.TRIM = 95;
    }
    static {
      this.UCASE = 96;
    }
    static {
      this.LCASE = 97;
    }
    static {
      this.SUBSTR = 98;
    }
    static {
      this.SUM = 99;
    }
    static {
      this.AVG = 100;
    }
    static {
      this.MEDIAN = 101;
    }
    static {
      this.COUNT = 102;
    }
    static {
      this.DIMENSION = 103;
    }
    static {
      this.MEASURE = 104;
    }
    static {
      this.ATTRIBUTE = 105;
    }
    static {
      this.FILTER = 106;
    }
    static {
      this.MERGE = 107;
    }
    static {
      this.EXP = 108;
    }
    static {
      this.ROLE = 109;
    }
    static {
      this.VIRAL = 110;
    }
    static {
      this.CHARSET_MATCH = 111;
    }
    static {
      this.TYPE = 112;
    }
    static {
      this.NVL = 113;
    }
    static {
      this.HIERARCHY = 114;
    }
    static {
      this.OPTIONAL = 115;
    }
    static {
      this.INVALID = 116;
    }
    static {
      this.VALUE_DOMAIN = 117;
    }
    static {
      this.VARIABLE = 118;
    }
    static {
      this.DATA = 119;
    }
    static {
      this.STRUCTURE = 120;
    }
    static {
      this.DATASET = 121;
    }
    static {
      this.OPERATOR = 122;
    }
    static {
      this.DEFINE = 123;
    }
    static {
      this.PUT_SYMBOL = 124;
    }
    static {
      this.DATAPOINT = 125;
    }
    static {
      this.HIERARCHICAL = 126;
    }
    static {
      this.RULESET = 127;
    }
    static {
      this.RULE = 128;
    }
    static {
      this.END = 129;
    }
    static {
      this.ALTER_DATASET = 130;
    }
    static {
      this.LTRIM = 131;
    }
    static {
      this.RTRIM = 132;
    }
    static {
      this.INSTR = 133;
    }
    static {
      this.REPLACE = 134;
    }
    static {
      this.CEIL = 135;
    }
    static {
      this.FLOOR = 136;
    }
    static {
      this.SQRT = 137;
    }
    static {
      this.ANY = 138;
    }
    static {
      this.SETDIFF = 139;
    }
    static {
      this.STDDEV_POP = 140;
    }
    static {
      this.STDDEV_SAMP = 141;
    }
    static {
      this.VAR_POP = 142;
    }
    static {
      this.VAR_SAMP = 143;
    }
    static {
      this.GROUP = 144;
    }
    static {
      this.EXCEPT = 145;
    }
    static {
      this.HAVING = 146;
    }
    static {
      this.FIRST_VALUE = 147;
    }
    static {
      this.LAST_VALUE = 148;
    }
    static {
      this.LAG = 149;
    }
    static {
      this.LEAD = 150;
    }
    static {
      this.RATIO_TO_REPORT = 151;
    }
    static {
      this.OVER = 152;
    }
    static {
      this.PRECEDING = 153;
    }
    static {
      this.FOLLOWING = 154;
    }
    static {
      this.UNBOUNDED = 155;
    }
    static {
      this.PARTITION = 156;
    }
    static {
      this.ROWS = 157;
    }
    static {
      this.RANGE = 158;
    }
    static {
      this.CURRENT = 159;
    }
    static {
      this.VALID = 160;
    }
    static {
      this.FILL_TIME_SERIES = 161;
    }
    static {
      this.FLOW_TO_STOCK = 162;
    }
    static {
      this.STOCK_TO_FLOW = 163;
    }
    static {
      this.TIMESHIFT = 164;
    }
    static {
      this.MEASURES = 165;
    }
    static {
      this.NO_MEASURES = 166;
    }
    static {
      this.CONDITION = 167;
    }
    static {
      this.BOOLEAN = 168;
    }
    static {
      this.DATE = 169;
    }
    static {
      this.TIME_PERIOD = 170;
    }
    static {
      this.NUMBER = 171;
    }
    static {
      this.STRING = 172;
    }
    static {
      this.TIME = 173;
    }
    static {
      this.INTEGER = 174;
    }
    static {
      this.FLOAT = 175;
    }
    static {
      this.LIST = 176;
    }
    static {
      this.RECORD = 177;
    }
    static {
      this.RESTRICT = 178;
    }
    static {
      this.YYYY = 179;
    }
    static {
      this.MM = 180;
    }
    static {
      this.DD = 181;
    }
    static {
      this.MAX_LENGTH = 182;
    }
    static {
      this.REGEXP = 183;
    }
    static {
      this.IS = 184;
    }
    static {
      this.WHEN = 185;
    }
    static {
      this.FROM = 186;
    }
    static {
      this.AGGREGATES = 187;
    }
    static {
      this.POINTS = 188;
    }
    static {
      this.POINT = 189;
    }
    static {
      this.TOTAL = 190;
    }
    static {
      this.PARTIAL = 191;
    }
    static {
      this.ALWAYS = 192;
    }
    static {
      this.INNER_JOIN = 193;
    }
    static {
      this.LEFT_JOIN = 194;
    }
    static {
      this.CROSS_JOIN = 195;
    }
    static {
      this.FULL_JOIN = 196;
    }
    static {
      this.MAPS_FROM = 197;
    }
    static {
      this.MAPS_TO = 198;
    }
    static {
      this.MAP_TO = 199;
    }
    static {
      this.MAP_FROM = 200;
    }
    static {
      this.RETURNS = 201;
    }
    static {
      this.PIVOT = 202;
    }
    static {
      this.CUSTOMPIVOT = 203;
    }
    static {
      this.UNPIVOT = 204;
    }
    static {
      this.SUBSPACE = 205;
    }
    static {
      this.APPLY = 206;
    }
    static {
      this.CONDITIONED = 207;
    }
    static {
      this.PERIOD_INDICATOR = 208;
    }
    static {
      this.SINGLE = 209;
    }
    static {
      this.DURATION = 210;
    }
    static {
      this.TIME_AGG = 211;
    }
    static {
      this.UNIT = 212;
    }
    static {
      this.VALUE = 213;
    }
    static {
      this.VALUEDOMAINS = 214;
    }
    static {
      this.VARIABLES = 215;
    }
    static {
      this.INPUT = 216;
    }
    static {
      this.OUTPUT = 217;
    }
    static {
      this.CAST = 218;
    }
    static {
      this.RULE_PRIORITY = 219;
    }
    static {
      this.DATASET_PRIORITY = 220;
    }
    static {
      this.DEFAULT = 221;
    }
    static {
      this.CHECK_DATAPOINT = 222;
    }
    static {
      this.CHECK_HIERARCHY = 223;
    }
    static {
      this.COMPUTED = 224;
    }
    static {
      this.NON_NULL = 225;
    }
    static {
      this.NON_ZERO = 226;
    }
    static {
      this.PARTIAL_NULL = 227;
    }
    static {
      this.PARTIAL_ZERO = 228;
    }
    static {
      this.ALWAYS_NULL = 229;
    }
    static {
      this.ALWAYS_ZERO = 230;
    }
    static {
      this.COMPONENTS = 231;
    }
    static {
      this.ALL_MEASURES = 232;
    }
    static {
      this.SCALAR = 233;
    }
    static {
      this.COMPONENT = 234;
    }
    static {
      this.DATAPOINT_ON_VD = 235;
    }
    static {
      this.DATAPOINT_ON_VAR = 236;
    }
    static {
      this.HIERARCHICAL_ON_VD = 237;
    }
    static {
      this.HIERARCHICAL_ON_VAR = 238;
    }
    static {
      this.SET = 239;
    }
    static {
      this.LANGUAGE = 240;
    }
    static {
      this.INTEGER_CONSTANT = 241;
    }
    static {
      this.NUMBER_CONSTANT = 242;
    }
    static {
      this.BOOLEAN_CONSTANT = 243;
    }
    static {
      this.STRING_CONSTANT = 244;
    }
    static {
      this.IDENTIFIER = 245;
    }
    static {
      this.WS = 246;
    }
    static {
      this.EOL = 247;
    }
    static {
      this.ML_COMMENT = 248;
    }
    static {
      this.SL_COMMENT = 249;
    }
    static {
      this.EOF = kn.EOF;
    }
    static {
      this.channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
    }
    static {
      this.literalNames = [
        null,
        "'('",
        "')'",
        "'['",
        "']'",
        "'{'",
        "'}'",
        "'='",
        "'<'",
        "'>'",
        "'>='",
        "'<>'",
        "'<='",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "','",
        "'->'",
        "':'",
        "':='",
        "'#'",
        "'eval'",
        "'if'",
        "'case'",
        "'then'",
        "'else'",
        "'using'",
        "'with'",
        "'current_date'",
        "'datediff'",
        "'dateadd'",
        "'getyear'",
        "'getmonth'",
        "'dayofmonth'",
        "'dayofyear'",
        "'daytoyear'",
        "'daytomonth'",
        "'yeartoday'",
        "'monthtoday'",
        "'on'",
        "'drop'",
        "'keep'",
        "'calc'",
        "'attrcalc'",
        "'rename'",
        "'as'",
        "'and'",
        "'or'",
        "'xor'",
        "'not'",
        "'between'",
        "'in'",
        "'not_in'",
        "'null'",
        "'isnull'",
        "'ex'",
        "'union'",
        "'diff'",
        "'symdiff'",
        "'intersect'",
        "'random'",
        "'keys'",
        "'intyear'",
        "'intmonth'",
        "'intday'",
        "'check'",
        "'exists_in'",
        "'to'",
        "'return'",
        "'imbalance'",
        "'errorcode'",
        "'all'",
        "'aggr'",
        "'errorlevel'",
        "'order'",
        "'by'",
        "'rank'",
        "'asc'",
        "'desc'",
        "'min'",
        "'max'",
        "'first'",
        "'last'",
        "'indexof'",
        "'abs'",
        "'key'",
        "'ln'",
        "'log'",
        "'trunc'",
        "'round'",
        "'power'",
        "'mod'",
        "'length'",
        "'||'",
        "'trim'",
        "'upper'",
        "'lower'",
        "'substr'",
        "'sum'",
        "'avg'",
        "'median'",
        "'count'",
        "'identifier'",
        "'measure'",
        "'attribute'",
        "'filter'",
        "'merge'",
        "'exp'",
        "'componentRole'",
        "'viral'",
        "'match_characters'",
        "'type'",
        "'nvl'",
        "'hierarchy'",
        "'_'",
        "'invalid'",
        "'valuedomain'",
        "'variable'",
        "'data'",
        "'structure'",
        "'dataset'",
        "'operator'",
        "'define'",
        "'<-'",
        "'datapoint'",
        "'hierarchical'",
        "'ruleset'",
        "'rule'",
        "'end'",
        "'alterDataset'",
        "'ltrim'",
        "'rtrim'",
        "'instr'",
        "'replace'",
        "'ceil'",
        "'floor'",
        "'sqrt'",
        "'any'",
        "'setdiff'",
        "'stddev_pop'",
        "'stddev_samp'",
        "'var_pop'",
        "'var_samp'",
        "'group'",
        "'except'",
        "'having'",
        "'first_value'",
        "'last_value'",
        "'lag'",
        "'lead'",
        "'ratio_to_report'",
        "'over'",
        "'preceding'",
        "'following'",
        "'unbounded'",
        "'partition'",
        "'rows'",
        "'range'",
        "'current'",
        "'valid'",
        "'fill_time_series'",
        "'flow_to_stock'",
        "'stock_to_flow'",
        "'timeshift'",
        "'measures'",
        "'no_measures'",
        "'condition'",
        "'boolean'",
        "'date'",
        "'time_period'",
        "'number'",
        "'string'",
        "'time'",
        "'integer'",
        "'float'",
        "'list'",
        "'record'",
        "'restrict'",
        "'yyyy'",
        "'mm'",
        "'dd'",
        "'maxLength'",
        "'regexp'",
        "'is'",
        "'when'",
        "'from'",
        "'aggregates'",
        "'points'",
        "'point'",
        "'total'",
        "'partial'",
        "'always'",
        "'inner_join'",
        "'left_join'",
        "'cross_join'",
        "'full_join'",
        "'maps_from'",
        "'maps_to'",
        "'map_to'",
        "'map_from'",
        "'returns'",
        "'pivot'",
        "'customPivot'",
        "'unpivot'",
        "'sub'",
        "'apply'",
        "'conditioned'",
        "'period_indicator'",
        "'single'",
        "'duration'",
        "'time_agg'",
        "'unit'",
        "'Value'",
        "'valuedomains'",
        "'variables'",
        "'input'",
        "'output'",
        "'cast'",
        "'rule_priority'",
        "'dataset_priority'",
        "'default'",
        "'check_datapoint'",
        "'check_hierarchy'",
        "'computed'",
        "'non_null'",
        "'non_zero'",
        "'partial_null'",
        "'partial_zero'",
        "'always_null'",
        "'always_zero'",
        "'components'",
        "'all_measures'",
        "'scalar'",
        "'component'",
        "'datapoint_on_valuedomains'",
        "'datapoint_on_variables'",
        "'hierarchical_on_valuedomains'",
        "'hierarchical_on_variables'",
        "'set'",
        "'language'",
        null,
        null,
        null,
        null,
        null,
        null,
        "';'"
      ];
    }
    static {
      this.symbolicNames = [
        null,
        "LPAREN",
        "RPAREN",
        "QLPAREN",
        "QRPAREN",
        "GLPAREN",
        "GRPAREN",
        "EQ",
        "LT",
        "MT",
        "ME",
        "NEQ",
        "LE",
        "PLUS",
        "MINUS",
        "MUL",
        "DIV",
        "COMMA",
        "POINTER",
        "COLON",
        "ASSIGN",
        "MEMBERSHIP",
        "EVAL",
        "IF",
        "CASE",
        "THEN",
        "ELSE",
        "USING",
        "WITH",
        "CURRENT_DATE",
        "DATEDIFF",
        "DATEADD",
        "YEAR_OP",
        "MONTH_OP",
        "DAYOFMONTH",
        "DAYOFYEAR",
        "DAYTOYEAR",
        "DAYTOMONTH",
        "YEARTODAY",
        "MONTHTODAY",
        "ON",
        "DROP",
        "KEEP",
        "CALC",
        "ATTRCALC",
        "RENAME",
        "AS",
        "AND",
        "OR",
        "XOR",
        "NOT",
        "BETWEEN",
        "IN",
        "NOT_IN",
        "NULL_CONSTANT",
        "ISNULL",
        "EX",
        "UNION",
        "DIFF",
        "SYMDIFF",
        "INTERSECT",
        "RANDOM",
        "KEYS",
        "INTYEAR",
        "INTMONTH",
        "INTDAY",
        "CHECK",
        "EXISTS_IN",
        "TO",
        "RETURN",
        "IMBALANCE",
        "ERRORCODE",
        "ALL",
        "AGGREGATE",
        "ERRORLEVEL",
        "ORDER",
        "BY",
        "RANK",
        "ASC",
        "DESC",
        "MIN",
        "MAX",
        "FIRST",
        "LAST",
        "INDEXOF",
        "ABS",
        "KEY",
        "LN",
        "LOG",
        "TRUNC",
        "ROUND",
        "POWER",
        "MOD",
        "LEN",
        "CONCAT",
        "TRIM",
        "UCASE",
        "LCASE",
        "SUBSTR",
        "SUM",
        "AVG",
        "MEDIAN",
        "COUNT",
        "DIMENSION",
        "MEASURE",
        "ATTRIBUTE",
        "FILTER",
        "MERGE",
        "EXP",
        "ROLE",
        "VIRAL",
        "CHARSET_MATCH",
        "TYPE",
        "NVL",
        "HIERARCHY",
        "OPTIONAL",
        "INVALID",
        "VALUE_DOMAIN",
        "VARIABLE",
        "DATA",
        "STRUCTURE",
        "DATASET",
        "OPERATOR",
        "DEFINE",
        "PUT_SYMBOL",
        "DATAPOINT",
        "HIERARCHICAL",
        "RULESET",
        "RULE",
        "END",
        "ALTER_DATASET",
        "LTRIM",
        "RTRIM",
        "INSTR",
        "REPLACE",
        "CEIL",
        "FLOOR",
        "SQRT",
        "ANY",
        "SETDIFF",
        "STDDEV_POP",
        "STDDEV_SAMP",
        "VAR_POP",
        "VAR_SAMP",
        "GROUP",
        "EXCEPT",
        "HAVING",
        "FIRST_VALUE",
        "LAST_VALUE",
        "LAG",
        "LEAD",
        "RATIO_TO_REPORT",
        "OVER",
        "PRECEDING",
        "FOLLOWING",
        "UNBOUNDED",
        "PARTITION",
        "ROWS",
        "RANGE",
        "CURRENT",
        "VALID",
        "FILL_TIME_SERIES",
        "FLOW_TO_STOCK",
        "STOCK_TO_FLOW",
        "TIMESHIFT",
        "MEASURES",
        "NO_MEASURES",
        "CONDITION",
        "BOOLEAN",
        "DATE",
        "TIME_PERIOD",
        "NUMBER",
        "STRING",
        "TIME",
        "INTEGER",
        "FLOAT",
        "LIST",
        "RECORD",
        "RESTRICT",
        "YYYY",
        "MM",
        "DD",
        "MAX_LENGTH",
        "REGEXP",
        "IS",
        "WHEN",
        "FROM",
        "AGGREGATES",
        "POINTS",
        "POINT",
        "TOTAL",
        "PARTIAL",
        "ALWAYS",
        "INNER_JOIN",
        "LEFT_JOIN",
        "CROSS_JOIN",
        "FULL_JOIN",
        "MAPS_FROM",
        "MAPS_TO",
        "MAP_TO",
        "MAP_FROM",
        "RETURNS",
        "PIVOT",
        "CUSTOMPIVOT",
        "UNPIVOT",
        "SUBSPACE",
        "APPLY",
        "CONDITIONED",
        "PERIOD_INDICATOR",
        "SINGLE",
        "DURATION",
        "TIME_AGG",
        "UNIT",
        "VALUE",
        "VALUEDOMAINS",
        "VARIABLES",
        "INPUT",
        "OUTPUT",
        "CAST",
        "RULE_PRIORITY",
        "DATASET_PRIORITY",
        "DEFAULT",
        "CHECK_DATAPOINT",
        "CHECK_HIERARCHY",
        "COMPUTED",
        "NON_NULL",
        "NON_ZERO",
        "PARTIAL_NULL",
        "PARTIAL_ZERO",
        "ALWAYS_NULL",
        "ALWAYS_ZERO",
        "COMPONENTS",
        "ALL_MEASURES",
        "SCALAR",
        "COMPONENT",
        "DATAPOINT_ON_VD",
        "DATAPOINT_ON_VAR",
        "HIERARCHICAL_ON_VD",
        "HIERARCHICAL_ON_VAR",
        "SET",
        "LANGUAGE",
        "INTEGER_CONSTANT",
        "NUMBER_CONSTANT",
        "BOOLEAN_CONSTANT",
        "STRING_CONSTANT",
        "IDENTIFIER",
        "WS",
        "EOL",
        "ML_COMMENT",
        "SL_COMMENT"
      ];
    }
    static {
      this.modeNames = ["DEFAULT_MODE"];
    }
    static {
      this.ruleNames = [
        "LPAREN",
        "RPAREN",
        "QLPAREN",
        "QRPAREN",
        "GLPAREN",
        "GRPAREN",
        "EQ",
        "LT",
        "MT",
        "ME",
        "NEQ",
        "LE",
        "PLUS",
        "MINUS",
        "MUL",
        "DIV",
        "COMMA",
        "POINTER",
        "COLON",
        "ASSIGN",
        "MEMBERSHIP",
        "EVAL",
        "IF",
        "CASE",
        "THEN",
        "ELSE",
        "USING",
        "WITH",
        "CURRENT_DATE",
        "DATEDIFF",
        "DATEADD",
        "YEAR_OP",
        "MONTH_OP",
        "DAYOFMONTH",
        "DAYOFYEAR",
        "DAYTOYEAR",
        "DAYTOMONTH",
        "YEARTODAY",
        "MONTHTODAY",
        "ON",
        "DROP",
        "KEEP",
        "CALC",
        "ATTRCALC",
        "RENAME",
        "AS",
        "AND",
        "OR",
        "XOR",
        "NOT",
        "BETWEEN",
        "IN",
        "NOT_IN",
        "NULL_CONSTANT",
        "ISNULL",
        "EX",
        "UNION",
        "DIFF",
        "SYMDIFF",
        "INTERSECT",
        "RANDOM",
        "KEYS",
        "INTYEAR",
        "INTMONTH",
        "INTDAY",
        "CHECK",
        "EXISTS_IN",
        "TO",
        "RETURN",
        "IMBALANCE",
        "ERRORCODE",
        "ALL",
        "AGGREGATE",
        "ERRORLEVEL",
        "ORDER",
        "BY",
        "RANK",
        "ASC",
        "DESC",
        "MIN",
        "MAX",
        "FIRST",
        "LAST",
        "INDEXOF",
        "ABS",
        "KEY",
        "LN",
        "LOG",
        "TRUNC",
        "ROUND",
        "POWER",
        "MOD",
        "LEN",
        "CONCAT",
        "TRIM",
        "UCASE",
        "LCASE",
        "SUBSTR",
        "SUM",
        "AVG",
        "MEDIAN",
        "COUNT",
        "DIMENSION",
        "MEASURE",
        "ATTRIBUTE",
        "FILTER",
        "MERGE",
        "EXP",
        "ROLE",
        "VIRAL",
        "CHARSET_MATCH",
        "TYPE",
        "NVL",
        "HIERARCHY",
        "OPTIONAL",
        "INVALID",
        "VALUE_DOMAIN",
        "VARIABLE",
        "DATA",
        "STRUCTURE",
        "DATASET",
        "OPERATOR",
        "DEFINE",
        "PUT_SYMBOL",
        "DATAPOINT",
        "HIERARCHICAL",
        "RULESET",
        "RULE",
        "END",
        "ALTER_DATASET",
        "LTRIM",
        "RTRIM",
        "INSTR",
        "REPLACE",
        "CEIL",
        "FLOOR",
        "SQRT",
        "ANY",
        "SETDIFF",
        "STDDEV_POP",
        "STDDEV_SAMP",
        "VAR_POP",
        "VAR_SAMP",
        "GROUP",
        "EXCEPT",
        "HAVING",
        "FIRST_VALUE",
        "LAST_VALUE",
        "LAG",
        "LEAD",
        "RATIO_TO_REPORT",
        "OVER",
        "PRECEDING",
        "FOLLOWING",
        "UNBOUNDED",
        "PARTITION",
        "ROWS",
        "RANGE",
        "CURRENT",
        "VALID",
        "FILL_TIME_SERIES",
        "FLOW_TO_STOCK",
        "STOCK_TO_FLOW",
        "TIMESHIFT",
        "MEASURES",
        "NO_MEASURES",
        "CONDITION",
        "BOOLEAN",
        "DATE",
        "TIME_PERIOD",
        "NUMBER",
        "STRING",
        "TIME",
        "INTEGER",
        "FLOAT",
        "LIST",
        "RECORD",
        "RESTRICT",
        "YYYY",
        "MM",
        "DD",
        "MAX_LENGTH",
        "REGEXP",
        "IS",
        "WHEN",
        "FROM",
        "AGGREGATES",
        "POINTS",
        "POINT",
        "TOTAL",
        "PARTIAL",
        "ALWAYS",
        "INNER_JOIN",
        "LEFT_JOIN",
        "CROSS_JOIN",
        "FULL_JOIN",
        "MAPS_FROM",
        "MAPS_TO",
        "MAP_TO",
        "MAP_FROM",
        "RETURNS",
        "PIVOT",
        "CUSTOMPIVOT",
        "UNPIVOT",
        "SUBSPACE",
        "APPLY",
        "CONDITIONED",
        "PERIOD_INDICATOR",
        "SINGLE",
        "DURATION",
        "TIME_AGG",
        "UNIT",
        "VALUE",
        "VALUEDOMAINS",
        "VARIABLES",
        "INPUT",
        "OUTPUT",
        "CAST",
        "RULE_PRIORITY",
        "DATASET_PRIORITY",
        "DEFAULT",
        "CHECK_DATAPOINT",
        "CHECK_HIERARCHY",
        "COMPUTED",
        "NON_NULL",
        "NON_ZERO",
        "PARTIAL_NULL",
        "PARTIAL_ZERO",
        "ALWAYS_NULL",
        "ALWAYS_ZERO",
        "COMPONENTS",
        "ALL_MEASURES",
        "SCALAR",
        "COMPONENT",
        "DATAPOINT_ON_VD",
        "DATAPOINT_ON_VAR",
        "HIERARCHICAL_ON_VD",
        "HIERARCHICAL_ON_VAR",
        "SET",
        "LANGUAGE",
        "LETTER",
        "DIGITS0_9",
        "INTEGER_CONSTANT",
        "NUMBER_CONSTANT",
        "BOOLEAN_CONSTANT",
        "STRING_CONSTANT",
        "IDENTIFIER",
        "WS",
        "EOL",
        "ML_COMMENT",
        "SL_COMMENT"
      ];
    }
    constructor(input) {
      super(input);
      this._interp = new un(this, _VtlLexer._ATN, _VtlLexer.DecisionsToDFA, new mn());
    }
    get grammarFileName() {
      return "VtlLexer.g4";
    }
    get literalNames() {
      return _VtlLexer.literalNames;
    }
    get symbolicNames() {
      return _VtlLexer.symbolicNames;
    }
    get ruleNames() {
      return _VtlLexer.ruleNames;
    }
    get serializedATN() {
      return _VtlLexer._serializedATN;
    }
    get channelNames() {
      return _VtlLexer.channelNames;
    }
    get modeNames() {
      return _VtlLexer.modeNames;
    }
    static {
      this._serializedATN = [
        4,
        0,
        249,
        2385,
        6,
        -1,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        2,
        140,
        7,
        140,
        2,
        141,
        7,
        141,
        2,
        142,
        7,
        142,
        2,
        143,
        7,
        143,
        2,
        144,
        7,
        144,
        2,
        145,
        7,
        145,
        2,
        146,
        7,
        146,
        2,
        147,
        7,
        147,
        2,
        148,
        7,
        148,
        2,
        149,
        7,
        149,
        2,
        150,
        7,
        150,
        2,
        151,
        7,
        151,
        2,
        152,
        7,
        152,
        2,
        153,
        7,
        153,
        2,
        154,
        7,
        154,
        2,
        155,
        7,
        155,
        2,
        156,
        7,
        156,
        2,
        157,
        7,
        157,
        2,
        158,
        7,
        158,
        2,
        159,
        7,
        159,
        2,
        160,
        7,
        160,
        2,
        161,
        7,
        161,
        2,
        162,
        7,
        162,
        2,
        163,
        7,
        163,
        2,
        164,
        7,
        164,
        2,
        165,
        7,
        165,
        2,
        166,
        7,
        166,
        2,
        167,
        7,
        167,
        2,
        168,
        7,
        168,
        2,
        169,
        7,
        169,
        2,
        170,
        7,
        170,
        2,
        171,
        7,
        171,
        2,
        172,
        7,
        172,
        2,
        173,
        7,
        173,
        2,
        174,
        7,
        174,
        2,
        175,
        7,
        175,
        2,
        176,
        7,
        176,
        2,
        177,
        7,
        177,
        2,
        178,
        7,
        178,
        2,
        179,
        7,
        179,
        2,
        180,
        7,
        180,
        2,
        181,
        7,
        181,
        2,
        182,
        7,
        182,
        2,
        183,
        7,
        183,
        2,
        184,
        7,
        184,
        2,
        185,
        7,
        185,
        2,
        186,
        7,
        186,
        2,
        187,
        7,
        187,
        2,
        188,
        7,
        188,
        2,
        189,
        7,
        189,
        2,
        190,
        7,
        190,
        2,
        191,
        7,
        191,
        2,
        192,
        7,
        192,
        2,
        193,
        7,
        193,
        2,
        194,
        7,
        194,
        2,
        195,
        7,
        195,
        2,
        196,
        7,
        196,
        2,
        197,
        7,
        197,
        2,
        198,
        7,
        198,
        2,
        199,
        7,
        199,
        2,
        200,
        7,
        200,
        2,
        201,
        7,
        201,
        2,
        202,
        7,
        202,
        2,
        203,
        7,
        203,
        2,
        204,
        7,
        204,
        2,
        205,
        7,
        205,
        2,
        206,
        7,
        206,
        2,
        207,
        7,
        207,
        2,
        208,
        7,
        208,
        2,
        209,
        7,
        209,
        2,
        210,
        7,
        210,
        2,
        211,
        7,
        211,
        2,
        212,
        7,
        212,
        2,
        213,
        7,
        213,
        2,
        214,
        7,
        214,
        2,
        215,
        7,
        215,
        2,
        216,
        7,
        216,
        2,
        217,
        7,
        217,
        2,
        218,
        7,
        218,
        2,
        219,
        7,
        219,
        2,
        220,
        7,
        220,
        2,
        221,
        7,
        221,
        2,
        222,
        7,
        222,
        2,
        223,
        7,
        223,
        2,
        224,
        7,
        224,
        2,
        225,
        7,
        225,
        2,
        226,
        7,
        226,
        2,
        227,
        7,
        227,
        2,
        228,
        7,
        228,
        2,
        229,
        7,
        229,
        2,
        230,
        7,
        230,
        2,
        231,
        7,
        231,
        2,
        232,
        7,
        232,
        2,
        233,
        7,
        233,
        2,
        234,
        7,
        234,
        2,
        235,
        7,
        235,
        2,
        236,
        7,
        236,
        2,
        237,
        7,
        237,
        2,
        238,
        7,
        238,
        2,
        239,
        7,
        239,
        2,
        240,
        7,
        240,
        2,
        241,
        7,
        241,
        2,
        242,
        7,
        242,
        2,
        243,
        7,
        243,
        2,
        244,
        7,
        244,
        2,
        245,
        7,
        245,
        2,
        246,
        7,
        246,
        2,
        247,
        7,
        247,
        2,
        248,
        7,
        248,
        2,
        249,
        7,
        249,
        2,
        250,
        7,
        250,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        78,
        1,
        78,
        1,
        78,
        1,
        78,
        1,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        83,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        88,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        93,
        1,
        93,
        1,
        93,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        96,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        114,
        1,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        119,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        123,
        1,
        123,
        1,
        123,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        128,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        129,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        130,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        133,
        1,
        134,
        1,
        134,
        1,
        134,
        1,
        134,
        1,
        134,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        138,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        139,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        141,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        142,
        1,
        143,
        1,
        143,
        1,
        143,
        1,
        143,
        1,
        143,
        1,
        143,
        1,
        144,
        1,
        144,
        1,
        144,
        1,
        144,
        1,
        144,
        1,
        144,
        1,
        144,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        149,
        1,
        149,
        1,
        149,
        1,
        149,
        1,
        149,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        150,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        151,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        152,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        155,
        1,
        156,
        1,
        156,
        1,
        156,
        1,
        156,
        1,
        156,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        157,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        158,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        162,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        163,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        165,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        166,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        167,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        168,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        169,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        170,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        172,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        173,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        174,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        175,
        1,
        176,
        1,
        176,
        1,
        176,
        1,
        176,
        1,
        176,
        1,
        176,
        1,
        176,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        177,
        1,
        178,
        1,
        178,
        1,
        178,
        1,
        178,
        1,
        178,
        1,
        179,
        1,
        179,
        1,
        179,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        181,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        182,
        1,
        183,
        1,
        183,
        1,
        183,
        1,
        184,
        1,
        184,
        1,
        184,
        1,
        184,
        1,
        184,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        185,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        187,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        189,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        190,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        192,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        193,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        195,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        196,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        199,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        201,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        205,
        1,
        205,
        1,
        205,
        1,
        205,
        1,
        205,
        1,
        205,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        210,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        211,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        215,
        1,
        215,
        1,
        215,
        1,
        215,
        1,
        215,
        1,
        215,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        216,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        219,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        220,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        221,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        230,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        235,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        238,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        240,
        1,
        240,
        1,
        241,
        1,
        241,
        1,
        242,
        4,
        242,
        2301,
        8,
        242,
        11,
        242,
        12,
        242,
        2302,
        1,
        243,
        1,
        243,
        1,
        243,
        1,
        243,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        3,
        244,
        2318,
        8,
        244,
        1,
        245,
        1,
        245,
        5,
        245,
        2322,
        8,
        245,
        10,
        245,
        12,
        245,
        2325,
        9,
        245,
        1,
        245,
        1,
        245,
        1,
        246,
        1,
        246,
        5,
        246,
        2331,
        8,
        246,
        10,
        246,
        12,
        246,
        2334,
        9,
        246,
        1,
        246,
        1,
        246,
        4,
        246,
        2338,
        8,
        246,
        11,
        246,
        12,
        246,
        2339,
        1,
        246,
        1,
        246,
        5,
        246,
        2344,
        8,
        246,
        10,
        246,
        12,
        246,
        2347,
        9,
        246,
        1,
        246,
        3,
        246,
        2350,
        8,
        246,
        1,
        247,
        4,
        247,
        2353,
        8,
        247,
        11,
        247,
        12,
        247,
        2354,
        1,
        247,
        1,
        247,
        1,
        248,
        1,
        248,
        1,
        249,
        1,
        249,
        1,
        249,
        1,
        249,
        5,
        249,
        2365,
        8,
        249,
        10,
        249,
        12,
        249,
        2368,
        9,
        249,
        1,
        249,
        1,
        249,
        1,
        249,
        1,
        249,
        1,
        249,
        1,
        250,
        1,
        250,
        1,
        250,
        1,
        250,
        5,
        250,
        2379,
        8,
        250,
        10,
        250,
        12,
        250,
        2382,
        9,
        250,
        1,
        250,
        1,
        250,
        2,
        2345,
        2366,
        0,
        251,
        1,
        1,
        3,
        2,
        5,
        3,
        7,
        4,
        9,
        5,
        11,
        6,
        13,
        7,
        15,
        8,
        17,
        9,
        19,
        10,
        21,
        11,
        23,
        12,
        25,
        13,
        27,
        14,
        29,
        15,
        31,
        16,
        33,
        17,
        35,
        18,
        37,
        19,
        39,
        20,
        41,
        21,
        43,
        22,
        45,
        23,
        47,
        24,
        49,
        25,
        51,
        26,
        53,
        27,
        55,
        28,
        57,
        29,
        59,
        30,
        61,
        31,
        63,
        32,
        65,
        33,
        67,
        34,
        69,
        35,
        71,
        36,
        73,
        37,
        75,
        38,
        77,
        39,
        79,
        40,
        81,
        41,
        83,
        42,
        85,
        43,
        87,
        44,
        89,
        45,
        91,
        46,
        93,
        47,
        95,
        48,
        97,
        49,
        99,
        50,
        101,
        51,
        103,
        52,
        105,
        53,
        107,
        54,
        109,
        55,
        111,
        56,
        113,
        57,
        115,
        58,
        117,
        59,
        119,
        60,
        121,
        61,
        123,
        62,
        125,
        63,
        127,
        64,
        129,
        65,
        131,
        66,
        133,
        67,
        135,
        68,
        137,
        69,
        139,
        70,
        141,
        71,
        143,
        72,
        145,
        73,
        147,
        74,
        149,
        75,
        151,
        76,
        153,
        77,
        155,
        78,
        157,
        79,
        159,
        80,
        161,
        81,
        163,
        82,
        165,
        83,
        167,
        84,
        169,
        85,
        171,
        86,
        173,
        87,
        175,
        88,
        177,
        89,
        179,
        90,
        181,
        91,
        183,
        92,
        185,
        93,
        187,
        94,
        189,
        95,
        191,
        96,
        193,
        97,
        195,
        98,
        197,
        99,
        199,
        100,
        201,
        101,
        203,
        102,
        205,
        103,
        207,
        104,
        209,
        105,
        211,
        106,
        213,
        107,
        215,
        108,
        217,
        109,
        219,
        110,
        221,
        111,
        223,
        112,
        225,
        113,
        227,
        114,
        229,
        115,
        231,
        116,
        233,
        117,
        235,
        118,
        237,
        119,
        239,
        120,
        241,
        121,
        243,
        122,
        245,
        123,
        247,
        124,
        249,
        125,
        251,
        126,
        253,
        127,
        255,
        128,
        257,
        129,
        259,
        130,
        261,
        131,
        263,
        132,
        265,
        133,
        267,
        134,
        269,
        135,
        271,
        136,
        273,
        137,
        275,
        138,
        277,
        139,
        279,
        140,
        281,
        141,
        283,
        142,
        285,
        143,
        287,
        144,
        289,
        145,
        291,
        146,
        293,
        147,
        295,
        148,
        297,
        149,
        299,
        150,
        301,
        151,
        303,
        152,
        305,
        153,
        307,
        154,
        309,
        155,
        311,
        156,
        313,
        157,
        315,
        158,
        317,
        159,
        319,
        160,
        321,
        161,
        323,
        162,
        325,
        163,
        327,
        164,
        329,
        165,
        331,
        166,
        333,
        167,
        335,
        168,
        337,
        169,
        339,
        170,
        341,
        171,
        343,
        172,
        345,
        173,
        347,
        174,
        349,
        175,
        351,
        176,
        353,
        177,
        355,
        178,
        357,
        179,
        359,
        180,
        361,
        181,
        363,
        182,
        365,
        183,
        367,
        184,
        369,
        185,
        371,
        186,
        373,
        187,
        375,
        188,
        377,
        189,
        379,
        190,
        381,
        191,
        383,
        192,
        385,
        193,
        387,
        194,
        389,
        195,
        391,
        196,
        393,
        197,
        395,
        198,
        397,
        199,
        399,
        200,
        401,
        201,
        403,
        202,
        405,
        203,
        407,
        204,
        409,
        205,
        411,
        206,
        413,
        207,
        415,
        208,
        417,
        209,
        419,
        210,
        421,
        211,
        423,
        212,
        425,
        213,
        427,
        214,
        429,
        215,
        431,
        216,
        433,
        217,
        435,
        218,
        437,
        219,
        439,
        220,
        441,
        221,
        443,
        222,
        445,
        223,
        447,
        224,
        449,
        225,
        451,
        226,
        453,
        227,
        455,
        228,
        457,
        229,
        459,
        230,
        461,
        231,
        463,
        232,
        465,
        233,
        467,
        234,
        469,
        235,
        471,
        236,
        473,
        237,
        475,
        238,
        477,
        239,
        479,
        240,
        481,
        0,
        483,
        0,
        485,
        241,
        487,
        242,
        489,
        243,
        491,
        244,
        493,
        245,
        495,
        246,
        497,
        247,
        499,
        248,
        501,
        249,
        1,
        0,
        5,
        2,
        0,
        65,
        90,
        97,
        122,
        1,
        0,
        34,
        34,
        5,
        0,
        46,
        46,
        48,
        57,
        65,
        90,
        95,
        95,
        97,
        122,
        3,
        0,
        9,
        10,
        12,
        13,
        32,
        32,
        2,
        0,
        10,
        10,
        13,
        13,
        2393,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        3,
        1,
        0,
        0,
        0,
        0,
        5,
        1,
        0,
        0,
        0,
        0,
        7,
        1,
        0,
        0,
        0,
        0,
        9,
        1,
        0,
        0,
        0,
        0,
        11,
        1,
        0,
        0,
        0,
        0,
        13,
        1,
        0,
        0,
        0,
        0,
        15,
        1,
        0,
        0,
        0,
        0,
        17,
        1,
        0,
        0,
        0,
        0,
        19,
        1,
        0,
        0,
        0,
        0,
        21,
        1,
        0,
        0,
        0,
        0,
        23,
        1,
        0,
        0,
        0,
        0,
        25,
        1,
        0,
        0,
        0,
        0,
        27,
        1,
        0,
        0,
        0,
        0,
        29,
        1,
        0,
        0,
        0,
        0,
        31,
        1,
        0,
        0,
        0,
        0,
        33,
        1,
        0,
        0,
        0,
        0,
        35,
        1,
        0,
        0,
        0,
        0,
        37,
        1,
        0,
        0,
        0,
        0,
        39,
        1,
        0,
        0,
        0,
        0,
        41,
        1,
        0,
        0,
        0,
        0,
        43,
        1,
        0,
        0,
        0,
        0,
        45,
        1,
        0,
        0,
        0,
        0,
        47,
        1,
        0,
        0,
        0,
        0,
        49,
        1,
        0,
        0,
        0,
        0,
        51,
        1,
        0,
        0,
        0,
        0,
        53,
        1,
        0,
        0,
        0,
        0,
        55,
        1,
        0,
        0,
        0,
        0,
        57,
        1,
        0,
        0,
        0,
        0,
        59,
        1,
        0,
        0,
        0,
        0,
        61,
        1,
        0,
        0,
        0,
        0,
        63,
        1,
        0,
        0,
        0,
        0,
        65,
        1,
        0,
        0,
        0,
        0,
        67,
        1,
        0,
        0,
        0,
        0,
        69,
        1,
        0,
        0,
        0,
        0,
        71,
        1,
        0,
        0,
        0,
        0,
        73,
        1,
        0,
        0,
        0,
        0,
        75,
        1,
        0,
        0,
        0,
        0,
        77,
        1,
        0,
        0,
        0,
        0,
        79,
        1,
        0,
        0,
        0,
        0,
        81,
        1,
        0,
        0,
        0,
        0,
        83,
        1,
        0,
        0,
        0,
        0,
        85,
        1,
        0,
        0,
        0,
        0,
        87,
        1,
        0,
        0,
        0,
        0,
        89,
        1,
        0,
        0,
        0,
        0,
        91,
        1,
        0,
        0,
        0,
        0,
        93,
        1,
        0,
        0,
        0,
        0,
        95,
        1,
        0,
        0,
        0,
        0,
        97,
        1,
        0,
        0,
        0,
        0,
        99,
        1,
        0,
        0,
        0,
        0,
        101,
        1,
        0,
        0,
        0,
        0,
        103,
        1,
        0,
        0,
        0,
        0,
        105,
        1,
        0,
        0,
        0,
        0,
        107,
        1,
        0,
        0,
        0,
        0,
        109,
        1,
        0,
        0,
        0,
        0,
        111,
        1,
        0,
        0,
        0,
        0,
        113,
        1,
        0,
        0,
        0,
        0,
        115,
        1,
        0,
        0,
        0,
        0,
        117,
        1,
        0,
        0,
        0,
        0,
        119,
        1,
        0,
        0,
        0,
        0,
        121,
        1,
        0,
        0,
        0,
        0,
        123,
        1,
        0,
        0,
        0,
        0,
        125,
        1,
        0,
        0,
        0,
        0,
        127,
        1,
        0,
        0,
        0,
        0,
        129,
        1,
        0,
        0,
        0,
        0,
        131,
        1,
        0,
        0,
        0,
        0,
        133,
        1,
        0,
        0,
        0,
        0,
        135,
        1,
        0,
        0,
        0,
        0,
        137,
        1,
        0,
        0,
        0,
        0,
        139,
        1,
        0,
        0,
        0,
        0,
        141,
        1,
        0,
        0,
        0,
        0,
        143,
        1,
        0,
        0,
        0,
        0,
        145,
        1,
        0,
        0,
        0,
        0,
        147,
        1,
        0,
        0,
        0,
        0,
        149,
        1,
        0,
        0,
        0,
        0,
        151,
        1,
        0,
        0,
        0,
        0,
        153,
        1,
        0,
        0,
        0,
        0,
        155,
        1,
        0,
        0,
        0,
        0,
        157,
        1,
        0,
        0,
        0,
        0,
        159,
        1,
        0,
        0,
        0,
        0,
        161,
        1,
        0,
        0,
        0,
        0,
        163,
        1,
        0,
        0,
        0,
        0,
        165,
        1,
        0,
        0,
        0,
        0,
        167,
        1,
        0,
        0,
        0,
        0,
        169,
        1,
        0,
        0,
        0,
        0,
        171,
        1,
        0,
        0,
        0,
        0,
        173,
        1,
        0,
        0,
        0,
        0,
        175,
        1,
        0,
        0,
        0,
        0,
        177,
        1,
        0,
        0,
        0,
        0,
        179,
        1,
        0,
        0,
        0,
        0,
        181,
        1,
        0,
        0,
        0,
        0,
        183,
        1,
        0,
        0,
        0,
        0,
        185,
        1,
        0,
        0,
        0,
        0,
        187,
        1,
        0,
        0,
        0,
        0,
        189,
        1,
        0,
        0,
        0,
        0,
        191,
        1,
        0,
        0,
        0,
        0,
        193,
        1,
        0,
        0,
        0,
        0,
        195,
        1,
        0,
        0,
        0,
        0,
        197,
        1,
        0,
        0,
        0,
        0,
        199,
        1,
        0,
        0,
        0,
        0,
        201,
        1,
        0,
        0,
        0,
        0,
        203,
        1,
        0,
        0,
        0,
        0,
        205,
        1,
        0,
        0,
        0,
        0,
        207,
        1,
        0,
        0,
        0,
        0,
        209,
        1,
        0,
        0,
        0,
        0,
        211,
        1,
        0,
        0,
        0,
        0,
        213,
        1,
        0,
        0,
        0,
        0,
        215,
        1,
        0,
        0,
        0,
        0,
        217,
        1,
        0,
        0,
        0,
        0,
        219,
        1,
        0,
        0,
        0,
        0,
        221,
        1,
        0,
        0,
        0,
        0,
        223,
        1,
        0,
        0,
        0,
        0,
        225,
        1,
        0,
        0,
        0,
        0,
        227,
        1,
        0,
        0,
        0,
        0,
        229,
        1,
        0,
        0,
        0,
        0,
        231,
        1,
        0,
        0,
        0,
        0,
        233,
        1,
        0,
        0,
        0,
        0,
        235,
        1,
        0,
        0,
        0,
        0,
        237,
        1,
        0,
        0,
        0,
        0,
        239,
        1,
        0,
        0,
        0,
        0,
        241,
        1,
        0,
        0,
        0,
        0,
        243,
        1,
        0,
        0,
        0,
        0,
        245,
        1,
        0,
        0,
        0,
        0,
        247,
        1,
        0,
        0,
        0,
        0,
        249,
        1,
        0,
        0,
        0,
        0,
        251,
        1,
        0,
        0,
        0,
        0,
        253,
        1,
        0,
        0,
        0,
        0,
        255,
        1,
        0,
        0,
        0,
        0,
        257,
        1,
        0,
        0,
        0,
        0,
        259,
        1,
        0,
        0,
        0,
        0,
        261,
        1,
        0,
        0,
        0,
        0,
        263,
        1,
        0,
        0,
        0,
        0,
        265,
        1,
        0,
        0,
        0,
        0,
        267,
        1,
        0,
        0,
        0,
        0,
        269,
        1,
        0,
        0,
        0,
        0,
        271,
        1,
        0,
        0,
        0,
        0,
        273,
        1,
        0,
        0,
        0,
        0,
        275,
        1,
        0,
        0,
        0,
        0,
        277,
        1,
        0,
        0,
        0,
        0,
        279,
        1,
        0,
        0,
        0,
        0,
        281,
        1,
        0,
        0,
        0,
        0,
        283,
        1,
        0,
        0,
        0,
        0,
        285,
        1,
        0,
        0,
        0,
        0,
        287,
        1,
        0,
        0,
        0,
        0,
        289,
        1,
        0,
        0,
        0,
        0,
        291,
        1,
        0,
        0,
        0,
        0,
        293,
        1,
        0,
        0,
        0,
        0,
        295,
        1,
        0,
        0,
        0,
        0,
        297,
        1,
        0,
        0,
        0,
        0,
        299,
        1,
        0,
        0,
        0,
        0,
        301,
        1,
        0,
        0,
        0,
        0,
        303,
        1,
        0,
        0,
        0,
        0,
        305,
        1,
        0,
        0,
        0,
        0,
        307,
        1,
        0,
        0,
        0,
        0,
        309,
        1,
        0,
        0,
        0,
        0,
        311,
        1,
        0,
        0,
        0,
        0,
        313,
        1,
        0,
        0,
        0,
        0,
        315,
        1,
        0,
        0,
        0,
        0,
        317,
        1,
        0,
        0,
        0,
        0,
        319,
        1,
        0,
        0,
        0,
        0,
        321,
        1,
        0,
        0,
        0,
        0,
        323,
        1,
        0,
        0,
        0,
        0,
        325,
        1,
        0,
        0,
        0,
        0,
        327,
        1,
        0,
        0,
        0,
        0,
        329,
        1,
        0,
        0,
        0,
        0,
        331,
        1,
        0,
        0,
        0,
        0,
        333,
        1,
        0,
        0,
        0,
        0,
        335,
        1,
        0,
        0,
        0,
        0,
        337,
        1,
        0,
        0,
        0,
        0,
        339,
        1,
        0,
        0,
        0,
        0,
        341,
        1,
        0,
        0,
        0,
        0,
        343,
        1,
        0,
        0,
        0,
        0,
        345,
        1,
        0,
        0,
        0,
        0,
        347,
        1,
        0,
        0,
        0,
        0,
        349,
        1,
        0,
        0,
        0,
        0,
        351,
        1,
        0,
        0,
        0,
        0,
        353,
        1,
        0,
        0,
        0,
        0,
        355,
        1,
        0,
        0,
        0,
        0,
        357,
        1,
        0,
        0,
        0,
        0,
        359,
        1,
        0,
        0,
        0,
        0,
        361,
        1,
        0,
        0,
        0,
        0,
        363,
        1,
        0,
        0,
        0,
        0,
        365,
        1,
        0,
        0,
        0,
        0,
        367,
        1,
        0,
        0,
        0,
        0,
        369,
        1,
        0,
        0,
        0,
        0,
        371,
        1,
        0,
        0,
        0,
        0,
        373,
        1,
        0,
        0,
        0,
        0,
        375,
        1,
        0,
        0,
        0,
        0,
        377,
        1,
        0,
        0,
        0,
        0,
        379,
        1,
        0,
        0,
        0,
        0,
        381,
        1,
        0,
        0,
        0,
        0,
        383,
        1,
        0,
        0,
        0,
        0,
        385,
        1,
        0,
        0,
        0,
        0,
        387,
        1,
        0,
        0,
        0,
        0,
        389,
        1,
        0,
        0,
        0,
        0,
        391,
        1,
        0,
        0,
        0,
        0,
        393,
        1,
        0,
        0,
        0,
        0,
        395,
        1,
        0,
        0,
        0,
        0,
        397,
        1,
        0,
        0,
        0,
        0,
        399,
        1,
        0,
        0,
        0,
        0,
        401,
        1,
        0,
        0,
        0,
        0,
        403,
        1,
        0,
        0,
        0,
        0,
        405,
        1,
        0,
        0,
        0,
        0,
        407,
        1,
        0,
        0,
        0,
        0,
        409,
        1,
        0,
        0,
        0,
        0,
        411,
        1,
        0,
        0,
        0,
        0,
        413,
        1,
        0,
        0,
        0,
        0,
        415,
        1,
        0,
        0,
        0,
        0,
        417,
        1,
        0,
        0,
        0,
        0,
        419,
        1,
        0,
        0,
        0,
        0,
        421,
        1,
        0,
        0,
        0,
        0,
        423,
        1,
        0,
        0,
        0,
        0,
        425,
        1,
        0,
        0,
        0,
        0,
        427,
        1,
        0,
        0,
        0,
        0,
        429,
        1,
        0,
        0,
        0,
        0,
        431,
        1,
        0,
        0,
        0,
        0,
        433,
        1,
        0,
        0,
        0,
        0,
        435,
        1,
        0,
        0,
        0,
        0,
        437,
        1,
        0,
        0,
        0,
        0,
        439,
        1,
        0,
        0,
        0,
        0,
        441,
        1,
        0,
        0,
        0,
        0,
        443,
        1,
        0,
        0,
        0,
        0,
        445,
        1,
        0,
        0,
        0,
        0,
        447,
        1,
        0,
        0,
        0,
        0,
        449,
        1,
        0,
        0,
        0,
        0,
        451,
        1,
        0,
        0,
        0,
        0,
        453,
        1,
        0,
        0,
        0,
        0,
        455,
        1,
        0,
        0,
        0,
        0,
        457,
        1,
        0,
        0,
        0,
        0,
        459,
        1,
        0,
        0,
        0,
        0,
        461,
        1,
        0,
        0,
        0,
        0,
        463,
        1,
        0,
        0,
        0,
        0,
        465,
        1,
        0,
        0,
        0,
        0,
        467,
        1,
        0,
        0,
        0,
        0,
        469,
        1,
        0,
        0,
        0,
        0,
        471,
        1,
        0,
        0,
        0,
        0,
        473,
        1,
        0,
        0,
        0,
        0,
        475,
        1,
        0,
        0,
        0,
        0,
        477,
        1,
        0,
        0,
        0,
        0,
        479,
        1,
        0,
        0,
        0,
        0,
        485,
        1,
        0,
        0,
        0,
        0,
        487,
        1,
        0,
        0,
        0,
        0,
        489,
        1,
        0,
        0,
        0,
        0,
        491,
        1,
        0,
        0,
        0,
        0,
        493,
        1,
        0,
        0,
        0,
        0,
        495,
        1,
        0,
        0,
        0,
        0,
        497,
        1,
        0,
        0,
        0,
        0,
        499,
        1,
        0,
        0,
        0,
        0,
        501,
        1,
        0,
        0,
        0,
        1,
        503,
        1,
        0,
        0,
        0,
        3,
        505,
        1,
        0,
        0,
        0,
        5,
        507,
        1,
        0,
        0,
        0,
        7,
        509,
        1,
        0,
        0,
        0,
        9,
        511,
        1,
        0,
        0,
        0,
        11,
        513,
        1,
        0,
        0,
        0,
        13,
        515,
        1,
        0,
        0,
        0,
        15,
        517,
        1,
        0,
        0,
        0,
        17,
        519,
        1,
        0,
        0,
        0,
        19,
        521,
        1,
        0,
        0,
        0,
        21,
        524,
        1,
        0,
        0,
        0,
        23,
        527,
        1,
        0,
        0,
        0,
        25,
        530,
        1,
        0,
        0,
        0,
        27,
        532,
        1,
        0,
        0,
        0,
        29,
        534,
        1,
        0,
        0,
        0,
        31,
        536,
        1,
        0,
        0,
        0,
        33,
        538,
        1,
        0,
        0,
        0,
        35,
        540,
        1,
        0,
        0,
        0,
        37,
        543,
        1,
        0,
        0,
        0,
        39,
        545,
        1,
        0,
        0,
        0,
        41,
        548,
        1,
        0,
        0,
        0,
        43,
        550,
        1,
        0,
        0,
        0,
        45,
        555,
        1,
        0,
        0,
        0,
        47,
        558,
        1,
        0,
        0,
        0,
        49,
        563,
        1,
        0,
        0,
        0,
        51,
        568,
        1,
        0,
        0,
        0,
        53,
        573,
        1,
        0,
        0,
        0,
        55,
        579,
        1,
        0,
        0,
        0,
        57,
        584,
        1,
        0,
        0,
        0,
        59,
        597,
        1,
        0,
        0,
        0,
        61,
        606,
        1,
        0,
        0,
        0,
        63,
        614,
        1,
        0,
        0,
        0,
        65,
        622,
        1,
        0,
        0,
        0,
        67,
        631,
        1,
        0,
        0,
        0,
        69,
        642,
        1,
        0,
        0,
        0,
        71,
        652,
        1,
        0,
        0,
        0,
        73,
        662,
        1,
        0,
        0,
        0,
        75,
        673,
        1,
        0,
        0,
        0,
        77,
        683,
        1,
        0,
        0,
        0,
        79,
        694,
        1,
        0,
        0,
        0,
        81,
        697,
        1,
        0,
        0,
        0,
        83,
        702,
        1,
        0,
        0,
        0,
        85,
        707,
        1,
        0,
        0,
        0,
        87,
        712,
        1,
        0,
        0,
        0,
        89,
        721,
        1,
        0,
        0,
        0,
        91,
        728,
        1,
        0,
        0,
        0,
        93,
        731,
        1,
        0,
        0,
        0,
        95,
        735,
        1,
        0,
        0,
        0,
        97,
        738,
        1,
        0,
        0,
        0,
        99,
        742,
        1,
        0,
        0,
        0,
        101,
        746,
        1,
        0,
        0,
        0,
        103,
        754,
        1,
        0,
        0,
        0,
        105,
        757,
        1,
        0,
        0,
        0,
        107,
        764,
        1,
        0,
        0,
        0,
        109,
        769,
        1,
        0,
        0,
        0,
        111,
        776,
        1,
        0,
        0,
        0,
        113,
        779,
        1,
        0,
        0,
        0,
        115,
        785,
        1,
        0,
        0,
        0,
        117,
        790,
        1,
        0,
        0,
        0,
        119,
        798,
        1,
        0,
        0,
        0,
        121,
        808,
        1,
        0,
        0,
        0,
        123,
        815,
        1,
        0,
        0,
        0,
        125,
        820,
        1,
        0,
        0,
        0,
        127,
        828,
        1,
        0,
        0,
        0,
        129,
        837,
        1,
        0,
        0,
        0,
        131,
        844,
        1,
        0,
        0,
        0,
        133,
        850,
        1,
        0,
        0,
        0,
        135,
        860,
        1,
        0,
        0,
        0,
        137,
        863,
        1,
        0,
        0,
        0,
        139,
        870,
        1,
        0,
        0,
        0,
        141,
        880,
        1,
        0,
        0,
        0,
        143,
        890,
        1,
        0,
        0,
        0,
        145,
        894,
        1,
        0,
        0,
        0,
        147,
        899,
        1,
        0,
        0,
        0,
        149,
        910,
        1,
        0,
        0,
        0,
        151,
        916,
        1,
        0,
        0,
        0,
        153,
        919,
        1,
        0,
        0,
        0,
        155,
        924,
        1,
        0,
        0,
        0,
        157,
        928,
        1,
        0,
        0,
        0,
        159,
        933,
        1,
        0,
        0,
        0,
        161,
        937,
        1,
        0,
        0,
        0,
        163,
        941,
        1,
        0,
        0,
        0,
        165,
        947,
        1,
        0,
        0,
        0,
        167,
        952,
        1,
        0,
        0,
        0,
        169,
        960,
        1,
        0,
        0,
        0,
        171,
        964,
        1,
        0,
        0,
        0,
        173,
        968,
        1,
        0,
        0,
        0,
        175,
        971,
        1,
        0,
        0,
        0,
        177,
        975,
        1,
        0,
        0,
        0,
        179,
        981,
        1,
        0,
        0,
        0,
        181,
        987,
        1,
        0,
        0,
        0,
        183,
        993,
        1,
        0,
        0,
        0,
        185,
        997,
        1,
        0,
        0,
        0,
        187,
        1004,
        1,
        0,
        0,
        0,
        189,
        1007,
        1,
        0,
        0,
        0,
        191,
        1012,
        1,
        0,
        0,
        0,
        193,
        1018,
        1,
        0,
        0,
        0,
        195,
        1024,
        1,
        0,
        0,
        0,
        197,
        1031,
        1,
        0,
        0,
        0,
        199,
        1035,
        1,
        0,
        0,
        0,
        201,
        1039,
        1,
        0,
        0,
        0,
        203,
        1046,
        1,
        0,
        0,
        0,
        205,
        1052,
        1,
        0,
        0,
        0,
        207,
        1063,
        1,
        0,
        0,
        0,
        209,
        1071,
        1,
        0,
        0,
        0,
        211,
        1081,
        1,
        0,
        0,
        0,
        213,
        1088,
        1,
        0,
        0,
        0,
        215,
        1094,
        1,
        0,
        0,
        0,
        217,
        1098,
        1,
        0,
        0,
        0,
        219,
        1112,
        1,
        0,
        0,
        0,
        221,
        1118,
        1,
        0,
        0,
        0,
        223,
        1135,
        1,
        0,
        0,
        0,
        225,
        1140,
        1,
        0,
        0,
        0,
        227,
        1144,
        1,
        0,
        0,
        0,
        229,
        1154,
        1,
        0,
        0,
        0,
        231,
        1156,
        1,
        0,
        0,
        0,
        233,
        1164,
        1,
        0,
        0,
        0,
        235,
        1176,
        1,
        0,
        0,
        0,
        237,
        1185,
        1,
        0,
        0,
        0,
        239,
        1190,
        1,
        0,
        0,
        0,
        241,
        1200,
        1,
        0,
        0,
        0,
        243,
        1208,
        1,
        0,
        0,
        0,
        245,
        1217,
        1,
        0,
        0,
        0,
        247,
        1224,
        1,
        0,
        0,
        0,
        249,
        1227,
        1,
        0,
        0,
        0,
        251,
        1237,
        1,
        0,
        0,
        0,
        253,
        1250,
        1,
        0,
        0,
        0,
        255,
        1258,
        1,
        0,
        0,
        0,
        257,
        1263,
        1,
        0,
        0,
        0,
        259,
        1267,
        1,
        0,
        0,
        0,
        261,
        1280,
        1,
        0,
        0,
        0,
        263,
        1286,
        1,
        0,
        0,
        0,
        265,
        1292,
        1,
        0,
        0,
        0,
        267,
        1298,
        1,
        0,
        0,
        0,
        269,
        1306,
        1,
        0,
        0,
        0,
        271,
        1311,
        1,
        0,
        0,
        0,
        273,
        1317,
        1,
        0,
        0,
        0,
        275,
        1322,
        1,
        0,
        0,
        0,
        277,
        1326,
        1,
        0,
        0,
        0,
        279,
        1334,
        1,
        0,
        0,
        0,
        281,
        1345,
        1,
        0,
        0,
        0,
        283,
        1357,
        1,
        0,
        0,
        0,
        285,
        1365,
        1,
        0,
        0,
        0,
        287,
        1374,
        1,
        0,
        0,
        0,
        289,
        1380,
        1,
        0,
        0,
        0,
        291,
        1387,
        1,
        0,
        0,
        0,
        293,
        1394,
        1,
        0,
        0,
        0,
        295,
        1406,
        1,
        0,
        0,
        0,
        297,
        1417,
        1,
        0,
        0,
        0,
        299,
        1421,
        1,
        0,
        0,
        0,
        301,
        1426,
        1,
        0,
        0,
        0,
        303,
        1442,
        1,
        0,
        0,
        0,
        305,
        1447,
        1,
        0,
        0,
        0,
        307,
        1457,
        1,
        0,
        0,
        0,
        309,
        1467,
        1,
        0,
        0,
        0,
        311,
        1477,
        1,
        0,
        0,
        0,
        313,
        1487,
        1,
        0,
        0,
        0,
        315,
        1492,
        1,
        0,
        0,
        0,
        317,
        1498,
        1,
        0,
        0,
        0,
        319,
        1506,
        1,
        0,
        0,
        0,
        321,
        1512,
        1,
        0,
        0,
        0,
        323,
        1529,
        1,
        0,
        0,
        0,
        325,
        1543,
        1,
        0,
        0,
        0,
        327,
        1557,
        1,
        0,
        0,
        0,
        329,
        1567,
        1,
        0,
        0,
        0,
        331,
        1576,
        1,
        0,
        0,
        0,
        333,
        1588,
        1,
        0,
        0,
        0,
        335,
        1598,
        1,
        0,
        0,
        0,
        337,
        1606,
        1,
        0,
        0,
        0,
        339,
        1611,
        1,
        0,
        0,
        0,
        341,
        1623,
        1,
        0,
        0,
        0,
        343,
        1630,
        1,
        0,
        0,
        0,
        345,
        1637,
        1,
        0,
        0,
        0,
        347,
        1642,
        1,
        0,
        0,
        0,
        349,
        1650,
        1,
        0,
        0,
        0,
        351,
        1656,
        1,
        0,
        0,
        0,
        353,
        1661,
        1,
        0,
        0,
        0,
        355,
        1668,
        1,
        0,
        0,
        0,
        357,
        1677,
        1,
        0,
        0,
        0,
        359,
        1682,
        1,
        0,
        0,
        0,
        361,
        1685,
        1,
        0,
        0,
        0,
        363,
        1688,
        1,
        0,
        0,
        0,
        365,
        1698,
        1,
        0,
        0,
        0,
        367,
        1705,
        1,
        0,
        0,
        0,
        369,
        1708,
        1,
        0,
        0,
        0,
        371,
        1713,
        1,
        0,
        0,
        0,
        373,
        1718,
        1,
        0,
        0,
        0,
        375,
        1729,
        1,
        0,
        0,
        0,
        377,
        1736,
        1,
        0,
        0,
        0,
        379,
        1742,
        1,
        0,
        0,
        0,
        381,
        1748,
        1,
        0,
        0,
        0,
        383,
        1756,
        1,
        0,
        0,
        0,
        385,
        1763,
        1,
        0,
        0,
        0,
        387,
        1774,
        1,
        0,
        0,
        0,
        389,
        1784,
        1,
        0,
        0,
        0,
        391,
        1795,
        1,
        0,
        0,
        0,
        393,
        1805,
        1,
        0,
        0,
        0,
        395,
        1815,
        1,
        0,
        0,
        0,
        397,
        1823,
        1,
        0,
        0,
        0,
        399,
        1830,
        1,
        0,
        0,
        0,
        401,
        1839,
        1,
        0,
        0,
        0,
        403,
        1847,
        1,
        0,
        0,
        0,
        405,
        1853,
        1,
        0,
        0,
        0,
        407,
        1865,
        1,
        0,
        0,
        0,
        409,
        1873,
        1,
        0,
        0,
        0,
        411,
        1877,
        1,
        0,
        0,
        0,
        413,
        1883,
        1,
        0,
        0,
        0,
        415,
        1895,
        1,
        0,
        0,
        0,
        417,
        1912,
        1,
        0,
        0,
        0,
        419,
        1919,
        1,
        0,
        0,
        0,
        421,
        1928,
        1,
        0,
        0,
        0,
        423,
        1937,
        1,
        0,
        0,
        0,
        425,
        1942,
        1,
        0,
        0,
        0,
        427,
        1948,
        1,
        0,
        0,
        0,
        429,
        1961,
        1,
        0,
        0,
        0,
        431,
        1971,
        1,
        0,
        0,
        0,
        433,
        1977,
        1,
        0,
        0,
        0,
        435,
        1984,
        1,
        0,
        0,
        0,
        437,
        1989,
        1,
        0,
        0,
        0,
        439,
        2003,
        1,
        0,
        0,
        0,
        441,
        2020,
        1,
        0,
        0,
        0,
        443,
        2028,
        1,
        0,
        0,
        0,
        445,
        2044,
        1,
        0,
        0,
        0,
        447,
        2060,
        1,
        0,
        0,
        0,
        449,
        2069,
        1,
        0,
        0,
        0,
        451,
        2078,
        1,
        0,
        0,
        0,
        453,
        2087,
        1,
        0,
        0,
        0,
        455,
        2100,
        1,
        0,
        0,
        0,
        457,
        2113,
        1,
        0,
        0,
        0,
        459,
        2125,
        1,
        0,
        0,
        0,
        461,
        2137,
        1,
        0,
        0,
        0,
        463,
        2148,
        1,
        0,
        0,
        0,
        465,
        2161,
        1,
        0,
        0,
        0,
        467,
        2168,
        1,
        0,
        0,
        0,
        469,
        2178,
        1,
        0,
        0,
        0,
        471,
        2204,
        1,
        0,
        0,
        0,
        473,
        2227,
        1,
        0,
        0,
        0,
        475,
        2256,
        1,
        0,
        0,
        0,
        477,
        2282,
        1,
        0,
        0,
        0,
        479,
        2286,
        1,
        0,
        0,
        0,
        481,
        2295,
        1,
        0,
        0,
        0,
        483,
        2297,
        1,
        0,
        0,
        0,
        485,
        2300,
        1,
        0,
        0,
        0,
        487,
        2304,
        1,
        0,
        0,
        0,
        489,
        2317,
        1,
        0,
        0,
        0,
        491,
        2319,
        1,
        0,
        0,
        0,
        493,
        2349,
        1,
        0,
        0,
        0,
        495,
        2352,
        1,
        0,
        0,
        0,
        497,
        2358,
        1,
        0,
        0,
        0,
        499,
        2360,
        1,
        0,
        0,
        0,
        501,
        2374,
        1,
        0,
        0,
        0,
        503,
        504,
        5,
        40,
        0,
        0,
        504,
        2,
        1,
        0,
        0,
        0,
        505,
        506,
        5,
        41,
        0,
        0,
        506,
        4,
        1,
        0,
        0,
        0,
        507,
        508,
        5,
        91,
        0,
        0,
        508,
        6,
        1,
        0,
        0,
        0,
        509,
        510,
        5,
        93,
        0,
        0,
        510,
        8,
        1,
        0,
        0,
        0,
        511,
        512,
        5,
        123,
        0,
        0,
        512,
        10,
        1,
        0,
        0,
        0,
        513,
        514,
        5,
        125,
        0,
        0,
        514,
        12,
        1,
        0,
        0,
        0,
        515,
        516,
        5,
        61,
        0,
        0,
        516,
        14,
        1,
        0,
        0,
        0,
        517,
        518,
        5,
        60,
        0,
        0,
        518,
        16,
        1,
        0,
        0,
        0,
        519,
        520,
        5,
        62,
        0,
        0,
        520,
        18,
        1,
        0,
        0,
        0,
        521,
        522,
        5,
        62,
        0,
        0,
        522,
        523,
        5,
        61,
        0,
        0,
        523,
        20,
        1,
        0,
        0,
        0,
        524,
        525,
        5,
        60,
        0,
        0,
        525,
        526,
        5,
        62,
        0,
        0,
        526,
        22,
        1,
        0,
        0,
        0,
        527,
        528,
        5,
        60,
        0,
        0,
        528,
        529,
        5,
        61,
        0,
        0,
        529,
        24,
        1,
        0,
        0,
        0,
        530,
        531,
        5,
        43,
        0,
        0,
        531,
        26,
        1,
        0,
        0,
        0,
        532,
        533,
        5,
        45,
        0,
        0,
        533,
        28,
        1,
        0,
        0,
        0,
        534,
        535,
        5,
        42,
        0,
        0,
        535,
        30,
        1,
        0,
        0,
        0,
        536,
        537,
        5,
        47,
        0,
        0,
        537,
        32,
        1,
        0,
        0,
        0,
        538,
        539,
        5,
        44,
        0,
        0,
        539,
        34,
        1,
        0,
        0,
        0,
        540,
        541,
        5,
        45,
        0,
        0,
        541,
        542,
        5,
        62,
        0,
        0,
        542,
        36,
        1,
        0,
        0,
        0,
        543,
        544,
        5,
        58,
        0,
        0,
        544,
        38,
        1,
        0,
        0,
        0,
        545,
        546,
        5,
        58,
        0,
        0,
        546,
        547,
        5,
        61,
        0,
        0,
        547,
        40,
        1,
        0,
        0,
        0,
        548,
        549,
        5,
        35,
        0,
        0,
        549,
        42,
        1,
        0,
        0,
        0,
        550,
        551,
        5,
        101,
        0,
        0,
        551,
        552,
        5,
        118,
        0,
        0,
        552,
        553,
        5,
        97,
        0,
        0,
        553,
        554,
        5,
        108,
        0,
        0,
        554,
        44,
        1,
        0,
        0,
        0,
        555,
        556,
        5,
        105,
        0,
        0,
        556,
        557,
        5,
        102,
        0,
        0,
        557,
        46,
        1,
        0,
        0,
        0,
        558,
        559,
        5,
        99,
        0,
        0,
        559,
        560,
        5,
        97,
        0,
        0,
        560,
        561,
        5,
        115,
        0,
        0,
        561,
        562,
        5,
        101,
        0,
        0,
        562,
        48,
        1,
        0,
        0,
        0,
        563,
        564,
        5,
        116,
        0,
        0,
        564,
        565,
        5,
        104,
        0,
        0,
        565,
        566,
        5,
        101,
        0,
        0,
        566,
        567,
        5,
        110,
        0,
        0,
        567,
        50,
        1,
        0,
        0,
        0,
        568,
        569,
        5,
        101,
        0,
        0,
        569,
        570,
        5,
        108,
        0,
        0,
        570,
        571,
        5,
        115,
        0,
        0,
        571,
        572,
        5,
        101,
        0,
        0,
        572,
        52,
        1,
        0,
        0,
        0,
        573,
        574,
        5,
        117,
        0,
        0,
        574,
        575,
        5,
        115,
        0,
        0,
        575,
        576,
        5,
        105,
        0,
        0,
        576,
        577,
        5,
        110,
        0,
        0,
        577,
        578,
        5,
        103,
        0,
        0,
        578,
        54,
        1,
        0,
        0,
        0,
        579,
        580,
        5,
        119,
        0,
        0,
        580,
        581,
        5,
        105,
        0,
        0,
        581,
        582,
        5,
        116,
        0,
        0,
        582,
        583,
        5,
        104,
        0,
        0,
        583,
        56,
        1,
        0,
        0,
        0,
        584,
        585,
        5,
        99,
        0,
        0,
        585,
        586,
        5,
        117,
        0,
        0,
        586,
        587,
        5,
        114,
        0,
        0,
        587,
        588,
        5,
        114,
        0,
        0,
        588,
        589,
        5,
        101,
        0,
        0,
        589,
        590,
        5,
        110,
        0,
        0,
        590,
        591,
        5,
        116,
        0,
        0,
        591,
        592,
        5,
        95,
        0,
        0,
        592,
        593,
        5,
        100,
        0,
        0,
        593,
        594,
        5,
        97,
        0,
        0,
        594,
        595,
        5,
        116,
        0,
        0,
        595,
        596,
        5,
        101,
        0,
        0,
        596,
        58,
        1,
        0,
        0,
        0,
        597,
        598,
        5,
        100,
        0,
        0,
        598,
        599,
        5,
        97,
        0,
        0,
        599,
        600,
        5,
        116,
        0,
        0,
        600,
        601,
        5,
        101,
        0,
        0,
        601,
        602,
        5,
        100,
        0,
        0,
        602,
        603,
        5,
        105,
        0,
        0,
        603,
        604,
        5,
        102,
        0,
        0,
        604,
        605,
        5,
        102,
        0,
        0,
        605,
        60,
        1,
        0,
        0,
        0,
        606,
        607,
        5,
        100,
        0,
        0,
        607,
        608,
        5,
        97,
        0,
        0,
        608,
        609,
        5,
        116,
        0,
        0,
        609,
        610,
        5,
        101,
        0,
        0,
        610,
        611,
        5,
        97,
        0,
        0,
        611,
        612,
        5,
        100,
        0,
        0,
        612,
        613,
        5,
        100,
        0,
        0,
        613,
        62,
        1,
        0,
        0,
        0,
        614,
        615,
        5,
        103,
        0,
        0,
        615,
        616,
        5,
        101,
        0,
        0,
        616,
        617,
        5,
        116,
        0,
        0,
        617,
        618,
        5,
        121,
        0,
        0,
        618,
        619,
        5,
        101,
        0,
        0,
        619,
        620,
        5,
        97,
        0,
        0,
        620,
        621,
        5,
        114,
        0,
        0,
        621,
        64,
        1,
        0,
        0,
        0,
        622,
        623,
        5,
        103,
        0,
        0,
        623,
        624,
        5,
        101,
        0,
        0,
        624,
        625,
        5,
        116,
        0,
        0,
        625,
        626,
        5,
        109,
        0,
        0,
        626,
        627,
        5,
        111,
        0,
        0,
        627,
        628,
        5,
        110,
        0,
        0,
        628,
        629,
        5,
        116,
        0,
        0,
        629,
        630,
        5,
        104,
        0,
        0,
        630,
        66,
        1,
        0,
        0,
        0,
        631,
        632,
        5,
        100,
        0,
        0,
        632,
        633,
        5,
        97,
        0,
        0,
        633,
        634,
        5,
        121,
        0,
        0,
        634,
        635,
        5,
        111,
        0,
        0,
        635,
        636,
        5,
        102,
        0,
        0,
        636,
        637,
        5,
        109,
        0,
        0,
        637,
        638,
        5,
        111,
        0,
        0,
        638,
        639,
        5,
        110,
        0,
        0,
        639,
        640,
        5,
        116,
        0,
        0,
        640,
        641,
        5,
        104,
        0,
        0,
        641,
        68,
        1,
        0,
        0,
        0,
        642,
        643,
        5,
        100,
        0,
        0,
        643,
        644,
        5,
        97,
        0,
        0,
        644,
        645,
        5,
        121,
        0,
        0,
        645,
        646,
        5,
        111,
        0,
        0,
        646,
        647,
        5,
        102,
        0,
        0,
        647,
        648,
        5,
        121,
        0,
        0,
        648,
        649,
        5,
        101,
        0,
        0,
        649,
        650,
        5,
        97,
        0,
        0,
        650,
        651,
        5,
        114,
        0,
        0,
        651,
        70,
        1,
        0,
        0,
        0,
        652,
        653,
        5,
        100,
        0,
        0,
        653,
        654,
        5,
        97,
        0,
        0,
        654,
        655,
        5,
        121,
        0,
        0,
        655,
        656,
        5,
        116,
        0,
        0,
        656,
        657,
        5,
        111,
        0,
        0,
        657,
        658,
        5,
        121,
        0,
        0,
        658,
        659,
        5,
        101,
        0,
        0,
        659,
        660,
        5,
        97,
        0,
        0,
        660,
        661,
        5,
        114,
        0,
        0,
        661,
        72,
        1,
        0,
        0,
        0,
        662,
        663,
        5,
        100,
        0,
        0,
        663,
        664,
        5,
        97,
        0,
        0,
        664,
        665,
        5,
        121,
        0,
        0,
        665,
        666,
        5,
        116,
        0,
        0,
        666,
        667,
        5,
        111,
        0,
        0,
        667,
        668,
        5,
        109,
        0,
        0,
        668,
        669,
        5,
        111,
        0,
        0,
        669,
        670,
        5,
        110,
        0,
        0,
        670,
        671,
        5,
        116,
        0,
        0,
        671,
        672,
        5,
        104,
        0,
        0,
        672,
        74,
        1,
        0,
        0,
        0,
        673,
        674,
        5,
        121,
        0,
        0,
        674,
        675,
        5,
        101,
        0,
        0,
        675,
        676,
        5,
        97,
        0,
        0,
        676,
        677,
        5,
        114,
        0,
        0,
        677,
        678,
        5,
        116,
        0,
        0,
        678,
        679,
        5,
        111,
        0,
        0,
        679,
        680,
        5,
        100,
        0,
        0,
        680,
        681,
        5,
        97,
        0,
        0,
        681,
        682,
        5,
        121,
        0,
        0,
        682,
        76,
        1,
        0,
        0,
        0,
        683,
        684,
        5,
        109,
        0,
        0,
        684,
        685,
        5,
        111,
        0,
        0,
        685,
        686,
        5,
        110,
        0,
        0,
        686,
        687,
        5,
        116,
        0,
        0,
        687,
        688,
        5,
        104,
        0,
        0,
        688,
        689,
        5,
        116,
        0,
        0,
        689,
        690,
        5,
        111,
        0,
        0,
        690,
        691,
        5,
        100,
        0,
        0,
        691,
        692,
        5,
        97,
        0,
        0,
        692,
        693,
        5,
        121,
        0,
        0,
        693,
        78,
        1,
        0,
        0,
        0,
        694,
        695,
        5,
        111,
        0,
        0,
        695,
        696,
        5,
        110,
        0,
        0,
        696,
        80,
        1,
        0,
        0,
        0,
        697,
        698,
        5,
        100,
        0,
        0,
        698,
        699,
        5,
        114,
        0,
        0,
        699,
        700,
        5,
        111,
        0,
        0,
        700,
        701,
        5,
        112,
        0,
        0,
        701,
        82,
        1,
        0,
        0,
        0,
        702,
        703,
        5,
        107,
        0,
        0,
        703,
        704,
        5,
        101,
        0,
        0,
        704,
        705,
        5,
        101,
        0,
        0,
        705,
        706,
        5,
        112,
        0,
        0,
        706,
        84,
        1,
        0,
        0,
        0,
        707,
        708,
        5,
        99,
        0,
        0,
        708,
        709,
        5,
        97,
        0,
        0,
        709,
        710,
        5,
        108,
        0,
        0,
        710,
        711,
        5,
        99,
        0,
        0,
        711,
        86,
        1,
        0,
        0,
        0,
        712,
        713,
        5,
        97,
        0,
        0,
        713,
        714,
        5,
        116,
        0,
        0,
        714,
        715,
        5,
        116,
        0,
        0,
        715,
        716,
        5,
        114,
        0,
        0,
        716,
        717,
        5,
        99,
        0,
        0,
        717,
        718,
        5,
        97,
        0,
        0,
        718,
        719,
        5,
        108,
        0,
        0,
        719,
        720,
        5,
        99,
        0,
        0,
        720,
        88,
        1,
        0,
        0,
        0,
        721,
        722,
        5,
        114,
        0,
        0,
        722,
        723,
        5,
        101,
        0,
        0,
        723,
        724,
        5,
        110,
        0,
        0,
        724,
        725,
        5,
        97,
        0,
        0,
        725,
        726,
        5,
        109,
        0,
        0,
        726,
        727,
        5,
        101,
        0,
        0,
        727,
        90,
        1,
        0,
        0,
        0,
        728,
        729,
        5,
        97,
        0,
        0,
        729,
        730,
        5,
        115,
        0,
        0,
        730,
        92,
        1,
        0,
        0,
        0,
        731,
        732,
        5,
        97,
        0,
        0,
        732,
        733,
        5,
        110,
        0,
        0,
        733,
        734,
        5,
        100,
        0,
        0,
        734,
        94,
        1,
        0,
        0,
        0,
        735,
        736,
        5,
        111,
        0,
        0,
        736,
        737,
        5,
        114,
        0,
        0,
        737,
        96,
        1,
        0,
        0,
        0,
        738,
        739,
        5,
        120,
        0,
        0,
        739,
        740,
        5,
        111,
        0,
        0,
        740,
        741,
        5,
        114,
        0,
        0,
        741,
        98,
        1,
        0,
        0,
        0,
        742,
        743,
        5,
        110,
        0,
        0,
        743,
        744,
        5,
        111,
        0,
        0,
        744,
        745,
        5,
        116,
        0,
        0,
        745,
        100,
        1,
        0,
        0,
        0,
        746,
        747,
        5,
        98,
        0,
        0,
        747,
        748,
        5,
        101,
        0,
        0,
        748,
        749,
        5,
        116,
        0,
        0,
        749,
        750,
        5,
        119,
        0,
        0,
        750,
        751,
        5,
        101,
        0,
        0,
        751,
        752,
        5,
        101,
        0,
        0,
        752,
        753,
        5,
        110,
        0,
        0,
        753,
        102,
        1,
        0,
        0,
        0,
        754,
        755,
        5,
        105,
        0,
        0,
        755,
        756,
        5,
        110,
        0,
        0,
        756,
        104,
        1,
        0,
        0,
        0,
        757,
        758,
        5,
        110,
        0,
        0,
        758,
        759,
        5,
        111,
        0,
        0,
        759,
        760,
        5,
        116,
        0,
        0,
        760,
        761,
        5,
        95,
        0,
        0,
        761,
        762,
        5,
        105,
        0,
        0,
        762,
        763,
        5,
        110,
        0,
        0,
        763,
        106,
        1,
        0,
        0,
        0,
        764,
        765,
        5,
        110,
        0,
        0,
        765,
        766,
        5,
        117,
        0,
        0,
        766,
        767,
        5,
        108,
        0,
        0,
        767,
        768,
        5,
        108,
        0,
        0,
        768,
        108,
        1,
        0,
        0,
        0,
        769,
        770,
        5,
        105,
        0,
        0,
        770,
        771,
        5,
        115,
        0,
        0,
        771,
        772,
        5,
        110,
        0,
        0,
        772,
        773,
        5,
        117,
        0,
        0,
        773,
        774,
        5,
        108,
        0,
        0,
        774,
        775,
        5,
        108,
        0,
        0,
        775,
        110,
        1,
        0,
        0,
        0,
        776,
        777,
        5,
        101,
        0,
        0,
        777,
        778,
        5,
        120,
        0,
        0,
        778,
        112,
        1,
        0,
        0,
        0,
        779,
        780,
        5,
        117,
        0,
        0,
        780,
        781,
        5,
        110,
        0,
        0,
        781,
        782,
        5,
        105,
        0,
        0,
        782,
        783,
        5,
        111,
        0,
        0,
        783,
        784,
        5,
        110,
        0,
        0,
        784,
        114,
        1,
        0,
        0,
        0,
        785,
        786,
        5,
        100,
        0,
        0,
        786,
        787,
        5,
        105,
        0,
        0,
        787,
        788,
        5,
        102,
        0,
        0,
        788,
        789,
        5,
        102,
        0,
        0,
        789,
        116,
        1,
        0,
        0,
        0,
        790,
        791,
        5,
        115,
        0,
        0,
        791,
        792,
        5,
        121,
        0,
        0,
        792,
        793,
        5,
        109,
        0,
        0,
        793,
        794,
        5,
        100,
        0,
        0,
        794,
        795,
        5,
        105,
        0,
        0,
        795,
        796,
        5,
        102,
        0,
        0,
        796,
        797,
        5,
        102,
        0,
        0,
        797,
        118,
        1,
        0,
        0,
        0,
        798,
        799,
        5,
        105,
        0,
        0,
        799,
        800,
        5,
        110,
        0,
        0,
        800,
        801,
        5,
        116,
        0,
        0,
        801,
        802,
        5,
        101,
        0,
        0,
        802,
        803,
        5,
        114,
        0,
        0,
        803,
        804,
        5,
        115,
        0,
        0,
        804,
        805,
        5,
        101,
        0,
        0,
        805,
        806,
        5,
        99,
        0,
        0,
        806,
        807,
        5,
        116,
        0,
        0,
        807,
        120,
        1,
        0,
        0,
        0,
        808,
        809,
        5,
        114,
        0,
        0,
        809,
        810,
        5,
        97,
        0,
        0,
        810,
        811,
        5,
        110,
        0,
        0,
        811,
        812,
        5,
        100,
        0,
        0,
        812,
        813,
        5,
        111,
        0,
        0,
        813,
        814,
        5,
        109,
        0,
        0,
        814,
        122,
        1,
        0,
        0,
        0,
        815,
        816,
        5,
        107,
        0,
        0,
        816,
        817,
        5,
        101,
        0,
        0,
        817,
        818,
        5,
        121,
        0,
        0,
        818,
        819,
        5,
        115,
        0,
        0,
        819,
        124,
        1,
        0,
        0,
        0,
        820,
        821,
        5,
        105,
        0,
        0,
        821,
        822,
        5,
        110,
        0,
        0,
        822,
        823,
        5,
        116,
        0,
        0,
        823,
        824,
        5,
        121,
        0,
        0,
        824,
        825,
        5,
        101,
        0,
        0,
        825,
        826,
        5,
        97,
        0,
        0,
        826,
        827,
        5,
        114,
        0,
        0,
        827,
        126,
        1,
        0,
        0,
        0,
        828,
        829,
        5,
        105,
        0,
        0,
        829,
        830,
        5,
        110,
        0,
        0,
        830,
        831,
        5,
        116,
        0,
        0,
        831,
        832,
        5,
        109,
        0,
        0,
        832,
        833,
        5,
        111,
        0,
        0,
        833,
        834,
        5,
        110,
        0,
        0,
        834,
        835,
        5,
        116,
        0,
        0,
        835,
        836,
        5,
        104,
        0,
        0,
        836,
        128,
        1,
        0,
        0,
        0,
        837,
        838,
        5,
        105,
        0,
        0,
        838,
        839,
        5,
        110,
        0,
        0,
        839,
        840,
        5,
        116,
        0,
        0,
        840,
        841,
        5,
        100,
        0,
        0,
        841,
        842,
        5,
        97,
        0,
        0,
        842,
        843,
        5,
        121,
        0,
        0,
        843,
        130,
        1,
        0,
        0,
        0,
        844,
        845,
        5,
        99,
        0,
        0,
        845,
        846,
        5,
        104,
        0,
        0,
        846,
        847,
        5,
        101,
        0,
        0,
        847,
        848,
        5,
        99,
        0,
        0,
        848,
        849,
        5,
        107,
        0,
        0,
        849,
        132,
        1,
        0,
        0,
        0,
        850,
        851,
        5,
        101,
        0,
        0,
        851,
        852,
        5,
        120,
        0,
        0,
        852,
        853,
        5,
        105,
        0,
        0,
        853,
        854,
        5,
        115,
        0,
        0,
        854,
        855,
        5,
        116,
        0,
        0,
        855,
        856,
        5,
        115,
        0,
        0,
        856,
        857,
        5,
        95,
        0,
        0,
        857,
        858,
        5,
        105,
        0,
        0,
        858,
        859,
        5,
        110,
        0,
        0,
        859,
        134,
        1,
        0,
        0,
        0,
        860,
        861,
        5,
        116,
        0,
        0,
        861,
        862,
        5,
        111,
        0,
        0,
        862,
        136,
        1,
        0,
        0,
        0,
        863,
        864,
        5,
        114,
        0,
        0,
        864,
        865,
        5,
        101,
        0,
        0,
        865,
        866,
        5,
        116,
        0,
        0,
        866,
        867,
        5,
        117,
        0,
        0,
        867,
        868,
        5,
        114,
        0,
        0,
        868,
        869,
        5,
        110,
        0,
        0,
        869,
        138,
        1,
        0,
        0,
        0,
        870,
        871,
        5,
        105,
        0,
        0,
        871,
        872,
        5,
        109,
        0,
        0,
        872,
        873,
        5,
        98,
        0,
        0,
        873,
        874,
        5,
        97,
        0,
        0,
        874,
        875,
        5,
        108,
        0,
        0,
        875,
        876,
        5,
        97,
        0,
        0,
        876,
        877,
        5,
        110,
        0,
        0,
        877,
        878,
        5,
        99,
        0,
        0,
        878,
        879,
        5,
        101,
        0,
        0,
        879,
        140,
        1,
        0,
        0,
        0,
        880,
        881,
        5,
        101,
        0,
        0,
        881,
        882,
        5,
        114,
        0,
        0,
        882,
        883,
        5,
        114,
        0,
        0,
        883,
        884,
        5,
        111,
        0,
        0,
        884,
        885,
        5,
        114,
        0,
        0,
        885,
        886,
        5,
        99,
        0,
        0,
        886,
        887,
        5,
        111,
        0,
        0,
        887,
        888,
        5,
        100,
        0,
        0,
        888,
        889,
        5,
        101,
        0,
        0,
        889,
        142,
        1,
        0,
        0,
        0,
        890,
        891,
        5,
        97,
        0,
        0,
        891,
        892,
        5,
        108,
        0,
        0,
        892,
        893,
        5,
        108,
        0,
        0,
        893,
        144,
        1,
        0,
        0,
        0,
        894,
        895,
        5,
        97,
        0,
        0,
        895,
        896,
        5,
        103,
        0,
        0,
        896,
        897,
        5,
        103,
        0,
        0,
        897,
        898,
        5,
        114,
        0,
        0,
        898,
        146,
        1,
        0,
        0,
        0,
        899,
        900,
        5,
        101,
        0,
        0,
        900,
        901,
        5,
        114,
        0,
        0,
        901,
        902,
        5,
        114,
        0,
        0,
        902,
        903,
        5,
        111,
        0,
        0,
        903,
        904,
        5,
        114,
        0,
        0,
        904,
        905,
        5,
        108,
        0,
        0,
        905,
        906,
        5,
        101,
        0,
        0,
        906,
        907,
        5,
        118,
        0,
        0,
        907,
        908,
        5,
        101,
        0,
        0,
        908,
        909,
        5,
        108,
        0,
        0,
        909,
        148,
        1,
        0,
        0,
        0,
        910,
        911,
        5,
        111,
        0,
        0,
        911,
        912,
        5,
        114,
        0,
        0,
        912,
        913,
        5,
        100,
        0,
        0,
        913,
        914,
        5,
        101,
        0,
        0,
        914,
        915,
        5,
        114,
        0,
        0,
        915,
        150,
        1,
        0,
        0,
        0,
        916,
        917,
        5,
        98,
        0,
        0,
        917,
        918,
        5,
        121,
        0,
        0,
        918,
        152,
        1,
        0,
        0,
        0,
        919,
        920,
        5,
        114,
        0,
        0,
        920,
        921,
        5,
        97,
        0,
        0,
        921,
        922,
        5,
        110,
        0,
        0,
        922,
        923,
        5,
        107,
        0,
        0,
        923,
        154,
        1,
        0,
        0,
        0,
        924,
        925,
        5,
        97,
        0,
        0,
        925,
        926,
        5,
        115,
        0,
        0,
        926,
        927,
        5,
        99,
        0,
        0,
        927,
        156,
        1,
        0,
        0,
        0,
        928,
        929,
        5,
        100,
        0,
        0,
        929,
        930,
        5,
        101,
        0,
        0,
        930,
        931,
        5,
        115,
        0,
        0,
        931,
        932,
        5,
        99,
        0,
        0,
        932,
        158,
        1,
        0,
        0,
        0,
        933,
        934,
        5,
        109,
        0,
        0,
        934,
        935,
        5,
        105,
        0,
        0,
        935,
        936,
        5,
        110,
        0,
        0,
        936,
        160,
        1,
        0,
        0,
        0,
        937,
        938,
        5,
        109,
        0,
        0,
        938,
        939,
        5,
        97,
        0,
        0,
        939,
        940,
        5,
        120,
        0,
        0,
        940,
        162,
        1,
        0,
        0,
        0,
        941,
        942,
        5,
        102,
        0,
        0,
        942,
        943,
        5,
        105,
        0,
        0,
        943,
        944,
        5,
        114,
        0,
        0,
        944,
        945,
        5,
        115,
        0,
        0,
        945,
        946,
        5,
        116,
        0,
        0,
        946,
        164,
        1,
        0,
        0,
        0,
        947,
        948,
        5,
        108,
        0,
        0,
        948,
        949,
        5,
        97,
        0,
        0,
        949,
        950,
        5,
        115,
        0,
        0,
        950,
        951,
        5,
        116,
        0,
        0,
        951,
        166,
        1,
        0,
        0,
        0,
        952,
        953,
        5,
        105,
        0,
        0,
        953,
        954,
        5,
        110,
        0,
        0,
        954,
        955,
        5,
        100,
        0,
        0,
        955,
        956,
        5,
        101,
        0,
        0,
        956,
        957,
        5,
        120,
        0,
        0,
        957,
        958,
        5,
        111,
        0,
        0,
        958,
        959,
        5,
        102,
        0,
        0,
        959,
        168,
        1,
        0,
        0,
        0,
        960,
        961,
        5,
        97,
        0,
        0,
        961,
        962,
        5,
        98,
        0,
        0,
        962,
        963,
        5,
        115,
        0,
        0,
        963,
        170,
        1,
        0,
        0,
        0,
        964,
        965,
        5,
        107,
        0,
        0,
        965,
        966,
        5,
        101,
        0,
        0,
        966,
        967,
        5,
        121,
        0,
        0,
        967,
        172,
        1,
        0,
        0,
        0,
        968,
        969,
        5,
        108,
        0,
        0,
        969,
        970,
        5,
        110,
        0,
        0,
        970,
        174,
        1,
        0,
        0,
        0,
        971,
        972,
        5,
        108,
        0,
        0,
        972,
        973,
        5,
        111,
        0,
        0,
        973,
        974,
        5,
        103,
        0,
        0,
        974,
        176,
        1,
        0,
        0,
        0,
        975,
        976,
        5,
        116,
        0,
        0,
        976,
        977,
        5,
        114,
        0,
        0,
        977,
        978,
        5,
        117,
        0,
        0,
        978,
        979,
        5,
        110,
        0,
        0,
        979,
        980,
        5,
        99,
        0,
        0,
        980,
        178,
        1,
        0,
        0,
        0,
        981,
        982,
        5,
        114,
        0,
        0,
        982,
        983,
        5,
        111,
        0,
        0,
        983,
        984,
        5,
        117,
        0,
        0,
        984,
        985,
        5,
        110,
        0,
        0,
        985,
        986,
        5,
        100,
        0,
        0,
        986,
        180,
        1,
        0,
        0,
        0,
        987,
        988,
        5,
        112,
        0,
        0,
        988,
        989,
        5,
        111,
        0,
        0,
        989,
        990,
        5,
        119,
        0,
        0,
        990,
        991,
        5,
        101,
        0,
        0,
        991,
        992,
        5,
        114,
        0,
        0,
        992,
        182,
        1,
        0,
        0,
        0,
        993,
        994,
        5,
        109,
        0,
        0,
        994,
        995,
        5,
        111,
        0,
        0,
        995,
        996,
        5,
        100,
        0,
        0,
        996,
        184,
        1,
        0,
        0,
        0,
        997,
        998,
        5,
        108,
        0,
        0,
        998,
        999,
        5,
        101,
        0,
        0,
        999,
        1e3,
        5,
        110,
        0,
        0,
        1e3,
        1001,
        5,
        103,
        0,
        0,
        1001,
        1002,
        5,
        116,
        0,
        0,
        1002,
        1003,
        5,
        104,
        0,
        0,
        1003,
        186,
        1,
        0,
        0,
        0,
        1004,
        1005,
        5,
        124,
        0,
        0,
        1005,
        1006,
        5,
        124,
        0,
        0,
        1006,
        188,
        1,
        0,
        0,
        0,
        1007,
        1008,
        5,
        116,
        0,
        0,
        1008,
        1009,
        5,
        114,
        0,
        0,
        1009,
        1010,
        5,
        105,
        0,
        0,
        1010,
        1011,
        5,
        109,
        0,
        0,
        1011,
        190,
        1,
        0,
        0,
        0,
        1012,
        1013,
        5,
        117,
        0,
        0,
        1013,
        1014,
        5,
        112,
        0,
        0,
        1014,
        1015,
        5,
        112,
        0,
        0,
        1015,
        1016,
        5,
        101,
        0,
        0,
        1016,
        1017,
        5,
        114,
        0,
        0,
        1017,
        192,
        1,
        0,
        0,
        0,
        1018,
        1019,
        5,
        108,
        0,
        0,
        1019,
        1020,
        5,
        111,
        0,
        0,
        1020,
        1021,
        5,
        119,
        0,
        0,
        1021,
        1022,
        5,
        101,
        0,
        0,
        1022,
        1023,
        5,
        114,
        0,
        0,
        1023,
        194,
        1,
        0,
        0,
        0,
        1024,
        1025,
        5,
        115,
        0,
        0,
        1025,
        1026,
        5,
        117,
        0,
        0,
        1026,
        1027,
        5,
        98,
        0,
        0,
        1027,
        1028,
        5,
        115,
        0,
        0,
        1028,
        1029,
        5,
        116,
        0,
        0,
        1029,
        1030,
        5,
        114,
        0,
        0,
        1030,
        196,
        1,
        0,
        0,
        0,
        1031,
        1032,
        5,
        115,
        0,
        0,
        1032,
        1033,
        5,
        117,
        0,
        0,
        1033,
        1034,
        5,
        109,
        0,
        0,
        1034,
        198,
        1,
        0,
        0,
        0,
        1035,
        1036,
        5,
        97,
        0,
        0,
        1036,
        1037,
        5,
        118,
        0,
        0,
        1037,
        1038,
        5,
        103,
        0,
        0,
        1038,
        200,
        1,
        0,
        0,
        0,
        1039,
        1040,
        5,
        109,
        0,
        0,
        1040,
        1041,
        5,
        101,
        0,
        0,
        1041,
        1042,
        5,
        100,
        0,
        0,
        1042,
        1043,
        5,
        105,
        0,
        0,
        1043,
        1044,
        5,
        97,
        0,
        0,
        1044,
        1045,
        5,
        110,
        0,
        0,
        1045,
        202,
        1,
        0,
        0,
        0,
        1046,
        1047,
        5,
        99,
        0,
        0,
        1047,
        1048,
        5,
        111,
        0,
        0,
        1048,
        1049,
        5,
        117,
        0,
        0,
        1049,
        1050,
        5,
        110,
        0,
        0,
        1050,
        1051,
        5,
        116,
        0,
        0,
        1051,
        204,
        1,
        0,
        0,
        0,
        1052,
        1053,
        5,
        105,
        0,
        0,
        1053,
        1054,
        5,
        100,
        0,
        0,
        1054,
        1055,
        5,
        101,
        0,
        0,
        1055,
        1056,
        5,
        110,
        0,
        0,
        1056,
        1057,
        5,
        116,
        0,
        0,
        1057,
        1058,
        5,
        105,
        0,
        0,
        1058,
        1059,
        5,
        102,
        0,
        0,
        1059,
        1060,
        5,
        105,
        0,
        0,
        1060,
        1061,
        5,
        101,
        0,
        0,
        1061,
        1062,
        5,
        114,
        0,
        0,
        1062,
        206,
        1,
        0,
        0,
        0,
        1063,
        1064,
        5,
        109,
        0,
        0,
        1064,
        1065,
        5,
        101,
        0,
        0,
        1065,
        1066,
        5,
        97,
        0,
        0,
        1066,
        1067,
        5,
        115,
        0,
        0,
        1067,
        1068,
        5,
        117,
        0,
        0,
        1068,
        1069,
        5,
        114,
        0,
        0,
        1069,
        1070,
        5,
        101,
        0,
        0,
        1070,
        208,
        1,
        0,
        0,
        0,
        1071,
        1072,
        5,
        97,
        0,
        0,
        1072,
        1073,
        5,
        116,
        0,
        0,
        1073,
        1074,
        5,
        116,
        0,
        0,
        1074,
        1075,
        5,
        114,
        0,
        0,
        1075,
        1076,
        5,
        105,
        0,
        0,
        1076,
        1077,
        5,
        98,
        0,
        0,
        1077,
        1078,
        5,
        117,
        0,
        0,
        1078,
        1079,
        5,
        116,
        0,
        0,
        1079,
        1080,
        5,
        101,
        0,
        0,
        1080,
        210,
        1,
        0,
        0,
        0,
        1081,
        1082,
        5,
        102,
        0,
        0,
        1082,
        1083,
        5,
        105,
        0,
        0,
        1083,
        1084,
        5,
        108,
        0,
        0,
        1084,
        1085,
        5,
        116,
        0,
        0,
        1085,
        1086,
        5,
        101,
        0,
        0,
        1086,
        1087,
        5,
        114,
        0,
        0,
        1087,
        212,
        1,
        0,
        0,
        0,
        1088,
        1089,
        5,
        109,
        0,
        0,
        1089,
        1090,
        5,
        101,
        0,
        0,
        1090,
        1091,
        5,
        114,
        0,
        0,
        1091,
        1092,
        5,
        103,
        0,
        0,
        1092,
        1093,
        5,
        101,
        0,
        0,
        1093,
        214,
        1,
        0,
        0,
        0,
        1094,
        1095,
        5,
        101,
        0,
        0,
        1095,
        1096,
        5,
        120,
        0,
        0,
        1096,
        1097,
        5,
        112,
        0,
        0,
        1097,
        216,
        1,
        0,
        0,
        0,
        1098,
        1099,
        5,
        99,
        0,
        0,
        1099,
        1100,
        5,
        111,
        0,
        0,
        1100,
        1101,
        5,
        109,
        0,
        0,
        1101,
        1102,
        5,
        112,
        0,
        0,
        1102,
        1103,
        5,
        111,
        0,
        0,
        1103,
        1104,
        5,
        110,
        0,
        0,
        1104,
        1105,
        5,
        101,
        0,
        0,
        1105,
        1106,
        5,
        110,
        0,
        0,
        1106,
        1107,
        5,
        116,
        0,
        0,
        1107,
        1108,
        5,
        82,
        0,
        0,
        1108,
        1109,
        5,
        111,
        0,
        0,
        1109,
        1110,
        5,
        108,
        0,
        0,
        1110,
        1111,
        5,
        101,
        0,
        0,
        1111,
        218,
        1,
        0,
        0,
        0,
        1112,
        1113,
        5,
        118,
        0,
        0,
        1113,
        1114,
        5,
        105,
        0,
        0,
        1114,
        1115,
        5,
        114,
        0,
        0,
        1115,
        1116,
        5,
        97,
        0,
        0,
        1116,
        1117,
        5,
        108,
        0,
        0,
        1117,
        220,
        1,
        0,
        0,
        0,
        1118,
        1119,
        5,
        109,
        0,
        0,
        1119,
        1120,
        5,
        97,
        0,
        0,
        1120,
        1121,
        5,
        116,
        0,
        0,
        1121,
        1122,
        5,
        99,
        0,
        0,
        1122,
        1123,
        5,
        104,
        0,
        0,
        1123,
        1124,
        5,
        95,
        0,
        0,
        1124,
        1125,
        5,
        99,
        0,
        0,
        1125,
        1126,
        5,
        104,
        0,
        0,
        1126,
        1127,
        5,
        97,
        0,
        0,
        1127,
        1128,
        5,
        114,
        0,
        0,
        1128,
        1129,
        5,
        97,
        0,
        0,
        1129,
        1130,
        5,
        99,
        0,
        0,
        1130,
        1131,
        5,
        116,
        0,
        0,
        1131,
        1132,
        5,
        101,
        0,
        0,
        1132,
        1133,
        5,
        114,
        0,
        0,
        1133,
        1134,
        5,
        115,
        0,
        0,
        1134,
        222,
        1,
        0,
        0,
        0,
        1135,
        1136,
        5,
        116,
        0,
        0,
        1136,
        1137,
        5,
        121,
        0,
        0,
        1137,
        1138,
        5,
        112,
        0,
        0,
        1138,
        1139,
        5,
        101,
        0,
        0,
        1139,
        224,
        1,
        0,
        0,
        0,
        1140,
        1141,
        5,
        110,
        0,
        0,
        1141,
        1142,
        5,
        118,
        0,
        0,
        1142,
        1143,
        5,
        108,
        0,
        0,
        1143,
        226,
        1,
        0,
        0,
        0,
        1144,
        1145,
        5,
        104,
        0,
        0,
        1145,
        1146,
        5,
        105,
        0,
        0,
        1146,
        1147,
        5,
        101,
        0,
        0,
        1147,
        1148,
        5,
        114,
        0,
        0,
        1148,
        1149,
        5,
        97,
        0,
        0,
        1149,
        1150,
        5,
        114,
        0,
        0,
        1150,
        1151,
        5,
        99,
        0,
        0,
        1151,
        1152,
        5,
        104,
        0,
        0,
        1152,
        1153,
        5,
        121,
        0,
        0,
        1153,
        228,
        1,
        0,
        0,
        0,
        1154,
        1155,
        5,
        95,
        0,
        0,
        1155,
        230,
        1,
        0,
        0,
        0,
        1156,
        1157,
        5,
        105,
        0,
        0,
        1157,
        1158,
        5,
        110,
        0,
        0,
        1158,
        1159,
        5,
        118,
        0,
        0,
        1159,
        1160,
        5,
        97,
        0,
        0,
        1160,
        1161,
        5,
        108,
        0,
        0,
        1161,
        1162,
        5,
        105,
        0,
        0,
        1162,
        1163,
        5,
        100,
        0,
        0,
        1163,
        232,
        1,
        0,
        0,
        0,
        1164,
        1165,
        5,
        118,
        0,
        0,
        1165,
        1166,
        5,
        97,
        0,
        0,
        1166,
        1167,
        5,
        108,
        0,
        0,
        1167,
        1168,
        5,
        117,
        0,
        0,
        1168,
        1169,
        5,
        101,
        0,
        0,
        1169,
        1170,
        5,
        100,
        0,
        0,
        1170,
        1171,
        5,
        111,
        0,
        0,
        1171,
        1172,
        5,
        109,
        0,
        0,
        1172,
        1173,
        5,
        97,
        0,
        0,
        1173,
        1174,
        5,
        105,
        0,
        0,
        1174,
        1175,
        5,
        110,
        0,
        0,
        1175,
        234,
        1,
        0,
        0,
        0,
        1176,
        1177,
        5,
        118,
        0,
        0,
        1177,
        1178,
        5,
        97,
        0,
        0,
        1178,
        1179,
        5,
        114,
        0,
        0,
        1179,
        1180,
        5,
        105,
        0,
        0,
        1180,
        1181,
        5,
        97,
        0,
        0,
        1181,
        1182,
        5,
        98,
        0,
        0,
        1182,
        1183,
        5,
        108,
        0,
        0,
        1183,
        1184,
        5,
        101,
        0,
        0,
        1184,
        236,
        1,
        0,
        0,
        0,
        1185,
        1186,
        5,
        100,
        0,
        0,
        1186,
        1187,
        5,
        97,
        0,
        0,
        1187,
        1188,
        5,
        116,
        0,
        0,
        1188,
        1189,
        5,
        97,
        0,
        0,
        1189,
        238,
        1,
        0,
        0,
        0,
        1190,
        1191,
        5,
        115,
        0,
        0,
        1191,
        1192,
        5,
        116,
        0,
        0,
        1192,
        1193,
        5,
        114,
        0,
        0,
        1193,
        1194,
        5,
        117,
        0,
        0,
        1194,
        1195,
        5,
        99,
        0,
        0,
        1195,
        1196,
        5,
        116,
        0,
        0,
        1196,
        1197,
        5,
        117,
        0,
        0,
        1197,
        1198,
        5,
        114,
        0,
        0,
        1198,
        1199,
        5,
        101,
        0,
        0,
        1199,
        240,
        1,
        0,
        0,
        0,
        1200,
        1201,
        5,
        100,
        0,
        0,
        1201,
        1202,
        5,
        97,
        0,
        0,
        1202,
        1203,
        5,
        116,
        0,
        0,
        1203,
        1204,
        5,
        97,
        0,
        0,
        1204,
        1205,
        5,
        115,
        0,
        0,
        1205,
        1206,
        5,
        101,
        0,
        0,
        1206,
        1207,
        5,
        116,
        0,
        0,
        1207,
        242,
        1,
        0,
        0,
        0,
        1208,
        1209,
        5,
        111,
        0,
        0,
        1209,
        1210,
        5,
        112,
        0,
        0,
        1210,
        1211,
        5,
        101,
        0,
        0,
        1211,
        1212,
        5,
        114,
        0,
        0,
        1212,
        1213,
        5,
        97,
        0,
        0,
        1213,
        1214,
        5,
        116,
        0,
        0,
        1214,
        1215,
        5,
        111,
        0,
        0,
        1215,
        1216,
        5,
        114,
        0,
        0,
        1216,
        244,
        1,
        0,
        0,
        0,
        1217,
        1218,
        5,
        100,
        0,
        0,
        1218,
        1219,
        5,
        101,
        0,
        0,
        1219,
        1220,
        5,
        102,
        0,
        0,
        1220,
        1221,
        5,
        105,
        0,
        0,
        1221,
        1222,
        5,
        110,
        0,
        0,
        1222,
        1223,
        5,
        101,
        0,
        0,
        1223,
        246,
        1,
        0,
        0,
        0,
        1224,
        1225,
        5,
        60,
        0,
        0,
        1225,
        1226,
        5,
        45,
        0,
        0,
        1226,
        248,
        1,
        0,
        0,
        0,
        1227,
        1228,
        5,
        100,
        0,
        0,
        1228,
        1229,
        5,
        97,
        0,
        0,
        1229,
        1230,
        5,
        116,
        0,
        0,
        1230,
        1231,
        5,
        97,
        0,
        0,
        1231,
        1232,
        5,
        112,
        0,
        0,
        1232,
        1233,
        5,
        111,
        0,
        0,
        1233,
        1234,
        5,
        105,
        0,
        0,
        1234,
        1235,
        5,
        110,
        0,
        0,
        1235,
        1236,
        5,
        116,
        0,
        0,
        1236,
        250,
        1,
        0,
        0,
        0,
        1237,
        1238,
        5,
        104,
        0,
        0,
        1238,
        1239,
        5,
        105,
        0,
        0,
        1239,
        1240,
        5,
        101,
        0,
        0,
        1240,
        1241,
        5,
        114,
        0,
        0,
        1241,
        1242,
        5,
        97,
        0,
        0,
        1242,
        1243,
        5,
        114,
        0,
        0,
        1243,
        1244,
        5,
        99,
        0,
        0,
        1244,
        1245,
        5,
        104,
        0,
        0,
        1245,
        1246,
        5,
        105,
        0,
        0,
        1246,
        1247,
        5,
        99,
        0,
        0,
        1247,
        1248,
        5,
        97,
        0,
        0,
        1248,
        1249,
        5,
        108,
        0,
        0,
        1249,
        252,
        1,
        0,
        0,
        0,
        1250,
        1251,
        5,
        114,
        0,
        0,
        1251,
        1252,
        5,
        117,
        0,
        0,
        1252,
        1253,
        5,
        108,
        0,
        0,
        1253,
        1254,
        5,
        101,
        0,
        0,
        1254,
        1255,
        5,
        115,
        0,
        0,
        1255,
        1256,
        5,
        101,
        0,
        0,
        1256,
        1257,
        5,
        116,
        0,
        0,
        1257,
        254,
        1,
        0,
        0,
        0,
        1258,
        1259,
        5,
        114,
        0,
        0,
        1259,
        1260,
        5,
        117,
        0,
        0,
        1260,
        1261,
        5,
        108,
        0,
        0,
        1261,
        1262,
        5,
        101,
        0,
        0,
        1262,
        256,
        1,
        0,
        0,
        0,
        1263,
        1264,
        5,
        101,
        0,
        0,
        1264,
        1265,
        5,
        110,
        0,
        0,
        1265,
        1266,
        5,
        100,
        0,
        0,
        1266,
        258,
        1,
        0,
        0,
        0,
        1267,
        1268,
        5,
        97,
        0,
        0,
        1268,
        1269,
        5,
        108,
        0,
        0,
        1269,
        1270,
        5,
        116,
        0,
        0,
        1270,
        1271,
        5,
        101,
        0,
        0,
        1271,
        1272,
        5,
        114,
        0,
        0,
        1272,
        1273,
        5,
        68,
        0,
        0,
        1273,
        1274,
        5,
        97,
        0,
        0,
        1274,
        1275,
        5,
        116,
        0,
        0,
        1275,
        1276,
        5,
        97,
        0,
        0,
        1276,
        1277,
        5,
        115,
        0,
        0,
        1277,
        1278,
        5,
        101,
        0,
        0,
        1278,
        1279,
        5,
        116,
        0,
        0,
        1279,
        260,
        1,
        0,
        0,
        0,
        1280,
        1281,
        5,
        108,
        0,
        0,
        1281,
        1282,
        5,
        116,
        0,
        0,
        1282,
        1283,
        5,
        114,
        0,
        0,
        1283,
        1284,
        5,
        105,
        0,
        0,
        1284,
        1285,
        5,
        109,
        0,
        0,
        1285,
        262,
        1,
        0,
        0,
        0,
        1286,
        1287,
        5,
        114,
        0,
        0,
        1287,
        1288,
        5,
        116,
        0,
        0,
        1288,
        1289,
        5,
        114,
        0,
        0,
        1289,
        1290,
        5,
        105,
        0,
        0,
        1290,
        1291,
        5,
        109,
        0,
        0,
        1291,
        264,
        1,
        0,
        0,
        0,
        1292,
        1293,
        5,
        105,
        0,
        0,
        1293,
        1294,
        5,
        110,
        0,
        0,
        1294,
        1295,
        5,
        115,
        0,
        0,
        1295,
        1296,
        5,
        116,
        0,
        0,
        1296,
        1297,
        5,
        114,
        0,
        0,
        1297,
        266,
        1,
        0,
        0,
        0,
        1298,
        1299,
        5,
        114,
        0,
        0,
        1299,
        1300,
        5,
        101,
        0,
        0,
        1300,
        1301,
        5,
        112,
        0,
        0,
        1301,
        1302,
        5,
        108,
        0,
        0,
        1302,
        1303,
        5,
        97,
        0,
        0,
        1303,
        1304,
        5,
        99,
        0,
        0,
        1304,
        1305,
        5,
        101,
        0,
        0,
        1305,
        268,
        1,
        0,
        0,
        0,
        1306,
        1307,
        5,
        99,
        0,
        0,
        1307,
        1308,
        5,
        101,
        0,
        0,
        1308,
        1309,
        5,
        105,
        0,
        0,
        1309,
        1310,
        5,
        108,
        0,
        0,
        1310,
        270,
        1,
        0,
        0,
        0,
        1311,
        1312,
        5,
        102,
        0,
        0,
        1312,
        1313,
        5,
        108,
        0,
        0,
        1313,
        1314,
        5,
        111,
        0,
        0,
        1314,
        1315,
        5,
        111,
        0,
        0,
        1315,
        1316,
        5,
        114,
        0,
        0,
        1316,
        272,
        1,
        0,
        0,
        0,
        1317,
        1318,
        5,
        115,
        0,
        0,
        1318,
        1319,
        5,
        113,
        0,
        0,
        1319,
        1320,
        5,
        114,
        0,
        0,
        1320,
        1321,
        5,
        116,
        0,
        0,
        1321,
        274,
        1,
        0,
        0,
        0,
        1322,
        1323,
        5,
        97,
        0,
        0,
        1323,
        1324,
        5,
        110,
        0,
        0,
        1324,
        1325,
        5,
        121,
        0,
        0,
        1325,
        276,
        1,
        0,
        0,
        0,
        1326,
        1327,
        5,
        115,
        0,
        0,
        1327,
        1328,
        5,
        101,
        0,
        0,
        1328,
        1329,
        5,
        116,
        0,
        0,
        1329,
        1330,
        5,
        100,
        0,
        0,
        1330,
        1331,
        5,
        105,
        0,
        0,
        1331,
        1332,
        5,
        102,
        0,
        0,
        1332,
        1333,
        5,
        102,
        0,
        0,
        1333,
        278,
        1,
        0,
        0,
        0,
        1334,
        1335,
        5,
        115,
        0,
        0,
        1335,
        1336,
        5,
        116,
        0,
        0,
        1336,
        1337,
        5,
        100,
        0,
        0,
        1337,
        1338,
        5,
        100,
        0,
        0,
        1338,
        1339,
        5,
        101,
        0,
        0,
        1339,
        1340,
        5,
        118,
        0,
        0,
        1340,
        1341,
        5,
        95,
        0,
        0,
        1341,
        1342,
        5,
        112,
        0,
        0,
        1342,
        1343,
        5,
        111,
        0,
        0,
        1343,
        1344,
        5,
        112,
        0,
        0,
        1344,
        280,
        1,
        0,
        0,
        0,
        1345,
        1346,
        5,
        115,
        0,
        0,
        1346,
        1347,
        5,
        116,
        0,
        0,
        1347,
        1348,
        5,
        100,
        0,
        0,
        1348,
        1349,
        5,
        100,
        0,
        0,
        1349,
        1350,
        5,
        101,
        0,
        0,
        1350,
        1351,
        5,
        118,
        0,
        0,
        1351,
        1352,
        5,
        95,
        0,
        0,
        1352,
        1353,
        5,
        115,
        0,
        0,
        1353,
        1354,
        5,
        97,
        0,
        0,
        1354,
        1355,
        5,
        109,
        0,
        0,
        1355,
        1356,
        5,
        112,
        0,
        0,
        1356,
        282,
        1,
        0,
        0,
        0,
        1357,
        1358,
        5,
        118,
        0,
        0,
        1358,
        1359,
        5,
        97,
        0,
        0,
        1359,
        1360,
        5,
        114,
        0,
        0,
        1360,
        1361,
        5,
        95,
        0,
        0,
        1361,
        1362,
        5,
        112,
        0,
        0,
        1362,
        1363,
        5,
        111,
        0,
        0,
        1363,
        1364,
        5,
        112,
        0,
        0,
        1364,
        284,
        1,
        0,
        0,
        0,
        1365,
        1366,
        5,
        118,
        0,
        0,
        1366,
        1367,
        5,
        97,
        0,
        0,
        1367,
        1368,
        5,
        114,
        0,
        0,
        1368,
        1369,
        5,
        95,
        0,
        0,
        1369,
        1370,
        5,
        115,
        0,
        0,
        1370,
        1371,
        5,
        97,
        0,
        0,
        1371,
        1372,
        5,
        109,
        0,
        0,
        1372,
        1373,
        5,
        112,
        0,
        0,
        1373,
        286,
        1,
        0,
        0,
        0,
        1374,
        1375,
        5,
        103,
        0,
        0,
        1375,
        1376,
        5,
        114,
        0,
        0,
        1376,
        1377,
        5,
        111,
        0,
        0,
        1377,
        1378,
        5,
        117,
        0,
        0,
        1378,
        1379,
        5,
        112,
        0,
        0,
        1379,
        288,
        1,
        0,
        0,
        0,
        1380,
        1381,
        5,
        101,
        0,
        0,
        1381,
        1382,
        5,
        120,
        0,
        0,
        1382,
        1383,
        5,
        99,
        0,
        0,
        1383,
        1384,
        5,
        101,
        0,
        0,
        1384,
        1385,
        5,
        112,
        0,
        0,
        1385,
        1386,
        5,
        116,
        0,
        0,
        1386,
        290,
        1,
        0,
        0,
        0,
        1387,
        1388,
        5,
        104,
        0,
        0,
        1388,
        1389,
        5,
        97,
        0,
        0,
        1389,
        1390,
        5,
        118,
        0,
        0,
        1390,
        1391,
        5,
        105,
        0,
        0,
        1391,
        1392,
        5,
        110,
        0,
        0,
        1392,
        1393,
        5,
        103,
        0,
        0,
        1393,
        292,
        1,
        0,
        0,
        0,
        1394,
        1395,
        5,
        102,
        0,
        0,
        1395,
        1396,
        5,
        105,
        0,
        0,
        1396,
        1397,
        5,
        114,
        0,
        0,
        1397,
        1398,
        5,
        115,
        0,
        0,
        1398,
        1399,
        5,
        116,
        0,
        0,
        1399,
        1400,
        5,
        95,
        0,
        0,
        1400,
        1401,
        5,
        118,
        0,
        0,
        1401,
        1402,
        5,
        97,
        0,
        0,
        1402,
        1403,
        5,
        108,
        0,
        0,
        1403,
        1404,
        5,
        117,
        0,
        0,
        1404,
        1405,
        5,
        101,
        0,
        0,
        1405,
        294,
        1,
        0,
        0,
        0,
        1406,
        1407,
        5,
        108,
        0,
        0,
        1407,
        1408,
        5,
        97,
        0,
        0,
        1408,
        1409,
        5,
        115,
        0,
        0,
        1409,
        1410,
        5,
        116,
        0,
        0,
        1410,
        1411,
        5,
        95,
        0,
        0,
        1411,
        1412,
        5,
        118,
        0,
        0,
        1412,
        1413,
        5,
        97,
        0,
        0,
        1413,
        1414,
        5,
        108,
        0,
        0,
        1414,
        1415,
        5,
        117,
        0,
        0,
        1415,
        1416,
        5,
        101,
        0,
        0,
        1416,
        296,
        1,
        0,
        0,
        0,
        1417,
        1418,
        5,
        108,
        0,
        0,
        1418,
        1419,
        5,
        97,
        0,
        0,
        1419,
        1420,
        5,
        103,
        0,
        0,
        1420,
        298,
        1,
        0,
        0,
        0,
        1421,
        1422,
        5,
        108,
        0,
        0,
        1422,
        1423,
        5,
        101,
        0,
        0,
        1423,
        1424,
        5,
        97,
        0,
        0,
        1424,
        1425,
        5,
        100,
        0,
        0,
        1425,
        300,
        1,
        0,
        0,
        0,
        1426,
        1427,
        5,
        114,
        0,
        0,
        1427,
        1428,
        5,
        97,
        0,
        0,
        1428,
        1429,
        5,
        116,
        0,
        0,
        1429,
        1430,
        5,
        105,
        0,
        0,
        1430,
        1431,
        5,
        111,
        0,
        0,
        1431,
        1432,
        5,
        95,
        0,
        0,
        1432,
        1433,
        5,
        116,
        0,
        0,
        1433,
        1434,
        5,
        111,
        0,
        0,
        1434,
        1435,
        5,
        95,
        0,
        0,
        1435,
        1436,
        5,
        114,
        0,
        0,
        1436,
        1437,
        5,
        101,
        0,
        0,
        1437,
        1438,
        5,
        112,
        0,
        0,
        1438,
        1439,
        5,
        111,
        0,
        0,
        1439,
        1440,
        5,
        114,
        0,
        0,
        1440,
        1441,
        5,
        116,
        0,
        0,
        1441,
        302,
        1,
        0,
        0,
        0,
        1442,
        1443,
        5,
        111,
        0,
        0,
        1443,
        1444,
        5,
        118,
        0,
        0,
        1444,
        1445,
        5,
        101,
        0,
        0,
        1445,
        1446,
        5,
        114,
        0,
        0,
        1446,
        304,
        1,
        0,
        0,
        0,
        1447,
        1448,
        5,
        112,
        0,
        0,
        1448,
        1449,
        5,
        114,
        0,
        0,
        1449,
        1450,
        5,
        101,
        0,
        0,
        1450,
        1451,
        5,
        99,
        0,
        0,
        1451,
        1452,
        5,
        101,
        0,
        0,
        1452,
        1453,
        5,
        100,
        0,
        0,
        1453,
        1454,
        5,
        105,
        0,
        0,
        1454,
        1455,
        5,
        110,
        0,
        0,
        1455,
        1456,
        5,
        103,
        0,
        0,
        1456,
        306,
        1,
        0,
        0,
        0,
        1457,
        1458,
        5,
        102,
        0,
        0,
        1458,
        1459,
        5,
        111,
        0,
        0,
        1459,
        1460,
        5,
        108,
        0,
        0,
        1460,
        1461,
        5,
        108,
        0,
        0,
        1461,
        1462,
        5,
        111,
        0,
        0,
        1462,
        1463,
        5,
        119,
        0,
        0,
        1463,
        1464,
        5,
        105,
        0,
        0,
        1464,
        1465,
        5,
        110,
        0,
        0,
        1465,
        1466,
        5,
        103,
        0,
        0,
        1466,
        308,
        1,
        0,
        0,
        0,
        1467,
        1468,
        5,
        117,
        0,
        0,
        1468,
        1469,
        5,
        110,
        0,
        0,
        1469,
        1470,
        5,
        98,
        0,
        0,
        1470,
        1471,
        5,
        111,
        0,
        0,
        1471,
        1472,
        5,
        117,
        0,
        0,
        1472,
        1473,
        5,
        110,
        0,
        0,
        1473,
        1474,
        5,
        100,
        0,
        0,
        1474,
        1475,
        5,
        101,
        0,
        0,
        1475,
        1476,
        5,
        100,
        0,
        0,
        1476,
        310,
        1,
        0,
        0,
        0,
        1477,
        1478,
        5,
        112,
        0,
        0,
        1478,
        1479,
        5,
        97,
        0,
        0,
        1479,
        1480,
        5,
        114,
        0,
        0,
        1480,
        1481,
        5,
        116,
        0,
        0,
        1481,
        1482,
        5,
        105,
        0,
        0,
        1482,
        1483,
        5,
        116,
        0,
        0,
        1483,
        1484,
        5,
        105,
        0,
        0,
        1484,
        1485,
        5,
        111,
        0,
        0,
        1485,
        1486,
        5,
        110,
        0,
        0,
        1486,
        312,
        1,
        0,
        0,
        0,
        1487,
        1488,
        5,
        114,
        0,
        0,
        1488,
        1489,
        5,
        111,
        0,
        0,
        1489,
        1490,
        5,
        119,
        0,
        0,
        1490,
        1491,
        5,
        115,
        0,
        0,
        1491,
        314,
        1,
        0,
        0,
        0,
        1492,
        1493,
        5,
        114,
        0,
        0,
        1493,
        1494,
        5,
        97,
        0,
        0,
        1494,
        1495,
        5,
        110,
        0,
        0,
        1495,
        1496,
        5,
        103,
        0,
        0,
        1496,
        1497,
        5,
        101,
        0,
        0,
        1497,
        316,
        1,
        0,
        0,
        0,
        1498,
        1499,
        5,
        99,
        0,
        0,
        1499,
        1500,
        5,
        117,
        0,
        0,
        1500,
        1501,
        5,
        114,
        0,
        0,
        1501,
        1502,
        5,
        114,
        0,
        0,
        1502,
        1503,
        5,
        101,
        0,
        0,
        1503,
        1504,
        5,
        110,
        0,
        0,
        1504,
        1505,
        5,
        116,
        0,
        0,
        1505,
        318,
        1,
        0,
        0,
        0,
        1506,
        1507,
        5,
        118,
        0,
        0,
        1507,
        1508,
        5,
        97,
        0,
        0,
        1508,
        1509,
        5,
        108,
        0,
        0,
        1509,
        1510,
        5,
        105,
        0,
        0,
        1510,
        1511,
        5,
        100,
        0,
        0,
        1511,
        320,
        1,
        0,
        0,
        0,
        1512,
        1513,
        5,
        102,
        0,
        0,
        1513,
        1514,
        5,
        105,
        0,
        0,
        1514,
        1515,
        5,
        108,
        0,
        0,
        1515,
        1516,
        5,
        108,
        0,
        0,
        1516,
        1517,
        5,
        95,
        0,
        0,
        1517,
        1518,
        5,
        116,
        0,
        0,
        1518,
        1519,
        5,
        105,
        0,
        0,
        1519,
        1520,
        5,
        109,
        0,
        0,
        1520,
        1521,
        5,
        101,
        0,
        0,
        1521,
        1522,
        5,
        95,
        0,
        0,
        1522,
        1523,
        5,
        115,
        0,
        0,
        1523,
        1524,
        5,
        101,
        0,
        0,
        1524,
        1525,
        5,
        114,
        0,
        0,
        1525,
        1526,
        5,
        105,
        0,
        0,
        1526,
        1527,
        5,
        101,
        0,
        0,
        1527,
        1528,
        5,
        115,
        0,
        0,
        1528,
        322,
        1,
        0,
        0,
        0,
        1529,
        1530,
        5,
        102,
        0,
        0,
        1530,
        1531,
        5,
        108,
        0,
        0,
        1531,
        1532,
        5,
        111,
        0,
        0,
        1532,
        1533,
        5,
        119,
        0,
        0,
        1533,
        1534,
        5,
        95,
        0,
        0,
        1534,
        1535,
        5,
        116,
        0,
        0,
        1535,
        1536,
        5,
        111,
        0,
        0,
        1536,
        1537,
        5,
        95,
        0,
        0,
        1537,
        1538,
        5,
        115,
        0,
        0,
        1538,
        1539,
        5,
        116,
        0,
        0,
        1539,
        1540,
        5,
        111,
        0,
        0,
        1540,
        1541,
        5,
        99,
        0,
        0,
        1541,
        1542,
        5,
        107,
        0,
        0,
        1542,
        324,
        1,
        0,
        0,
        0,
        1543,
        1544,
        5,
        115,
        0,
        0,
        1544,
        1545,
        5,
        116,
        0,
        0,
        1545,
        1546,
        5,
        111,
        0,
        0,
        1546,
        1547,
        5,
        99,
        0,
        0,
        1547,
        1548,
        5,
        107,
        0,
        0,
        1548,
        1549,
        5,
        95,
        0,
        0,
        1549,
        1550,
        5,
        116,
        0,
        0,
        1550,
        1551,
        5,
        111,
        0,
        0,
        1551,
        1552,
        5,
        95,
        0,
        0,
        1552,
        1553,
        5,
        102,
        0,
        0,
        1553,
        1554,
        5,
        108,
        0,
        0,
        1554,
        1555,
        5,
        111,
        0,
        0,
        1555,
        1556,
        5,
        119,
        0,
        0,
        1556,
        326,
        1,
        0,
        0,
        0,
        1557,
        1558,
        5,
        116,
        0,
        0,
        1558,
        1559,
        5,
        105,
        0,
        0,
        1559,
        1560,
        5,
        109,
        0,
        0,
        1560,
        1561,
        5,
        101,
        0,
        0,
        1561,
        1562,
        5,
        115,
        0,
        0,
        1562,
        1563,
        5,
        104,
        0,
        0,
        1563,
        1564,
        5,
        105,
        0,
        0,
        1564,
        1565,
        5,
        102,
        0,
        0,
        1565,
        1566,
        5,
        116,
        0,
        0,
        1566,
        328,
        1,
        0,
        0,
        0,
        1567,
        1568,
        5,
        109,
        0,
        0,
        1568,
        1569,
        5,
        101,
        0,
        0,
        1569,
        1570,
        5,
        97,
        0,
        0,
        1570,
        1571,
        5,
        115,
        0,
        0,
        1571,
        1572,
        5,
        117,
        0,
        0,
        1572,
        1573,
        5,
        114,
        0,
        0,
        1573,
        1574,
        5,
        101,
        0,
        0,
        1574,
        1575,
        5,
        115,
        0,
        0,
        1575,
        330,
        1,
        0,
        0,
        0,
        1576,
        1577,
        5,
        110,
        0,
        0,
        1577,
        1578,
        5,
        111,
        0,
        0,
        1578,
        1579,
        5,
        95,
        0,
        0,
        1579,
        1580,
        5,
        109,
        0,
        0,
        1580,
        1581,
        5,
        101,
        0,
        0,
        1581,
        1582,
        5,
        97,
        0,
        0,
        1582,
        1583,
        5,
        115,
        0,
        0,
        1583,
        1584,
        5,
        117,
        0,
        0,
        1584,
        1585,
        5,
        114,
        0,
        0,
        1585,
        1586,
        5,
        101,
        0,
        0,
        1586,
        1587,
        5,
        115,
        0,
        0,
        1587,
        332,
        1,
        0,
        0,
        0,
        1588,
        1589,
        5,
        99,
        0,
        0,
        1589,
        1590,
        5,
        111,
        0,
        0,
        1590,
        1591,
        5,
        110,
        0,
        0,
        1591,
        1592,
        5,
        100,
        0,
        0,
        1592,
        1593,
        5,
        105,
        0,
        0,
        1593,
        1594,
        5,
        116,
        0,
        0,
        1594,
        1595,
        5,
        105,
        0,
        0,
        1595,
        1596,
        5,
        111,
        0,
        0,
        1596,
        1597,
        5,
        110,
        0,
        0,
        1597,
        334,
        1,
        0,
        0,
        0,
        1598,
        1599,
        5,
        98,
        0,
        0,
        1599,
        1600,
        5,
        111,
        0,
        0,
        1600,
        1601,
        5,
        111,
        0,
        0,
        1601,
        1602,
        5,
        108,
        0,
        0,
        1602,
        1603,
        5,
        101,
        0,
        0,
        1603,
        1604,
        5,
        97,
        0,
        0,
        1604,
        1605,
        5,
        110,
        0,
        0,
        1605,
        336,
        1,
        0,
        0,
        0,
        1606,
        1607,
        5,
        100,
        0,
        0,
        1607,
        1608,
        5,
        97,
        0,
        0,
        1608,
        1609,
        5,
        116,
        0,
        0,
        1609,
        1610,
        5,
        101,
        0,
        0,
        1610,
        338,
        1,
        0,
        0,
        0,
        1611,
        1612,
        5,
        116,
        0,
        0,
        1612,
        1613,
        5,
        105,
        0,
        0,
        1613,
        1614,
        5,
        109,
        0,
        0,
        1614,
        1615,
        5,
        101,
        0,
        0,
        1615,
        1616,
        5,
        95,
        0,
        0,
        1616,
        1617,
        5,
        112,
        0,
        0,
        1617,
        1618,
        5,
        101,
        0,
        0,
        1618,
        1619,
        5,
        114,
        0,
        0,
        1619,
        1620,
        5,
        105,
        0,
        0,
        1620,
        1621,
        5,
        111,
        0,
        0,
        1621,
        1622,
        5,
        100,
        0,
        0,
        1622,
        340,
        1,
        0,
        0,
        0,
        1623,
        1624,
        5,
        110,
        0,
        0,
        1624,
        1625,
        5,
        117,
        0,
        0,
        1625,
        1626,
        5,
        109,
        0,
        0,
        1626,
        1627,
        5,
        98,
        0,
        0,
        1627,
        1628,
        5,
        101,
        0,
        0,
        1628,
        1629,
        5,
        114,
        0,
        0,
        1629,
        342,
        1,
        0,
        0,
        0,
        1630,
        1631,
        5,
        115,
        0,
        0,
        1631,
        1632,
        5,
        116,
        0,
        0,
        1632,
        1633,
        5,
        114,
        0,
        0,
        1633,
        1634,
        5,
        105,
        0,
        0,
        1634,
        1635,
        5,
        110,
        0,
        0,
        1635,
        1636,
        5,
        103,
        0,
        0,
        1636,
        344,
        1,
        0,
        0,
        0,
        1637,
        1638,
        5,
        116,
        0,
        0,
        1638,
        1639,
        5,
        105,
        0,
        0,
        1639,
        1640,
        5,
        109,
        0,
        0,
        1640,
        1641,
        5,
        101,
        0,
        0,
        1641,
        346,
        1,
        0,
        0,
        0,
        1642,
        1643,
        5,
        105,
        0,
        0,
        1643,
        1644,
        5,
        110,
        0,
        0,
        1644,
        1645,
        5,
        116,
        0,
        0,
        1645,
        1646,
        5,
        101,
        0,
        0,
        1646,
        1647,
        5,
        103,
        0,
        0,
        1647,
        1648,
        5,
        101,
        0,
        0,
        1648,
        1649,
        5,
        114,
        0,
        0,
        1649,
        348,
        1,
        0,
        0,
        0,
        1650,
        1651,
        5,
        102,
        0,
        0,
        1651,
        1652,
        5,
        108,
        0,
        0,
        1652,
        1653,
        5,
        111,
        0,
        0,
        1653,
        1654,
        5,
        97,
        0,
        0,
        1654,
        1655,
        5,
        116,
        0,
        0,
        1655,
        350,
        1,
        0,
        0,
        0,
        1656,
        1657,
        5,
        108,
        0,
        0,
        1657,
        1658,
        5,
        105,
        0,
        0,
        1658,
        1659,
        5,
        115,
        0,
        0,
        1659,
        1660,
        5,
        116,
        0,
        0,
        1660,
        352,
        1,
        0,
        0,
        0,
        1661,
        1662,
        5,
        114,
        0,
        0,
        1662,
        1663,
        5,
        101,
        0,
        0,
        1663,
        1664,
        5,
        99,
        0,
        0,
        1664,
        1665,
        5,
        111,
        0,
        0,
        1665,
        1666,
        5,
        114,
        0,
        0,
        1666,
        1667,
        5,
        100,
        0,
        0,
        1667,
        354,
        1,
        0,
        0,
        0,
        1668,
        1669,
        5,
        114,
        0,
        0,
        1669,
        1670,
        5,
        101,
        0,
        0,
        1670,
        1671,
        5,
        115,
        0,
        0,
        1671,
        1672,
        5,
        116,
        0,
        0,
        1672,
        1673,
        5,
        114,
        0,
        0,
        1673,
        1674,
        5,
        105,
        0,
        0,
        1674,
        1675,
        5,
        99,
        0,
        0,
        1675,
        1676,
        5,
        116,
        0,
        0,
        1676,
        356,
        1,
        0,
        0,
        0,
        1677,
        1678,
        5,
        121,
        0,
        0,
        1678,
        1679,
        5,
        121,
        0,
        0,
        1679,
        1680,
        5,
        121,
        0,
        0,
        1680,
        1681,
        5,
        121,
        0,
        0,
        1681,
        358,
        1,
        0,
        0,
        0,
        1682,
        1683,
        5,
        109,
        0,
        0,
        1683,
        1684,
        5,
        109,
        0,
        0,
        1684,
        360,
        1,
        0,
        0,
        0,
        1685,
        1686,
        5,
        100,
        0,
        0,
        1686,
        1687,
        5,
        100,
        0,
        0,
        1687,
        362,
        1,
        0,
        0,
        0,
        1688,
        1689,
        5,
        109,
        0,
        0,
        1689,
        1690,
        5,
        97,
        0,
        0,
        1690,
        1691,
        5,
        120,
        0,
        0,
        1691,
        1692,
        5,
        76,
        0,
        0,
        1692,
        1693,
        5,
        101,
        0,
        0,
        1693,
        1694,
        5,
        110,
        0,
        0,
        1694,
        1695,
        5,
        103,
        0,
        0,
        1695,
        1696,
        5,
        116,
        0,
        0,
        1696,
        1697,
        5,
        104,
        0,
        0,
        1697,
        364,
        1,
        0,
        0,
        0,
        1698,
        1699,
        5,
        114,
        0,
        0,
        1699,
        1700,
        5,
        101,
        0,
        0,
        1700,
        1701,
        5,
        103,
        0,
        0,
        1701,
        1702,
        5,
        101,
        0,
        0,
        1702,
        1703,
        5,
        120,
        0,
        0,
        1703,
        1704,
        5,
        112,
        0,
        0,
        1704,
        366,
        1,
        0,
        0,
        0,
        1705,
        1706,
        5,
        105,
        0,
        0,
        1706,
        1707,
        5,
        115,
        0,
        0,
        1707,
        368,
        1,
        0,
        0,
        0,
        1708,
        1709,
        5,
        119,
        0,
        0,
        1709,
        1710,
        5,
        104,
        0,
        0,
        1710,
        1711,
        5,
        101,
        0,
        0,
        1711,
        1712,
        5,
        110,
        0,
        0,
        1712,
        370,
        1,
        0,
        0,
        0,
        1713,
        1714,
        5,
        102,
        0,
        0,
        1714,
        1715,
        5,
        114,
        0,
        0,
        1715,
        1716,
        5,
        111,
        0,
        0,
        1716,
        1717,
        5,
        109,
        0,
        0,
        1717,
        372,
        1,
        0,
        0,
        0,
        1718,
        1719,
        5,
        97,
        0,
        0,
        1719,
        1720,
        5,
        103,
        0,
        0,
        1720,
        1721,
        5,
        103,
        0,
        0,
        1721,
        1722,
        5,
        114,
        0,
        0,
        1722,
        1723,
        5,
        101,
        0,
        0,
        1723,
        1724,
        5,
        103,
        0,
        0,
        1724,
        1725,
        5,
        97,
        0,
        0,
        1725,
        1726,
        5,
        116,
        0,
        0,
        1726,
        1727,
        5,
        101,
        0,
        0,
        1727,
        1728,
        5,
        115,
        0,
        0,
        1728,
        374,
        1,
        0,
        0,
        0,
        1729,
        1730,
        5,
        112,
        0,
        0,
        1730,
        1731,
        5,
        111,
        0,
        0,
        1731,
        1732,
        5,
        105,
        0,
        0,
        1732,
        1733,
        5,
        110,
        0,
        0,
        1733,
        1734,
        5,
        116,
        0,
        0,
        1734,
        1735,
        5,
        115,
        0,
        0,
        1735,
        376,
        1,
        0,
        0,
        0,
        1736,
        1737,
        5,
        112,
        0,
        0,
        1737,
        1738,
        5,
        111,
        0,
        0,
        1738,
        1739,
        5,
        105,
        0,
        0,
        1739,
        1740,
        5,
        110,
        0,
        0,
        1740,
        1741,
        5,
        116,
        0,
        0,
        1741,
        378,
        1,
        0,
        0,
        0,
        1742,
        1743,
        5,
        116,
        0,
        0,
        1743,
        1744,
        5,
        111,
        0,
        0,
        1744,
        1745,
        5,
        116,
        0,
        0,
        1745,
        1746,
        5,
        97,
        0,
        0,
        1746,
        1747,
        5,
        108,
        0,
        0,
        1747,
        380,
        1,
        0,
        0,
        0,
        1748,
        1749,
        5,
        112,
        0,
        0,
        1749,
        1750,
        5,
        97,
        0,
        0,
        1750,
        1751,
        5,
        114,
        0,
        0,
        1751,
        1752,
        5,
        116,
        0,
        0,
        1752,
        1753,
        5,
        105,
        0,
        0,
        1753,
        1754,
        5,
        97,
        0,
        0,
        1754,
        1755,
        5,
        108,
        0,
        0,
        1755,
        382,
        1,
        0,
        0,
        0,
        1756,
        1757,
        5,
        97,
        0,
        0,
        1757,
        1758,
        5,
        108,
        0,
        0,
        1758,
        1759,
        5,
        119,
        0,
        0,
        1759,
        1760,
        5,
        97,
        0,
        0,
        1760,
        1761,
        5,
        121,
        0,
        0,
        1761,
        1762,
        5,
        115,
        0,
        0,
        1762,
        384,
        1,
        0,
        0,
        0,
        1763,
        1764,
        5,
        105,
        0,
        0,
        1764,
        1765,
        5,
        110,
        0,
        0,
        1765,
        1766,
        5,
        110,
        0,
        0,
        1766,
        1767,
        5,
        101,
        0,
        0,
        1767,
        1768,
        5,
        114,
        0,
        0,
        1768,
        1769,
        5,
        95,
        0,
        0,
        1769,
        1770,
        5,
        106,
        0,
        0,
        1770,
        1771,
        5,
        111,
        0,
        0,
        1771,
        1772,
        5,
        105,
        0,
        0,
        1772,
        1773,
        5,
        110,
        0,
        0,
        1773,
        386,
        1,
        0,
        0,
        0,
        1774,
        1775,
        5,
        108,
        0,
        0,
        1775,
        1776,
        5,
        101,
        0,
        0,
        1776,
        1777,
        5,
        102,
        0,
        0,
        1777,
        1778,
        5,
        116,
        0,
        0,
        1778,
        1779,
        5,
        95,
        0,
        0,
        1779,
        1780,
        5,
        106,
        0,
        0,
        1780,
        1781,
        5,
        111,
        0,
        0,
        1781,
        1782,
        5,
        105,
        0,
        0,
        1782,
        1783,
        5,
        110,
        0,
        0,
        1783,
        388,
        1,
        0,
        0,
        0,
        1784,
        1785,
        5,
        99,
        0,
        0,
        1785,
        1786,
        5,
        114,
        0,
        0,
        1786,
        1787,
        5,
        111,
        0,
        0,
        1787,
        1788,
        5,
        115,
        0,
        0,
        1788,
        1789,
        5,
        115,
        0,
        0,
        1789,
        1790,
        5,
        95,
        0,
        0,
        1790,
        1791,
        5,
        106,
        0,
        0,
        1791,
        1792,
        5,
        111,
        0,
        0,
        1792,
        1793,
        5,
        105,
        0,
        0,
        1793,
        1794,
        5,
        110,
        0,
        0,
        1794,
        390,
        1,
        0,
        0,
        0,
        1795,
        1796,
        5,
        102,
        0,
        0,
        1796,
        1797,
        5,
        117,
        0,
        0,
        1797,
        1798,
        5,
        108,
        0,
        0,
        1798,
        1799,
        5,
        108,
        0,
        0,
        1799,
        1800,
        5,
        95,
        0,
        0,
        1800,
        1801,
        5,
        106,
        0,
        0,
        1801,
        1802,
        5,
        111,
        0,
        0,
        1802,
        1803,
        5,
        105,
        0,
        0,
        1803,
        1804,
        5,
        110,
        0,
        0,
        1804,
        392,
        1,
        0,
        0,
        0,
        1805,
        1806,
        5,
        109,
        0,
        0,
        1806,
        1807,
        5,
        97,
        0,
        0,
        1807,
        1808,
        5,
        112,
        0,
        0,
        1808,
        1809,
        5,
        115,
        0,
        0,
        1809,
        1810,
        5,
        95,
        0,
        0,
        1810,
        1811,
        5,
        102,
        0,
        0,
        1811,
        1812,
        5,
        114,
        0,
        0,
        1812,
        1813,
        5,
        111,
        0,
        0,
        1813,
        1814,
        5,
        109,
        0,
        0,
        1814,
        394,
        1,
        0,
        0,
        0,
        1815,
        1816,
        5,
        109,
        0,
        0,
        1816,
        1817,
        5,
        97,
        0,
        0,
        1817,
        1818,
        5,
        112,
        0,
        0,
        1818,
        1819,
        5,
        115,
        0,
        0,
        1819,
        1820,
        5,
        95,
        0,
        0,
        1820,
        1821,
        5,
        116,
        0,
        0,
        1821,
        1822,
        5,
        111,
        0,
        0,
        1822,
        396,
        1,
        0,
        0,
        0,
        1823,
        1824,
        5,
        109,
        0,
        0,
        1824,
        1825,
        5,
        97,
        0,
        0,
        1825,
        1826,
        5,
        112,
        0,
        0,
        1826,
        1827,
        5,
        95,
        0,
        0,
        1827,
        1828,
        5,
        116,
        0,
        0,
        1828,
        1829,
        5,
        111,
        0,
        0,
        1829,
        398,
        1,
        0,
        0,
        0,
        1830,
        1831,
        5,
        109,
        0,
        0,
        1831,
        1832,
        5,
        97,
        0,
        0,
        1832,
        1833,
        5,
        112,
        0,
        0,
        1833,
        1834,
        5,
        95,
        0,
        0,
        1834,
        1835,
        5,
        102,
        0,
        0,
        1835,
        1836,
        5,
        114,
        0,
        0,
        1836,
        1837,
        5,
        111,
        0,
        0,
        1837,
        1838,
        5,
        109,
        0,
        0,
        1838,
        400,
        1,
        0,
        0,
        0,
        1839,
        1840,
        5,
        114,
        0,
        0,
        1840,
        1841,
        5,
        101,
        0,
        0,
        1841,
        1842,
        5,
        116,
        0,
        0,
        1842,
        1843,
        5,
        117,
        0,
        0,
        1843,
        1844,
        5,
        114,
        0,
        0,
        1844,
        1845,
        5,
        110,
        0,
        0,
        1845,
        1846,
        5,
        115,
        0,
        0,
        1846,
        402,
        1,
        0,
        0,
        0,
        1847,
        1848,
        5,
        112,
        0,
        0,
        1848,
        1849,
        5,
        105,
        0,
        0,
        1849,
        1850,
        5,
        118,
        0,
        0,
        1850,
        1851,
        5,
        111,
        0,
        0,
        1851,
        1852,
        5,
        116,
        0,
        0,
        1852,
        404,
        1,
        0,
        0,
        0,
        1853,
        1854,
        5,
        99,
        0,
        0,
        1854,
        1855,
        5,
        117,
        0,
        0,
        1855,
        1856,
        5,
        115,
        0,
        0,
        1856,
        1857,
        5,
        116,
        0,
        0,
        1857,
        1858,
        5,
        111,
        0,
        0,
        1858,
        1859,
        5,
        109,
        0,
        0,
        1859,
        1860,
        5,
        80,
        0,
        0,
        1860,
        1861,
        5,
        105,
        0,
        0,
        1861,
        1862,
        5,
        118,
        0,
        0,
        1862,
        1863,
        5,
        111,
        0,
        0,
        1863,
        1864,
        5,
        116,
        0,
        0,
        1864,
        406,
        1,
        0,
        0,
        0,
        1865,
        1866,
        5,
        117,
        0,
        0,
        1866,
        1867,
        5,
        110,
        0,
        0,
        1867,
        1868,
        5,
        112,
        0,
        0,
        1868,
        1869,
        5,
        105,
        0,
        0,
        1869,
        1870,
        5,
        118,
        0,
        0,
        1870,
        1871,
        5,
        111,
        0,
        0,
        1871,
        1872,
        5,
        116,
        0,
        0,
        1872,
        408,
        1,
        0,
        0,
        0,
        1873,
        1874,
        5,
        115,
        0,
        0,
        1874,
        1875,
        5,
        117,
        0,
        0,
        1875,
        1876,
        5,
        98,
        0,
        0,
        1876,
        410,
        1,
        0,
        0,
        0,
        1877,
        1878,
        5,
        97,
        0,
        0,
        1878,
        1879,
        5,
        112,
        0,
        0,
        1879,
        1880,
        5,
        112,
        0,
        0,
        1880,
        1881,
        5,
        108,
        0,
        0,
        1881,
        1882,
        5,
        121,
        0,
        0,
        1882,
        412,
        1,
        0,
        0,
        0,
        1883,
        1884,
        5,
        99,
        0,
        0,
        1884,
        1885,
        5,
        111,
        0,
        0,
        1885,
        1886,
        5,
        110,
        0,
        0,
        1886,
        1887,
        5,
        100,
        0,
        0,
        1887,
        1888,
        5,
        105,
        0,
        0,
        1888,
        1889,
        5,
        116,
        0,
        0,
        1889,
        1890,
        5,
        105,
        0,
        0,
        1890,
        1891,
        5,
        111,
        0,
        0,
        1891,
        1892,
        5,
        110,
        0,
        0,
        1892,
        1893,
        5,
        101,
        0,
        0,
        1893,
        1894,
        5,
        100,
        0,
        0,
        1894,
        414,
        1,
        0,
        0,
        0,
        1895,
        1896,
        5,
        112,
        0,
        0,
        1896,
        1897,
        5,
        101,
        0,
        0,
        1897,
        1898,
        5,
        114,
        0,
        0,
        1898,
        1899,
        5,
        105,
        0,
        0,
        1899,
        1900,
        5,
        111,
        0,
        0,
        1900,
        1901,
        5,
        100,
        0,
        0,
        1901,
        1902,
        5,
        95,
        0,
        0,
        1902,
        1903,
        5,
        105,
        0,
        0,
        1903,
        1904,
        5,
        110,
        0,
        0,
        1904,
        1905,
        5,
        100,
        0,
        0,
        1905,
        1906,
        5,
        105,
        0,
        0,
        1906,
        1907,
        5,
        99,
        0,
        0,
        1907,
        1908,
        5,
        97,
        0,
        0,
        1908,
        1909,
        5,
        116,
        0,
        0,
        1909,
        1910,
        5,
        111,
        0,
        0,
        1910,
        1911,
        5,
        114,
        0,
        0,
        1911,
        416,
        1,
        0,
        0,
        0,
        1912,
        1913,
        5,
        115,
        0,
        0,
        1913,
        1914,
        5,
        105,
        0,
        0,
        1914,
        1915,
        5,
        110,
        0,
        0,
        1915,
        1916,
        5,
        103,
        0,
        0,
        1916,
        1917,
        5,
        108,
        0,
        0,
        1917,
        1918,
        5,
        101,
        0,
        0,
        1918,
        418,
        1,
        0,
        0,
        0,
        1919,
        1920,
        5,
        100,
        0,
        0,
        1920,
        1921,
        5,
        117,
        0,
        0,
        1921,
        1922,
        5,
        114,
        0,
        0,
        1922,
        1923,
        5,
        97,
        0,
        0,
        1923,
        1924,
        5,
        116,
        0,
        0,
        1924,
        1925,
        5,
        105,
        0,
        0,
        1925,
        1926,
        5,
        111,
        0,
        0,
        1926,
        1927,
        5,
        110,
        0,
        0,
        1927,
        420,
        1,
        0,
        0,
        0,
        1928,
        1929,
        5,
        116,
        0,
        0,
        1929,
        1930,
        5,
        105,
        0,
        0,
        1930,
        1931,
        5,
        109,
        0,
        0,
        1931,
        1932,
        5,
        101,
        0,
        0,
        1932,
        1933,
        5,
        95,
        0,
        0,
        1933,
        1934,
        5,
        97,
        0,
        0,
        1934,
        1935,
        5,
        103,
        0,
        0,
        1935,
        1936,
        5,
        103,
        0,
        0,
        1936,
        422,
        1,
        0,
        0,
        0,
        1937,
        1938,
        5,
        117,
        0,
        0,
        1938,
        1939,
        5,
        110,
        0,
        0,
        1939,
        1940,
        5,
        105,
        0,
        0,
        1940,
        1941,
        5,
        116,
        0,
        0,
        1941,
        424,
        1,
        0,
        0,
        0,
        1942,
        1943,
        5,
        86,
        0,
        0,
        1943,
        1944,
        5,
        97,
        0,
        0,
        1944,
        1945,
        5,
        108,
        0,
        0,
        1945,
        1946,
        5,
        117,
        0,
        0,
        1946,
        1947,
        5,
        101,
        0,
        0,
        1947,
        426,
        1,
        0,
        0,
        0,
        1948,
        1949,
        5,
        118,
        0,
        0,
        1949,
        1950,
        5,
        97,
        0,
        0,
        1950,
        1951,
        5,
        108,
        0,
        0,
        1951,
        1952,
        5,
        117,
        0,
        0,
        1952,
        1953,
        5,
        101,
        0,
        0,
        1953,
        1954,
        5,
        100,
        0,
        0,
        1954,
        1955,
        5,
        111,
        0,
        0,
        1955,
        1956,
        5,
        109,
        0,
        0,
        1956,
        1957,
        5,
        97,
        0,
        0,
        1957,
        1958,
        5,
        105,
        0,
        0,
        1958,
        1959,
        5,
        110,
        0,
        0,
        1959,
        1960,
        5,
        115,
        0,
        0,
        1960,
        428,
        1,
        0,
        0,
        0,
        1961,
        1962,
        5,
        118,
        0,
        0,
        1962,
        1963,
        5,
        97,
        0,
        0,
        1963,
        1964,
        5,
        114,
        0,
        0,
        1964,
        1965,
        5,
        105,
        0,
        0,
        1965,
        1966,
        5,
        97,
        0,
        0,
        1966,
        1967,
        5,
        98,
        0,
        0,
        1967,
        1968,
        5,
        108,
        0,
        0,
        1968,
        1969,
        5,
        101,
        0,
        0,
        1969,
        1970,
        5,
        115,
        0,
        0,
        1970,
        430,
        1,
        0,
        0,
        0,
        1971,
        1972,
        5,
        105,
        0,
        0,
        1972,
        1973,
        5,
        110,
        0,
        0,
        1973,
        1974,
        5,
        112,
        0,
        0,
        1974,
        1975,
        5,
        117,
        0,
        0,
        1975,
        1976,
        5,
        116,
        0,
        0,
        1976,
        432,
        1,
        0,
        0,
        0,
        1977,
        1978,
        5,
        111,
        0,
        0,
        1978,
        1979,
        5,
        117,
        0,
        0,
        1979,
        1980,
        5,
        116,
        0,
        0,
        1980,
        1981,
        5,
        112,
        0,
        0,
        1981,
        1982,
        5,
        117,
        0,
        0,
        1982,
        1983,
        5,
        116,
        0,
        0,
        1983,
        434,
        1,
        0,
        0,
        0,
        1984,
        1985,
        5,
        99,
        0,
        0,
        1985,
        1986,
        5,
        97,
        0,
        0,
        1986,
        1987,
        5,
        115,
        0,
        0,
        1987,
        1988,
        5,
        116,
        0,
        0,
        1988,
        436,
        1,
        0,
        0,
        0,
        1989,
        1990,
        5,
        114,
        0,
        0,
        1990,
        1991,
        5,
        117,
        0,
        0,
        1991,
        1992,
        5,
        108,
        0,
        0,
        1992,
        1993,
        5,
        101,
        0,
        0,
        1993,
        1994,
        5,
        95,
        0,
        0,
        1994,
        1995,
        5,
        112,
        0,
        0,
        1995,
        1996,
        5,
        114,
        0,
        0,
        1996,
        1997,
        5,
        105,
        0,
        0,
        1997,
        1998,
        5,
        111,
        0,
        0,
        1998,
        1999,
        5,
        114,
        0,
        0,
        1999,
        2e3,
        5,
        105,
        0,
        0,
        2e3,
        2001,
        5,
        116,
        0,
        0,
        2001,
        2002,
        5,
        121,
        0,
        0,
        2002,
        438,
        1,
        0,
        0,
        0,
        2003,
        2004,
        5,
        100,
        0,
        0,
        2004,
        2005,
        5,
        97,
        0,
        0,
        2005,
        2006,
        5,
        116,
        0,
        0,
        2006,
        2007,
        5,
        97,
        0,
        0,
        2007,
        2008,
        5,
        115,
        0,
        0,
        2008,
        2009,
        5,
        101,
        0,
        0,
        2009,
        2010,
        5,
        116,
        0,
        0,
        2010,
        2011,
        5,
        95,
        0,
        0,
        2011,
        2012,
        5,
        112,
        0,
        0,
        2012,
        2013,
        5,
        114,
        0,
        0,
        2013,
        2014,
        5,
        105,
        0,
        0,
        2014,
        2015,
        5,
        111,
        0,
        0,
        2015,
        2016,
        5,
        114,
        0,
        0,
        2016,
        2017,
        5,
        105,
        0,
        0,
        2017,
        2018,
        5,
        116,
        0,
        0,
        2018,
        2019,
        5,
        121,
        0,
        0,
        2019,
        440,
        1,
        0,
        0,
        0,
        2020,
        2021,
        5,
        100,
        0,
        0,
        2021,
        2022,
        5,
        101,
        0,
        0,
        2022,
        2023,
        5,
        102,
        0,
        0,
        2023,
        2024,
        5,
        97,
        0,
        0,
        2024,
        2025,
        5,
        117,
        0,
        0,
        2025,
        2026,
        5,
        108,
        0,
        0,
        2026,
        2027,
        5,
        116,
        0,
        0,
        2027,
        442,
        1,
        0,
        0,
        0,
        2028,
        2029,
        5,
        99,
        0,
        0,
        2029,
        2030,
        5,
        104,
        0,
        0,
        2030,
        2031,
        5,
        101,
        0,
        0,
        2031,
        2032,
        5,
        99,
        0,
        0,
        2032,
        2033,
        5,
        107,
        0,
        0,
        2033,
        2034,
        5,
        95,
        0,
        0,
        2034,
        2035,
        5,
        100,
        0,
        0,
        2035,
        2036,
        5,
        97,
        0,
        0,
        2036,
        2037,
        5,
        116,
        0,
        0,
        2037,
        2038,
        5,
        97,
        0,
        0,
        2038,
        2039,
        5,
        112,
        0,
        0,
        2039,
        2040,
        5,
        111,
        0,
        0,
        2040,
        2041,
        5,
        105,
        0,
        0,
        2041,
        2042,
        5,
        110,
        0,
        0,
        2042,
        2043,
        5,
        116,
        0,
        0,
        2043,
        444,
        1,
        0,
        0,
        0,
        2044,
        2045,
        5,
        99,
        0,
        0,
        2045,
        2046,
        5,
        104,
        0,
        0,
        2046,
        2047,
        5,
        101,
        0,
        0,
        2047,
        2048,
        5,
        99,
        0,
        0,
        2048,
        2049,
        5,
        107,
        0,
        0,
        2049,
        2050,
        5,
        95,
        0,
        0,
        2050,
        2051,
        5,
        104,
        0,
        0,
        2051,
        2052,
        5,
        105,
        0,
        0,
        2052,
        2053,
        5,
        101,
        0,
        0,
        2053,
        2054,
        5,
        114,
        0,
        0,
        2054,
        2055,
        5,
        97,
        0,
        0,
        2055,
        2056,
        5,
        114,
        0,
        0,
        2056,
        2057,
        5,
        99,
        0,
        0,
        2057,
        2058,
        5,
        104,
        0,
        0,
        2058,
        2059,
        5,
        121,
        0,
        0,
        2059,
        446,
        1,
        0,
        0,
        0,
        2060,
        2061,
        5,
        99,
        0,
        0,
        2061,
        2062,
        5,
        111,
        0,
        0,
        2062,
        2063,
        5,
        109,
        0,
        0,
        2063,
        2064,
        5,
        112,
        0,
        0,
        2064,
        2065,
        5,
        117,
        0,
        0,
        2065,
        2066,
        5,
        116,
        0,
        0,
        2066,
        2067,
        5,
        101,
        0,
        0,
        2067,
        2068,
        5,
        100,
        0,
        0,
        2068,
        448,
        1,
        0,
        0,
        0,
        2069,
        2070,
        5,
        110,
        0,
        0,
        2070,
        2071,
        5,
        111,
        0,
        0,
        2071,
        2072,
        5,
        110,
        0,
        0,
        2072,
        2073,
        5,
        95,
        0,
        0,
        2073,
        2074,
        5,
        110,
        0,
        0,
        2074,
        2075,
        5,
        117,
        0,
        0,
        2075,
        2076,
        5,
        108,
        0,
        0,
        2076,
        2077,
        5,
        108,
        0,
        0,
        2077,
        450,
        1,
        0,
        0,
        0,
        2078,
        2079,
        5,
        110,
        0,
        0,
        2079,
        2080,
        5,
        111,
        0,
        0,
        2080,
        2081,
        5,
        110,
        0,
        0,
        2081,
        2082,
        5,
        95,
        0,
        0,
        2082,
        2083,
        5,
        122,
        0,
        0,
        2083,
        2084,
        5,
        101,
        0,
        0,
        2084,
        2085,
        5,
        114,
        0,
        0,
        2085,
        2086,
        5,
        111,
        0,
        0,
        2086,
        452,
        1,
        0,
        0,
        0,
        2087,
        2088,
        5,
        112,
        0,
        0,
        2088,
        2089,
        5,
        97,
        0,
        0,
        2089,
        2090,
        5,
        114,
        0,
        0,
        2090,
        2091,
        5,
        116,
        0,
        0,
        2091,
        2092,
        5,
        105,
        0,
        0,
        2092,
        2093,
        5,
        97,
        0,
        0,
        2093,
        2094,
        5,
        108,
        0,
        0,
        2094,
        2095,
        5,
        95,
        0,
        0,
        2095,
        2096,
        5,
        110,
        0,
        0,
        2096,
        2097,
        5,
        117,
        0,
        0,
        2097,
        2098,
        5,
        108,
        0,
        0,
        2098,
        2099,
        5,
        108,
        0,
        0,
        2099,
        454,
        1,
        0,
        0,
        0,
        2100,
        2101,
        5,
        112,
        0,
        0,
        2101,
        2102,
        5,
        97,
        0,
        0,
        2102,
        2103,
        5,
        114,
        0,
        0,
        2103,
        2104,
        5,
        116,
        0,
        0,
        2104,
        2105,
        5,
        105,
        0,
        0,
        2105,
        2106,
        5,
        97,
        0,
        0,
        2106,
        2107,
        5,
        108,
        0,
        0,
        2107,
        2108,
        5,
        95,
        0,
        0,
        2108,
        2109,
        5,
        122,
        0,
        0,
        2109,
        2110,
        5,
        101,
        0,
        0,
        2110,
        2111,
        5,
        114,
        0,
        0,
        2111,
        2112,
        5,
        111,
        0,
        0,
        2112,
        456,
        1,
        0,
        0,
        0,
        2113,
        2114,
        5,
        97,
        0,
        0,
        2114,
        2115,
        5,
        108,
        0,
        0,
        2115,
        2116,
        5,
        119,
        0,
        0,
        2116,
        2117,
        5,
        97,
        0,
        0,
        2117,
        2118,
        5,
        121,
        0,
        0,
        2118,
        2119,
        5,
        115,
        0,
        0,
        2119,
        2120,
        5,
        95,
        0,
        0,
        2120,
        2121,
        5,
        110,
        0,
        0,
        2121,
        2122,
        5,
        117,
        0,
        0,
        2122,
        2123,
        5,
        108,
        0,
        0,
        2123,
        2124,
        5,
        108,
        0,
        0,
        2124,
        458,
        1,
        0,
        0,
        0,
        2125,
        2126,
        5,
        97,
        0,
        0,
        2126,
        2127,
        5,
        108,
        0,
        0,
        2127,
        2128,
        5,
        119,
        0,
        0,
        2128,
        2129,
        5,
        97,
        0,
        0,
        2129,
        2130,
        5,
        121,
        0,
        0,
        2130,
        2131,
        5,
        115,
        0,
        0,
        2131,
        2132,
        5,
        95,
        0,
        0,
        2132,
        2133,
        5,
        122,
        0,
        0,
        2133,
        2134,
        5,
        101,
        0,
        0,
        2134,
        2135,
        5,
        114,
        0,
        0,
        2135,
        2136,
        5,
        111,
        0,
        0,
        2136,
        460,
        1,
        0,
        0,
        0,
        2137,
        2138,
        5,
        99,
        0,
        0,
        2138,
        2139,
        5,
        111,
        0,
        0,
        2139,
        2140,
        5,
        109,
        0,
        0,
        2140,
        2141,
        5,
        112,
        0,
        0,
        2141,
        2142,
        5,
        111,
        0,
        0,
        2142,
        2143,
        5,
        110,
        0,
        0,
        2143,
        2144,
        5,
        101,
        0,
        0,
        2144,
        2145,
        5,
        110,
        0,
        0,
        2145,
        2146,
        5,
        116,
        0,
        0,
        2146,
        2147,
        5,
        115,
        0,
        0,
        2147,
        462,
        1,
        0,
        0,
        0,
        2148,
        2149,
        5,
        97,
        0,
        0,
        2149,
        2150,
        5,
        108,
        0,
        0,
        2150,
        2151,
        5,
        108,
        0,
        0,
        2151,
        2152,
        5,
        95,
        0,
        0,
        2152,
        2153,
        5,
        109,
        0,
        0,
        2153,
        2154,
        5,
        101,
        0,
        0,
        2154,
        2155,
        5,
        97,
        0,
        0,
        2155,
        2156,
        5,
        115,
        0,
        0,
        2156,
        2157,
        5,
        117,
        0,
        0,
        2157,
        2158,
        5,
        114,
        0,
        0,
        2158,
        2159,
        5,
        101,
        0,
        0,
        2159,
        2160,
        5,
        115,
        0,
        0,
        2160,
        464,
        1,
        0,
        0,
        0,
        2161,
        2162,
        5,
        115,
        0,
        0,
        2162,
        2163,
        5,
        99,
        0,
        0,
        2163,
        2164,
        5,
        97,
        0,
        0,
        2164,
        2165,
        5,
        108,
        0,
        0,
        2165,
        2166,
        5,
        97,
        0,
        0,
        2166,
        2167,
        5,
        114,
        0,
        0,
        2167,
        466,
        1,
        0,
        0,
        0,
        2168,
        2169,
        5,
        99,
        0,
        0,
        2169,
        2170,
        5,
        111,
        0,
        0,
        2170,
        2171,
        5,
        109,
        0,
        0,
        2171,
        2172,
        5,
        112,
        0,
        0,
        2172,
        2173,
        5,
        111,
        0,
        0,
        2173,
        2174,
        5,
        110,
        0,
        0,
        2174,
        2175,
        5,
        101,
        0,
        0,
        2175,
        2176,
        5,
        110,
        0,
        0,
        2176,
        2177,
        5,
        116,
        0,
        0,
        2177,
        468,
        1,
        0,
        0,
        0,
        2178,
        2179,
        5,
        100,
        0,
        0,
        2179,
        2180,
        5,
        97,
        0,
        0,
        2180,
        2181,
        5,
        116,
        0,
        0,
        2181,
        2182,
        5,
        97,
        0,
        0,
        2182,
        2183,
        5,
        112,
        0,
        0,
        2183,
        2184,
        5,
        111,
        0,
        0,
        2184,
        2185,
        5,
        105,
        0,
        0,
        2185,
        2186,
        5,
        110,
        0,
        0,
        2186,
        2187,
        5,
        116,
        0,
        0,
        2187,
        2188,
        5,
        95,
        0,
        0,
        2188,
        2189,
        5,
        111,
        0,
        0,
        2189,
        2190,
        5,
        110,
        0,
        0,
        2190,
        2191,
        5,
        95,
        0,
        0,
        2191,
        2192,
        5,
        118,
        0,
        0,
        2192,
        2193,
        5,
        97,
        0,
        0,
        2193,
        2194,
        5,
        108,
        0,
        0,
        2194,
        2195,
        5,
        117,
        0,
        0,
        2195,
        2196,
        5,
        101,
        0,
        0,
        2196,
        2197,
        5,
        100,
        0,
        0,
        2197,
        2198,
        5,
        111,
        0,
        0,
        2198,
        2199,
        5,
        109,
        0,
        0,
        2199,
        2200,
        5,
        97,
        0,
        0,
        2200,
        2201,
        5,
        105,
        0,
        0,
        2201,
        2202,
        5,
        110,
        0,
        0,
        2202,
        2203,
        5,
        115,
        0,
        0,
        2203,
        470,
        1,
        0,
        0,
        0,
        2204,
        2205,
        5,
        100,
        0,
        0,
        2205,
        2206,
        5,
        97,
        0,
        0,
        2206,
        2207,
        5,
        116,
        0,
        0,
        2207,
        2208,
        5,
        97,
        0,
        0,
        2208,
        2209,
        5,
        112,
        0,
        0,
        2209,
        2210,
        5,
        111,
        0,
        0,
        2210,
        2211,
        5,
        105,
        0,
        0,
        2211,
        2212,
        5,
        110,
        0,
        0,
        2212,
        2213,
        5,
        116,
        0,
        0,
        2213,
        2214,
        5,
        95,
        0,
        0,
        2214,
        2215,
        5,
        111,
        0,
        0,
        2215,
        2216,
        5,
        110,
        0,
        0,
        2216,
        2217,
        5,
        95,
        0,
        0,
        2217,
        2218,
        5,
        118,
        0,
        0,
        2218,
        2219,
        5,
        97,
        0,
        0,
        2219,
        2220,
        5,
        114,
        0,
        0,
        2220,
        2221,
        5,
        105,
        0,
        0,
        2221,
        2222,
        5,
        97,
        0,
        0,
        2222,
        2223,
        5,
        98,
        0,
        0,
        2223,
        2224,
        5,
        108,
        0,
        0,
        2224,
        2225,
        5,
        101,
        0,
        0,
        2225,
        2226,
        5,
        115,
        0,
        0,
        2226,
        472,
        1,
        0,
        0,
        0,
        2227,
        2228,
        5,
        104,
        0,
        0,
        2228,
        2229,
        5,
        105,
        0,
        0,
        2229,
        2230,
        5,
        101,
        0,
        0,
        2230,
        2231,
        5,
        114,
        0,
        0,
        2231,
        2232,
        5,
        97,
        0,
        0,
        2232,
        2233,
        5,
        114,
        0,
        0,
        2233,
        2234,
        5,
        99,
        0,
        0,
        2234,
        2235,
        5,
        104,
        0,
        0,
        2235,
        2236,
        5,
        105,
        0,
        0,
        2236,
        2237,
        5,
        99,
        0,
        0,
        2237,
        2238,
        5,
        97,
        0,
        0,
        2238,
        2239,
        5,
        108,
        0,
        0,
        2239,
        2240,
        5,
        95,
        0,
        0,
        2240,
        2241,
        5,
        111,
        0,
        0,
        2241,
        2242,
        5,
        110,
        0,
        0,
        2242,
        2243,
        5,
        95,
        0,
        0,
        2243,
        2244,
        5,
        118,
        0,
        0,
        2244,
        2245,
        5,
        97,
        0,
        0,
        2245,
        2246,
        5,
        108,
        0,
        0,
        2246,
        2247,
        5,
        117,
        0,
        0,
        2247,
        2248,
        5,
        101,
        0,
        0,
        2248,
        2249,
        5,
        100,
        0,
        0,
        2249,
        2250,
        5,
        111,
        0,
        0,
        2250,
        2251,
        5,
        109,
        0,
        0,
        2251,
        2252,
        5,
        97,
        0,
        0,
        2252,
        2253,
        5,
        105,
        0,
        0,
        2253,
        2254,
        5,
        110,
        0,
        0,
        2254,
        2255,
        5,
        115,
        0,
        0,
        2255,
        474,
        1,
        0,
        0,
        0,
        2256,
        2257,
        5,
        104,
        0,
        0,
        2257,
        2258,
        5,
        105,
        0,
        0,
        2258,
        2259,
        5,
        101,
        0,
        0,
        2259,
        2260,
        5,
        114,
        0,
        0,
        2260,
        2261,
        5,
        97,
        0,
        0,
        2261,
        2262,
        5,
        114,
        0,
        0,
        2262,
        2263,
        5,
        99,
        0,
        0,
        2263,
        2264,
        5,
        104,
        0,
        0,
        2264,
        2265,
        5,
        105,
        0,
        0,
        2265,
        2266,
        5,
        99,
        0,
        0,
        2266,
        2267,
        5,
        97,
        0,
        0,
        2267,
        2268,
        5,
        108,
        0,
        0,
        2268,
        2269,
        5,
        95,
        0,
        0,
        2269,
        2270,
        5,
        111,
        0,
        0,
        2270,
        2271,
        5,
        110,
        0,
        0,
        2271,
        2272,
        5,
        95,
        0,
        0,
        2272,
        2273,
        5,
        118,
        0,
        0,
        2273,
        2274,
        5,
        97,
        0,
        0,
        2274,
        2275,
        5,
        114,
        0,
        0,
        2275,
        2276,
        5,
        105,
        0,
        0,
        2276,
        2277,
        5,
        97,
        0,
        0,
        2277,
        2278,
        5,
        98,
        0,
        0,
        2278,
        2279,
        5,
        108,
        0,
        0,
        2279,
        2280,
        5,
        101,
        0,
        0,
        2280,
        2281,
        5,
        115,
        0,
        0,
        2281,
        476,
        1,
        0,
        0,
        0,
        2282,
        2283,
        5,
        115,
        0,
        0,
        2283,
        2284,
        5,
        101,
        0,
        0,
        2284,
        2285,
        5,
        116,
        0,
        0,
        2285,
        478,
        1,
        0,
        0,
        0,
        2286,
        2287,
        5,
        108,
        0,
        0,
        2287,
        2288,
        5,
        97,
        0,
        0,
        2288,
        2289,
        5,
        110,
        0,
        0,
        2289,
        2290,
        5,
        103,
        0,
        0,
        2290,
        2291,
        5,
        117,
        0,
        0,
        2291,
        2292,
        5,
        97,
        0,
        0,
        2292,
        2293,
        5,
        103,
        0,
        0,
        2293,
        2294,
        5,
        101,
        0,
        0,
        2294,
        480,
        1,
        0,
        0,
        0,
        2295,
        2296,
        7,
        0,
        0,
        0,
        2296,
        482,
        1,
        0,
        0,
        0,
        2297,
        2298,
        2,
        48,
        57,
        0,
        2298,
        484,
        1,
        0,
        0,
        0,
        2299,
        2301,
        3,
        483,
        241,
        0,
        2300,
        2299,
        1,
        0,
        0,
        0,
        2301,
        2302,
        1,
        0,
        0,
        0,
        2302,
        2300,
        1,
        0,
        0,
        0,
        2302,
        2303,
        1,
        0,
        0,
        0,
        2303,
        486,
        1,
        0,
        0,
        0,
        2304,
        2305,
        3,
        485,
        242,
        0,
        2305,
        2306,
        5,
        46,
        0,
        0,
        2306,
        2307,
        3,
        485,
        242,
        0,
        2307,
        488,
        1,
        0,
        0,
        0,
        2308,
        2309,
        5,
        116,
        0,
        0,
        2309,
        2310,
        5,
        114,
        0,
        0,
        2310,
        2311,
        5,
        117,
        0,
        0,
        2311,
        2318,
        5,
        101,
        0,
        0,
        2312,
        2313,
        5,
        102,
        0,
        0,
        2313,
        2314,
        5,
        97,
        0,
        0,
        2314,
        2315,
        5,
        108,
        0,
        0,
        2315,
        2316,
        5,
        115,
        0,
        0,
        2316,
        2318,
        5,
        101,
        0,
        0,
        2317,
        2308,
        1,
        0,
        0,
        0,
        2317,
        2312,
        1,
        0,
        0,
        0,
        2318,
        490,
        1,
        0,
        0,
        0,
        2319,
        2323,
        5,
        34,
        0,
        0,
        2320,
        2322,
        8,
        1,
        0,
        0,
        2321,
        2320,
        1,
        0,
        0,
        0,
        2322,
        2325,
        1,
        0,
        0,
        0,
        2323,
        2321,
        1,
        0,
        0,
        0,
        2323,
        2324,
        1,
        0,
        0,
        0,
        2324,
        2326,
        1,
        0,
        0,
        0,
        2325,
        2323,
        1,
        0,
        0,
        0,
        2326,
        2327,
        5,
        34,
        0,
        0,
        2327,
        492,
        1,
        0,
        0,
        0,
        2328,
        2332,
        3,
        481,
        240,
        0,
        2329,
        2331,
        7,
        2,
        0,
        0,
        2330,
        2329,
        1,
        0,
        0,
        0,
        2331,
        2334,
        1,
        0,
        0,
        0,
        2332,
        2330,
        1,
        0,
        0,
        0,
        2332,
        2333,
        1,
        0,
        0,
        0,
        2333,
        2350,
        1,
        0,
        0,
        0,
        2334,
        2332,
        1,
        0,
        0,
        0,
        2335,
        2337,
        3,
        483,
        241,
        0,
        2336,
        2338,
        7,
        2,
        0,
        0,
        2337,
        2336,
        1,
        0,
        0,
        0,
        2338,
        2339,
        1,
        0,
        0,
        0,
        2339,
        2337,
        1,
        0,
        0,
        0,
        2339,
        2340,
        1,
        0,
        0,
        0,
        2340,
        2350,
        1,
        0,
        0,
        0,
        2341,
        2345,
        5,
        39,
        0,
        0,
        2342,
        2344,
        9,
        0,
        0,
        0,
        2343,
        2342,
        1,
        0,
        0,
        0,
        2344,
        2347,
        1,
        0,
        0,
        0,
        2345,
        2346,
        1,
        0,
        0,
        0,
        2345,
        2343,
        1,
        0,
        0,
        0,
        2346,
        2348,
        1,
        0,
        0,
        0,
        2347,
        2345,
        1,
        0,
        0,
        0,
        2348,
        2350,
        5,
        39,
        0,
        0,
        2349,
        2328,
        1,
        0,
        0,
        0,
        2349,
        2335,
        1,
        0,
        0,
        0,
        2349,
        2341,
        1,
        0,
        0,
        0,
        2350,
        494,
        1,
        0,
        0,
        0,
        2351,
        2353,
        7,
        3,
        0,
        0,
        2352,
        2351,
        1,
        0,
        0,
        0,
        2353,
        2354,
        1,
        0,
        0,
        0,
        2354,
        2352,
        1,
        0,
        0,
        0,
        2354,
        2355,
        1,
        0,
        0,
        0,
        2355,
        2356,
        1,
        0,
        0,
        0,
        2356,
        2357,
        6,
        247,
        0,
        0,
        2357,
        496,
        1,
        0,
        0,
        0,
        2358,
        2359,
        5,
        59,
        0,
        0,
        2359,
        498,
        1,
        0,
        0,
        0,
        2360,
        2361,
        5,
        47,
        0,
        0,
        2361,
        2362,
        5,
        42,
        0,
        0,
        2362,
        2366,
        1,
        0,
        0,
        0,
        2363,
        2365,
        9,
        0,
        0,
        0,
        2364,
        2363,
        1,
        0,
        0,
        0,
        2365,
        2368,
        1,
        0,
        0,
        0,
        2366,
        2367,
        1,
        0,
        0,
        0,
        2366,
        2364,
        1,
        0,
        0,
        0,
        2367,
        2369,
        1,
        0,
        0,
        0,
        2368,
        2366,
        1,
        0,
        0,
        0,
        2369,
        2370,
        5,
        42,
        0,
        0,
        2370,
        2371,
        5,
        47,
        0,
        0,
        2371,
        2372,
        1,
        0,
        0,
        0,
        2372,
        2373,
        6,
        249,
        1,
        0,
        2373,
        500,
        1,
        0,
        0,
        0,
        2374,
        2375,
        5,
        47,
        0,
        0,
        2375,
        2376,
        5,
        47,
        0,
        0,
        2376,
        2380,
        1,
        0,
        0,
        0,
        2377,
        2379,
        8,
        4,
        0,
        0,
        2378,
        2377,
        1,
        0,
        0,
        0,
        2379,
        2382,
        1,
        0,
        0,
        0,
        2380,
        2378,
        1,
        0,
        0,
        0,
        2380,
        2381,
        1,
        0,
        0,
        0,
        2381,
        2383,
        1,
        0,
        0,
        0,
        2382,
        2380,
        1,
        0,
        0,
        0,
        2383,
        2384,
        6,
        250,
        1,
        0,
        2384,
        502,
        1,
        0,
        0,
        0,
        11,
        0,
        2302,
        2317,
        2323,
        2332,
        2339,
        2345,
        2349,
        2354,
        2366,
        2380,
        2,
        0,
        1,
        0,
        0,
        2,
        0
      ];
    }
    static get _ATN() {
      if (!_VtlLexer.__ATN) {
        _VtlLexer.__ATN = new We().deserialize(_VtlLexer._serializedATN);
      }
      return _VtlLexer.__ATN;
    }
    static {
      this.DecisionsToDFA = _VtlLexer._ATN.decisionToState.map((ds, index) => new Qe(ds, index));
    }
  };

  // node_modules/@uiw/codemirror-themes-all/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    abcdef: () => abcdef,
    abcdefDarkStyle: () => abcdefDarkStyle,
    abcdefInit: () => abcdefInit,
    abyss: () => abyss,
    abyssDarkStyle: () => abyssDarkStyle,
    abyssInit: () => abyssInit,
    androidstudio: () => androidstudio,
    androidstudioDarkStyle: () => androidstudioDarkStyle,
    androidstudioInit: () => androidstudioInit,
    andromeda: () => andromeda,
    andromedaDarkStyle: () => andromedaDarkStyle,
    andromedaInit: () => andromedaInit,
    atomone: () => atomone,
    atomoneDarkStyle: () => atomoneDarkStyle,
    atomoneInit: () => atomoneInit,
    aura: () => aura,
    auraDarkStyle: () => auraDarkStyle,
    auraInit: () => auraInit,
    basicDark: () => basicDark,
    basicDarkInit: () => basicDarkInit,
    basicDarkStyle: () => basicDarkStyle,
    basicLight: () => basicLight,
    basicLightInit: () => basicLightInit,
    basicLightStyle: () => basicLightStyle,
    bbedit: () => bbedit,
    bbeditInit: () => bbeditInit,
    bbeditLightStyle: () => bbeditLightStyle,
    bespin: () => bespin,
    bespinDarkStyle: () => bespinDarkStyle,
    bespinInit: () => bespinInit,
    consoleDark: () => consoleDark,
    consoleDarkInit: () => consoleDarkInit,
    consoleLight: () => consoleLight,
    consoleLightInit: () => consoleLightInit,
    copilot: () => copilot,
    copilotDarkStyle: () => copilotDarkStyle,
    copilotInit: () => copilotInit,
    darcula: () => darcula,
    darculaDarkStyle: () => darculaDarkStyle,
    darculaInit: () => darculaInit,
    defaultSettingsAbcdef: () => defaultSettingsAbcdef,
    defaultSettingsAbyss: () => defaultSettingsAbyss,
    defaultSettingsAndroidstudio: () => defaultSettingsAndroidstudio,
    defaultSettingsAndromeda: () => defaultSettingsAndromeda,
    defaultSettingsAtomone: () => defaultSettingsAtomone,
    defaultSettingsAura: () => defaultSettingsAura,
    defaultSettingsBasicDark: () => defaultSettingsBasicDark,
    defaultSettingsBasicLight: () => defaultSettingsBasicLight,
    defaultSettingsBbedit: () => defaultSettingsBbedit,
    defaultSettingsBespin: () => defaultSettingsBespin,
    defaultSettingsConsoleDark: () => defaultSettingsConsoleDark,
    defaultSettingsConsoleLight: () => defaultSettingsConsoleLight,
    defaultSettingsCopilot: () => defaultSettingsCopilot,
    defaultSettingsDarcula: () => defaultSettingsDarcula,
    defaultSettingsDracula: () => defaultSettingsDracula,
    defaultSettingsDuotoneDark: () => defaultSettingsDuotoneDark,
    defaultSettingsDuotoneLight: () => defaultSettingsDuotoneLight,
    defaultSettingsEclipse: () => defaultSettingsEclipse,
    defaultSettingsGithubDark: () => defaultSettingsGithubDark,
    defaultSettingsGithubLight: () => defaultSettingsGithubLight,
    defaultSettingsGruvboxDark: () => defaultSettingsGruvboxDark,
    defaultSettingsGruvboxLight: () => defaultSettingsGruvboxLight,
    defaultSettingsKimbie: () => defaultSettingsKimbie,
    defaultSettingsMaterial: () => defaultSettingsMaterial,
    defaultSettingsMaterialDark: () => defaultSettingsMaterialDark,
    defaultSettingsMaterialLight: () => defaultSettingsMaterialLight,
    defaultSettingsMonokai: () => defaultSettingsMonokai,
    defaultSettingsMonokaiDimmed: () => defaultSettingsMonokaiDimmed,
    defaultSettingsNoctisLilac: () => defaultSettingsNoctisLilac,
    defaultSettingsNord: () => defaultSettingsNord,
    defaultSettingsOkaidia: () => defaultSettingsOkaidia,
    defaultSettingsQuietlight: () => defaultSettingsQuietlight,
    defaultSettingsRed: () => defaultSettingsRed,
    defaultSettingsSolarizedDark: () => defaultSettingsSolarizedDark,
    defaultSettingsSolarizedLight: () => defaultSettingsSolarizedLight,
    defaultSettingsSublime: () => defaultSettingsSublime,
    defaultSettingsTokyoNight: () => defaultSettingsTokyoNight,
    defaultSettingsTokyoNightDay: () => defaultSettingsTokyoNightDay,
    defaultSettingsTokyoNightStorm: () => defaultSettingsTokyoNightStorm,
    defaultSettingsTomorrowNightBlue: () => defaultSettingsTomorrowNightBlue,
    defaultSettingsVscodeDark: () => defaultSettingsVscodeDark,
    defaultSettingsVscodeLight: () => defaultSettingsVscodeLight,
    defaultSettingsWhiteDark: () => defaultSettingsWhiteDark,
    defaultSettingsWhiteLight: () => defaultSettingsWhiteLight,
    defaultSettingsXcodeDark: () => defaultSettingsXcodeDark,
    defaultSettingsXcodeLight: () => defaultSettingsXcodeLight,
    douToneLightStyle: () => douToneLightStyle,
    dracula: () => dracula,
    draculaDarkStyle: () => draculaDarkStyle,
    draculaInit: () => draculaInit,
    duotoneDark: () => duotoneDark,
    duotoneDarkInit: () => duotoneDarkInit,
    duotoneDarkStyle: () => duotoneDarkStyle,
    duotoneLight: () => duotoneLight,
    duotoneLightInit: () => duotoneLightInit,
    eclipse: () => eclipse,
    eclipseInit: () => eclipseInit,
    eclipseLightStyle: () => eclipseLightStyle,
    githubDark: () => githubDark,
    githubDarkInit: () => githubDarkInit,
    githubDarkStyle: () => githubDarkStyle,
    githubLight: () => githubLight,
    githubLightInit: () => githubLightInit,
    githubLightStyle: () => githubLightStyle,
    gruvboxDark: () => gruvboxDark,
    gruvboxDarkInit: () => gruvboxDarkInit,
    gruvboxDarkStyle: () => gruvboxDarkStyle,
    gruvboxLight: () => gruvboxLight,
    gruvboxLightInit: () => gruvboxLightInit,
    kimbie: () => kimbie,
    kimbieDarkStyle: () => kimbieDarkStyle,
    kimbieInit: () => kimbieInit,
    material: () => material,
    materialDark: () => materialDark,
    materialDarkInit: () => materialDarkInit,
    materialDarkStyle: () => materialDarkStyle,
    materialInit: () => materialInit,
    materialLight: () => materialLight,
    materialLightInit: () => materialLightInit,
    materialLightStyle: () => materialLightStyle,
    monokai: () => monokai,
    monokaiDarkStyle: () => monokaiDarkStyle,
    monokaiDimmed: () => monokaiDimmed,
    monokaiDimmedDarkStyle: () => monokaiDimmedDarkStyle,
    monokaiDimmedInit: () => monokaiDimmedInit,
    monokaiInit: () => monokaiInit,
    noctisLilac: () => noctisLilac,
    noctisLilacInit: () => noctisLilacInit,
    noctisLilacLightStyle: () => noctisLilacLightStyle,
    nord: () => nord,
    nordDarkStyle: () => nordDarkStyle,
    nordInit: () => nordInit,
    okaidia: () => okaidia,
    okaidiaDarkStyle: () => okaidiaDarkStyle,
    okaidiaInit: () => okaidiaInit,
    quietlight: () => quietlight,
    quietlightInit: () => quietlightInit,
    quietlightStyle: () => quietlightStyle,
    red: () => red,
    redDarkStyle: () => redDarkStyle,
    redInit: () => redInit,
    solarizedDark: () => solarizedDark,
    solarizedDarkInit: () => solarizedDarkInit,
    solarizedDarkStyle: () => solarizedDarkStyle,
    solarizedLight: () => solarizedLight,
    solarizedLightInit: () => solarizedLightInit,
    solarizedLightStyle: () => solarizedLightStyle,
    sublime: () => sublime,
    sublimeDarkStyle: () => sublimeDarkStyle,
    sublimeInit: () => sublimeInit,
    tokyoNight: () => tokyoNight,
    tokyoNightDay: () => tokyoNightDay,
    tokyoNightDayInit: () => tokyoNightDayInit,
    tokyoNightDayStyle: () => tokyoNightDayStyle,
    tokyoNightInit: () => tokyoNightInit,
    tokyoNightStorm: () => tokyoNightStorm,
    tokyoNightStormInit: () => tokyoNightStormInit,
    tokyoNightStormStyle: () => tokyoNightStormStyle,
    tokyoNightStyle: () => tokyoNightStyle,
    tomorrowNightBlue: () => tomorrowNightBlue,
    tomorrowNightBlueInit: () => tomorrowNightBlueInit,
    tomorrowNightBlueStyle: () => tomorrowNightBlueStyle,
    vscodeDark: () => vscodeDark,
    vscodeDarkInit: () => vscodeDarkInit,
    vscodeDarkStyle: () => vscodeDarkStyle,
    vscodeLight: () => vscodeLight,
    vscodeLightInit: () => vscodeLightInit,
    vscodeLightStyle: () => vscodeLightStyle,
    whiteDark: () => whiteDark,
    whiteDarkInit: () => whiteDarkInit,
    whiteDarkStyle: () => whiteDarkStyle,
    whiteLight: () => whiteLight,
    whiteLightInit: () => whiteLightInit,
    whiteLightStyle: () => whiteLightStyle,
    xcodeDark: () => xcodeDark,
    xcodeDarkInit: () => xcodeDarkInit,
    xcodeDarkStyle: () => xcodeDarkStyle,
    xcodeLight: () => xcodeLight,
    xcodeLightInit: () => xcodeLightInit,
    xcodeLightStyle: () => xcodeLightStyle
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n2) {
      for (var e2 = 1; e2 < arguments.length; e2++) {
        var t3 = arguments[e2];
        for (var r2 in t3) ({}).hasOwnProperty.call(t3, r2) && (n2[r2] = t3[r2]);
      }
      return n2;
    }, _extends.apply(null, arguments);
  }
  __name(_extends, "_extends");

  // node_modules/@uiw/codemirror-themes/esm/index.js
  var createTheme = /* @__PURE__ */ __name((_ref) => {
    var {
      theme: theme2,
      settings = {},
      styles = []
    } = _ref;
    var themeOptions = {
      ".cm-gutters": {}
    };
    var baseStyle = {};
    if (settings.background) {
      baseStyle.backgroundColor = settings.background;
    }
    if (settings.backgroundImage) {
      baseStyle.backgroundImage = settings.backgroundImage;
    }
    if (settings.foreground) {
      baseStyle.color = settings.foreground;
    }
    if (settings.fontSize) {
      baseStyle.fontSize = settings.fontSize;
    }
    if (settings.background || settings.foreground) {
      themeOptions["&"] = baseStyle;
    }
    if (settings.fontFamily) {
      themeOptions["&.cm-editor .cm-scroller"] = {
        fontFamily: settings.fontFamily
      };
    }
    if (settings.gutterBackground) {
      themeOptions[".cm-gutters"].backgroundColor = settings.gutterBackground;
    }
    if (settings.gutterForeground) {
      themeOptions[".cm-gutters"].color = settings.gutterForeground;
    }
    if (settings.gutterBorder) {
      themeOptions[".cm-gutters"].borderRightColor = settings.gutterBorder;
    }
    if (settings.caret) {
      themeOptions[".cm-content"] = {
        caretColor: settings.caret
      };
      themeOptions[".cm-cursor, .cm-dropCursor"] = {
        borderLeftColor: settings.caret
      };
    }
    var activeLineGutterStyle = {};
    if (settings.gutterActiveForeground) {
      activeLineGutterStyle.color = settings.gutterActiveForeground;
    }
    if (settings.lineHighlight) {
      themeOptions[".cm-activeLine"] = {
        backgroundColor: settings.lineHighlight
      };
      activeLineGutterStyle.backgroundColor = settings.lineHighlight;
    }
    themeOptions[".cm-activeLineGutter"] = activeLineGutterStyle;
    if (settings.selection) {
      themeOptions["&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection"] = {
        background: settings.selection + " !important"
      };
    }
    if (settings.selectionMatch) {
      themeOptions["& .cm-selectionMatch"] = {
        backgroundColor: settings.selectionMatch
      };
    }
    var themeExtension = EditorView.theme(themeOptions, {
      dark: theme2 === "dark"
    });
    var highlightStyle = HighlightStyle.define(styles);
    var extension = [themeExtension, syntaxHighlighting(highlightStyle)];
    return extension;
  }, "createTheme");

  // node_modules/@uiw/codemirror-theme-abcdef/esm/index.js
  var defaultSettingsAbcdef = {
    background: "#0f0f0f",
    foreground: "#defdef",
    caret: "#00FF00",
    selection: "#515151",
    selectionMatch: "#515151",
    gutterBackground: "#555",
    gutterForeground: "#FFFFFF",
    lineHighlight: "#0a6bcb3d"
  };
  var abcdefDarkStyle = [
    {
      tag: tags.keyword,
      color: "darkgoldenrod",
      fontWeight: "bold"
    },
    {
      tag: tags.atom,
      color: "#77F"
    },
    {
      tag: tags.comment,
      color: "#7a7b7c",
      fontStyle: "italic"
    },
    {
      tag: tags.number,
      color: "violet"
    },
    {
      tag: tags.definition(tags.variableName),
      color: "#fffabc"
    },
    {
      tag: tags.variableName,
      color: "#abcdef"
    },
    {
      tag: tags.function(tags.variableName),
      color: "#fffabc"
    },
    {
      tag: tags.typeName,
      color: "#FFDD44"
    },
    {
      tag: tags.tagName,
      color: "#def"
    },
    {
      tag: tags.string,
      color: "#2b4"
    },
    {
      tag: tags.meta,
      color: "#C9F"
    },
    // { tag: t.qualifier, color: '#FFF700' },
    // { tag: t.builtin, color: '#30aabc' },
    {
      tag: tags.bracket,
      color: "#8a8a8a"
    },
    {
      tag: tags.attributeName,
      color: "#DDFF00"
    },
    {
      tag: tags.heading,
      color: "aquamarine",
      fontWeight: "bold"
    },
    {
      tag: tags.link,
      color: "blueviolet",
      fontWeight: "bold"
    }
  ];
  var abcdefInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsAbcdef, settings),
      styles: [...abcdefDarkStyle, ...styles]
    });
  }, "abcdefInit");
  var abcdef = abcdefInit();

  // node_modules/@uiw/codemirror-theme-abyss/esm/color.js
  var config2 = {
    background: "#000c18",
    foreground: "#6688cc",
    selection: "#770811",
    selectionMatch: "#770811",
    cursor: "#ddbb88",
    dropdownBackground: "#181f2f",
    activeLine: "#0055ff30",
    matchingBracket: "#082050",
    keyword: "#225588",
    storage: "#225588",
    variable: "#2277ff",
    parameter: "#2277ff",
    function: "#9966b8",
    string: "#22aa44",
    constant: "#f280d0",
    type: "#9966b8",
    class: "#ddbb88",
    number: "#f280d0",
    comment: "#384887",
    heading: "#6688cc",
    invalid: "#A22D44",
    regexp: "#22aa44",
    tag: "#225588"
  };

  // node_modules/@uiw/codemirror-theme-abyss/esm/index.js
  var defaultSettingsAbyss = {
    background: config2.background,
    foreground: config2.foreground,
    caret: config2.cursor,
    selection: config2.selection,
    selectionMatch: config2.selectionMatch,
    gutterBackground: config2.background,
    gutterForeground: config2.foreground,
    lineHighlight: config2.activeLine
  };
  var abyssDarkStyle = [{
    tag: tags.keyword,
    color: config2.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config2.variable
  }, {
    tag: [tags.propertyName],
    color: config2.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config2.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config2.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config2.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config2.variable
  }, {
    tag: [tags.className],
    color: config2.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config2.number
  }, {
    tag: [tags.typeName],
    color: config2.type,
    fontStyle: config2.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config2.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config2.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config2.comment
  }, {
    tag: tags.tagName,
    color: config2.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config2.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config2.variable
  }, {
    tag: tags.invalid,
    color: config2.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var abyssInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsAbyss, settings),
      styles: [...abyssDarkStyle, ...styles]
    });
  }, "abyssInit");
  var abyss = abyssInit();

  // node_modules/@uiw/codemirror-theme-androidstudio/esm/index.js
  var defaultSettingsAndroidstudio = {
    background: "#282b2e",
    foreground: "#a9b7c6",
    caret: "#00FF00",
    selection: "#4e5254",
    selectionMatch: "#4e5254",
    lineHighlight: "#7f85891f"
  };
  var androidstudioDarkStyle = [{
    tag: [tags.keyword, tags.deleted, tags.className],
    color: "#cc7832"
  }, {
    tag: [tags.number, tags.literal, tags.derefOperator],
    color: "#6897bb"
  }, {
    tag: [tags.link, tags.variableName],
    color: "#629755"
  }, {
    tag: [tags.comment, tags.quote],
    color: "grey"
  }, {
    tag: [tags.meta, tags.documentMeta],
    color: "#bbb529"
  }, {
    tag: [tags.string, tags.propertyName, tags.attributeValue],
    color: "#6a8759"
  }, {
    tag: [tags.heading, tags.typeName],
    color: "#ffc66d"
  }, {
    tag: [tags.attributeName],
    color: "#a9b7c6"
  }, {
    tag: [tags.emphasis],
    fontStyle: "italic"
  }];
  var androidstudioInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsAndroidstudio, settings),
      styles: [...androidstudioDarkStyle, ...styles]
    });
  }, "androidstudioInit");
  var androidstudio = androidstudioInit();

  // node_modules/@uiw/codemirror-theme-andromeda/esm/color.js
  var config3 = {
    background: "#23262E",
    foreground: "#D5CED9",
    selection: "#db45a280",
    selectionMatch: "#db45a280",
    cursor: "#FFF",
    dropdownBackground: "#2b303b",
    dropdownBorder: "#363c49",
    activeLine: "#596a992e",
    matchingBracket: "#746f77",
    keyword: "#c74ded",
    storage: "#c74ded",
    variable: "#00e8c6",
    parameter: "#00e8c6",
    function: "#FFE66D",
    string: "#96E072",
    constant: "#ee5d43",
    type: "#FFE66D",
    class: "#FFE66D",
    number: "#ee5d43",
    comment: "#A0A1A7cc",
    heading: "#ff00aa",
    invalid: null,
    regexp: "#96E072",
    tag: "#f92672"
  };

  // node_modules/@uiw/codemirror-theme-andromeda/esm/index.js
  var defaultSettingsAndromeda = {
    background: config3.background,
    foreground: config3.foreground,
    caret: config3.cursor,
    selection: config3.selection,
    selectionMatch: config3.selectionMatch,
    gutterBackground: config3.background,
    gutterForeground: config3.foreground,
    lineHighlight: config3.activeLine
  };
  var andromedaDarkStyle = [{
    tag: tags.keyword,
    color: config3.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config3.variable
  }, {
    tag: [tags.propertyName],
    color: config3.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config3.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config3.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config3.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config3.variable
  }, {
    tag: [tags.className],
    color: config3.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config3.number
  }, {
    tag: [tags.typeName],
    color: config3.type,
    fontStyle: config3.type
  }, {
    tag: [tags.operator],
    color: config3.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config3.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config3.comment
  }, {
    tag: tags.tagName,
    color: config3.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config3.heading
  }, {
    tag: [tags.atom, tags.special(tags.variableName)],
    color: config3.variable
  }, {
    tag: tags.invalid,
    color: config3.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: [tags.operatorKeyword, tags.bool, tags.null, tags.variableName],
    color: config3.constant
  }];
  var andromedaInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsAndromeda, settings),
      styles: [...andromedaDarkStyle, ...styles]
    });
  }, "andromedaInit");
  var andromeda = andromedaInit();

  // node_modules/@uiw/codemirror-theme-atomone/esm/index.js
  var defaultSettingsAtomone = {
    background: "#272C35",
    foreground: "#9d9b97",
    caret: "#797977",
    selection: "#3d4c64",
    selectionMatch: "#3d4c64",
    gutterBackground: "#272C35",
    gutterForeground: "#465063",
    gutterBorder: "transparent",
    lineHighlight: "#2e3f5940"
  };
  var atomoneDarkStyle = [{
    tag: [tags.function(tags.variableName), tags.function(tags.propertyName), tags.url, tags.processingInstruction],
    color: "hsl(207, 82%, 66%)"
  }, {
    tag: [tags.tagName, tags.heading],
    color: "#e06c75"
  }, {
    tag: tags.comment,
    color: "#54636D"
  }, {
    tag: [tags.propertyName],
    color: "hsl(220, 14%, 71%)"
  }, {
    tag: [tags.attributeName, tags.number],
    color: "hsl( 29, 54%, 61%)"
  }, {
    tag: tags.className,
    color: "hsl( 39, 67%, 69%)"
  }, {
    tag: tags.keyword,
    color: "hsl(286, 60%, 67%)"
  }, {
    tag: [tags.string, tags.regexp, tags.special(tags.propertyName)],
    color: "#98c379"
  }];
  var atomoneInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsAtomone, settings),
      styles: [...atomoneDarkStyle, ...styles]
    });
  }, "atomoneInit");
  var atomone = atomoneInit();

  // node_modules/@uiw/codemirror-theme-aura/esm/index.js
  var defaultSettingsAura = {
    background: "#21202e",
    foreground: "#edecee",
    caret: "#a277ff",
    selection: "#5a51898f",
    selectionMatch: "#5a51898f",
    gutterBackground: "#21202e",
    gutterForeground: "#edecee",
    gutterBorder: "transparent",
    lineHighlight: "#a394f033"
  };
  var auraDarkStyle = [{
    tag: tags.keyword,
    color: "#a277ff"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: "#edecee"
  }, {
    tag: [tags.propertyName],
    color: "#ffca85"
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: "#61ffca"
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: "#ffca85"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#61ffca"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#edecee"
  }, {
    tag: [tags.className],
    color: "#82e2ff"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#61ffca"
  }, {
    tag: [tags.typeName],
    color: "#82e2ff"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#a277ff"
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: "#61ffca"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#6d6d6d"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#a277ff"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#edecee"
  }, {
    tag: tags.invalid,
    color: "#ff6767"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var auraInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsAura, settings),
      styles: [...auraDarkStyle, ...styles]
    });
  }, "auraInit");
  var aura = auraInit();

  // node_modules/@uiw/codemirror-theme-basic/esm/dark.js
  var defaultSettingsBasicDark = {
    background: "#2E3235",
    foreground: "#DDDDDD",
    caret: "#DDDDDD",
    selection: "#202325",
    selectionMatch: "#202325",
    gutterBackground: "#292d30",
    gutterForeground: "#808080",
    gutterBorder: "1px solid #ffffff10",
    lineHighlight: "#B9D2FF30"
  };
  var basicDarkStyle = [{
    tag: tags.keyword,
    color: "#fda331"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
    color: "#b5bd68"
  }, {
    tag: [tags.variableName],
    color: "#6fb3d2"
  }, {
    tag: [tags.function(tags.variableName)],
    color: "#fda331"
  }, {
    tag: [tags.labelName],
    color: "#fc6d24"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#fda331"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#cc99cc"
  }, {
    tag: [tags.brace],
    color: "#cc99cc"
  }, {
    tag: [tags.annotation],
    color: "#fc6d24"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#fda331"
  }, {
    tag: [tags.typeName, tags.className],
    color: "#6fb3d2"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#cc99cc"
  }, {
    tag: [tags.tagName],
    color: "#fda331"
  }, {
    tag: [tags.squareBracket],
    color: "#cc99cc"
  }, {
    tag: [tags.angleBracket],
    color: "#cc99cc"
  }, {
    tag: [tags.attributeName],
    color: "#6fb3d2"
  }, {
    tag: [tags.regexp],
    color: "#fda331"
  }, {
    tag: [tags.quote],
    color: "#DDDDDD"
  }, {
    tag: [tags.string],
    color: "#b5bd68"
  }, {
    tag: tags.link,
    color: "#6987AF",
    textDecoration: "underline",
    textUnderlinePosition: "under"
  }, {
    tag: [tags.url, tags.escape, tags.special(tags.string)],
    color: "#8abeb7"
  }, {
    tag: [tags.meta],
    color: "#A54543"
  }, {
    tag: [tags.comment],
    color: "#808080",
    fontStyle: "italic"
  }, {
    tag: tags.monospace,
    color: "#DDDDDD"
  }, {
    tag: tags.strong,
    fontWeight: "bold",
    color: "#fda331"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic",
    color: "#6fb3d2"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#DDDDDD"
  }, {
    tag: tags.special(tags.heading1),
    fontWeight: "bold",
    color: "#DDDDDD"
  }, {
    tag: tags.heading1,
    fontWeight: "bold",
    color: "#DDDDDD"
  }, {
    tag: [tags.heading2, tags.heading3, tags.heading4],
    fontWeight: "bold",
    color: "#DDDDDD"
  }, {
    tag: [tags.heading5, tags.heading6],
    color: "#DDDDDD"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#8abeb7"
  }, {
    tag: [tags.processingInstruction, tags.inserted],
    color: "#8abeb7"
  }, {
    tag: [tags.contentSeparator],
    color: "#6fb3d2"
  }, {
    tag: tags.invalid,
    color: "#B9D2FF",
    borderBottom: "1px dotted #fc6d24"
  }];
  var basicDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsBasicDark, settings),
      styles: [...basicDarkStyle, ...styles]
    });
  }, "basicDarkInit");
  var basicDark = basicDarkInit();

  // node_modules/@uiw/codemirror-theme-basic/esm/light.js
  var defaultSettingsBasicLight = {
    background: "#ffffff",
    foreground: "#2e3440",
    caret: "#3b4252",
    selection: "#eceff4",
    selectionMatch: "#e5e9f0",
    gutterBackground: "#eceff4",
    gutterForeground: "#2e3440",
    gutterBorder: "none",
    lineHighlight: "#02255f11"
  };
  var basicLightStyle = [{
    tag: tags.keyword,
    color: "#5e81ac"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
    color: "#d08770"
  }, {
    tag: [tags.variableName],
    color: "#d08770"
  }, {
    tag: [tags.function(tags.variableName)],
    color: "#5e81ac"
  }, {
    tag: [tags.labelName],
    color: "#81a1c1"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#5e81ac"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#a3be8c"
  }, {
    tag: [tags.brace],
    color: "#8fbcbb"
  }, {
    tag: [tags.annotation],
    color: "#d30102"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#88c0d0"
  }, {
    tag: [tags.typeName, tags.className],
    color: "#ebcb8b"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#a3be8c"
  }, {
    tag: [tags.tagName],
    color: "#b48ead"
  }, {
    tag: [tags.squareBracket],
    color: "#bf616a"
  }, {
    tag: [tags.angleBracket],
    color: "#d08770"
  }, {
    tag: [tags.attributeName],
    color: "#ebcb8b"
  }, {
    tag: [tags.regexp],
    color: "#5e81ac"
  }, {
    tag: [tags.quote],
    color: "#3b4252"
  }, {
    tag: [tags.string],
    color: "#d08770"
  }, {
    tag: tags.link,
    color: "#8fbcbb",
    textDecoration: "underline",
    textUnderlinePosition: "under"
  }, {
    tag: [tags.url, tags.escape, tags.special(tags.string)],
    color: "#d08770"
  }, {
    tag: [tags.meta],
    color: "#88c0d0"
  }, {
    tag: [tags.comment],
    color: "#434c5e",
    fontStyle: "italic"
  }, {
    tag: tags.strong,
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic",
    color: "#5e81ac"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: tags.special(tags.heading1),
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: tags.heading1,
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: [tags.heading2, tags.heading3, tags.heading4],
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: [tags.heading5, tags.heading6],
    color: "#5e81ac"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#d08770"
  }, {
    tag: [tags.processingInstruction, tags.inserted],
    color: "#8fbcbb"
  }, {
    tag: [tags.contentSeparator],
    color: "#ebcb8b"
  }, {
    tag: tags.invalid,
    color: "#434c5e",
    borderBottom: "1px dotted #d30102"
  }];
  var basicLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsBasicLight, settings),
      styles: [...basicLightStyle, ...styles]
    });
  }, "basicLightInit");
  var basicLight = basicLightInit();

  // node_modules/@uiw/codemirror-theme-bbedit/esm/index.js
  var defaultSettingsBbedit = {
    background: "#FFFFFF",
    foreground: "#000000",
    caret: "#FBAC52",
    selection: "#FFD420",
    selectionMatch: "#FFD420",
    gutterBackground: "#f5f5f5",
    gutterForeground: "#4D4D4C",
    gutterBorder: "transparent",
    lineHighlight: "#00000012"
  };
  var bbeditLightStyle = [{
    tag: [tags.meta, tags.comment],
    color: "#804000"
  }, {
    tag: [tags.keyword, tags.strong],
    color: "#0000FF"
  }, {
    tag: [tags.number],
    color: "#FF0080"
  }, {
    tag: [tags.string],
    color: "#FF0080"
  }, {
    tag: [tags.variableName],
    color: "#006600"
  }, {
    tag: [tags.escape],
    color: "#33CC33"
  }, {
    tag: [tags.tagName],
    color: "#1C02FF"
  }, {
    tag: [tags.heading],
    color: "#0C07FF"
  }, {
    tag: [tags.quote],
    color: "#000000"
  }, {
    tag: [tags.list],
    color: "#B90690"
  }, {
    tag: [tags.documentMeta],
    color: "#888888"
  }, {
    tag: [tags.function(tags.variableName)],
    color: "#0000A2"
  }, {
    tag: [tags.definition(tags.typeName), tags.typeName],
    color: "#6D79DE"
  }];
  var bbeditInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsBbedit, settings),
      styles: [...bbeditLightStyle, ...styles]
    });
  }, "bbeditInit");
  var bbedit = bbeditInit();

  // node_modules/@uiw/codemirror-theme-bespin/esm/index.js
  var defaultSettingsBespin = {
    background: "#28211c",
    foreground: "#9d9b97",
    caret: "#797977",
    selection: "#4f382b",
    selectionMatch: "#4f382b",
    gutterBackground: "#28211c",
    gutterForeground: "#666666",
    lineHighlight: "#ffffff1a"
  };
  var bespinDarkStyle = [{
    tag: [tags.atom, tags.number, tags.link, tags.bool],
    color: "#9b859d"
  }, {
    tag: tags.comment,
    color: "#937121"
  }, {
    tag: [tags.keyword, tags.tagName],
    color: "#cf6a4c"
  }, {
    tag: tags.string,
    color: "#f9ee98"
  }, {
    tag: tags.bracket,
    color: "#9d9b97"
  }, {
    tag: [tags.variableName],
    color: "#5ea6ea"
  }, {
    tag: tags.definition(tags.variableName),
    color: "#cf7d34"
  }, {
    tag: [tags.function(tags.variableName), tags.className],
    color: "#cf7d34"
  }, {
    tag: [tags.propertyName, tags.attributeName],
    color: "#54be0d"
  }];
  var bespinInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsBespin, settings),
      styles: [...bespinDarkStyle, ...styles]
    });
  }, "bespinInit");
  var bespin = bespinInit();

  // node_modules/@uiw/codemirror-theme-console/esm/dark.js
  var defaultSettingsConsoleDark = {
    background: "#000",
    foreground: "#fff",
    caret: "#fff",
    selection: "#5c6c9b",
    selectionMatch: "#2a3967",
    gutterBackground: "#000",
    gutterForeground: "#ada9a9",
    gutterActiveForeground: "#fff",
    lineHighlight: "#82828275"
  };
  var consoleDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsConsoleDark, settings),
      styles: [...styles]
    });
  }, "consoleDarkInit");
  var consoleDark = consoleDarkInit();

  // node_modules/@uiw/codemirror-theme-console/esm/light.js
  var defaultSettingsConsoleLight = {
    background: "#fff",
    foreground: "#000",
    caret: "#000",
    selection: "#c2d2ff",
    selectionMatch: "#b1c1ef",
    gutterBackground: "#fff",
    gutterForeground: "#ada9a9",
    gutterActiveForeground: "#000",
    lineHighlight: "#c7c5c575"
  };
  var consoleLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsConsoleLight, settings),
      styles: [...styles]
    });
  }, "consoleLightInit");
  var consoleLight = consoleLightInit();

  // node_modules/@uiw/codemirror-theme-copilot/esm/color.js
  var config4 = {
    background: "#232a2f",
    foreground: "#939da5",
    selection: "#204062",
    selectionMatch: "#204062",
    cursor: "#939da5",
    dropdownBackground: "#1a2023",
    activeLine: "#4469832b",
    matchingBracket: "#204062",
    keyword: "#ba8ef7",
    storage: "#ba8ef7",
    variable: "#939da5",
    parameter: "#939da5",
    function: "#ffea6b",
    string: "#5bec95",
    constant: "#939da5",
    type: "#89ddff",
    class: "#ffea6b",
    number: "#89ddff",
    comment: "#707a84",
    heading: "#5bec95",
    invalid: "#ff6a80",
    regexp: "#56adb7",
    tag: "#ff6a80"
  };

  // node_modules/@uiw/codemirror-theme-copilot/esm/index.js
  var defaultSettingsCopilot = {
    background: config4.background,
    foreground: config4.foreground,
    caret: config4.cursor,
    selection: config4.selection,
    selectionMatch: config4.selectionMatch,
    gutterBackground: config4.background,
    gutterForeground: config4.foreground,
    lineHighlight: config4.activeLine
  };
  var copilotDarkStyle = [{
    tag: tags.keyword,
    color: config4.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config4.variable
  }, {
    tag: [tags.propertyName],
    color: config4.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config4.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config4.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config4.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config4.variable
  }, {
    tag: [tags.className],
    color: config4.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config4.number
  }, {
    tag: [tags.typeName],
    color: config4.type,
    fontStyle: config4.type
  }, {
    tag: [tags.operator],
    color: config4.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config4.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config4.comment
  }, {
    tag: tags.tagName,
    color: config4.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config4.heading
  }, {
    tag: [tags.atom, tags.special(tags.variableName)],
    color: config4.variable
  }, {
    tag: tags.invalid,
    color: config4.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: [tags.operatorKeyword, tags.bool, tags.null, tags.variableName],
    color: config4.constant
  }];
  var copilotInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsCopilot, settings),
      styles: [...copilotDarkStyle, ...styles]
    });
  }, "copilotInit");
  var copilot = copilotInit();

  // node_modules/@uiw/codemirror-theme-darcula/esm/index.js
  var defaultSettingsDarcula = {
    background: "#2B2B2B",
    foreground: "#f8f8f2",
    caret: "#FFFFFF",
    selection: "rgba(255, 255, 255, 0.1)",
    selectionMatch: "rgba(255, 255, 255, 0.2)",
    gutterBackground: "rgba(255, 255, 255, 0.1)",
    gutterForeground: "#999",
    gutterBorder: "transparent",
    lineHighlight: "rgba(255, 255, 255, 0.1)"
  };
  var darculaDarkStyle = [{
    tag: [tags.atom, tags.number],
    color: "#bd93f9"
  }, {
    tag: [tags.comment],
    color: "#61A151"
  }, {
    tag: [tags.string],
    color: "#6A8759"
  }, {
    tag: [tags.variableName, tags.operator],
    color: "#A9B7C6"
  }, {
    tag: [tags.meta, tags.className],
    color: "#A9B7C6"
  }, {
    tag: [tags.propertyName],
    color: "#FFC66D"
  }, {
    tag: [tags.keyword],
    color: "#CC7832"
  }, {
    tag: [tags.tagName],
    color: "#ff79c6"
  }, {
    tag: [tags.typeName],
    color: "#ffb86c"
  }];
  var darculaInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsDarcula, settings),
      styles: [...darculaDarkStyle, ...styles]
    });
  }, "darculaInit");
  var darcula = darculaInit();

  // node_modules/@uiw/codemirror-theme-dracula/esm/index.js
  var defaultSettingsDracula = {
    background: "#282a36",
    foreground: "#f8f8f2",
    caret: "#f8f8f0",
    selection: "rgba(255, 255, 255, 0.1)",
    selectionMatch: "rgba(255, 255, 255, 0.2)",
    gutterBackground: "#282a36",
    gutterForeground: "#6D8A88",
    gutterBorder: "transparent",
    lineHighlight: "rgba(255, 255, 255, 0.1)"
  };
  var draculaDarkStyle = [{
    tag: tags.comment,
    color: "#6272a4"
  }, {
    tag: tags.string,
    color: "#f1fa8c"
  }, {
    tag: tags.atom,
    color: "#bd93f9"
  }, {
    tag: tags.meta,
    color: "#f8f8f2"
  }, {
    tag: [tags.keyword, tags.operator, tags.tagName],
    color: "#ff79c6"
  }, {
    tag: [tags.function(tags.propertyName), tags.propertyName],
    color: "#66d9ef"
  }, {
    tag: [tags.definition(tags.variableName), tags.function(tags.variableName), tags.className, tags.attributeName],
    color: "#50fa7b"
  }, {
    tag: tags.atom,
    color: "#bd93f9"
  }];
  var draculaInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsDracula, settings),
      styles: [...draculaDarkStyle, ...styles]
    });
  }, "draculaInit");
  var dracula = draculaInit();

  // node_modules/@uiw/codemirror-theme-duotone/esm/index.js
  var defaultSettingsDuotoneLight = {
    background: "#faf8f5",
    foreground: "#b29762",
    caret: "#93abdc",
    selection: "#e3dcce",
    selectionMatch: "#e3dcce",
    gutterBackground: "#faf8f5",
    gutterForeground: "#cdc4b1",
    gutterBorder: "transparent",
    lineHighlight: "#ddceb154"
  };
  var douToneLightStyle = [{
    tag: [tags.comment, tags.bracket],
    color: "#b6ad9a"
  }, {
    tag: [tags.atom, tags.number, tags.keyword, tags.link, tags.attributeName, tags.quote],
    color: "#063289"
  }, {
    tag: [tags.emphasis, tags.heading, tags.tagName, tags.propertyName, tags.variableName],
    color: "#2d2006"
  }, {
    tag: [tags.typeName, tags.url, tags.string],
    color: "#896724"
  }, {
    tag: [tags.operator, tags.string],
    color: "#1659df"
  }, {
    tag: [tags.propertyName],
    color: "#b29762"
  }, {
    tag: [tags.unit, tags.punctuation],
    color: "#063289"
  }];
  var duotoneLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsDuotoneLight, settings),
      styles: [...douToneLightStyle, ...styles]
    });
  }, "duotoneLightInit");
  var duotoneLight = duotoneLightInit();
  var defaultSettingsDuotoneDark = {
    background: "#2a2734",
    foreground: "#6c6783",
    caret: "#ffad5c",
    selection: "#91ff6c26",
    selectionMatch: "#91ff6c26",
    gutterBackground: "#2a2734",
    gutterForeground: "#545167",
    lineHighlight: "#36334280"
  };
  var duotoneDarkStyle = [{
    tag: [tags.comment, tags.bracket],
    color: "#6c6783"
  }, {
    tag: [tags.atom, tags.number, tags.keyword, tags.link, tags.attributeName, tags.quote],
    color: "#ffcc99"
  }, {
    tag: [tags.emphasis, tags.heading, tags.tagName, tags.propertyName, tags.className, tags.variableName],
    color: "#eeebff"
  }, {
    tag: [tags.typeName, tags.url],
    color: "#7a63ee"
  }, {
    tag: tags.operator,
    color: "#ffad5c"
  }, {
    tag: tags.string,
    color: "#ffb870"
  }, {
    tag: [tags.propertyName],
    color: "#9a86fd"
  }, {
    tag: [tags.unit, tags.punctuation],
    color: "#e09142"
  }];
  var duotoneDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsDuotoneDark, settings),
      styles: [...duotoneDarkStyle, ...styles]
    });
  }, "duotoneDarkInit");
  var duotoneDark = duotoneDarkInit();

  // node_modules/@uiw/codemirror-theme-eclipse/esm/index.js
  var defaultSettingsEclipse = {
    background: "#fff",
    foreground: "#000",
    caret: "#FFFFFF",
    selection: "#d7d4f0",
    selectionMatch: "#d7d4f0",
    gutterBackground: "#f7f7f7",
    gutterForeground: "#999",
    lineHighlight: "#006fff1c",
    gutterBorder: "transparent"
  };
  var eclipseLightStyle = [{
    tag: [tags.comment],
    color: "#3F7F5F"
  }, {
    tag: [tags.documentMeta],
    color: "#FF1717"
  }, {
    tag: tags.keyword,
    color: "#7F0055",
    fontWeight: "bold"
  }, {
    tag: tags.atom,
    color: "#00f"
  }, {
    tag: tags.number,
    color: "#164"
  }, {
    tag: tags.propertyName,
    color: "#164"
  }, {
    tag: [tags.variableName, tags.definition(tags.variableName)],
    color: "#0000C0"
  }, {
    tag: tags.function(tags.variableName),
    color: "#0000C0"
  }, {
    tag: tags.string,
    color: "#2A00FF"
  }, {
    tag: tags.operator,
    color: "black"
  }, {
    tag: tags.tagName,
    color: "#170"
  }, {
    tag: tags.attributeName,
    color: "#00c"
  }, {
    tag: tags.link,
    color: "#219"
  }];
  var eclipseInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsEclipse, settings),
      styles: [...eclipseLightStyle, ...styles]
    });
  }, "eclipseInit");
  var eclipse = eclipseInit();

  // node_modules/@uiw/codemirror-theme-github/esm/index.js
  var defaultSettingsGithubLight = {
    background: "#fff",
    foreground: "#24292e",
    selection: "#BBDFFF",
    selectionMatch: "#BBDFFF",
    gutterBackground: "#fff",
    gutterForeground: "#6e7781"
  };
  var githubLightStyle = [{
    tag: [tags.standard(tags.tagName), tags.tagName],
    color: "#116329"
  }, {
    tag: [tags.comment, tags.bracket],
    color: "#6a737d"
  }, {
    tag: [tags.className, tags.propertyName],
    color: "#6f42c1"
  }, {
    tag: [tags.variableName, tags.attributeName, tags.number, tags.operator],
    color: "#005cc5"
  }, {
    tag: [tags.keyword, tags.typeName, tags.typeOperator, tags.typeName],
    color: "#d73a49"
  }, {
    tag: [tags.string, tags.meta, tags.regexp],
    color: "#032f62"
  }, {
    tag: [tags.name, tags.quote],
    color: "#22863a"
  }, {
    tag: [tags.heading, tags.strong],
    color: "#24292e",
    fontWeight: "bold"
  }, {
    tag: [tags.emphasis],
    color: "#24292e",
    fontStyle: "italic"
  }, {
    tag: [tags.deleted],
    color: "#b31d28",
    backgroundColor: "ffeef0"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#e36209"
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: "#032f62"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.invalid,
    color: "#cb2431"
  }];
  var githubLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsGithubLight, settings),
      styles: [...githubLightStyle, ...styles]
    });
  }, "githubLightInit");
  var githubLight = githubLightInit();
  var defaultSettingsGithubDark = {
    background: "#0d1117",
    foreground: "#c9d1d9",
    caret: "#c9d1d9",
    selection: "#003d73",
    selectionMatch: "#003d73",
    lineHighlight: "#36334280"
  };
  var githubDarkStyle = [{
    tag: [tags.standard(tags.tagName), tags.tagName],
    color: "#7ee787"
  }, {
    tag: [tags.comment, tags.bracket],
    color: "#8b949e"
  }, {
    tag: [tags.className, tags.propertyName],
    color: "#d2a8ff"
  }, {
    tag: [tags.variableName, tags.attributeName, tags.number, tags.operator],
    color: "#79c0ff"
  }, {
    tag: [tags.keyword, tags.typeName, tags.typeOperator, tags.typeName],
    color: "#ff7b72"
  }, {
    tag: [tags.string, tags.meta, tags.regexp],
    color: "#a5d6ff"
  }, {
    tag: [tags.name, tags.quote],
    color: "#7ee787"
  }, {
    tag: [tags.heading, tags.strong],
    color: "#d2a8ff",
    fontWeight: "bold"
  }, {
    tag: [tags.emphasis],
    color: "#d2a8ff",
    fontStyle: "italic"
  }, {
    tag: [tags.deleted],
    color: "#ffdcd7",
    backgroundColor: "ffeef0"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#ffab70"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.invalid,
    color: "#f97583"
  }];
  var githubDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsGithubDark, settings),
      styles: [...githubDarkStyle, ...styles]
    });
  }, "githubDarkInit");
  var githubDark = githubDarkInit();

  // node_modules/@uiw/codemirror-theme-gruvbox-dark/esm/index.js
  var defaultSettingsGruvboxDark = {
    background: "#282828",
    foreground: "#ebdbb2",
    caret: "#ebdbb2",
    selection: "#b99d555c",
    selectionMatch: "#b99d555c",
    lineHighlight: "#baa1602b",
    gutterBackground: "#282828",
    gutterForeground: "#7c6f64"
  };
  var gruvboxDarkStyle = [{
    tag: tags.keyword,
    color: "#fb4934"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
    color: "#8ec07c"
  }, {
    tag: [tags.variableName],
    color: "#83a598"
  }, {
    tag: [tags.function(tags.variableName)],
    color: "#b8bb26",
    fontStyle: "bold"
  }, {
    tag: [tags.labelName],
    color: "#ebdbb2"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#d3869b"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#ebdbb2"
  }, {
    tag: [tags.brace],
    color: "#ebdbb2"
  }, {
    tag: [tags.annotation],
    color: "#fb4934d"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#d3869b"
  }, {
    tag: [tags.typeName, tags.className],
    color: "#fabd2f"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#fb4934"
  }, {
    tag: [tags.tagName],
    color: "#8ec07c",
    fontStyle: "bold"
  }, {
    tag: [tags.squareBracket],
    color: "#fe8019"
  }, {
    tag: [tags.angleBracket],
    color: "#83a598"
  }, {
    tag: [tags.attributeName],
    color: "#8ec07c"
  }, {
    tag: [tags.regexp],
    color: "#8ec07c"
  }, {
    tag: [tags.quote],
    color: "#928374"
  }, {
    tag: [tags.string],
    color: "#ebdbb2"
  }, {
    tag: tags.link,
    color: "#a89984",
    textDecoration: "underline",
    textUnderlinePosition: "under"
  }, {
    tag: [tags.url, tags.escape, tags.special(tags.string)],
    color: "#d3869b"
  }, {
    tag: [tags.meta],
    color: "#fabd2f"
  }, {
    tag: [tags.comment],
    color: "#928374",
    fontStyle: "italic"
  }, {
    tag: tags.strong,
    fontWeight: "bold",
    color: "#fe8019"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic",
    color: "#b8bb26"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#b8bb26"
  }, {
    tag: [tags.heading1, tags.heading2],
    fontWeight: "bold",
    color: "#b8bb26"
  }, {
    tag: [tags.heading3, tags.heading4],
    fontWeight: "bold",
    color: "#fabd2f"
  }, {
    tag: [tags.heading5, tags.heading6],
    color: "#fabd2f"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#d3869b"
  }, {
    tag: [tags.processingInstruction, tags.inserted],
    color: "#83a598"
  }, {
    tag: [tags.contentSeparator],
    color: "#fb4934"
  }, {
    tag: tags.invalid,
    color: "#fe8019",
    borderBottom: "1px dotted #fb4934d"
  }];
  var gruvboxDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsGruvboxDark, settings),
      styles: [...gruvboxDarkStyle, ...styles]
    });
  }, "gruvboxDarkInit");
  var gruvboxDark = gruvboxDarkInit();
  var defaultSettingsGruvboxLight = {
    background: "#fbf1c7",
    foreground: "#3c3836",
    caret: "#af3a03",
    selection: "#bdae9391",
    selectionMatch: "#bdae9391",
    lineHighlight: "#a37f2238",
    gutterBackground: "#ebdbb2",
    gutterForeground: "#665c54",
    gutterBorder: "transparent"
  };
  var gruvboxLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsGruvboxLight, settings),
      styles: [{
        tag: tags.keyword,
        color: "#9d0006"
      }, {
        tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
        color: "#427b58"
      }, {
        tag: [tags.variableName],
        color: "#076678"
      }, {
        tag: [tags.function(tags.variableName)],
        color: "#79740e",
        fontStyle: "bold"
      }, {
        tag: [tags.labelName],
        color: "#3c3836"
      }, {
        tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
        color: "#8f3f71"
      }, {
        tag: [tags.definition(tags.name), tags.separator],
        color: "#3c3836"
      }, {
        tag: [tags.brace],
        color: "#3c3836"
      }, {
        tag: [tags.annotation],
        color: "#9d0006"
      }, {
        tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
        color: "#8f3f71"
      }, {
        tag: [tags.typeName, tags.className],
        color: "#b57614"
      }, {
        tag: [tags.operator, tags.operatorKeyword],
        color: "#9d0006"
      }, {
        tag: [tags.tagName],
        color: "#427b58",
        fontStyle: "bold"
      }, {
        tag: [tags.squareBracket],
        color: "#af3a03"
      }, {
        tag: [tags.angleBracket],
        color: "#076678"
      }, {
        tag: [tags.attributeName],
        color: "#427b58"
      }, {
        tag: [tags.regexp],
        color: "#427b58"
      }, {
        tag: [tags.quote],
        color: "#928374"
      }, {
        tag: [tags.string],
        color: "#3c3836"
      }, {
        tag: tags.link,
        color: "#7c6f64",
        textDecoration: "underline",
        textUnderlinePosition: "under"
      }, {
        tag: [tags.url, tags.escape, tags.special(tags.string)],
        color: "#8f3f71"
      }, {
        tag: [tags.meta],
        color: "#b57614"
      }, {
        tag: [tags.comment],
        color: "#928374",
        fontStyle: "italic"
      }, {
        tag: tags.strong,
        fontWeight: "bold",
        color: "#af3a03"
      }, {
        tag: tags.emphasis,
        fontStyle: "italic",
        color: "#79740e"
      }, {
        tag: tags.strikethrough,
        textDecoration: "line-through"
      }, {
        tag: tags.heading,
        fontWeight: "bold",
        color: "#79740e"
      }, {
        tag: [tags.heading1, tags.heading2],
        fontWeight: "bold",
        color: "#79740e"
      }, {
        tag: [tags.heading3, tags.heading4],
        fontWeight: "bold",
        color: "#b57614"
      }, {
        tag: [tags.heading5, tags.heading6],
        color: "#b57614"
      }, {
        tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
        color: "#8f3f71"
      }, {
        tag: [tags.processingInstruction, tags.inserted],
        color: "#076678"
      }, {
        tag: [tags.contentSeparator],
        color: "#9d0006"
      }, {
        tag: tags.invalid,
        color: "#af3a03",
        borderBottom: "1px dotted #9d0006"
      }, ...styles]
    });
  }, "gruvboxLightInit");
  var gruvboxLight = gruvboxLightInit();

  // node_modules/@uiw/codemirror-theme-kimbie/esm/color.js
  var config5 = {
    background: "#221a0f",
    foreground: "#d3af86",
    selection: "#84613daa",
    selectionMatch: "#84613daa",
    cursor: "#d3af86",
    dropdownBackground: "#51412c",
    activeLine: "#5e452b52",
    matchingBracket: "#5e452b",
    keyword: "#98676a",
    storage: "#98676a",
    variable: "#dc3958",
    parameter: "#dc3958",
    function: "#7e602c",
    string: "#889b4a",
    constant: "#f79a32",
    type: "#f06431",
    class: "#f06431",
    number: "#f79a32",
    comment: "#a57a4c",
    heading: "#8ab1b0",
    invalid: "#dc3958",
    regexp: "#7e602c",
    tag: "#dc3958"
  };

  // node_modules/@uiw/codemirror-theme-kimbie/esm/index.js
  var defaultSettingsKimbie = {
    background: config5.background,
    foreground: config5.foreground,
    caret: config5.cursor,
    selection: config5.selection,
    selectionMatch: config5.selection,
    gutterBackground: config5.background,
    gutterForeground: config5.foreground,
    lineHighlight: config5.activeLine
  };
  var kimbieDarkStyle = [{
    tag: tags.keyword,
    color: config5.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config5.variable
  }, {
    tag: [tags.propertyName],
    color: config5.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config5.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config5.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config5.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config5.variable
  }, {
    tag: [tags.className],
    color: config5.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config5.number
  }, {
    tag: [tags.typeName],
    color: config5.type,
    fontStyle: config5.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config5.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config5.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config5.comment
  }, {
    tag: tags.tagName,
    color: config5.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config5.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config5.variable
  }, {
    tag: tags.invalid,
    color: config5.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var kimbieInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsKimbie, settings),
      styles: [...kimbieDarkStyle, ...styles]
    });
  }, "kimbieInit");
  var kimbie = kimbieInit();

  // node_modules/@uiw/codemirror-theme-material/esm/index.js
  var defaultSettingsMaterial = {
    background: "#2e3235",
    foreground: "#bdbdbd",
    caret: "#a0a4ae",
    selection: "#d7d4f063",
    selectionMatch: "#d7d4f063",
    gutterBackground: "#2e3235",
    gutterForeground: "#999",
    gutterActiveForeground: "#4f5b66",
    lineHighlight: "#545b6130"
  };
  var defaultSettingsMaterialDark = defaultSettingsMaterial;
  var materialDarkStyle = [{
    tag: tags.keyword,
    color: "#cf6edf"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: "#56c8d8"
  }, {
    tag: [tags.propertyName],
    color: "#facf4e"
  }, {
    tag: [tags.variableName],
    color: "#bdbdbd"
  }, {
    tag: [tags.function(tags.variableName)],
    color: "#56c8d8"
  }, {
    tag: [tags.labelName],
    color: "#cf6edf"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#facf4e"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#fa5788"
  }, {
    tag: [tags.brace],
    color: "#cf6edf"
  }, {
    tag: [tags.annotation],
    color: "#ff5f52"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#ffad42"
  }, {
    tag: [tags.typeName, tags.className],
    color: "#ffad42"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#7186f0"
  }, {
    tag: [tags.tagName],
    color: "#99d066"
  }, {
    tag: [tags.squareBracket],
    color: "#ff5f52"
  }, {
    tag: [tags.angleBracket],
    color: "#606f7a"
  }, {
    tag: [tags.attributeName],
    color: "#bdbdbd"
  }, {
    tag: [tags.regexp],
    color: "#ff5f52"
  }, {
    tag: [tags.quote],
    color: "#6abf69"
  }, {
    tag: [tags.string],
    color: "#99d066"
  }, {
    tag: tags.link,
    color: "#56c8d8",
    textDecoration: "underline",
    textUnderlinePosition: "under"
  }, {
    tag: [tags.url, tags.escape, tags.special(tags.string)],
    color: "#facf4e"
  }, {
    tag: [tags.meta],
    color: "#707d8b"
  }, {
    tag: [tags.comment],
    color: "#707d8b",
    fontStyle: "italic"
  }, {
    tag: tags.monospace,
    color: "#bdbdbd"
  }, {
    tag: tags.strong,
    fontWeight: "bold",
    color: "#ff5f52"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic",
    color: "#99d066"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#facf4e"
  }, {
    tag: tags.heading1,
    fontWeight: "bold",
    color: "#facf4e"
  }, {
    tag: [tags.heading2, tags.heading3, tags.heading4],
    fontWeight: "bold",
    color: "#facf4e"
  }, {
    tag: [tags.heading5, tags.heading6],
    color: "#facf4e"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#56c8d8"
  }, {
    tag: [tags.processingInstruction, tags.inserted],
    color: "#ff5f52"
  }, {
    tag: [tags.contentSeparator],
    color: "#56c8d8"
  }, {
    tag: tags.invalid,
    color: "#606f7a",
    borderBottom: "1px dotted #ff5f52"
  }];
  var materialInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsMaterial, settings),
      styles: [...materialDarkStyle, ...styles]
    });
  }, "materialInit");
  var materialDarkInit = materialInit;
  var materialDark = materialInit();
  var material = materialInit();
  var defaultSettingsMaterialLight = {
    background: "#FAFAFA",
    foreground: "#90A4AE",
    caret: "#272727",
    selection: "#80CBC440",
    selectionMatch: "#80CBC440",
    gutterBackground: "#FAFAFA",
    gutterForeground: "#90A4AE",
    gutterBorder: "transparent",
    lineHighlight: "#CCD7DA50"
  };
  var materialLightStyle = [{
    tag: tags.keyword,
    color: "#39ADB5"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: "#90A4AE"
  }, {
    tag: [tags.propertyName],
    color: "#6182B8"
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: "#91B859"
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: "#6182B8"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#39ADB5"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#90A4AE"
  }, {
    tag: [tags.className],
    color: "#E2931D"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#F76D47"
  }, {
    tag: [tags.typeName],
    color: "#E2931D",
    fontStyle: "#E2931D"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#39ADB5"
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: "#91B859"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#90A4AE"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#39ADB5"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#90A4AE"
  }, {
    tag: tags.invalid,
    color: "#E5393570"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var materialLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsMaterialLight, settings),
      styles: [...materialLightStyle, ...styles]
    });
  }, "materialLightInit");
  var materialLight = materialLightInit();

  // node_modules/@uiw/codemirror-theme-monokai/esm/color.js
  var config6 = {
    background: "#272822",
    foreground: "#f8f8f2",
    selection: "#4a4a76",
    selectionMatch: "#4a4a76",
    cursor: "#f8f8f0",
    dropdownBackground: "#414339",
    activeLine: "#3e3d3257",
    matchingBracket: "#3e3d32",
    keyword: "#F92672",
    storage: "#F92672",
    variable: "#FD971F",
    parameter: "#FD971F",
    function: "#66D9EF",
    string: "#E6DB74",
    constant: "#AE81FF",
    type: "#66D9EF",
    class: "#A6E22E",
    number: "#AE81FF",
    comment: "#88846f",
    heading: "#A6E22E",
    invalid: "#F44747",
    regexp: "#E6DB74",
    tag: "#F92672"
  };

  // node_modules/@uiw/codemirror-theme-monokai/esm/index.js
  var defaultSettingsMonokai = {
    background: config6.background,
    foreground: config6.foreground,
    caret: config6.cursor,
    selection: config6.selection,
    selectionMatch: config6.selection,
    gutterBackground: config6.background,
    gutterForeground: config6.foreground,
    lineHighlight: config6.activeLine
  };
  var monokaiDarkStyle = [{
    tag: tags.keyword,
    color: config6.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config6.variable
  }, {
    tag: [tags.propertyName],
    color: config6.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config6.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config6.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config6.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config6.variable
  }, {
    tag: [tags.className],
    color: config6.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config6.number
  }, {
    tag: [tags.typeName],
    color: config6.type,
    fontStyle: config6.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config6.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config6.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config6.comment
  }, {
    tag: tags.tagName,
    color: config6.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config6.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config6.variable
  }, {
    tag: tags.invalid,
    color: config6.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var monokaiInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsMonokai, settings),
      styles: [...monokaiDarkStyle, ...styles]
    });
  }, "monokaiInit");
  var monokai = monokaiInit();

  // node_modules/@uiw/codemirror-theme-monokai-dimmed/esm/color.js
  var config7 = {
    background: "#1e1e1e",
    foreground: "#c5c8c6",
    selection: "#4747a1",
    selectionMatch: "#4747a1",
    cursor: "#c07020",
    dropdownBackground: "#525252",
    activeLine: "#30303078",
    matchingBracket: "#303030",
    keyword: "#676867",
    storage: "#676867",
    variable: "#c7444a",
    parameter: "#6089B4",
    function: "#9872A2",
    string: "#D08442",
    constant: "#8080FF",
    type: "#9B0000",
    class: "#CE6700",
    number: "#6089B4",
    comment: "#9A9B99",
    heading: "#D0B344",
    invalid: "#FF0B00",
    regexp: "#D08442",
    tag: "#6089B4"
  };

  // node_modules/@uiw/codemirror-theme-monokai-dimmed/esm/index.js
  var defaultSettingsMonokaiDimmed = {
    background: config7.background,
    foreground: config7.foreground,
    caret: config7.cursor,
    selection: config7.selection,
    selectionMatch: config7.selection,
    gutterBackground: config7.background,
    gutterForeground: config7.foreground,
    lineHighlight: config7.activeLine
  };
  var monokaiDimmedDarkStyle = [{
    tag: tags.keyword,
    color: config7.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config7.variable
  }, {
    tag: [tags.propertyName],
    color: config7.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config7.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config7.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config7.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config7.variable
  }, {
    tag: [tags.className],
    color: config7.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config7.number
  }, {
    tag: [tags.typeName],
    color: config7.type,
    fontStyle: config7.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config7.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config7.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config7.comment
  }, {
    tag: tags.tagName,
    color: config7.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config7.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config7.variable
  }, {
    tag: tags.invalid,
    color: config7.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var monokaiDimmedInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsMonokaiDimmed, settings),
      styles: [...monokaiDimmedDarkStyle, ...styles]
    });
  }, "monokaiDimmedInit");
  var monokaiDimmed = monokaiDimmedInit();

  // node_modules/@uiw/codemirror-theme-noctis-lilac/esm/index.js
  var defaultSettingsNoctisLilac = {
    background: "#f2f1f8",
    foreground: "#0c006b",
    caret: "#5c49e9",
    selection: "#d5d1f2",
    selectionMatch: "#d5d1f2",
    gutterBackground: "#f2f1f8",
    gutterForeground: "#0c006b70",
    lineHighlight: "#16067911"
  };
  var noctisLilacLightStyle = [{
    tag: tags.comment,
    color: "#9995b7"
  }, {
    tag: tags.keyword,
    color: "#ff5792",
    fontWeight: "bold"
  }, {
    tag: [tags.definitionKeyword, tags.modifier],
    color: "#ff5792"
  }, {
    tag: [tags.className, tags.tagName, tags.definition(tags.typeName)],
    color: "#0094f0"
  }, {
    tag: [tags.number, tags.bool, tags.null, tags.special(tags.brace)],
    color: "#5842ff"
  }, {
    tag: [tags.definition(tags.propertyName), tags.function(tags.variableName)],
    color: "#0095a8"
  }, {
    tag: tags.typeName,
    color: "#b3694d"
  }, {
    tag: [tags.propertyName, tags.variableName],
    color: "#fa8900"
  }, {
    tag: tags.operator,
    color: "#ff5792"
  }, {
    tag: tags.self,
    color: "#e64100"
  }, {
    tag: [tags.string, tags.regexp],
    color: "#00b368"
  }, {
    tag: [tags.paren, tags.bracket],
    color: "#0431fa"
  }, {
    tag: tags.labelName,
    color: "#00bdd6"
  }, {
    tag: tags.attributeName,
    color: "#e64100"
  }, {
    tag: tags.angleBracket,
    color: "#9995b7"
  }];
  var noctisLilacInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsNoctisLilac, settings),
      styles: [...noctisLilacLightStyle, ...styles]
    });
  }, "noctisLilacInit");
  var noctisLilac = noctisLilacInit();

  // node_modules/@uiw/codemirror-theme-nord/esm/index.js
  var defaultSettingsNord = {
    background: "#2e3440",
    foreground: "#FFFFFF",
    caret: "#FFFFFF",
    selection: "#00000073",
    selectionMatch: "#00000073",
    gutterBackground: "#2e3440",
    gutterForeground: "#4c566a",
    gutterActiveForeground: "#d8dee9",
    lineHighlight: "#4c566a29"
  };
  var nordDarkStyle = [{
    tag: tags.keyword,
    color: "#5e81ac"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
    color: "#88c0d0"
  }, {
    tag: [tags.variableName],
    color: "#8fbcbb"
  }, {
    tag: [tags.function(tags.variableName)],
    color: "#8fbcbb"
  }, {
    tag: [tags.labelName],
    color: "#81a1c1"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#5e81ac"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#a3be8c"
  }, {
    tag: [tags.brace],
    color: "#8fbcbb"
  }, {
    tag: [tags.annotation],
    color: "#d30102"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#b48ead"
  }, {
    tag: [tags.typeName, tags.className],
    color: "#ebcb8b"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#a3be8c"
  }, {
    tag: [tags.tagName],
    color: "#b48ead"
  }, {
    tag: [tags.squareBracket],
    color: "#bf616a"
  }, {
    tag: [tags.angleBracket],
    color: "#d08770"
  }, {
    tag: [tags.attributeName],
    color: "#ebcb8b"
  }, {
    tag: [tags.regexp],
    color: "#5e81ac"
  }, {
    tag: [tags.quote],
    color: "#b48ead"
  }, {
    tag: [tags.string],
    color: "#a3be8c"
  }, {
    tag: tags.link,
    color: "#a3be8c",
    textDecoration: "underline",
    textUnderlinePosition: "under"
  }, {
    tag: [tags.url, tags.escape, tags.special(tags.string)],
    color: "#8fbcbb"
  }, {
    tag: [tags.meta],
    color: "#88c0d0"
  }, {
    tag: [tags.monospace],
    color: "#d8dee9",
    fontStyle: "italic"
  }, {
    tag: [tags.comment],
    color: "#4c566a",
    fontStyle: "italic"
  }, {
    tag: tags.strong,
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic",
    color: "#5e81ac"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: tags.special(tags.heading1),
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: tags.heading1,
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: [tags.heading2, tags.heading3, tags.heading4],
    fontWeight: "bold",
    color: "#5e81ac"
  }, {
    tag: [tags.heading5, tags.heading6],
    color: "#5e81ac"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#d08770"
  }, {
    tag: [tags.processingInstruction, tags.inserted],
    color: "#8fbcbb"
  }, {
    tag: [tags.contentSeparator],
    color: "#ebcb8b"
  }, {
    tag: tags.invalid,
    color: "#434c5e",
    borderBottom: "1px dotted #d30102"
  }];
  var nordInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsNord, settings),
      styles: [...nordDarkStyle, ...styles]
    });
  }, "nordInit");
  var nord = nordInit();

  // node_modules/@uiw/codemirror-theme-okaidia/esm/index.js
  var defaultSettingsOkaidia = {
    background: "#272822",
    foreground: "#FFFFFF",
    caret: "#FFFFFF",
    selection: "#49483E",
    selectionMatch: "#49483E",
    gutterBackground: "#272822",
    gutterForeground: "#FFFFFF70",
    lineHighlight: "#0000003b"
  };
  var okaidiaDarkStyle = [
    {
      tag: [tags.comment, tags.documentMeta],
      color: "#8292a2"
    },
    {
      tag: [tags.number, tags.bool, tags.null, tags.atom],
      color: "#ae81ff"
    },
    {
      tag: [tags.attributeValue, tags.className, tags.name],
      color: "#e6db74"
    },
    {
      tag: [tags.propertyName, tags.attributeName],
      color: "#a6e22e"
    },
    {
      tag: [tags.variableName],
      color: "#9effff"
    },
    {
      tag: [tags.squareBracket],
      color: "#bababa"
    },
    {
      tag: [tags.string, tags.special(tags.brace)],
      color: "#e6db74"
    },
    {
      tag: [tags.regexp, tags.className, tags.typeName, tags.definition(tags.typeName)],
      color: "#66d9ef"
    },
    {
      tag: [tags.definition(tags.variableName), tags.definition(tags.propertyName), tags.function(tags.variableName)],
      color: "#fd971f"
    },
    // { tag: t.keyword, color: '#f92672' },
    {
      tag: [tags.keyword, tags.definitionKeyword, tags.modifier, tags.tagName, tags.angleBracket],
      color: "#f92672"
    }
  ];
  var okaidiaInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsOkaidia, settings),
      styles: [...okaidiaDarkStyle, ...styles]
    });
  }, "okaidiaInit");
  var okaidia = okaidiaInit();

  // node_modules/@uiw/codemirror-theme-quietlight/esm/color.js
  var config8 = {
    background: "#F5F5F5",
    foreground: "#333333",
    selection: "#C9D0D9",
    selectionMatch: "#C9D0D9",
    cursor: "#54494B",
    dropdownBackground: "#F5F5F5",
    activeLine: "#79ff002b",
    matchingBracket: "#E4F6D4",
    keyword: "#4B69C6",
    storage: "#4B69C6",
    variable: "#7A3E9D",
    parameter: "#7A3E9D",
    function: "#AA3731",
    string: "#448C27",
    constant: "#9C5D27",
    type: "#7A3E9D",
    class: "#AA3731",
    number: "#9C5D27",
    comment: "#AAAAAA",
    heading: "#AA3731",
    invalid: "#cd3131",
    regexp: "#4B69C6",
    tag: "#4B69C6"
  };

  // node_modules/@uiw/codemirror-theme-quietlight/esm/index.js
  var defaultSettingsQuietlight = {
    background: config8.background,
    foreground: config8.foreground,
    caret: config8.cursor,
    selection: config8.selection,
    selectionMatch: config8.selection,
    gutterBackground: config8.background,
    gutterForeground: config8.foreground,
    gutterBorder: "transparent",
    lineHighlight: config8.activeLine
  };
  var quietlightStyle = [{
    tag: tags.keyword,
    color: config8.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config8.variable
  }, {
    tag: [tags.propertyName],
    color: config8.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config8.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config8.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config8.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config8.variable
  }, {
    tag: [tags.className],
    color: config8.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config8.number
  }, {
    tag: [tags.typeName],
    color: config8.type,
    fontStyle: config8.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config8.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config8.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config8.comment
  }, {
    tag: tags.tagName,
    color: config8.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config8.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config8.variable
  }, {
    tag: tags.invalid,
    color: config8.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var quietlightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsQuietlight, settings),
      styles: [...quietlightStyle, ...styles]
    });
  }, "quietlightInit");
  var quietlight = quietlightInit();

  // node_modules/@uiw/codemirror-theme-red/esm/color.js
  var config9 = {
    background: "#390000",
    foreground: "#F8F8F8",
    selection: "#750000",
    selectionMatch: "#750000",
    cursor: "#970000",
    dropdownBackground: "#580000",
    activeLine: "#ff000033",
    matchingBracket: "#ff000033",
    keyword: "#f12727ff",
    storage: "#ff6262ff",
    variable: "#edef7dff",
    parameter: "#edef7dff",
    function: "#ffb454ff",
    string: "#edef7dff",
    constant: "#ec0d1e",
    type: "#9df39fff",
    class: "#fec758ff",
    number: "#994646ff",
    comment: "#e7c0c0ff",
    heading: "#fec758ff",
    invalid: "#ffffffff",
    regexp: "#edef7dff",
    tag: "#aa5507ff"
  };

  // node_modules/@uiw/codemirror-theme-red/esm/index.js
  var defaultSettingsRed = {
    background: config9.background,
    foreground: config9.foreground,
    caret: config9.cursor,
    selection: config9.selection,
    selectionMatch: config9.selection,
    gutterBackground: config9.background,
    gutterForeground: config9.foreground,
    lineHighlight: config9.activeLine
  };
  var redDarkStyle = [{
    tag: tags.keyword,
    color: config9.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config9.variable
  }, {
    tag: [tags.propertyName],
    color: config9.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config9.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config9.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config9.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config9.variable
  }, {
    tag: [tags.className],
    color: config9.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config9.number
  }, {
    tag: [tags.typeName],
    color: config9.type,
    fontStyle: config9.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config9.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config9.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config9.comment
  }, {
    tag: tags.tagName,
    color: config9.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config9.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config9.variable
  }, {
    tag: tags.invalid,
    color: config9.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var redInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsRed, settings),
      styles: [...redDarkStyle, ...styles]
    });
  }, "redInit");
  var red = redInit();

  // node_modules/@uiw/codemirror-theme-solarized/esm/dark-color.js
  var config10 = {
    background: "#002B36",
    foreground: "#839496",
    selection: "#004454AA",
    selectionMatch: "#005A6FAA",
    cursor: "#D30102",
    dropdownBackground: "#00212B",
    dropdownBorder: "#2AA19899",
    activeLine: "#00cafe11",
    matchingBracket: "#073642",
    keyword: "#859900",
    storage: "#93A1A1",
    variable: "#268BD2",
    parameter: "#268BD2",
    function: "#268BD2",
    string: "#2AA198",
    constant: "#CB4B16",
    type: "#859900",
    class: "#268BD2",
    number: "#D33682",
    comment: "#586E75",
    heading: "#268BD2",
    invalid: "#DC322F",
    regexp: "#DC322F",
    tag: "#268BD2"
  };

  // node_modules/@uiw/codemirror-theme-solarized/esm/dark.js
  var defaultSettingsSolarizedDark = {
    background: config10.background,
    foreground: config10.foreground,
    caret: config10.cursor,
    selection: config10.selection,
    selectionMatch: config10.selection,
    gutterBackground: config10.background,
    gutterForeground: config10.foreground,
    gutterBorder: "transparent",
    lineHighlight: config10.activeLine
  };
  var solarizedDarkStyle = [{
    tag: tags.keyword,
    color: config10.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config10.variable
  }, {
    tag: [tags.propertyName],
    color: config10.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config10.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config10.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config10.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config10.variable
  }, {
    tag: [tags.className],
    color: config10.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config10.number
  }, {
    tag: [tags.typeName],
    color: config10.type,
    fontStyle: config10.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config10.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config10.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config10.comment
  }, {
    tag: tags.tagName,
    color: config10.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config10.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config10.variable
  }, {
    tag: tags.invalid,
    color: config10.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var solarizedDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsSolarizedDark, settings),
      styles: [...solarizedDarkStyle, ...styles]
    });
  }, "solarizedDarkInit");
  var solarizedDark = solarizedDarkInit();

  // node_modules/@uiw/codemirror-theme-solarized/esm/light-color.js
  var config11 = {
    background: "#FDF6E3",
    foreground: "#657B83",
    selection: "#EEE8D5",
    selectionMatch: "#EEE8D5",
    cursor: "#657B83",
    dropdownBackground: "#EEE8D5",
    dropdownBorder: "#D3AF86",
    activeLine: "#3d392d11",
    matchingBracket: "#EEE8D5",
    keyword: "#859900",
    storage: "#586E75",
    variable: "#268BD2",
    parameter: "#268BD2",
    function: "#268BD2",
    string: "#2AA198",
    constant: "#CB4B16",
    type: "#859900",
    class: "#268BD2",
    number: "#D33682",
    comment: "#93A1A1",
    heading: "#268BD2",
    invalid: "#DC322F",
    regexp: "#DC322F",
    tag: "#268BD2"
  };

  // node_modules/@uiw/codemirror-theme-solarized/esm/light.js
  var defaultSettingsSolarizedLight = {
    background: config11.background,
    foreground: config11.foreground,
    caret: config11.cursor,
    selection: config11.selection,
    selectionMatch: config11.selectionMatch,
    gutterBackground: config11.background,
    gutterForeground: config11.foreground,
    gutterBorder: "transparent",
    lineHighlight: config11.activeLine
  };
  var solarizedLightStyle = [{
    tag: tags.keyword,
    color: config11.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config11.variable
  }, {
    tag: [tags.propertyName],
    color: config11.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config11.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config11.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config11.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config11.variable
  }, {
    tag: [tags.className],
    color: config11.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config11.number
  }, {
    tag: [tags.typeName],
    color: config11.type,
    fontStyle: config11.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config11.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config11.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config11.comment
  }, {
    tag: tags.tagName,
    color: config11.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config11.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config11.variable
  }, {
    tag: tags.invalid,
    color: config11.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var solarizedLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsSolarizedLight, settings),
      styles: [...solarizedLightStyle, ...styles]
    });
  }, "solarizedLightInit");
  var solarizedLight = solarizedLightInit();

  // node_modules/@uiw/codemirror-theme-sublime/esm/index.js
  var defaultSettingsSublime = {
    background: "#303841",
    foreground: "#FFFFFF",
    caret: "#FBAC52",
    selection: "#4C5964",
    selectionMatch: "#3A546E",
    gutterBackground: "#303841",
    gutterForeground: "#FFFFFF70",
    lineHighlight: "#00000059"
  };
  var sublimeDarkStyle = [
    {
      tag: [tags.meta, tags.comment],
      color: "#A2A9B5"
    },
    {
      tag: [tags.attributeName, tags.keyword],
      color: "#B78FBA"
    },
    {
      tag: tags.function(tags.variableName),
      color: "#5AB0B0"
    },
    {
      tag: [tags.string, tags.regexp, tags.attributeValue],
      color: "#99C592"
    },
    {
      tag: tags.operator,
      color: "#f47954"
    },
    // { tag: t.moduleKeyword, color: 'red' },
    {
      tag: [tags.tagName, tags.modifier],
      color: "#E35F63"
    },
    {
      tag: [tags.number, tags.definition(tags.tagName), tags.className, tags.definition(tags.variableName)],
      color: "#fbac52"
    },
    {
      tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
      color: "#E35F63"
    },
    {
      tag: tags.variableName,
      color: "#539ac4"
    },
    {
      tag: [tags.propertyName, tags.typeName],
      color: "#629ccd"
    },
    {
      tag: tags.propertyName,
      color: "#36b7b5"
    }
  ];
  function sublimeInit(options) {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsSublime, settings),
      styles: [...sublimeDarkStyle, ...styles]
    });
  }
  __name(sublimeInit, "sublimeInit");
  var sublime = sublimeInit();

  // node_modules/@uiw/codemirror-theme-tokyo-night/esm/index.js
  var defaultSettingsTokyoNight = {
    background: "#1a1b26",
    foreground: "#787c99",
    caret: "#c0caf5",
    selection: "#515c7e40",
    selectionMatch: "#16161e",
    gutterBackground: "#1a1b26",
    gutterForeground: "#787c99",
    gutterBorder: "transparent",
    lineHighlight: "#474b6611"
  };
  var tokyoNightStyle = [{
    tag: tags.keyword,
    color: "#bb9af7"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: "#c0caf5"
  }, {
    tag: [tags.propertyName],
    color: "#7aa2f7"
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: "#9ece6a"
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: "#7aa2f7"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#bb9af7"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#c0caf5"
  }, {
    tag: [tags.className],
    color: "#c0caf5"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#ff9e64"
  }, {
    tag: [tags.typeName],
    color: "#0db9d7"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#bb9af7"
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: "#b4f9f8"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#444b6a"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#89ddff"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#c0caf5"
  }, {
    tag: tags.invalid,
    color: "#ff5370"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var tokyoNightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsTokyoNight, settings),
      styles: [...tokyoNightStyle, ...styles]
    });
  }, "tokyoNightInit");
  var tokyoNight = tokyoNightInit();

  // node_modules/@uiw/codemirror-theme-tokyo-night-storm/esm/index.js
  var defaultSettingsTokyoNightStorm = {
    background: "#24283b",
    foreground: "#7982a9",
    caret: "#c0caf5",
    selection: "#6f7bb630",
    selectionMatch: "#343b5f",
    gutterBackground: "#24283b",
    gutterForeground: "#7982a9",
    gutterBorder: "transparent",
    lineHighlight: "#292e427a"
  };
  var tokyoNightStormStyle = [{
    tag: tags.keyword,
    color: "#bb9af7"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: "#c0caf5"
  }, {
    tag: [tags.propertyName],
    color: "#7aa2f7"
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: "#9ece6a"
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: "#7aa2f7"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#bb9af7"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#c0caf5"
  }, {
    tag: [tags.className],
    color: "#c0caf5"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#ff9e64"
  }, {
    tag: [tags.typeName],
    color: "#2ac3de",
    fontStyle: "#2ac3de"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#bb9af7"
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: "#b4f9f8"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#565f89"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#89ddff"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#c0caf5"
  }, {
    tag: tags.invalid,
    color: "#ff5370"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var tokyoNightStormInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsTokyoNightStorm, settings),
      styles: [...tokyoNightStormStyle, ...styles]
    });
  }, "tokyoNightStormInit");
  var tokyoNightStorm = tokyoNightStormInit();

  // node_modules/@uiw/codemirror-theme-tokyo-night-day/esm/index.js
  var defaultSettingsTokyoNightDay = {
    background: "#e1e2e7",
    foreground: "#3760bf",
    caret: "#3760bf",
    selection: "#99a7df",
    selectionMatch: "#99a7df",
    gutterBackground: "#e1e2e7",
    gutterForeground: "#3760bf",
    gutterBorder: "transparent",
    lineHighlight: "#5f5faf11"
  };
  var tokyoNightDayStyle = [{
    tag: tags.keyword,
    color: "#007197"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: "#3760bf"
  }, {
    tag: [tags.propertyName],
    color: "#3760bf"
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: "#587539"
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: "#3760bf"
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: "#3760bf"
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: "#3760bf"
  }, {
    tag: [tags.className],
    color: "#3760bf"
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: "#b15c00"
  }, {
    tag: [tags.typeName],
    color: "#007197",
    fontStyle: "#007197"
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: "#007197"
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: "#587539"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#848cb5"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#b15c00"
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#3760bf"
  }, {
    tag: tags.invalid,
    color: "#f52a65"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var tokyoNightDayInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsTokyoNightDay, settings),
      styles: [...tokyoNightDayStyle, ...styles]
    });
  }, "tokyoNightDayInit");
  var tokyoNightDay = tokyoNightDayInit();

  // node_modules/@uiw/codemirror-theme-tomorrow-night-blue/esm/color.js
  var config12 = {
    background: "#002451",
    foreground: "#ffffff",
    selection: "#003f8e",
    selectionMatch: "#003f8e",
    cursor: "#ffffff",
    dropdownBackground: "#001733",
    activeLine: "#00346e7a",
    matchingBracket: "#00346e",
    keyword: "#EBBBFF",
    storage: "#EBBBFF",
    variable: "#FFC58F",
    parameter: "#FFC58F",
    function: "#BBDAFF",
    string: "#D1F1A9",
    constant: "#FFC58F",
    type: "#FFEEAD",
    class: "#BBDAFF",
    number: "#FFC58F",
    comment: "#7285B7",
    heading: "#D1F1A9",
    invalid: "#a92049",
    regexp: "#D1F1A9",
    tag: "#FF9DA4"
  };

  // node_modules/@uiw/codemirror-theme-tomorrow-night-blue/esm/index.js
  var defaultSettingsTomorrowNightBlue = {
    background: config12.background,
    foreground: config12.foreground,
    caret: config12.cursor,
    selection: config12.selection,
    selectionMatch: config12.selection,
    gutterBackground: config12.background,
    gutterForeground: config12.foreground,
    lineHighlight: config12.activeLine
  };
  var tomorrowNightBlueStyle = [{
    tag: tags.keyword,
    color: config12.keyword
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config12.variable
  }, {
    tag: [tags.propertyName],
    color: config12.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config12.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config12.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config12.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config12.variable
  }, {
    tag: [tags.className],
    color: config12.class
  }, {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: config12.number
  }, {
    tag: [tags.typeName],
    color: config12.type,
    fontStyle: config12.type
  }, {
    tag: [tags.operator, tags.operatorKeyword],
    color: config12.keyword
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config12.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config12.comment
  }, {
    tag: tags.tagName,
    color: config12.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config12.heading
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: config12.variable
  }, {
    tag: tags.invalid,
    color: config12.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }];
  var tomorrowNightBlueInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsTomorrowNightBlue, settings),
      styles: [...tomorrowNightBlueStyle, ...styles]
    });
  }, "tomorrowNightBlueInit");
  var tomorrowNightBlue = tomorrowNightBlueInit();

  // node_modules/@uiw/codemirror-theme-vscode/esm/light.js
  var defaultSettingsVscodeLight = {
    background: "#ffffff",
    foreground: "#383a42",
    caret: "#000",
    selection: "#add6ff",
    selectionMatch: "#a8ac94",
    lineHighlight: "#99999926",
    gutterBackground: "#fff",
    gutterForeground: "#237893",
    gutterActiveForeground: "#0b216f",
    fontFamily: 'Menlo, Monaco, Consolas, "Andale Mono", "Ubuntu Mono", "Courier New", monospace'
  };
  var vscodeLightStyle = [{
    tag: [tags.keyword, tags.operatorKeyword, tags.modifier, tags.color, tags.constant(tags.name), tags.standard(tags.name), tags.standard(tags.tagName), tags.special(tags.brace), tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#0000ff"
  }, {
    tag: [tags.moduleKeyword, tags.controlKeyword],
    color: "#af00db"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName, tags.propertyName, tags.variableName, tags.labelName, tags.definition(tags.name)],
    color: "#0070c1"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#0070c1"
  }, {
    tag: [tags.typeName, tags.className, tags.tagName, tags.number, tags.changed, tags.annotation, tags.self, tags.namespace],
    color: "#267f99"
  }, {
    tag: [tags.function(tags.variableName), tags.function(tags.propertyName)],
    color: "#795e26"
  }, {
    tag: [tags.number],
    color: "#098658"
  }, {
    tag: [tags.operator, tags.punctuation, tags.separator, tags.url, tags.escape, tags.regexp],
    color: "#383a42"
  }, {
    tag: [tags.regexp],
    color: "#af00db"
  }, {
    tag: [tags.special(tags.string), tags.processingInstruction, tags.string, tags.inserted],
    color: "#a31515"
  }, {
    tag: [tags.angleBracket],
    color: "#383a42"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#008000"
  }, {
    tag: tags.link,
    color: "#4078f2",
    textDecoration: "underline"
  }, {
    tag: tags.invalid,
    color: "#e45649"
  }];
  function vscodeLightInit(options) {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsVscodeLight, settings),
      styles: [...vscodeLightStyle, ...styles]
    });
  }
  __name(vscodeLightInit, "vscodeLightInit");
  var vscodeLight = vscodeLightInit();

  // node_modules/@uiw/codemirror-theme-vscode/esm/dark.js
  var defaultSettingsVscodeDark = {
    background: "#1e1e1e",
    foreground: "#9cdcfe",
    caret: "#c6c6c6",
    selection: "#6199ff2f",
    selectionMatch: "#72a1ff59",
    lineHighlight: "#ffffff0f",
    gutterBackground: "#1e1e1e",
    gutterForeground: "#838383",
    gutterActiveForeground: "#fff",
    fontFamily: 'Menlo, Monaco, Consolas, "Andale Mono", "Ubuntu Mono", "Courier New", monospace'
  };
  var vscodeDarkStyle = [{
    tag: [tags.keyword, tags.operatorKeyword, tags.modifier, tags.color, tags.constant(tags.name), tags.standard(tags.name), tags.standard(tags.tagName), tags.special(tags.brace), tags.atom, tags.bool, tags.special(tags.variableName)],
    color: "#569cd6"
  }, {
    tag: [tags.controlKeyword, tags.moduleKeyword],
    color: "#c586c0"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName, tags.propertyName, tags.variableName, tags.labelName, tags.definition(tags.name)],
    color: "#9cdcfe"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: "#9cdcfe"
  }, {
    tag: [tags.typeName, tags.className, tags.tagName, tags.number, tags.changed, tags.annotation, tags.self, tags.namespace],
    color: "#4ec9b0"
  }, {
    tag: [tags.function(tags.variableName), tags.function(tags.propertyName)],
    color: "#dcdcaa"
  }, {
    tag: [tags.number],
    color: "#b5cea8"
  }, {
    tag: [tags.operator, tags.punctuation, tags.separator, tags.url, tags.escape, tags.regexp],
    color: "#d4d4d4"
  }, {
    tag: [tags.regexp],
    color: "#d16969"
  }, {
    tag: [tags.special(tags.string), tags.processingInstruction, tags.string, tags.inserted],
    color: "#ce9178"
  }, {
    tag: [tags.angleBracket],
    color: "#808080"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: [tags.meta, tags.comment],
    color: "#6a9955"
  }, {
    tag: tags.link,
    color: "#6a9955",
    textDecoration: "underline"
  }, {
    tag: tags.invalid,
    color: "#ff0000"
  }];
  function vscodeDarkInit(options) {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsVscodeDark, settings),
      styles: [...vscodeDarkStyle, ...styles]
    });
  }
  __name(vscodeDarkInit, "vscodeDarkInit");
  var vscodeDark = vscodeDarkInit();

  // node_modules/@uiw/codemirror-theme-white/esm/dark-color.js
  var config13 = {
    background: "#000",
    foreground: "#fff",
    selection: "#7d46fc3f",
    selectionMatch: "#7d46fc7f",
    cursor: "#7d46fc",
    dropdownBackground: "#0a0b0f",
    dropdownBorder: "#1e1d27",
    activeLine: "#00346eb0",
    matchingBracket: "#7d46fc7f",
    keyword: null,
    storage: null,
    variable: null,
    parameter: null,
    function: null,
    string: "#a8a8b1",
    constant: null,
    type: null,
    class: null,
    number: null,
    comment: "#2e2e37",
    heading: null,
    invalid: null,
    regexp: "#a8a8b1",
    tag: null
  };

  // node_modules/@uiw/codemirror-theme-white/esm/dark.js
  var defaultSettingsWhiteDark = {
    background: config13.background,
    foreground: config13.foreground,
    caret: config13.cursor,
    selection: config13.selection,
    selectionMatch: config13.selectionMatch,
    gutterBackground: config13.background,
    gutterForeground: config13.foreground,
    lineHighlight: config13.activeLine
  };
  var whiteDarkStyle = [{
    tag: tags.keyword,
    color: config13.keyword,
    fontWeight: "bold"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config13.variable
  }, {
    tag: [tags.propertyName],
    color: config13.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config13.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config13.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config13.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config13.variable
  }, {
    tag: [tags.className],
    color: config13.class
  }, {
    tag: [tags.typeName],
    color: config13.type,
    fontStyle: config13.type
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config13.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config13.comment
  }, {
    tag: tags.tagName,
    color: config13.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config13.heading
  }, {
    tag: [tags.atom, tags.special(tags.variableName)],
    color: config13.variable
  }, {
    tag: tags.invalid,
    color: config13.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: [tags.operatorKeyword, tags.bool, tags.null, tags.variableName],
    color: config13.constant
  }, {
    tag: [tags.operator],
    color: "#bb9af7"
  }, {
    tag: [tags.number],
    color: "#a8a8b1"
  }, {
    tag: [tags.bracket],
    color: "#bb9af7"
  }];
  var whiteDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsWhiteDark, settings),
      styles: [...whiteDarkStyle, ...styles]
    });
  }, "whiteDarkInit");
  var whiteDark = whiteDarkInit();

  // node_modules/@uiw/codemirror-theme-white/esm/light-color.js
  var config14 = {
    background: "#fff",
    foreground: "#000",
    selection: "#0064ff26",
    selectionMatch: "#0064ff4c",
    cursor: "#004bff",
    dropdownBackground: "#f4f6fc",
    dropdownBorder: "#e7ecf2",
    activeLine: "#0064ff0c",
    matchingBracket: "#0064ff4c",
    keyword: null,
    storage: null,
    variable: null,
    parameter: null,
    function: null,
    string: "#6b7a88",
    constant: null,
    type: null,
    class: null,
    number: null,
    comment: "#bec9d3",
    heading: null,
    invalid: null,
    regexp: "#6b7a88",
    tag: null
  };

  // node_modules/@uiw/codemirror-theme-white/esm/light.js
  var defaultSettingsWhiteLight = {
    background: config14.background,
    foreground: config14.foreground,
    caret: config14.cursor,
    selection: config14.selection,
    selectionMatch: config14.selectionMatch,
    gutterBackground: config14.background,
    gutterForeground: config14.foreground,
    lineHighlight: config14.activeLine
  };
  var whiteLightStyle = [{
    tag: tags.keyword,
    color: config14.keyword,
    fontWeight: "bold"
  }, {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: config14.variable
  }, {
    tag: [tags.propertyName],
    color: config14.function
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
    color: config14.string
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: config14.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: config14.constant
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: config14.variable
  }, {
    tag: [tags.className],
    color: config14.class
  }, {
    tag: [tags.typeName],
    color: config14.type,
    fontStyle: config14.type
  }, {
    tag: [tags.url, tags.escape, tags.regexp, tags.link],
    color: config14.regexp
  }, {
    tag: [tags.meta, tags.comment],
    color: config14.comment
  }, {
    tag: tags.tagName,
    color: config14.tag
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: config14.heading
  }, {
    tag: [tags.atom, tags.special(tags.variableName)],
    color: config14.variable
  }, {
    tag: tags.invalid,
    color: config14.invalid
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: [tags.operatorKeyword, tags.bool, tags.null, tags.variableName],
    color: config14.constant
  }, {
    tag: [tags.operator],
    color: "#0431fa"
  }, {
    tag: [tags.number],
    color: "#a8a8b1"
  }, {
    tag: [tags.bracket],
    color: "#0431fa"
  }];
  var whiteLightInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsWhiteLight, settings),
      styles: [...whiteLightStyle, ...styles]
    });
  }, "whiteLightInit");
  var whiteLight = whiteLightInit();

  // node_modules/@uiw/codemirror-theme-xcode/esm/index.js
  var defaultSettingsXcodeLight = {
    background: "#fff",
    foreground: "#3D3D3D",
    selection: "#BBDFFF",
    selectionMatch: "#BBDFFF",
    gutterBackground: "#fff",
    gutterForeground: "#AFAFAF",
    lineHighlight: "#d5e6ff69"
  };
  var xcodeLightStyle = [{
    tag: [tags.comment, tags.quote],
    color: "#707F8D"
  }, {
    tag: [tags.typeName, tags.typeOperator],
    color: "#aa0d91"
  }, {
    tag: [tags.keyword],
    color: "#aa0d91",
    fontWeight: "bold"
  }, {
    tag: [tags.string, tags.meta],
    color: "#D23423"
  }, {
    tag: [tags.name],
    color: "#032f62"
  }, {
    tag: [tags.typeName],
    color: "#522BB2"
  }, {
    tag: [tags.variableName],
    color: "#23575C"
  }, {
    tag: [tags.definition(tags.variableName)],
    color: "#327A9E"
  }, {
    tag: [tags.regexp, tags.link],
    color: "#0e0eff"
  }];
  function xcodeLightInit(options) {
    var {
      theme: theme2 = "light",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsXcodeLight, settings),
      styles: [...xcodeLightStyle, ...styles]
    });
  }
  __name(xcodeLightInit, "xcodeLightInit");
  var xcodeLight = xcodeLightInit();
  var defaultSettingsXcodeDark = {
    background: "#292A30",
    foreground: "#CECFD0",
    caret: "#fff",
    selection: "#727377",
    selectionMatch: "#727377",
    lineHighlight: "#ffffff0f"
  };
  var xcodeDarkStyle = [{
    tag: [tags.comment, tags.quote],
    color: "#7F8C98"
  }, {
    tag: [tags.keyword],
    color: "#FF7AB2",
    fontWeight: "bold"
  }, {
    tag: [tags.string, tags.meta],
    color: "#FF8170"
  }, {
    tag: [tags.typeName],
    color: "#DABAFF"
  }, {
    tag: [tags.definition(tags.variableName)],
    color: "#6BDFFF"
  }, {
    tag: [tags.name],
    color: "#6BAA9F"
  }, {
    tag: [tags.variableName],
    color: "#ACF2E4"
  }, {
    tag: [tags.regexp, tags.link],
    color: "#FF8170"
  }];
  var xcodeDarkInit = /* @__PURE__ */ __name((options) => {
    var {
      theme: theme2 = "dark",
      settings = {},
      styles = []
    } = options || {};
    return createTheme({
      theme: theme2,
      settings: _extends({}, defaultSettingsXcodeDark, settings),
      styles: [...xcodeDarkStyle, ...styles]
    });
  }, "xcodeDarkInit");
  var xcodeDark = xcodeDarkInit();

  // index.ts
  var tokenMapper = {
    comment: ["ML_COMMENT", "SL_COMMENT"],
    name: ["IDENTIFIER"],
    string: ["STRING_CONSTANT"],
    integer: ["INTEGER_CONSTANT"],
    float: ["NUMBER_CONSTANT"],
    bool: ["BOOLEAN_CONSTANT"],
    angleBracket: ["LT", "GT"],
    squareBracket: ["QLPAREN", "QRPAREN"],
    paren: ["LPAREN", "RPAREN"],
    brace: ["GLPAREN", "GRPAREN"],
    null: ["NULL_CONSTANT"],
    operator: ["MEMBERSHIP"],
    arithmeticOperator: ["PLUS", "MINUS", "MUL", "DIV"],
    logicOperator: ["AND", "OR", "XOR", "NOT"],
    compareOperator: ["EQ", "LT", "MT", "ME", "NEQ", "LE"],
    definitionOperator: ["ASSIGN", "POINTER"],
    definitionKeyword: ["DEFINE", "DATAPOINT", "HIERARCHICAL", "RULESET", "AS", "IS"],
    operatorKeyword: [
      "CURRENT_DATE",
      "BETWEEN",
      "IN",
      "NOT_IN",
      "ISNULL",
      "EXISTS_IN",
      "RANK",
      "MIN",
      "MAX",
      "INDEXOF",
      "ABS",
      "LN",
      "LOG",
      "TRUNC",
      "ROUND",
      "POWER",
      "MOD",
      "LEN",
      "CONCAT",
      "TRIM",
      "UCASE",
      "LCASE",
      "SUBSTR",
      "SUM",
      "AVG",
      "MEDIAN",
      "COUNT",
      "EXP",
      "CHARSET_MATCH",
      "NVL",
      "LTRIM",
      "RTRIM",
      "INSTR",
      "REPLACE",
      "CEIL",
      "FLOOR",
      "SQRT",
      "STDDEV_POP",
      "STDDEV_SAMP",
      "VAR_POP",
      "VAR_SAMP",
      "FIRST_VALUE",
      "LAST_VALUE",
      "LAG",
      "LEAD",
      "RATIO_TO_REPORT",
      "FILL_TIME_SERIES",
      "FLOW_TO_STOCK",
      "STOCK_TO_FLOW",
      "TIMESHIFT",
      "INNER_JOIN",
      "LEFT_JOIN",
      "CROSS_JOIN",
      "FULL_JOIN",
      "TIME_AGG",
      "CAST",
      "EVAL",
      "PERIOD_INDICATOR",
      "SETDIFF",
      "UNION",
      "SYMDIFF",
      "INTERSECT"
    ],
    controlKeyword: ["IF", "THEN", "ELSE", "CALC", "DROP", "KEEP", "CALC", "RENAME", "AGGREGATE", "FILTER", "PIVOT", "UNPIVOT", "SUBSPACE"],
    typeOperator: ["DIMENSION", "MEASURE", "ATTRIBUTE", "VIRAL", "BOOLEAN", "DATE", "TIME_PERIOD", "NUMBER", "STRING", "TIME", "INTEGER", "FLOAT", "LIST"],
    controlOperator: [
      "COMMA",
      "COLON",
      "ORDER",
      "BY",
      "ASC",
      "DESC",
      "GROUP",
      "EXCEPT",
      "HAVING",
      "OVER",
      "PRECEDING",
      "FOLLOWING",
      "UNBOUNDED",
      "PARTITION",
      "ROWS",
      "RANGE",
      "CURRENT",
      "DATAPOINT"
    ]
  };
  var mapperInverter = /* @__PURE__ */ __name(function(mapper) {
    let inverted = {};
    Object.getOwnPropertyNames(mapper).forEach((p2) => mapper[p2].forEach((n2) => {
      if (inverted[n2]) {
        inverted[n2].push(tags[p2]);
      } else {
        inverted[n2] = [tags[p2]];
      }
    }));
    return inverted;
  }, "mapperInverter");
  var ctxProp = new NodeProp({ perNode: true });
  var idsProp = new NodeProp({ perNode: true });
  var dsNameProp = new NodeProp({ perNode: true });
  var expectedProp = new NodeProp({ perNode: true });
  var missingAfterProp = new NodeProp({ perNode: true });
  var offendingTokenProp = new NodeProp({ perNode: true });
  var completer = /* @__PURE__ */ __name((src) => {
    let range = src.state.wordAt(src.pos);
    let topNode = syntaxTree(src.state);
    let from = range && range.from || src.pos, to = range && range.to || src.pos;
    let node = topNode.resolveInner(to, -1).toTree();
    let ctx = node.prop(ctxProp);
    if (ctx instanceof Ln.tree.TerminalNode) {
      if (ctx.getSymbol().type == VtlLexer.IDENTIFIER) {
        return {
          from,
          options: [...topNode.prop(idsProp)[node.prop(dsNameProp)] || []].map((c2) => {
            return { label: c2 };
          }),
          validFor: /'[^']+'|[a-zA-Z0-9_]+/
        };
      }
    }
  }, "completer");
  var facet = defineLanguageFacet({
    "autocomplete": completer,
    "closeBrackets": {}
  });
  var EOF = NodeType.define({ id: 0, name: "ANTLR_EOF", top: false, error: false, skipped: true });
  var tokensStartIndex = 1;
  var tokenSet = VtlLexer.symbolicNames.slice(1).map((n2, i2) => NodeType.define({ id: i2 + tokensStartIndex, name: n2, top: false, error: false, skipped: false }));
  var rulesStartIndex = 1 + tokenSet.length;
  var ruleSet = VtlParser.ruleNames.map((n2, i2) => NodeType.define({ id: i2 + rulesStartIndex, name: n2, top: !i2, error: false, skipped: false, props: !i2 && [[languageDataProp, facet]] || [] }));
  var errorStartIndex = rulesStartIndex + ruleSet.length;
  var errorTokens = {
    VTL_EXTRANEOUS_TOKEN: errorStartIndex + 0,
    VTL_MISSING_TOKEN: errorStartIndex + 1,
    VTL_TOKEN_MISMATCH: errorStartIndex + 2
  };
  var errorSet = Object.getOwnPropertyNames(errorTokens).map((n2) => NodeType.define({ id: errorTokens[n2], name: n2, top: false, error: true, skipped: false }));
  var nodeset = new NodeSet([EOF, ...tokenSet, ...ruleSet, ...errorSet]).extend(styleTags(mapperInverter(tokenMapper)));
  var addCommentTokens = /* @__PURE__ */ __name(function(tokens) {
    let children = [];
    for (const ignored of tokens) {
      if ([VtlLexer.ML_COMMENT, VtlLexer.SL_COMMENT].includes(ignored.type)) {
        children = [...children, [ignored.start, new Tree(nodeset.types[ignored.type], [], [], ignored.stop - ignored.start + 1), false]];
      }
    }
    return children;
  }, "addCommentTokens");
  var createTree = /* @__PURE__ */ __name(function(text, ctxName = "start") {
    let lexer = new VtlLexer(new Ln.CharStream(text));
    lexer.removeErrorListeners();
    let parser = new VtlParser(new Ln.CommonTokenStream(lexer));
    parser.removeErrorListeners();
    let lastToken;
    let ids = {};
    let treeToArray = /* @__PURE__ */ __name(function(ctx, dsName = "") {
      if (ctx instanceof Ln.tree.RuleNode) {
        if (ctx instanceof StartContext && ctx.getSourceInterval() === Ln.misc.Interval.INVALID_INTERVAL) {
          return [0, new Tree(EOF, [], [], text.length), false];
        }
        let tokenStream = parser._input;
        let start = ctx.start.start;
        if (ctx instanceof DatasetClauseContext) {
          dsName = ctx.parentCtx.expr().getText();
        } else if (ctx instanceof VarIDContext || ctx instanceof ComponentIDContext) {
          if (!ids[dsName]) {
            ids[dsName] = /* @__PURE__ */ new Set();
          }
          ids[dsName].add(ctx.getText());
        }
        if (ctx.exception) {
          if (ctx.exception instanceof Ln.error.InputMismatchException) {
            let offToken = ctx.exception.offendingToken;
            let expected = ctx.exception.getExpectedTokens();
            let tokens = Array(expected.intervals.at(-1).stop).keys().filter((i2) => expected.contains(i2)).map((i2) => VtlLexer.literalNames[i2] || VtlLexer.symbolicNames[i2]).filter((e2) => !!e2).toArray();
            let mismatched = new Tree(nodeset.types[errorTokens.VTL_TOKEN_MISMATCH], [], [], offToken.stop - offToken.start + 1, [[expectedProp, tokens]]);
            let children = ctx.children && ctx.children.map((c2) => treeToArray(c2, dsName)) || [];
            if (!children.some((c2) => c2[2])) {
              children = [...children, [offToken.start, mismatched, true]];
            }
            let tchildren = [children.map((r2) => r2[0] - start), children.map((r2) => r2[1])];
            return [start, new Tree(nodeset.types[ctx.ruleIndex + rulesStartIndex], tchildren[1], tchildren[0], ctx.start.stop - start + 1, [[ctxProp, ctx]]), true];
          } else if (ctx.exception instanceof Ln.error.NoViableAltException) {
            let noviable = new Tree(nodeset.types[errorTokens.VTL_EXTRANEOUS_TOKEN], [], [], 1, [[offendingTokenProp, "tokens"]]);
            lastToken = ctx.start;
            return [start, noviable, true];
          } else {
            throw ctx.exception;
          }
        } else {
          let children = [];
          if (ctx instanceof StartContext) {
            start = 0;
          } else if (ctx.start.tokenIndex > 0) {
            let startIndex = lastToken && lastToken.tokenIndex + 1 || 0;
            children = [...children, ...addCommentTokens(tokenStream.getTokens(startIndex, ctx.start.tokenIndex))];
          }
          for (let i2 = 0; i2 < ctx.children.length; i2++) {
            let lastIndex = lastToken && lastToken.tokenIndex + 1 || 0;
            let child = treeToArray(ctx.children[i2], dsName);
            if (i2 > 0 && lastIndex && ctx.children[i2] instanceof Ln.tree.TerminalNode && !ctx.children[i2].isErrorNode) {
              children = [...children, ...addCommentTokens(tokenStream.getTokens(lastIndex + 1, ctx.children[i2].symbol.tokenIndex))];
            }
            children = [...children, child].filter((e2) => e2);
          }
          if (ctx instanceof StartContext) {
            children = [...children, ...addCommentTokens(tokenStream.getTokens(ctx.stop.tokenIndex + 1, parser._input.tokens.length - 1))];
          }
          let tchildren = [children.map((r2) => r2[0] - start), children.map((r2) => r2[1]), children.some((r2) => r2[2])];
          let props = ctx instanceof StartContext && [[idsProp, ids]] || [];
          props.push([ctxProp, ctx]);
          return [start, new Tree(nodeset.types[ctx.ruleIndex + rulesStartIndex], tchildren[1], tchildren[0], tchildren[0].at(-1) + tchildren[1].at(-1).length + 1, props), tchildren[2]];
        }
      } else if (ctx instanceof Ln.tree.TerminalNode) {
        let token = ctx.getSymbol();
        if (ctx.isErrorNode && ctx.isErrorNode()) {
          if (token.tokenIndex == -1) {
            let missing = token.text.substring(9, token.text.length - 1);
            return [lastToken && lastToken.start || 0, new Tree(nodeset.types[errorTokens.VTL_MISSING_TOKEN], [], [], lastToken.stop - lastToken.start + 1, [[ctxProp, ctx], [missingAfterProp, lastToken.text], [expectedProp, missing]]), true];
          }
          lastToken = token;
          return [token.start, new Tree(nodeset.types[errorTokens.VTL_EXTRANEOUS_TOKEN], [], [], token.stop - token.start + 1, [[dsNameProp, dsName], [ctxProp, ctx], [offendingTokenProp, token.text]]), true];
        } else {
          lastToken = token;
          return [token.start, new Tree(nodeset.types[token.type === -1 ? 0 : token.type], [], [], token.stop - token.start + 1, [[dsNameProp, dsName], [ctxProp, ctx]]), false];
        }
      } else {
        throw new Error("Unrecognized node type");
      }
    }, "treeToArray");
    let tree = treeToArray(parser[ctxName.charAt(0).toLowerCase() + ctxName.slice(1)].bind(parser)())[1];
    return tree;
  }, "createTree");
  var VTLLang = new Language(facet, new class extends Parser {
    createParse(input) {
      let doc2 = input.doc.text.join("\n");
      let tree = createTree(doc2);
      let partialParse = {
        parsedPos: doc2.length,
        stoppedAt: null,
        stopAt: /* @__PURE__ */ __name(() => null, "stopAt"),
        advance: /* @__PURE__ */ __name(() => tree, "advance")
      };
      return partialParse;
    }
  }(), [], "VTL");
  var encode = /* @__PURE__ */ __name((str) => {
    let pre = document.createElement("pre");
    pre.appendChild(document.createTextNode(str.toString()));
    return pre.innerHTML;
  }, "encode");
  var vtlLinter = linter((view2) => {
    let diagnostics = [];
    syntaxTree(view2.state).cursor().iterate((node) => {
      if (node.type.id >= errorStartIndex) {
        const tree = node.tree;
        let msg = "";
        let actions = [];
        switch (node.name) {
          case "VTL_EXTRANEOUS_TOKEN": {
            msg = `Unexpected token: <code>${tree.prop(offendingTokenProp)}</code>`;
            actions.push({
              name: "Remove",
              apply: /* @__PURE__ */ __name((view3, from, to) => {
                view3.dispatch({ changes: { from, to } });
              }, "apply")
            });
            break;
          }
          case "VTL_MISSING_TOKEN": {
            msg = `Missing <code>${encode(tree.prop(expectedProp))}</code> after <code>${tree.prop(missingAfterProp)}<code>`;
            break;
          }
          case "VTL_TOKEN_MISMATCH": {
            msg = `Expected: <code>${tree.prop(expectedProp)}</code>`;
            break;
          }
        }
        diagnostics.push({ from: node.from, to: node.to, severity: "error", message: msg, renderMessage: /* @__PURE__ */ __name(() => {
          let el = document.createElement("span");
          el.innerHTML = msg;
          return el;
        }, "renderMessage"), actions });
      }
    });
    return diagnostics;
  });
  var themeCompartment = new Compartment();
  var keymapCompartment = new Compartment();
  var keyBindings = [
    ...closeBracketsKeymap,
    ...defaultKeymap,
    ...searchKeymap,
    ...historyKeymap,
    ...foldKeymap,
    ...completionKeymap,
    ...lintKeymap
  ];
  var view = new EditorView({
    extensions: [
      keymapCompartment.of(keymap.of(keyBindings)),
      lineNumbers(),
      highlightActiveLineGutter(),
      highlightSpecialChars(),
      history(),
      foldGutter(),
      drawSelection(),
      dropCursor(),
      indentOnInput(),
      bracketMatching(),
      search(),
      closeBrackets(),
      autocompletion(),
      crosshairCursor(),
      highlightActiveLine(),
      highlightSelectionMatches(),
      themeCompartment.of(material),
      VTLLang.extension,
      vtlLinter
    ]
  });
  var themes = Object.getOwnPropertyNames(esm_exports).filter((s2) => !s2.match("(^default|Init$)"));
  var setTheme = /* @__PURE__ */ __name(function(themeName) {
    view.dispatch({ effects: themeCompartment.reconfigure(esm_exports[themeName]) });
  }, "setTheme");
  var addHotKey = /* @__PURE__ */ __name((hotKey, command2) => {
    view.dispatch({
      effects: keymapCompartment.reconfigure(keymap.of([{
        key: hotKey,
        run: command2
      }, ...keymapCompartment.get(view.state).value]))
    });
  }, "addHotKey");
  return __toCommonJS(index_exports);
})();
//# sourceMappingURL=bundle.js.map
