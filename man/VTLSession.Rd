% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VTLSession.R
\name{VTLSession}
\alias{VTLSession}
\title{Manage VTL sessions}
\description{
VTL Session
}
\details{
R6 Class for interacting with a VTL session instance.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{The name of this VTL session.}

\item{\code{text}}{The temporary code buffer of this VTL session used by the editor.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-VTLSession-new}{\code{VTLSession$new()}}
\item \href{#method-VTLSession-finalize}{\code{VTLSession$finalize()}}
\item \href{#method-VTLSession-isCompiled}{\code{VTLSession$isCompiled()}}
\item \href{#method-VTLSession-print}{\code{VTLSession$print()}}
\item \href{#method-VTLSession-setText}{\code{VTLSession$setText()}}
\item \href{#method-VTLSession-compile}{\code{VTLSession$compile()}}
\item \href{#method-VTLSession-refresh}{\code{VTLSession$refresh()}}
\item \href{#method-VTLSession-getStatements}{\code{VTLSession$getStatements()}}
\item \href{#method-VTLSession-getMetadata}{\code{VTLSession$getMetadata()}}
\item \href{#method-VTLSession-getNodes}{\code{VTLSession$getNodes()}}
\item \href{#method-VTLSession-getValues}{\code{VTLSession$getValues()}}
\item \href{#method-VTLSession-getLineage}{\code{VTLSession$getLineage()}}
\item \href{#method-VTLSession-getTopology}{\code{VTLSession$getTopology()}}
\item \href{#method-VTLSession-getEnvs}{\code{VTLSession$getEnvs()}}
\item \href{#method-VTLSession-clone}{\code{VTLSession$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-new"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-new}{}}}
\subsection{Method \code{new()}}{
Creates a new VTL session with a given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$new(name = character(0))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of the session
The name to identify this session}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method should not be called by the application.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-finalize}{}}}
\subsection{Method \code{finalize()}}{
Terminates this VTL session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$finalize()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This method should not be called by the application.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-isCompiled"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-isCompiled}{}}}
\subsection{Method \code{isCompiled()}}{
Check if this session was compiled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$isCompiled()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Returns \code{TRUE} if this VTL session has already been compiled.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-print"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-print}{}}}
\subsection{Method \code{print()}}{
Overrides the default print behaviour.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-setText"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-setText}{}}}
\subsection{Method \code{setText()}}{
Changes the editor text in the session buffer.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$setText(code)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{The editor code to associate this session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-compile"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-compile}{}}}
\subsection{Method \code{compile()}}{
Compiles the VTL statements submitted for this session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$compile()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-refresh"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-refresh}{}}}
\subsection{Method \code{refresh()}}{
Refresh the session configuration after a change in the settings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$refresh()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getStatements"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getStatements}{}}}
\subsection{Method \code{getStatements()}}{
Obtains a named list of all the VTL statements submitted for this session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getStatements()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getMetadata"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getMetadata}{}}}
\subsection{Method \code{getMetadata()}}{
Obtains the structure of a VTL dataset with the given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getMetadata(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{The name of the dataset}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getNodes"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getNodes}{}}}
\subsection{Method \code{getNodes()}}{
Obtains a named list of all rules and values submitted for this session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getNodes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getValues"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getValues}{}}}
\subsection{Method \code{getValues()}}{
Returns a list of data frames containing the values of the named nodes defined in this session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getValues(nodes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nodes}}{a list of names of nodes to compute from this session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getLineage"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getLineage}{}}}
\subsection{Method \code{getLineage()}}{
Returns a lineage for the value of the named node defined in this session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getLineage(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{a name of a node to compute from this session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getTopology"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getTopology}{}}}
\subsection{Method \code{getTopology()}}{
Creates a fore network representation of all nodes defined in this VTL session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getTopology(distance = 100, charge = -100)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distance}}{The distance between dots}

\item{\code{charge}}{The repelling force between dots}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-getEnvs"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-getEnvs}{}}}
\subsection{Method \code{getEnvs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$getEnvs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VTLSession-clone"></a>}}
\if{latex}{\out{\hypertarget{method-VTLSession-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VTLSession$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
